
bin/gmsknl.elf:     file format elf64-x86-64


Disassembly of section .text:

ffff800000800000 <init_int>:
init_int():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:13
#include "kb.h"
#include <log.h>
#pragma pack(1)
gate *idt= (gate *) (KNL_BASE+IDT_ADDR);
extern int disk_int_handler();
void init_int(){
ffff800000800000:	f3 0f 1e fa          	endbr64 
ffff800000800004:	55                   	push   rbp
ffff800000800005:	48 89 e5             	mov    rbp,rsp
ffff800000800008:	41 57                	push   r15
ffff80000080000a:	53                   	push   rbx
ffff80000080000b:	48 83 ec 10          	sub    rsp,0x10
ffff80000080000f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080000f <init_int+0xf>
ffff800000800016:	49 bb 41 0f 12 00 00 	movabs r11,0x120f41
ffff80000080001d:	00 00 00 
ffff800000800020:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:15
    //asm volatile("sidt %0"::"m"(idt));
    set_gate(0,(addr_t)divide_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800023:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff80000080002a:	ff ff ff 
ffff80000080002d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800031:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800036:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080003b:	48 89 c6             	mov    rsi,rax
ffff80000080003e:	bf 00 00 00 00       	mov    edi,0x0
ffff800000800043:	49 89 df             	mov    r15,rbx
ffff800000800046:	48 b8 82 f6 ed ff ff 	movabs rax,0xffffffffffedf682
ffff80000080004d:	ff ff ff 
ffff800000800050:	48 01 d8             	add    rax,rbx
ffff800000800053:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:16
    set_gate(1,(addr_t)debug,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800055:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff80000080005c:	ff ff ff 
ffff80000080005f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800063:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800068:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080006d:	48 89 c6             	mov    rsi,rax
ffff800000800070:	bf 01 00 00 00       	mov    edi,0x1
ffff800000800075:	49 89 df             	mov    r15,rbx
ffff800000800078:	48 b8 82 f6 ed ff ff 	movabs rax,0xffffffffffedf682
ffff80000080007f:	ff ff ff 
ffff800000800082:	48 01 d8             	add    rax,rbx
ffff800000800085:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:17
    set_gate(2,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800087:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080008e:	ff ff ff 
ffff800000800091:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800095:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080009a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080009f:	48 89 c6             	mov    rsi,rax
ffff8000008000a2:	bf 02 00 00 00       	mov    edi,0x2
ffff8000008000a7:	49 89 df             	mov    r15,rbx
ffff8000008000aa:	48 b8 82 f6 ed ff ff 	movabs rax,0xffffffffffedf682
ffff8000008000b1:	ff ff ff 
ffff8000008000b4:	48 01 d8             	add    rax,rbx
ffff8000008000b7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:18
    set_gate(3,(addr_t)breakpoint,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008000b9:	48 b8 58 fe ff ff ff 	movabs rax,0xfffffffffffffe58
ffff8000008000c0:	ff ff ff 
ffff8000008000c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008000c7:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008000cc:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008000d1:	48 89 c6             	mov    rsi,rax
ffff8000008000d4:	bf 03 00 00 00       	mov    edi,0x3
ffff8000008000d9:	49 89 df             	mov    r15,rbx
ffff8000008000dc:	48 b8 82 f6 ed ff ff 	movabs rax,0xffffffffffedf682
ffff8000008000e3:	ff ff ff 
ffff8000008000e6:	48 01 d8             	add    rax,rbx
ffff8000008000e9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:19
    set_gate(4,(addr_t)overflow,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008000eb:	48 b8 98 fd ff ff ff 	movabs rax,0xfffffffffffffd98
ffff8000008000f2:	ff ff ff 
ffff8000008000f5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008000f9:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008000fe:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800103:	48 89 c6             	mov    rsi,rax
ffff800000800106:	bf 04 00 00 00       	mov    edi,0x4
ffff80000080010b:	49 89 df             	mov    r15,rbx
ffff80000080010e:	48 b8 82 f6 ed ff ff 	movabs rax,0xffffffffffedf682
ffff800000800115:	ff ff ff 
ffff800000800118:	48 01 d8             	add    rax,rbx
ffff80000080011b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:20
    set_gate(5,(addr_t)bounds,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff80000080011d:	48 b8 a8 fd ff ff ff 	movabs rax,0xfffffffffffffda8
ffff800000800124:	ff ff ff 
ffff800000800127:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080012b:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800130:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800135:	48 89 c6             	mov    rsi,rax
ffff800000800138:	bf 05 00 00 00       	mov    edi,0x5
ffff80000080013d:	49 89 df             	mov    r15,rbx
ffff800000800140:	48 b8 82 f6 ed ff ff 	movabs rax,0xffffffffffedf682
ffff800000800147:	ff ff ff 
ffff80000080014a:	48 01 d8             	add    rax,rbx
ffff80000080014d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:21
    set_gate(6,(addr_t)undefined_operator,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff80000080014f:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff800000800156:	ff ff ff 
ffff800000800159:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080015d:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800162:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800167:	48 89 c6             	mov    rsi,rax
ffff80000080016a:	bf 06 00 00 00       	mov    edi,0x6
ffff80000080016f:	49 89 df             	mov    r15,rbx
ffff800000800172:	48 b8 82 f6 ed ff ff 	movabs rax,0xffffffffffedf682
ffff800000800179:	ff ff ff 
ffff80000080017c:	48 01 d8             	add    rax,rbx
ffff80000080017f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:22
    set_gate(7,(addr_t)coprocessor_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800181:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000800188:	ff ff ff 
ffff80000080018b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080018f:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800194:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800199:	48 89 c6             	mov    rsi,rax
ffff80000080019c:	bf 07 00 00 00       	mov    edi,0x7
ffff8000008001a1:	49 89 df             	mov    r15,rbx
ffff8000008001a4:	48 b8 82 f6 ed ff ff 	movabs rax,0xffffffffffedf682
ffff8000008001ab:	ff ff ff 
ffff8000008001ae:	48 01 d8             	add    rax,rbx
ffff8000008001b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:23
    set_gate(8,(addr_t)double_ints,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//double_ints
ffff8000008001b3:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff8000008001ba:	ff ff ff 
ffff8000008001bd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008001c1:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008001c6:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008001cb:	48 89 c6             	mov    rsi,rax
ffff8000008001ce:	bf 08 00 00 00       	mov    edi,0x8
ffff8000008001d3:	49 89 df             	mov    r15,rbx
ffff8000008001d6:	48 b8 82 f6 ed ff ff 	movabs rax,0xffffffffffedf682
ffff8000008001dd:	ff ff ff 
ffff8000008001e0:	48 01 d8             	add    rax,rbx
ffff8000008001e3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:24
    set_gate(9,(addr_t)coprocessor_seg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008001e5:	48 b8 f0 fd ff ff ff 	movabs rax,0xfffffffffffffdf0
ffff8000008001ec:	ff ff ff 
ffff8000008001ef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008001f3:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008001f8:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008001fd:	48 89 c6             	mov    rsi,rax
ffff800000800200:	bf 09 00 00 00       	mov    edi,0x9
ffff800000800205:	49 89 df             	mov    r15,rbx
ffff800000800208:	48 b8 82 f6 ed ff ff 	movabs rax,0xffffffffffedf682
ffff80000080020f:	ff ff ff 
ffff800000800212:	48 01 d8             	add    rax,rbx
ffff800000800215:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:25
    set_gate(10,(addr_t)invalid_tss,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800217:	48 b8 c8 ff ff ff ff 	movabs rax,0xffffffffffffffc8
ffff80000080021e:	ff ff ff 
ffff800000800221:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800225:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080022a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080022f:	48 89 c6             	mov    rsi,rax
ffff800000800232:	bf 0a 00 00 00       	mov    edi,0xa
ffff800000800237:	49 89 df             	mov    r15,rbx
ffff80000080023a:	48 b8 82 f6 ed ff ff 	movabs rax,0xffffffffffedf682
ffff800000800241:	ff ff ff 
ffff800000800244:	48 01 d8             	add    rax,rbx
ffff800000800247:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:26
    set_gate(11,(addr_t)segment_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800249:	48 b8 d8 ff ff ff ff 	movabs rax,0xffffffffffffffd8
ffff800000800250:	ff ff ff 
ffff800000800253:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800257:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080025c:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800261:	48 89 c6             	mov    rsi,rax
ffff800000800264:	bf 0b 00 00 00       	mov    edi,0xb
ffff800000800269:	49 89 df             	mov    r15,rbx
ffff80000080026c:	48 b8 82 f6 ed ff ff 	movabs rax,0xffffffffffedf682
ffff800000800273:	ff ff ff 
ffff800000800276:	48 01 d8             	add    rax,rbx
ffff800000800279:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:27
    set_gate(12,(addr_t)stackseg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//
ffff80000080027b:	48 b8 b0 ff ff ff ff 	movabs rax,0xffffffffffffffb0
ffff800000800282:	ff ff ff 
ffff800000800285:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800289:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080028e:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800293:	48 89 c6             	mov    rsi,rax
ffff800000800296:	bf 0c 00 00 00       	mov    edi,0xc
ffff80000080029b:	49 89 df             	mov    r15,rbx
ffff80000080029e:	48 b8 82 f6 ed ff ff 	movabs rax,0xffffffffffedf682
ffff8000008002a5:	ff ff ff 
ffff8000008002a8:	48 01 d8             	add    rax,rbx
ffff8000008002ab:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:28
    set_gate(13,(addr_t)general_protect,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008002ad:	48 b8 68 ff ff ff ff 	movabs rax,0xffffffffffffff68
ffff8000008002b4:	ff ff ff 
ffff8000008002b7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008002bb:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008002c0:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008002c5:	48 89 c6             	mov    rsi,rax
ffff8000008002c8:	bf 0d 00 00 00       	mov    edi,0xd
ffff8000008002cd:	49 89 df             	mov    r15,rbx
ffff8000008002d0:	48 b8 82 f6 ed ff ff 	movabs rax,0xffffffffffedf682
ffff8000008002d7:	ff ff ff 
ffff8000008002da:	48 01 d8             	add    rax,rbx
ffff8000008002dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:29
    set_gate(14,(addr_t)page_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008002df:	48 b8 10 fd ff ff ff 	movabs rax,0xfffffffffffffd10
ffff8000008002e6:	ff ff ff 
ffff8000008002e9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008002ed:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008002f2:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008002f7:	48 89 c6             	mov    rsi,rax
ffff8000008002fa:	bf 0e 00 00 00       	mov    edi,0xe
ffff8000008002ff:	49 89 df             	mov    r15,rbx
ffff800000800302:	48 b8 82 f6 ed ff ff 	movabs rax,0xffffffffffedf682
ffff800000800309:	ff ff ff 
ffff80000080030c:	48 01 d8             	add    rax,rbx
ffff80000080030f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:30
    set_gate(15,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800311:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000800318:	ff ff ff 
ffff80000080031b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080031f:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800324:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800329:	48 89 c6             	mov    rsi,rax
ffff80000080032c:	bf 0f 00 00 00       	mov    edi,0xf
ffff800000800331:	49 89 df             	mov    r15,rbx
ffff800000800334:	48 b8 82 f6 ed ff ff 	movabs rax,0xffffffffffedf682
ffff80000080033b:	ff ff ff 
ffff80000080033e:	48 01 d8             	add    rax,rbx
ffff800000800341:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:31
    set_gate(16,(addr_t)coprocessor_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800343:	48 b8 58 ff ff ff ff 	movabs rax,0xffffffffffffff58
ffff80000080034a:	ff ff ff 
ffff80000080034d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800351:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800356:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080035b:	48 89 c6             	mov    rsi,rax
ffff80000080035e:	bf 10 00 00 00       	mov    edi,0x10
ffff800000800363:	49 89 df             	mov    r15,rbx
ffff800000800366:	48 b8 82 f6 ed ff ff 	movabs rax,0xffffffffffedf682
ffff80000080036d:	ff ff ff 
ffff800000800370:	48 01 d8             	add    rax,rbx
ffff800000800373:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32
    for (int i=17;i<48;i++)
ffff800000800375:	c7 45 ec 11 00 00 00 	mov    DWORD PTR [rbp-0x14],0x11
ffff80000080037c:	eb 39                	jmp    ffff8000008003b7 <init_int+0x3b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:33 (discriminator 3)
        set_gate(i,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff80000080037e:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000800385:	ff ff ff 
ffff800000800388:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080038c:	48 89 c6             	mov    rsi,rax
ffff80000080038f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000800392:	0f b6 c0             	movzx  eax,al
ffff800000800395:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff80000080039a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080039f:	89 c7                	mov    edi,eax
ffff8000008003a1:	49 89 df             	mov    r15,rbx
ffff8000008003a4:	48 b8 82 f6 ed ff ff 	movabs rax,0xffffffffffedf682
ffff8000008003ab:	ff ff ff 
ffff8000008003ae:	48 01 d8             	add    rax,rbx
ffff8000008003b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32 (discriminator 3)
    for (int i=17;i<48;i++)
ffff8000008003b3:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32 (discriminator 1)
ffff8000008003b7:	83 7d ec 2f          	cmp    DWORD PTR [rbp-0x14],0x2f
ffff8000008003bb:	7e c1                	jle    ffff80000080037e <init_int+0x37e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:34
	set_gate(0x21,(addr_t)key_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff8000008003bd:	48 b8 28 fd ff ff ff 	movabs rax,0xfffffffffffffd28
ffff8000008003c4:	ff ff ff 
ffff8000008003c7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008003cb:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff8000008003d0:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008003d5:	48 89 c6             	mov    rsi,rax
ffff8000008003d8:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008003dd:	49 89 df             	mov    r15,rbx
ffff8000008003e0:	48 b8 82 f6 ed ff ff 	movabs rax,0xffffffffffedf682
ffff8000008003e7:	ff ff ff 
ffff8000008003ea:	48 01 d8             	add    rax,rbx
ffff8000008003ed:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:35
	set_gate(0x20,(addr_t)clock,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff8000008003ef:	48 b8 d0 ff ff ff ff 	movabs rax,0xffffffffffffffd0
ffff8000008003f6:	ff ff ff 
ffff8000008003f9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008003fd:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800402:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800407:	48 89 c6             	mov    rsi,rax
ffff80000080040a:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080040f:	49 89 df             	mov    r15,rbx
ffff800000800412:	48 b8 82 f6 ed ff ff 	movabs rax,0xffffffffffedf682
ffff800000800419:	ff ff ff 
ffff80000080041c:	48 01 d8             	add    rax,rbx
ffff80000080041f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:36
	set_gate(0x2e,(addr_t)disk_int_handler,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff800000800421:	48 b8 f8 ff ff ff ff 	movabs rax,0xfffffffffffffff8
ffff800000800428:	ff ff ff 
ffff80000080042b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080042f:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800434:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800439:	48 89 c6             	mov    rsi,rax
ffff80000080043c:	bf 2e 00 00 00       	mov    edi,0x2e
ffff800000800441:	49 89 df             	mov    r15,rbx
ffff800000800444:	48 b8 82 f6 ed ff ff 	movabs rax,0xffffffffffedf682
ffff80000080044b:	ff ff ff 
ffff80000080044e:	48 01 d8             	add    rax,rbx
ffff800000800451:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:37
    set_gate(0x80,(addr_t)_syscall,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);//
ffff800000800453:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff80000080045a:	ff ff ff 
ffff80000080045d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800461:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800466:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080046b:	48 89 c6             	mov    rsi,rax
ffff80000080046e:	bf 80 00 00 00       	mov    edi,0x80
ffff800000800473:	49 89 df             	mov    r15,rbx
ffff800000800476:	48 b8 82 f6 ed ff ff 	movabs rax,0xffffffffffedf682
ffff80000080047d:	ff ff ff 
ffff800000800480:	48 01 d8             	add    rax,rbx
ffff800000800483:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:42
    //set_gate(0x2c,mouse_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
    //启动8259A
    
	//ICW1
	outb(0x20,0x11);
ffff800000800485:	be 11 00 00 00       	mov    esi,0x11
ffff80000080048a:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080048f:	49 89 df             	mov    r15,rbx
ffff800000800492:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff800000800499:	ff ff ff 
ffff80000080049c:	48 01 d8             	add    rax,rbx
ffff80000080049f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:43
	outb(0xA0,0x11);
ffff8000008004a1:	be 11 00 00 00       	mov    esi,0x11
ffff8000008004a6:	bf a0 00 00 00       	mov    edi,0xa0
ffff8000008004ab:	49 89 df             	mov    r15,rbx
ffff8000008004ae:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff8000008004b5:	ff ff ff 
ffff8000008004b8:	48 01 d8             	add    rax,rbx
ffff8000008004bb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:45
	//ICW2
	outb(0x21,0x20);//former 0x20,0x20
ffff8000008004bd:	be 20 00 00 00       	mov    esi,0x20
ffff8000008004c2:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008004c7:	49 89 df             	mov    r15,rbx
ffff8000008004ca:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff8000008004d1:	ff ff ff 
ffff8000008004d4:	48 01 d8             	add    rax,rbx
ffff8000008004d7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:46
	outb(0xA1,0x28);
ffff8000008004d9:	be 28 00 00 00       	mov    esi,0x28
ffff8000008004de:	bf a1 00 00 00       	mov    edi,0xa1
ffff8000008004e3:	49 89 df             	mov    r15,rbx
ffff8000008004e6:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff8000008004ed:	ff ff ff 
ffff8000008004f0:	48 01 d8             	add    rax,rbx
ffff8000008004f3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:48
	//ICW3
	outb(0x21,0x04);
ffff8000008004f5:	be 04 00 00 00       	mov    esi,0x4
ffff8000008004fa:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008004ff:	49 89 df             	mov    r15,rbx
ffff800000800502:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff800000800509:	ff ff ff 
ffff80000080050c:	48 01 d8             	add    rax,rbx
ffff80000080050f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:49
	outb(0xA1,0x02);
ffff800000800511:	be 02 00 00 00       	mov    esi,0x2
ffff800000800516:	bf a1 00 00 00       	mov    edi,0xa1
ffff80000080051b:	49 89 df             	mov    r15,rbx
ffff80000080051e:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff800000800525:	ff ff ff 
ffff800000800528:	48 01 d8             	add    rax,rbx
ffff80000080052b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:51
	//ICW4
	outb(0x21,0x01);
ffff80000080052d:	be 01 00 00 00       	mov    esi,0x1
ffff800000800532:	bf 21 00 00 00       	mov    edi,0x21
ffff800000800537:	49 89 df             	mov    r15,rbx
ffff80000080053a:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff800000800541:	ff ff ff 
ffff800000800544:	48 01 d8             	add    rax,rbx
ffff800000800547:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:52
	outb(0xA1,0x01);
ffff800000800549:	be 01 00 00 00       	mov    esi,0x1
ffff80000080054e:	bf a1 00 00 00       	mov    edi,0xa1
ffff800000800553:	49 89 df             	mov    r15,rbx
ffff800000800556:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff80000080055d:	ff ff ff 
ffff800000800560:	48 01 d8             	add    rax,rbx
ffff800000800563:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:54

    turn_on_int();
ffff800000800565:	49 89 df             	mov    r15,rbx
ffff800000800568:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080056d:	48 ba 0a 72 ee ff ff 	movabs rdx,0xffffffffffee720a
ffff800000800574:	ff ff ff 
ffff800000800577:	48 01 da             	add    rdx,rbx
ffff80000080057a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:58


    //设置IA32_LSTAR,为syscall做设置
    wrmsr(0xc0000082, _syscall);
ffff80000080057c:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff800000800583:	ff ff ff 
ffff800000800586:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080058a:	48 89 c6             	mov    rsi,rax
ffff80000080058d:	b8 82 00 00 c0       	mov    eax,0xc0000082
ffff800000800592:	48 89 c7             	mov    rdi,rax
ffff800000800595:	49 89 df             	mov    r15,rbx
ffff800000800598:	48 b8 36 ff ed ff ff 	movabs rax,0xffffffffffedff36
ffff80000080059f:	ff ff ff 
ffff8000008005a2:	48 01 d8             	add    rax,rbx
ffff8000008005a5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:60
    //设置IA32_FMASK,为syscall做设置
    wrmsr(0xc0000084, -1);
ffff8000008005a7:	48 c7 c6 ff ff ff ff 	mov    rsi,0xffffffffffffffff
ffff8000008005ae:	b8 84 00 00 c0       	mov    eax,0xc0000084
ffff8000008005b3:	48 89 c7             	mov    rdi,rax
ffff8000008005b6:	49 89 df             	mov    r15,rbx
ffff8000008005b9:	48 b8 36 ff ed ff ff 	movabs rax,0xffffffffffedff36
ffff8000008005c0:	ff ff ff 
ffff8000008005c3:	48 01 d8             	add    rax,rbx
ffff8000008005c6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:61
}
ffff8000008005c8:	90                   	nop
ffff8000008005c9:	48 83 c4 10          	add    rsp,0x10
ffff8000008005cd:	5b                   	pop    rbx
ffff8000008005ce:	41 5f                	pop    r15
ffff8000008005d0:	5d                   	pop    rbp
ffff8000008005d1:	c3                   	ret    

ffff8000008005d2 <set_gate>:
set_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:63
void set_gate(u8 index,addr_t offset,u16 selector,u16 attr)
{
ffff8000008005d2:	f3 0f 1e fa          	endbr64 
ffff8000008005d6:	55                   	push   rbp
ffff8000008005d7:	48 89 e5             	mov    rbp,rsp
ffff8000008005da:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008005da <set_gate+0x8>
ffff8000008005e1:	49 bb 76 09 12 00 00 	movabs r11,0x120976
ffff8000008005e8:	00 00 00 
ffff8000008005eb:	4c 01 d8             	add    rax,r11
ffff8000008005ee:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008005f2:	89 d6                	mov    esi,edx
ffff8000008005f4:	89 ca                	mov    edx,ecx
ffff8000008005f6:	89 f9                	mov    ecx,edi
ffff8000008005f8:	88 4d fc             	mov    BYTE PTR [rbp-0x4],cl
ffff8000008005fb:	89 f1                	mov    ecx,esi
ffff8000008005fd:	66 89 4d f8          	mov    WORD PTR [rbp-0x8],cx
ffff800000800601:	66 89 55 ec          	mov    WORD PTR [rbp-0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:70
    /* idt[index].offset_low=offset&0xffffu;
    idt[index].offset_high=(offset>>16)&0xffffu;
    idt[index].attr=attr;
    idt[index].selector=selector; */
#else
    offset|=KNL_BASE;//中断必须在内核空间
ffff800000800605:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff80000080060c:	80 ff ff 
ffff80000080060f:	48 09 55 f0          	or     QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:71
    idt[index].offset_low=offset&0xffff;
ffff800000800613:	48 ba 30 ff ff ff ff 	movabs rdx,0xffffffffffffff30
ffff80000080061a:	ff ff ff 
ffff80000080061d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800621:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000800624:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800628:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080062c:	48 01 ca             	add    rdx,rcx
ffff80000080062f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000800633:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:72
    idt[index].offset_mid=(offset>>16)&0xffff;
ffff800000800636:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080063a:	48 89 d1             	mov    rcx,rdx
ffff80000080063d:	48 c1 e9 10          	shr    rcx,0x10
ffff800000800641:	48 ba 30 ff ff ff ff 	movabs rdx,0xffffffffffffff30
ffff800000800648:	ff ff ff 
ffff80000080064b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080064f:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000800652:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800656:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080065a:	48 01 f2             	add    rdx,rsi
ffff80000080065d:	66 89 4a 06          	mov    WORD PTR [rdx+0x6],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:73
    idt[index].offset_high=(offset>>32);//0x0000ffff;
ffff800000800661:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000800665:	48 89 d1             	mov    rcx,rdx
ffff800000800668:	48 c1 e9 20          	shr    rcx,0x20
ffff80000080066c:	48 ba 30 ff ff ff ff 	movabs rdx,0xffffffffffffff30
ffff800000800673:	ff ff ff 
ffff800000800676:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080067a:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080067d:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800681:	48 c1 e2 04          	shl    rdx,0x4
ffff800000800685:	48 01 f2             	add    rdx,rsi
ffff800000800688:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:74
    idt[index].attr=attr|1;//1是ist索引
ffff80000080068b:	48 ba 30 ff ff ff ff 	movabs rdx,0xffffffffffffff30
ffff800000800692:	ff ff ff 
ffff800000800695:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800699:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080069c:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff8000008006a0:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008006a4:	48 01 ca             	add    rdx,rcx
ffff8000008006a7:	0f b7 4d ec          	movzx  ecx,WORD PTR [rbp-0x14]
ffff8000008006ab:	83 c9 01             	or     ecx,0x1
ffff8000008006ae:	66 89 4a 04          	mov    WORD PTR [rdx+0x4],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:75
    idt[index].selector=selector;
ffff8000008006b2:	48 ba 30 ff ff ff ff 	movabs rdx,0xffffffffffffff30
ffff8000008006b9:	ff ff ff 
ffff8000008006bc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008006c0:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008006c3:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff8000008006c7:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008006cb:	48 01 d1             	add    rcx,rdx
ffff8000008006ce:	0f b7 55 f8          	movzx  edx,WORD PTR [rbp-0x8]
ffff8000008006d2:	66 89 51 02          	mov    WORD PTR [rcx+0x2],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:76
    idt[index].rsvd=0;
ffff8000008006d6:	48 ba 30 ff ff ff ff 	movabs rdx,0xffffffffffffff30
ffff8000008006dd:	ff ff ff 
ffff8000008006e0:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008006e4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008006e7:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
ffff8000008006eb:	48 c1 e0 04          	shl    rax,0x4
ffff8000008006ef:	48 01 d0             	add    rax,rdx
ffff8000008006f2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:78
#endif
}
ffff8000008006f9:	90                   	nop
ffff8000008006fa:	5d                   	pop    rbp
ffff8000008006fb:	c3                   	ret    

ffff8000008006fc <divide_err>:
divide_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:80

void divide_err(){
ffff8000008006fc:	f3 0f 1e fa          	endbr64 
ffff800000800700:	55                   	push   rbp
ffff800000800701:	48 89 e5             	mov    rbp,rsp
ffff800000800704:	41 57                	push   r15
ffff800000800706:	48 83 ec 08          	sub    rsp,0x8
ffff80000080070a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080070a <divide_err+0xe>
ffff800000800711:	49 bb 46 08 12 00 00 	movabs r11,0x120846
ffff800000800718:	00 00 00 
ffff80000080071b:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:81
    asm("cli");
ffff80000080071e:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:83
    //puts("divide err");
    eoi();
ffff80000080071f:	49 89 d7             	mov    r15,rdx
ffff800000800722:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800727:	48 b9 fe 71 ee ff ff 	movabs rcx,0xffffffffffee71fe
ffff80000080072e:	ff ff ff 
ffff800000800731:	48 01 d1             	add    rcx,rdx
ffff800000800734:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:84
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800736:	fb                   	sti    
ffff800000800737:	c9                   	leave  
ffff800000800738:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:85
}
ffff80000080073a:	90                   	nop
ffff80000080073b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080073f:	c9                   	leave  
ffff800000800740:	c3                   	ret    

ffff800000800741 <debug>:
debug():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:87

void debug(){
ffff800000800741:	f3 0f 1e fa          	endbr64 
ffff800000800745:	55                   	push   rbp
ffff800000800746:	48 89 e5             	mov    rbp,rsp
ffff800000800749:	41 57                	push   r15
ffff80000080074b:	48 83 ec 08          	sub    rsp,0x8
ffff80000080074f:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080074f <debug+0xe>
ffff800000800756:	49 bb 01 08 12 00 00 	movabs r11,0x120801
ffff80000080075d:	00 00 00 
ffff800000800760:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:88
    asm("cli");
ffff800000800763:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:90
    //puts("debug");
    eoi();
ffff800000800764:	49 89 d7             	mov    r15,rdx
ffff800000800767:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080076c:	48 b9 fe 71 ee ff ff 	movabs rcx,0xffffffffffee71fe
ffff800000800773:	ff ff ff 
ffff800000800776:	48 01 d1             	add    rcx,rdx
ffff800000800779:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:91
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080077b:	fb                   	sti    
ffff80000080077c:	c9                   	leave  
ffff80000080077d:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:92
}
ffff80000080077f:	90                   	nop
ffff800000800780:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800784:	c9                   	leave  
ffff800000800785:	c3                   	ret    

ffff800000800786 <default_int_proc>:
default_int_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:93
void default_int_proc(){
ffff800000800786:	f3 0f 1e fa          	endbr64 
ffff80000080078a:	55                   	push   rbp
ffff80000080078b:	48 89 e5             	mov    rbp,rsp
ffff80000080078e:	41 57                	push   r15
ffff800000800790:	48 83 ec 08          	sub    rsp,0x8
ffff800000800794:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800794 <default_int_proc+0xe>
ffff80000080079b:	49 bb bc 07 12 00 00 	movabs r11,0x1207bc
ffff8000008007a2:	00 00 00 
ffff8000008007a5:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:94
    asm("cli");
ffff8000008007a8:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:96
    //puts("default_int_proc");
    eoi();
ffff8000008007a9:	49 89 d7             	mov    r15,rdx
ffff8000008007ac:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008007b1:	48 b9 fe 71 ee ff ff 	movabs rcx,0xffffffffffee71fe
ffff8000008007b8:	ff ff ff 
ffff8000008007bb:	48 01 d1             	add    rcx,rdx
ffff8000008007be:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:97
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff8000008007c0:	fb                   	sti    
ffff8000008007c1:	c9                   	leave  
ffff8000008007c2:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:98
}
ffff8000008007c4:	90                   	nop
ffff8000008007c5:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008007c9:	c9                   	leave  
ffff8000008007ca:	c3                   	ret    

ffff8000008007cb <breakpoint>:
breakpoint():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:99
void breakpoint(){
ffff8000008007cb:	f3 0f 1e fa          	endbr64 
ffff8000008007cf:	55                   	push   rbp
ffff8000008007d0:	48 89 e5             	mov    rbp,rsp
ffff8000008007d3:	41 57                	push   r15
ffff8000008007d5:	48 83 ec 08          	sub    rsp,0x8
ffff8000008007d9:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008007d9 <breakpoint+0xe>
ffff8000008007e0:	49 bb 77 07 12 00 00 	movabs r11,0x120777
ffff8000008007e7:	00 00 00 
ffff8000008007ea:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:100
    asm("cli");
ffff8000008007ed:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:102
    //puts("breakpoint");
    eoi();
ffff8000008007ee:	49 89 d7             	mov    r15,rdx
ffff8000008007f1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008007f6:	48 b9 fe 71 ee ff ff 	movabs rcx,0xffffffffffee71fe
ffff8000008007fd:	ff ff ff 
ffff800000800800:	48 01 d1             	add    rcx,rdx
ffff800000800803:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:103
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800805:	fb                   	sti    
ffff800000800806:	c9                   	leave  
ffff800000800807:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:104
}
ffff800000800809:	90                   	nop
ffff80000080080a:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080080e:	c9                   	leave  
ffff80000080080f:	c3                   	ret    

ffff800000800810 <overflow>:
overflow():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:105
void overflow(){
ffff800000800810:	f3 0f 1e fa          	endbr64 
ffff800000800814:	55                   	push   rbp
ffff800000800815:	48 89 e5             	mov    rbp,rsp
ffff800000800818:	41 57                	push   r15
ffff80000080081a:	48 83 ec 08          	sub    rsp,0x8
ffff80000080081e:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080081e <overflow+0xe>
ffff800000800825:	49 bb 32 07 12 00 00 	movabs r11,0x120732
ffff80000080082c:	00 00 00 
ffff80000080082f:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:106
    asm("cli");
ffff800000800832:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:108
    //puts("overflow");
    eoi();
ffff800000800833:	49 89 d7             	mov    r15,rdx
ffff800000800836:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080083b:	48 b9 fe 71 ee ff ff 	movabs rcx,0xffffffffffee71fe
ffff800000800842:	ff ff ff 
ffff800000800845:	48 01 d1             	add    rcx,rdx
ffff800000800848:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:109
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080084a:	fb                   	sti    
ffff80000080084b:	c9                   	leave  
ffff80000080084c:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:110
}
ffff80000080084e:	90                   	nop
ffff80000080084f:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800853:	c9                   	leave  
ffff800000800854:	c3                   	ret    

ffff800000800855 <bounds>:
bounds():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:111
void bounds(){
ffff800000800855:	f3 0f 1e fa          	endbr64 
ffff800000800859:	55                   	push   rbp
ffff80000080085a:	48 89 e5             	mov    rbp,rsp
ffff80000080085d:	41 57                	push   r15
ffff80000080085f:	48 83 ec 08          	sub    rsp,0x8
ffff800000800863:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800863 <bounds+0xe>
ffff80000080086a:	49 bb ed 06 12 00 00 	movabs r11,0x1206ed
ffff800000800871:	00 00 00 
ffff800000800874:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:112
    asm("cli");
ffff800000800877:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:114
    //puts("bounds");
    eoi();
ffff800000800878:	49 89 d7             	mov    r15,rdx
ffff80000080087b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800880:	48 b9 fe 71 ee ff ff 	movabs rcx,0xffffffffffee71fe
ffff800000800887:	ff ff ff 
ffff80000080088a:	48 01 d1             	add    rcx,rdx
ffff80000080088d:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:115
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080088f:	fb                   	sti    
ffff800000800890:	c9                   	leave  
ffff800000800891:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:116
}
ffff800000800893:	90                   	nop
ffff800000800894:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800898:	c9                   	leave  
ffff800000800899:	c3                   	ret    

ffff80000080089a <undefined_operator>:
undefined_operator():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:117
void undefined_operator(){
ffff80000080089a:	f3 0f 1e fa          	endbr64 
ffff80000080089e:	55                   	push   rbp
ffff80000080089f:	48 89 e5             	mov    rbp,rsp
ffff8000008008a2:	41 57                	push   r15
ffff8000008008a4:	53                   	push   rbx
ffff8000008008a5:	48 83 ec 10          	sub    rsp,0x10
ffff8000008008a9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008008a9 <undefined_operator+0xf>
ffff8000008008b0:	49 bb a7 06 12 00 00 	movabs r11,0x1206a7
ffff8000008008b7:	00 00 00 
ffff8000008008ba:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:119
    //puts("undef operator");
    eoi();
ffff8000008008bd:	49 89 df             	mov    r15,rbx
ffff8000008008c0:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008008c5:	48 ba fe 71 ee ff ff 	movabs rdx,0xffffffffffee71fe
ffff8000008008cc:	ff ff ff 
ffff8000008008cf:	48 01 da             	add    rdx,rbx
ffff8000008008d2:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:120
    off_t stk=0;
ffff8000008008d4:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff8000008008db:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:121
    asm volatile("mov %%rbp,%0":"=m"(stk));
ffff8000008008dc:	48 89 6d e8          	mov    QWORD PTR [rbp-0x18],rbp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:122
    stk-=16;
ffff8000008008e0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008008e4:	48 83 e8 10          	sub    rax,0x10
ffff8000008008e8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:123
    backtrace(stk);
ffff8000008008ec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008008f0:	48 89 c7             	mov    rdi,rax
ffff8000008008f3:	49 89 df             	mov    r15,rbx
ffff8000008008f6:	48 b8 37 01 ee ff ff 	movabs rax,0xffffffffffee0137
ffff8000008008fd:	ff ff ff 
ffff800000800900:	48 01 d8             	add    rax,rbx
ffff800000800903:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:124
    __asm__ volatile ("jmp .\r\n leave \r\n iretq");
ffff800000800905:	eb fe                	jmp    ffff800000800905 <undefined_operator+0x6b>
ffff800000800907:	c9                   	leave  
ffff800000800908:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:125
}
ffff80000080090a:	90                   	nop
ffff80000080090b:	48 83 c4 10          	add    rsp,0x10
ffff80000080090f:	5b                   	pop    rbx
ffff800000800910:	41 5f                	pop    r15
ffff800000800912:	5d                   	pop    rbp
ffff800000800913:	c3                   	ret    

ffff800000800914 <coprocessor_notexist>:
coprocessor_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:126
void coprocessor_notexist(){
ffff800000800914:	f3 0f 1e fa          	endbr64 
ffff800000800918:	55                   	push   rbp
ffff800000800919:	48 89 e5             	mov    rbp,rsp
ffff80000080091c:	41 57                	push   r15
ffff80000080091e:	48 83 ec 08          	sub    rsp,0x8
ffff800000800922:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800922 <coprocessor_notexist+0xe>
ffff800000800929:	49 bb 2e 06 12 00 00 	movabs r11,0x12062e
ffff800000800930:	00 00 00 
ffff800000800933:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:127
    asm("cli");
ffff800000800936:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:129
    //puts("coprocessor doesnt exist");
    eoi();
ffff800000800937:	49 89 d7             	mov    r15,rdx
ffff80000080093a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080093f:	48 b9 fe 71 ee ff ff 	movabs rcx,0xffffffffffee71fe
ffff800000800946:	ff ff ff 
ffff800000800949:	48 01 d1             	add    rcx,rdx
ffff80000080094c:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:130
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080094e:	fb                   	sti    
ffff80000080094f:	c9                   	leave  
ffff800000800950:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:131
}
ffff800000800952:	90                   	nop
ffff800000800953:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800957:	c9                   	leave  
ffff800000800958:	c3                   	ret    

ffff800000800959 <double_ints>:
double_ints():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:132
void double_ints(){
ffff800000800959:	f3 0f 1e fa          	endbr64 
ffff80000080095d:	55                   	push   rbp
ffff80000080095e:	48 89 e5             	mov    rbp,rsp
ffff800000800961:	41 57                	push   r15
ffff800000800963:	48 83 ec 08          	sub    rsp,0x8
ffff800000800967:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800967 <double_ints+0xe>
ffff80000080096e:	49 bb e9 05 12 00 00 	movabs r11,0x1205e9
ffff800000800975:	00 00 00 
ffff800000800978:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:133
    asm("cli");
ffff80000080097b:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:135
    //puts("double interrupts");
    eoi();
ffff80000080097c:	49 89 d7             	mov    r15,rdx
ffff80000080097f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800984:	48 b9 fe 71 ee ff ff 	movabs rcx,0xffffffffffee71fe
ffff80000080098b:	ff ff ff 
ffff80000080098e:	48 01 d1             	add    rcx,rdx
ffff800000800991:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:136
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800993:	fb                   	sti    
ffff800000800994:	c9                   	leave  
ffff800000800995:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:137
}
ffff800000800997:	90                   	nop
ffff800000800998:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080099c:	c9                   	leave  
ffff80000080099d:	c3                   	ret    

ffff80000080099e <coprocessor_seg_overbound>:
coprocessor_seg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:138
void coprocessor_seg_overbound(){
ffff80000080099e:	f3 0f 1e fa          	endbr64 
ffff8000008009a2:	55                   	push   rbp
ffff8000008009a3:	48 89 e5             	mov    rbp,rsp
ffff8000008009a6:	41 57                	push   r15
ffff8000008009a8:	48 83 ec 08          	sub    rsp,0x8
ffff8000008009ac:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008009ac <coprocessor_seg_overbound+0xe>
ffff8000008009b3:	49 bb a4 05 12 00 00 	movabs r11,0x1205a4
ffff8000008009ba:	00 00 00 
ffff8000008009bd:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:140
    //puts("coprocessfor seg overdound");
    eoi();
ffff8000008009c0:	49 89 d7             	mov    r15,rdx
ffff8000008009c3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008009c8:	48 b9 fe 71 ee ff ff 	movabs rcx,0xffffffffffee71fe
ffff8000008009cf:	ff ff ff 
ffff8000008009d2:	48 01 d1             	add    rcx,rdx
ffff8000008009d5:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:141
    __asm__ volatile ("leave \r\n iretq");
ffff8000008009d7:	c9                   	leave  
ffff8000008009d8:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:142
}
ffff8000008009da:	90                   	nop
ffff8000008009db:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008009df:	c9                   	leave  
ffff8000008009e0:	c3                   	ret    

ffff8000008009e1 <invalid_tss>:
invalid_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:143
void invalid_tss(){
ffff8000008009e1:	f3 0f 1e fa          	endbr64 
ffff8000008009e5:	55                   	push   rbp
ffff8000008009e6:	48 89 e5             	mov    rbp,rsp
ffff8000008009e9:	41 57                	push   r15
ffff8000008009eb:	48 83 ec 08          	sub    rsp,0x8
ffff8000008009ef:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008009ef <invalid_tss+0xe>
ffff8000008009f6:	49 bb 61 05 12 00 00 	movabs r11,0x120561
ffff8000008009fd:	00 00 00 
ffff800000800a00:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:144
    asm("cli");
ffff800000800a03:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:146
    //puts("invalid tss");
    eoi();
ffff800000800a04:	49 89 d7             	mov    r15,rdx
ffff800000800a07:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a0c:	48 b9 fe 71 ee ff ff 	movabs rcx,0xffffffffffee71fe
ffff800000800a13:	ff ff ff 
ffff800000800a16:	48 01 d1             	add    rcx,rdx
ffff800000800a19:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:147
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800a1b:	fb                   	sti    
ffff800000800a1c:	c9                   	leave  
ffff800000800a1d:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:148
}
ffff800000800a1f:	90                   	nop
ffff800000800a20:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a24:	c9                   	leave  
ffff800000800a25:	c3                   	ret    

ffff800000800a26 <segment_notexist>:
segment_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:149
void segment_notexist(){
ffff800000800a26:	f3 0f 1e fa          	endbr64 
ffff800000800a2a:	55                   	push   rbp
ffff800000800a2b:	48 89 e5             	mov    rbp,rsp
ffff800000800a2e:	41 57                	push   r15
ffff800000800a30:	48 83 ec 08          	sub    rsp,0x8
ffff800000800a34:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a34 <segment_notexist+0xe>
ffff800000800a3b:	49 bb 1c 05 12 00 00 	movabs r11,0x12051c
ffff800000800a42:	00 00 00 
ffff800000800a45:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:150
    asm("cli");
ffff800000800a48:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:152
    //puts("seg nonexistent");
    eoi();
ffff800000800a49:	49 89 d7             	mov    r15,rdx
ffff800000800a4c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a51:	48 b9 fe 71 ee ff ff 	movabs rcx,0xffffffffffee71fe
ffff800000800a58:	ff ff ff 
ffff800000800a5b:	48 01 d1             	add    rcx,rdx
ffff800000800a5e:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:153
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800a60:	fb                   	sti    
ffff800000800a61:	c9                   	leave  
ffff800000800a62:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:154
}
ffff800000800a64:	90                   	nop
ffff800000800a65:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a69:	c9                   	leave  
ffff800000800a6a:	c3                   	ret    

ffff800000800a6b <stackseg_overbound>:
stackseg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:155
void stackseg_overbound(){
ffff800000800a6b:	f3 0f 1e fa          	endbr64 
ffff800000800a6f:	55                   	push   rbp
ffff800000800a70:	48 89 e5             	mov    rbp,rsp
ffff800000800a73:	41 57                	push   r15
ffff800000800a75:	48 83 ec 08          	sub    rsp,0x8
ffff800000800a79:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a79 <stackseg_overbound+0xe>
ffff800000800a80:	49 bb d7 04 12 00 00 	movabs r11,0x1204d7
ffff800000800a87:	00 00 00 
ffff800000800a8a:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:156
    asm("cli");
ffff800000800a8d:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:158
    //puts("stack seg overbound");
    eoi();
ffff800000800a8e:	49 89 d7             	mov    r15,rdx
ffff800000800a91:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a96:	48 b9 fe 71 ee ff ff 	movabs rcx,0xffffffffffee71fe
ffff800000800a9d:	ff ff ff 
ffff800000800aa0:	48 01 d1             	add    rcx,rdx
ffff800000800aa3:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:159
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800aa5:	fb                   	sti    
ffff800000800aa6:	c9                   	leave  
ffff800000800aa7:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:160
}
ffff800000800aa9:	90                   	nop
ffff800000800aaa:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800aae:	c9                   	leave  
ffff800000800aaf:	c3                   	ret    

ffff800000800ab0 <general_protect>:
general_protect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:161
void general_protect(){
ffff800000800ab0:	f3 0f 1e fa          	endbr64 
ffff800000800ab4:	55                   	push   rbp
ffff800000800ab5:	48 89 e5             	mov    rbp,rsp
ffff800000800ab8:	41 57                	push   r15
ffff800000800aba:	48 83 ec 18          	sub    rsp,0x18
ffff800000800abe:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800abe <general_protect+0xe>
ffff800000800ac5:	49 bb 92 04 12 00 00 	movabs r11,0x120492
ffff800000800acc:	00 00 00 
ffff800000800acf:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:163
    //print("general protect.");
    int err_code=0;
ffff800000800ad2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:181
    //杀死问题进程
    del_proc(cur_proc);
    printf("killed the problem process.\n");
	printf("shell:>");
    switch_proc_tss(0); */
    eoi();
ffff800000800ad9:	49 89 d7             	mov    r15,rdx
ffff800000800adc:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800ae1:	48 b9 fe 71 ee ff ff 	movabs rcx,0xffffffffffee71fe
ffff800000800ae8:	ff ff ff 
ffff800000800aeb:	48 01 d1             	add    rcx,rdx
ffff800000800aee:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:182
    __asm__ volatile ("leave\r\n add $8,%rsp \r\n iretq");
ffff800000800af0:	c9                   	leave  
ffff800000800af1:	48 83 c4 08          	add    rsp,0x8
ffff800000800af5:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:183
}
ffff800000800af7:	90                   	nop
ffff800000800af8:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800afc:	c9                   	leave  
ffff800000800afd:	c3                   	ret    

ffff800000800afe <coprocessor_err>:
coprocessor_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:185

void coprocessor_err(){
ffff800000800afe:	f3 0f 1e fa          	endbr64 
ffff800000800b02:	55                   	push   rbp
ffff800000800b03:	48 89 e5             	mov    rbp,rsp
ffff800000800b06:	41 57                	push   r15
ffff800000800b08:	48 83 ec 08          	sub    rsp,0x8
ffff800000800b0c:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800b0c <coprocessor_err+0xe>
ffff800000800b13:	49 bb 44 04 12 00 00 	movabs r11,0x120444
ffff800000800b1a:	00 00 00 
ffff800000800b1d:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:186
    asm("cli");
ffff800000800b20:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:188
    //puts("coprocessor err");
    eoi();
ffff800000800b21:	49 89 d7             	mov    r15,rdx
ffff800000800b24:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800b29:	48 b9 fe 71 ee ff ff 	movabs rcx,0xffffffffffee71fe
ffff800000800b30:	ff ff ff 
ffff800000800b33:	48 01 d1             	add    rcx,rdx
ffff800000800b36:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:189
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800b38:	fb                   	sti    
ffff800000800b39:	c9                   	leave  
ffff800000800b3a:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:190
}
ffff800000800b3c:	90                   	nop
ffff800000800b3d:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800b41:	c9                   	leave  
ffff800000800b42:	c3                   	ret    

ffff800000800b43 <syscall>:
syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:209

xchg rcx to r10

*/
int syscall(long a, long b, long c, long d, long e, long f)
{
ffff800000800b43:	f3 0f 1e fa          	endbr64 
ffff800000800b47:	55                   	push   rbp
ffff800000800b48:	48 89 e5             	mov    rbp,rsp
ffff800000800b4b:	41 57                	push   r15
ffff800000800b4d:	53                   	push   rbx
ffff800000800b4e:	48 83 ec 40          	sub    rsp,0x40
ffff800000800b52:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000800b52 <syscall+0xf>
ffff800000800b59:	49 bb fe 03 12 00 00 	movabs r11,0x1203fe
ffff800000800b60:	00 00 00 
ffff800000800b63:	4c 01 db             	add    rbx,r11
ffff800000800b66:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000800b6a:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff800000800b6e:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff800000800b72:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffff800000800b76:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
ffff800000800b7a:	4c 89 4d b0          	mov    QWORD PTR [rbp-0x50],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:211
    unsigned long num;
    asm volatile("":"=a"(num));//这样rax中存的参数就到这了
ffff800000800b7e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:212
    switch (num)
ffff800000800b82:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800b86:	48 83 e8 05          	sub    rax,0x5
ffff800000800b8a:	48 83 f8 5f          	cmp    rax,0x5f
ffff800000800b8e:	0f 87 e9 02 00 00    	ja     ffff800000800e7d <syscall+0x33a>
ffff800000800b94:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000800b9b:	00 
ffff800000800b9c:	48 8d 05 5d d4 11 00 	lea    rax,[rip+0x11d45d]        # ffff80000091e000 <filesystem+0x20>
ffff800000800ba3:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000800ba7:	48 8d 15 52 d4 11 00 	lea    rdx,[rip+0x11d452]        # ffff80000091e000 <filesystem+0x20>
ffff800000800bae:	48 01 d0             	add    rax,rdx
ffff800000800bb1:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:219
        // case 0:return reg_device(a);
        // case 1:return dispose_device(a);
        // case 2:return reg_driver(a);
        // case 3:return dispose_driver(a);
        // case 4:return call_drv_func(a,b,c);
        case 5:return req_page_at(a,b);
ffff800000800bb4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800bb8:	89 c2                	mov    edx,eax
ffff800000800bba:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800bbe:	89 d6                	mov    esi,edx
ffff800000800bc0:	48 89 c7             	mov    rdi,rax
ffff800000800bc3:	49 89 df             	mov    r15,rbx
ffff800000800bc6:	48 b8 5a 22 ee ff ff 	movabs rax,0xffffffffffee225a
ffff800000800bcd:	ff ff ff 
ffff800000800bd0:	48 01 d8             	add    rax,rbx
ffff800000800bd3:	ff d0                	call   rax
ffff800000800bd5:	e9 a3 02 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:220
        case 6:return free_page(a);
ffff800000800bda:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800bde:	48 89 c7             	mov    rdi,rax
ffff800000800be1:	49 89 df             	mov    r15,rbx
ffff800000800be4:	48 b8 4e 1f ee ff ff 	movabs rax,0xffffffffffee1f4e
ffff800000800beb:	ff ff ff 
ffff800000800bee:	48 01 d8             	add    rax,rbx
ffff800000800bf1:	ff d0                	call   rax
ffff800000800bf3:	e9 85 02 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:221
        case 7:return reg_proc(a, b, c);
ffff800000800bf8:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800bfc:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff800000800c00:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c04:	48 89 ce             	mov    rsi,rcx
ffff800000800c07:	48 89 c7             	mov    rdi,rax
ffff800000800c0a:	49 89 df             	mov    r15,rbx
ffff800000800c0d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800c12:	48 b9 3e 50 ee ff ff 	movabs rcx,0xffffffffffee503e
ffff800000800c19:	ff ff ff 
ffff800000800c1c:	48 01 d9             	add    rcx,rbx
ffff800000800c1f:	ff d1                	call   rcx
ffff800000800c21:	e9 57 02 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:222
        case 8:del_proc(a);
ffff800000800c26:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c2a:	89 c7                	mov    edi,eax
ffff800000800c2c:	49 89 df             	mov    r15,rbx
ffff800000800c2f:	48 b8 ef 4c ee ff ff 	movabs rax,0xffffffffffee4cef
ffff800000800c36:	ff ff ff 
ffff800000800c39:	48 01 d8             	add    rax,rbx
ffff800000800c3c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:223
        case 10:chk_vm(a,b);
ffff800000800c3e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800c42:	89 c2                	mov    edx,eax
ffff800000800c44:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c48:	89 d6                	mov    esi,edx
ffff800000800c4a:	89 c7                	mov    edi,eax
ffff800000800c4c:	49 89 df             	mov    r15,rbx
ffff800000800c4f:	48 b8 8c 23 ee ff ff 	movabs rax,0xffffffffffee238c
ffff800000800c56:	ff ff ff 
ffff800000800c59:	48 01 d8             	add    rax,rbx
ffff800000800c5c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:224
        case 11:return sys_open(a,b);
ffff800000800c5e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800c62:	89 c2                	mov    edx,eax
ffff800000800c64:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c68:	89 d6                	mov    esi,edx
ffff800000800c6a:	48 89 c7             	mov    rdi,rax
ffff800000800c6d:	49 89 df             	mov    r15,rbx
ffff800000800c70:	48 b8 f0 ad ee ff ff 	movabs rax,0xffffffffffeeadf0
ffff800000800c77:	ff ff ff 
ffff800000800c7a:	48 01 d8             	add    rax,rbx
ffff800000800c7d:	ff d0                	call   rax
ffff800000800c7f:	e9 f9 01 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:225
        case 12:return sys_close(a);
ffff800000800c84:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c88:	89 c7                	mov    edi,eax
ffff800000800c8a:	49 89 df             	mov    r15,rbx
ffff800000800c8d:	48 b8 1a b4 ee ff ff 	movabs rax,0xffffffffffeeb41a
ffff800000800c94:	ff ff ff 
ffff800000800c97:	48 01 d8             	add    rax,rbx
ffff800000800c9a:	ff d0                	call   rax
ffff800000800c9c:	e9 dc 01 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:226
        case 13:return sys_read(a,b,c);
ffff800000800ca1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800ca5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800ca9:	89 d1                	mov    ecx,edx
ffff800000800cab:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800caf:	48 89 c6             	mov    rsi,rax
ffff800000800cb2:	89 cf                	mov    edi,ecx
ffff800000800cb4:	49 89 df             	mov    r15,rbx
ffff800000800cb7:	48 b8 11 b5 ee ff ff 	movabs rax,0xffffffffffeeb511
ffff800000800cbe:	ff ff ff 
ffff800000800cc1:	48 01 d8             	add    rax,rbx
ffff800000800cc4:	ff d0                	call   rax
ffff800000800cc6:	e9 b2 01 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:227
        case 14:return sys_write(a,b,c);
ffff800000800ccb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800ccf:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800cd3:	89 d1                	mov    ecx,edx
ffff800000800cd5:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800cd9:	48 89 c6             	mov    rsi,rax
ffff800000800cdc:	89 cf                	mov    edi,ecx
ffff800000800cde:	49 89 df             	mov    r15,rbx
ffff800000800ce1:	48 b8 df b5 ee ff ff 	movabs rax,0xffffffffffeeb5df
ffff800000800ce8:	ff ff ff 
ffff800000800ceb:	48 01 d8             	add    rax,rbx
ffff800000800cee:	ff d0                	call   rax
ffff800000800cf0:	e9 88 01 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:228
        case 15:return sys_lseek(a,b,c);
ffff800000800cf5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800cf9:	89 c2                	mov    edx,eax
ffff800000800cfb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800cff:	89 c1                	mov    ecx,eax
ffff800000800d01:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800d05:	48 89 c6             	mov    rsi,rax
ffff800000800d08:	89 cf                	mov    edi,ecx
ffff800000800d0a:	49 89 df             	mov    r15,rbx
ffff800000800d0d:	48 b8 ad b6 ee ff ff 	movabs rax,0xffffffffffeeb6ad
ffff800000800d14:	ff ff ff 
ffff800000800d17:	48 01 d8             	add    rax,rbx
ffff800000800d1a:	ff d0                	call   rax
ffff800000800d1c:	e9 5c 01 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:232
        // case 16:return sys_tell(a);
        // case 17:return reg_vol(a,b,c);
        // case 18:return free_vol(a);
        case 19:return execute(a, NULL);
ffff800000800d21:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d25:	be 00 00 00 00       	mov    esi,0x0
ffff800000800d2a:	48 89 c7             	mov    rdi,rax
ffff800000800d2d:	49 89 df             	mov    r15,rbx
ffff800000800d30:	48 b8 74 75 ee ff ff 	movabs rax,0xffffffffffee7574
ffff800000800d37:	ff ff ff 
ffff800000800d3a:	48 01 d8             	add    rax,rbx
ffff800000800d3d:	ff d0                	call   rax
ffff800000800d3f:	e9 39 01 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:233
        case SYSCALL_EXIT:return sys_exit(a);
ffff800000800d44:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d48:	89 c7                	mov    edi,eax
ffff800000800d4a:	49 89 df             	mov    r15,rbx
ffff800000800d4d:	48 b8 c4 4f ee ff ff 	movabs rax,0xffffffffffee4fc4
ffff800000800d54:	ff ff ff 
ffff800000800d57:	48 01 d8             	add    rax,rbx
ffff800000800d5a:	ff d0                	call   rax
ffff800000800d5c:	e9 1c 01 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:234
        case SYSCALL_CALL:return exec_call(a);
ffff800000800d61:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d65:	48 89 c7             	mov    rdi,rax
ffff800000800d68:	49 89 df             	mov    r15,rbx
ffff800000800d6b:	48 b8 78 79 ee ff ff 	movabs rax,0xffffffffffee7978
ffff800000800d72:	ff ff ff 
ffff800000800d75:	48 01 d8             	add    rax,rbx
ffff800000800d78:	ff d0                	call   rax
ffff800000800d7a:	e9 fe 00 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:236
        // case SYSCALL_MKFIFO:return sys_mkfifo(a);
        case SYSCALL_MALLOC:return sys_malloc(a);
ffff800000800d7f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d83:	48 89 c7             	mov    rdi,rax
ffff800000800d86:	49 89 df             	mov    r15,rbx
ffff800000800d89:	48 b8 22 53 ee ff ff 	movabs rax,0xffffffffffee5322
ffff800000800d90:	ff ff ff 
ffff800000800d93:	48 01 d8             	add    rax,rbx
ffff800000800d96:	ff d0                	call   rax
ffff800000800d98:	e9 e0 00 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:237
        case SYSCALL_FREE:return sys_free(a);
ffff800000800d9d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800da1:	89 c7                	mov    edi,eax
ffff800000800da3:	49 89 df             	mov    r15,rbx
ffff800000800da6:	48 b8 0f 55 ee ff ff 	movabs rax,0xffffffffffee550f
ffff800000800dad:	ff ff ff 
ffff800000800db0:	48 01 d8             	add    rax,rbx
ffff800000800db3:	ff d0                	call   rax
ffff800000800db5:	e9 c3 00 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:238
        case SYSCALL_KB_READC:return sys_analyse_key();
ffff800000800dba:	49 89 df             	mov    r15,rbx
ffff800000800dbd:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800dc2:	48 ba 5b d9 ee ff ff 	movabs rdx,0xffffffffffeed95b
ffff800000800dc9:	ff ff ff 
ffff800000800dcc:	48 01 da             	add    rdx,rbx
ffff800000800dcf:	ff d2                	call   rdx
ffff800000800dd1:	0f be c0             	movsx  eax,al
ffff800000800dd4:	e9 a4 00 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:240
        // case SYSCALL_FIND_DEV:return sys_find_dev(a);
        case SYSCALL_FORK:return sys_fork();
ffff800000800dd9:	49 89 df             	mov    r15,rbx
ffff800000800ddc:	48 b8 36 59 ee ff ff 	movabs rax,0xffffffffffee5936
ffff800000800de3:	ff ff ff 
ffff800000800de6:	48 01 d8             	add    rax,rbx
ffff800000800de9:	ff d0                	call   rax
ffff800000800deb:	e9 8d 00 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:241
        case SYSCALL_EXECVE:return sys_execve(a, b, c);
ffff800000800df0:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800df4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800df8:	89 c1                	mov    ecx,eax
ffff800000800dfa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800dfe:	89 ce                	mov    esi,ecx
ffff800000800e00:	48 89 c7             	mov    rdi,rax
ffff800000800e03:	49 89 df             	mov    r15,rbx
ffff800000800e06:	48 b8 68 76 ee ff ff 	movabs rax,0xffffffffffee7668
ffff800000800e0d:	ff ff ff 
ffff800000800e10:	48 01 d8             	add    rax,rbx
ffff800000800e13:	ff d0                	call   rax
ffff800000800e15:	eb 66                	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:243
        // case SYSCALL_OPERATE_DEV:return sys_operate_dev(a,b,c);
        case SYSCALL_WAIT:return sys_wait(a,b,c);
ffff800000800e17:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800e1b:	89 c6                	mov    esi,eax
ffff800000800e1d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800e21:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800e25:	89 d1                	mov    ecx,edx
ffff800000800e27:	89 f2                	mov    edx,esi
ffff800000800e29:	48 89 c6             	mov    rsi,rax
ffff800000800e2c:	89 cf                	mov    edi,ecx
ffff800000800e2e:	49 89 df             	mov    r15,rbx
ffff800000800e31:	48 b8 f6 b7 ee ff ff 	movabs rax,0xffffffffffeeb7f6
ffff800000800e38:	ff ff ff 
ffff800000800e3b:	48 01 d8             	add    rax,rbx
ffff800000800e3e:	ff d0                	call   rax
ffff800000800e40:	eb 3b                	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:244
        case SYSCALL_MMAP:return sys_mmap(a,b,c,d,e,f);
ffff800000800e42:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000800e46:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000800e4a:	41 89 c0             	mov    r8d,eax
ffff800000800e4d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000800e51:	89 c1                	mov    ecx,eax
ffff800000800e53:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800e57:	89 c7                	mov    edi,eax
ffff800000800e59:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000800e5d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800e61:	49 89 d1             	mov    r9,rdx
ffff800000800e64:	89 fa                	mov    edx,edi
ffff800000800e66:	48 89 c7             	mov    rdi,rax
ffff800000800e69:	49 89 df             	mov    r15,rbx
ffff800000800e6c:	48 b8 11 be ee ff ff 	movabs rax,0xffffffffffeebe11
ffff800000800e73:	ff ff ff 
ffff800000800e76:	48 01 d8             	add    rax,rbx
ffff800000800e79:	ff d0                	call   rax
ffff800000800e7b:	eb 00                	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:250
    }
    // __asm__ volatile("mov %0,%%eax\r\n mov %1,%%ebx\r\n mov %2,%%ecx\r\n mov %3,%%edx\r\n mov %4,%%esi\r\n mov %5,%%edi"\
    // ::"m"(func),"m"(a),"m"(b),"m"(c),"m"(d),"m"(e));
    // __asm__ volatile("int $0x80\r\n leave\r\n ret");

}
ffff800000800e7d:	48 83 c4 40          	add    rsp,0x40
ffff800000800e81:	5b                   	pop    rbx
ffff800000800e82:	41 5f                	pop    r15
ffff800000800e84:	5d                   	pop    rbp
ffff800000800e85:	c3                   	ret    

ffff800000800e86 <wrmsr>:
wrmsr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:252
void wrmsr(unsigned long address,unsigned long value)
{
ffff800000800e86:	f3 0f 1e fa          	endbr64 
ffff800000800e8a:	55                   	push   rbp
ffff800000800e8b:	48 89 e5             	mov    rbp,rsp
ffff800000800e8e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000800e8e <wrmsr+0x8>
ffff800000800e95:	49 bb c2 00 12 00 00 	movabs r11,0x1200c2
ffff800000800e9c:	00 00 00 
ffff800000800e9f:	4c 01 d8             	add    rax,r11
ffff800000800ea2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000800ea6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:253
    __asm__ __volatile__	("wrmsr	\n\t"::"d"(value >> 32),"a"(value & 0xffffffff),"c"(address):"memory");
ffff800000800eaa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000800eae:	48 c1 e8 20          	shr    rax,0x20
ffff800000800eb2:	48 89 c2             	mov    rdx,rax
ffff800000800eb5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000800eb9:	89 c0                	mov    eax,eax
ffff800000800ebb:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff800000800ebf:	0f 30                	wrmsr  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:254
}
ffff800000800ec1:	90                   	nop
ffff800000800ec2:	5d                   	pop    rbp
ffff800000800ec3:	c3                   	ret    

ffff800000800ec4 <get_ksym>:
get_ksym():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:255
ksym *get_ksym(off_t addr){
ffff800000800ec4:	f3 0f 1e fa          	endbr64 
ffff800000800ec8:	55                   	push   rbp
ffff800000800ec9:	48 89 e5             	mov    rbp,rsp
ffff800000800ecc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000800ecc <get_ksym+0x8>
ffff800000800ed3:	49 bb 84 00 12 00 00 	movabs r11,0x120084
ffff800000800eda:	00 00 00 
ffff800000800edd:	4c 01 d8             	add    rax,r11
ffff800000800ee0:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:258
    extern char _binary_bin_kallsyms_bin_start[]__attribute__((weak)), \
    _binary_bin_kallsyms_bin_end[] __attribute__((weak));
    ksym *sym=_binary_bin_kallsyms_bin_start,*bef=sym;
ffff800000800ee4:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000800eeb:	ff ff ff 
ffff800000800eee:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800ef2:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff800000800ef6:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000800efa:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:259
    off_t func_belonged=sym->addr;//所属函数
ffff800000800efe:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000800f02:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000800f05:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:260
    while (sym<_binary_bin_kallsyms_bin_end&&sym->addr<addr)
ffff800000800f09:	eb 33                	jmp    ffff800000800f3e <get_ksym+0x7a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:262
    {
        bef=sym;
ffff800000800f0b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000800f0f:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:263
        func_belonged=sym->addr;
ffff800000800f13:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000800f17:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000800f1a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:264
        int namelen=sym->namelen;
ffff800000800f1e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000800f22:	8b 52 09             	mov    edx,DWORD PTR [rdx+0x9]
ffff800000800f25:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:265
        sym+=1;
ffff800000800f28:	48 83 45 f8 0d       	add    QWORD PTR [rbp-0x8],0xd
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:266
        sym=(off_t)sym+namelen;
ffff800000800f2d:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff800000800f30:	48 63 ca             	movsxd rcx,edx
ffff800000800f33:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000800f37:	48 01 ca             	add    rdx,rcx
ffff800000800f3a:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:260
    while (sym<_binary_bin_kallsyms_bin_end&&sym->addr<addr)
ffff800000800f3e:	48 ba 38 fe ff ff ff 	movabs rdx,0xfffffffffffffe38
ffff800000800f45:	ff ff ff 
ffff800000800f48:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800f4c:	48 39 55 f8          	cmp    QWORD PTR [rbp-0x8],rdx
ffff800000800f50:	73 0d                	jae    ffff800000800f5f <get_ksym+0x9b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:260 (discriminator 1)
ffff800000800f52:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000800f56:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000800f59:	48 39 55 d8          	cmp    QWORD PTR [rbp-0x28],rdx
ffff800000800f5d:	77 ac                	ja     ffff800000800f0b <get_ksym+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:268
    }
    return bef;
ffff800000800f5f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:269
}
ffff800000800f63:	5d                   	pop    rbp
ffff800000800f64:	c3                   	ret    

ffff800000800f65 <print_ksym>:
print_ksym():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:271
//根据给定的地址找到相应的内核符号，然后输出，如果找不到，就当成单纯的值输出。
int print_ksym(off_t addr){
ffff800000800f65:	f3 0f 1e fa          	endbr64 
ffff800000800f69:	55                   	push   rbp
ffff800000800f6a:	48 89 e5             	mov    rbp,rsp
ffff800000800f6d:	41 57                	push   r15
ffff800000800f6f:	53                   	push   rbx
ffff800000800f70:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff800000800f74:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000800f74 <print_ksym+0xf>
ffff800000800f7b:	49 bb dc ff 11 00 00 	movabs r11,0x11ffdc
ffff800000800f82:	00 00 00 
ffff800000800f85:	4c 01 db             	add    rbx,r11
ffff800000800f88:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:272
    ksym *ks=get_ksym(addr);
ffff800000800f8f:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000800f96:	48 89 c7             	mov    rdi,rax
ffff800000800f99:	49 89 df             	mov    r15,rbx
ffff800000800f9c:	48 b8 74 ff ed ff ff 	movabs rax,0xffffffffffedff74
ffff800000800fa3:	ff ff ff 
ffff800000800fa6:	48 01 d8             	add    rax,rbx
ffff800000800fa9:	ff d0                	call   rax
ffff800000800fab:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:273
    if(!ks){
ffff800000800faf:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff800000800fb4:	75 3c                	jne    ffff800000800ff2 <print_ksym+0x8d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:274
        comprintf("%l\n",addr); 
ffff800000800fb6:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000800fbd:	48 89 c6             	mov    rsi,rax
ffff800000800fc0:	48 b8 b0 d3 ff ff ff 	movabs rax,0xffffffffffffd3b0
ffff800000800fc7:	ff ff ff 
ffff800000800fca:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000800fce:	48 89 c7             	mov    rdi,rax
ffff800000800fd1:	49 89 df             	mov    r15,rbx
ffff800000800fd4:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800fd9:	48 ba b3 1c ef ff ff 	movabs rdx,0xffffffffffef1cb3
ffff800000800fe0:	ff ff ff 
ffff800000800fe3:	48 01 da             	add    rdx,rbx
ffff800000800fe6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:275
        return 0;
ffff800000800fe8:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800fed:	e9 8c 00 00 00       	jmp    ffff80000080107e <print_ksym+0x119>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:278
    }else{
        char buf[100];
        memcpy(buf,ks+1,ks->namelen);
ffff800000800ff2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800ff6:	8b 40 09             	mov    eax,DWORD PTR [rax+0x9]
ffff800000800ff9:	48 63 d0             	movsxd rdx,eax
ffff800000800ffc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801000:	48 8d 48 0d          	lea    rcx,[rax+0xd]
ffff800000801004:	48 8d 45 80          	lea    rax,[rbp-0x80]
ffff800000801008:	48 89 ce             	mov    rsi,rcx
ffff80000080100b:	48 89 c7             	mov    rdi,rax
ffff80000080100e:	49 89 df             	mov    r15,rbx
ffff800000801011:	48 b8 53 21 ef ff ff 	movabs rax,0xffffffffffef2153
ffff800000801018:	ff ff ff 
ffff80000080101b:	48 01 d8             	add    rax,rbx
ffff80000080101e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:279
        buf[ks->namelen]=0;
ffff800000801020:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801024:	8b 40 09             	mov    eax,DWORD PTR [rax+0x9]
ffff800000801027:	48 98                	cdqe   
ffff800000801029:	c6 44 05 80 00       	mov    BYTE PTR [rbp+rax*1-0x80],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:280
        comprintf("%l %s:%l\n",ks->addr,buf,addr-ks->addr);
ffff80000080102e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801032:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000801035:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080103c:	48 29 d0             	sub    rax,rdx
ffff80000080103f:	48 89 c1             	mov    rcx,rax
ffff800000801042:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801046:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801049:	48 8d 55 80          	lea    rdx,[rbp-0x80]
ffff80000080104d:	48 89 c6             	mov    rsi,rax
ffff800000801050:	48 b8 b4 d3 ff ff ff 	movabs rax,0xffffffffffffd3b4
ffff800000801057:	ff ff ff 
ffff80000080105a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080105e:	48 89 c7             	mov    rdi,rax
ffff800000801061:	49 89 df             	mov    r15,rbx
ffff800000801064:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801069:	49 b8 b3 1c ef ff ff 	movabs r8,0xffffffffffef1cb3
ffff800000801070:	ff ff ff 
ffff800000801073:	49 01 d8             	add    r8,rbx
ffff800000801076:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:281
        return 1;
ffff800000801079:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:283 (discriminator 1)
    }
}
ffff80000080107e:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff800000801082:	5b                   	pop    rbx
ffff800000801083:	41 5f                	pop    r15
ffff800000801085:	5d                   	pop    rbp
ffff800000801086:	c3                   	ret    

ffff800000801087 <backtrace>:
backtrace():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:284
void backtrace(off_t* ret_stack){
ffff800000801087:	f3 0f 1e fa          	endbr64 
ffff80000080108b:	55                   	push   rbp
ffff80000080108c:	48 89 e5             	mov    rbp,rsp
ffff80000080108f:	41 57                	push   r15
ffff800000801091:	53                   	push   rbx
ffff800000801092:	48 83 ec 20          	sub    rsp,0x20
ffff800000801096:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000801096 <backtrace+0xf>
ffff80000080109d:	49 bb ba fe 11 00 00 	movabs r11,0x11feba
ffff8000008010a4:	00 00 00 
ffff8000008010a7:	4c 01 db             	add    rbx,r11
ffff8000008010aa:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:285
    asm volatile("mov %%rbp,%0":"=m"(ret_stack));
ffff8000008010ae:	48 89 6d d8          	mov    QWORD PTR [rbp-0x28],rbp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:286
    ret_stack=ret_stack[0];
ffff8000008010b2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008010b6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008010b9:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:287
    off_t addr=ret_stack[2];//第一级返回函数地址
ffff8000008010bd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008010c1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008010c5:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:288
    comprintf("Backtrace:\n");
ffff8000008010c9:	48 b8 be d3 ff ff ff 	movabs rax,0xffffffffffffd3be
ffff8000008010d0:	ff ff ff 
ffff8000008010d3:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008010d7:	48 89 c7             	mov    rdi,rax
ffff8000008010da:	49 89 df             	mov    r15,rbx
ffff8000008010dd:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008010e2:	48 ba b3 1c ef ff ff 	movabs rdx,0xffffffffffef1cb3
ffff8000008010e9:	ff ff ff 
ffff8000008010ec:	48 01 da             	add    rdx,rbx
ffff8000008010ef:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:289
    print_ksym(addr);
ffff8000008010f1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008010f5:	48 89 c7             	mov    rdi,rax
ffff8000008010f8:	49 89 df             	mov    r15,rbx
ffff8000008010fb:	48 b8 15 00 ee ff ff 	movabs rax,0xffffffffffee0015
ffff800000801102:	ff ff ff 
ffff800000801105:	48 01 d8             	add    rax,rbx
ffff800000801108:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:291
    //回到用户栈，回溯
    ret_stack=ret_stack[0];
ffff80000080110a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080110e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801111:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:292
    for (int i = 0; i < 10;i++)
ffff800000801115:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080111c:	eb 42                	jmp    ffff800000801160 <backtrace+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:294
    {
        print_ksym(ret_stack[1]);
ffff80000080111e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801122:	48 83 c0 08          	add    rax,0x8
ffff800000801126:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801129:	48 89 c7             	mov    rdi,rax
ffff80000080112c:	49 89 df             	mov    r15,rbx
ffff80000080112f:	48 b8 15 00 ee ff ff 	movabs rax,0xffffffffffee0015
ffff800000801136:	ff ff ff 
ffff800000801139:	48 01 d8             	add    rax,rbx
ffff80000080113c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:295
        ret_stack=ret_stack[0];
ffff80000080113e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801142:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801145:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:296
        if(ret_stack<KNL_BASE)break;//超过栈顶
ffff800000801149:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080114d:	48 ba ff ff ff ff ff 	movabs rdx,0xffff7fffffffffff
ffff800000801154:	7f ff ff 
ffff800000801157:	48 39 d0             	cmp    rax,rdx
ffff80000080115a:	76 0c                	jbe    ffff800000801168 <backtrace+0xe1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:292 (discriminator 2)
    for (int i = 0; i < 10;i++)
ffff80000080115c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:292 (discriminator 1)
ffff800000801160:	83 7d ec 09          	cmp    DWORD PTR [rbp-0x14],0x9
ffff800000801164:	7e b8                	jle    ffff80000080111e <backtrace+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:300
    }
    

ffff800000801166:	eb 01                	jmp    ffff800000801169 <backtrace+0xe2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:296
        if(ret_stack<KNL_BASE)break;//超过栈顶
ffff800000801168:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:300
ffff800000801169:	90                   	nop
ffff80000080116a:	48 83 c4 20          	add    rsp,0x20
ffff80000080116e:	5b                   	pop    rbx
ffff80000080116f:	41 5f                	pop    r15
ffff800000801171:	5d                   	pop    rbp
ffff800000801172:	c3                   	ret    

ffff800000801173 <main>:
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:24
#include "ramdisk.h"
#include "ramfs.h"

int manage_proc_lock=1;
void main(unsigned int magic,void* addr)
{
ffff800000801173:	f3 0f 1e fa          	endbr64 
ffff800000801177:	55                   	push   rbp
ffff800000801178:	48 89 e5             	mov    rbp,rsp
ffff80000080117b:	41 57                	push   r15
ffff80000080117d:	53                   	push   rbx
ffff80000080117e:	48 81 ec 00 01 00 00 	sub    rsp,0x100
ffff800000801185:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000801185 <main+0x12>
ffff80000080118c:	49 bb cb fd 11 00 00 	movabs r11,0x11fdcb
ffff800000801193:	00 00 00 
ffff800000801196:	4c 01 db             	add    rbx,r11
ffff800000801199:	89 bd fc fe ff ff    	mov    DWORD PTR [rbp-0x104],edi
ffff80000080119f:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:26

    struct multiboot_header* mbi=0ul;
ffff8000008011a6:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff8000008011ad:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:27
    mbi=(struct multiboot_header*)addr;
ffff8000008011ae:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff8000008011b5:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:28
    init_logging();
ffff8000008011b9:	49 89 df             	mov    r15,rbx
ffff8000008011bc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008011c1:	48 ba a4 08 ee ff ff 	movabs rdx,0xffffffffffee08a4
ffff8000008011c8:	ff ff ff 
ffff8000008011cb:	48 01 da             	add    rdx,rbx
ffff8000008011ce:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:38
    }
    //获取tags
    struct multiboot_tag *tag;

    //先初始化串口，保证输出最基本的调试信息
    init_com(PORT_COM1);
ffff8000008011d0:	bf f8 03 00 00       	mov    edi,0x3f8
ffff8000008011d5:	49 89 df             	mov    r15,rbx
ffff8000008011d8:	48 b8 87 1a ef ff ff 	movabs rax,0xffffffffffef1a87
ffff8000008011df:	ff ff ff 
ffff8000008011e2:	48 01 d8             	add    rax,rbx
ffff8000008011e5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:39
    comprintf("\rgamessis os loaded.\r\n");
ffff8000008011e7:	48 b8 d0 d3 ff ff ff 	movabs rax,0xffffffffffffd3d0
ffff8000008011ee:	ff ff ff 
ffff8000008011f1:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008011f5:	48 89 c7             	mov    rdi,rax
ffff8000008011f8:	49 89 df             	mov    r15,rbx
ffff8000008011fb:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801200:	48 ba b3 1c ef ff ff 	movabs rdx,0xffffffffffef1cb3
ffff800000801207:	ff ff ff 
ffff80000080120a:	48 01 da             	add    rdx,rbx
ffff80000080120d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:41
	unsigned size;
    size = *(unsigned long*)addr;
ffff80000080120f:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000801216:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801219:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:43
//    //printf("Announced mbi size 0x%x\n", size);
	for (tag = (struct multiboot_tag *)(addr + 8);
ffff80000080121c:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000801223:	48 83 c0 08          	add    rax,0x8
ffff800000801227:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080122b:	e9 93 02 00 00       	jmp    ffff8000008014c3 <main+0x350>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:48
		 tag->type != MULTIBOOT_TAG_TYPE_END;
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
	{
		//printf("Tag 0x%x, Size 0x%x\n", tag->type, tag->size);
		switch (tag->type)
ffff800000801230:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801234:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801236:	83 f8 08             	cmp    eax,0x8
ffff800000801239:	0f 87 71 02 00 00    	ja     ffff8000008014b0 <main+0x33d>
ffff80000080123f:	89 c0                	mov    eax,eax
ffff800000801241:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801248:	00 
ffff800000801249:	48 8d 05 30 d1 11 00 	lea    rax,[rip+0x11d130]        # ffff80000091e380 <.LC4+0x11>
ffff800000801250:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000801254:	48 8d 15 25 d1 11 00 	lea    rdx,[rip+0x11d125]        # ffff80000091e380 <.LC4+0x11>
ffff80000080125b:	48 01 d0             	add    rax,rdx
ffff80000080125e:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:66
			break;
		case MULTIBOOT_TAG_TYPE_BASIC_MEMINFO:
			//printf("mem_lower = %uKB, mem_upper = %uKB\n",
//				   ((struct multiboot_tag_basic_meminfo *)tag)->mem_lower,
//				   ((struct multiboot_tag_basic_meminfo *)tag)->mem_upper);
			set_high_mem_base(((struct multiboot_tag_basic_meminfo *)tag)->mem_lower);
ffff800000801261:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801265:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000801268:	89 c7                	mov    edi,eax
ffff80000080126a:	49 89 df             	mov    r15,rbx
ffff80000080126d:	48 b8 8e 11 ee ff ff 	movabs rax,0xffffffffffee118e
ffff800000801274:	ff ff ff 
ffff800000801277:	48 01 d8             	add    rax,rbx
ffff80000080127a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:67
			break;
ffff80000080127c:	e9 2f 02 00 00       	jmp    ffff8000008014b0 <main+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:80

			break;
		case MULTIBOOT_TAG_TYPE_MMAP:
		{
			//printf("mmap\n");
            for (multiboot_memory_map_t * mmap = ((struct multiboot_tag_mmap *)tag)->entries;
ffff800000801281:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801285:	48 83 c0 10          	add    rax,0x10
ffff800000801289:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff80000080128d:	eb 44                	jmp    ffff8000008012d3 <main+0x160>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:84
                    (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
                    mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
            {
                set_mem_area(mmap->addr,mmap->len,mmap->type);
ffff80000080128f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801293:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000801296:	89 c2                	mov    edx,eax
ffff800000801298:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080129c:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff8000008012a0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008012a4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008012a7:	48 89 ce             	mov    rsi,rcx
ffff8000008012aa:	48 89 c7             	mov    rdi,rax
ffff8000008012ad:	49 89 df             	mov    r15,rbx
ffff8000008012b0:	48 b8 c3 11 ee ff ff 	movabs rax,0xffffffffffee11c3
ffff8000008012b7:	ff ff ff 
ffff8000008012ba:	48 01 d8             	add    rax,rbx
ffff8000008012bd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:82
                    mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
ffff8000008012bf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008012c3:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008012c6:	89 c2                	mov    edx,eax
ffff8000008012c8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008012cc:	48 01 d0             	add    rax,rdx
ffff8000008012cf:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:81
                    (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
ffff8000008012d3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008012d7:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008012da:	89 c2                	mov    edx,eax
ffff8000008012dc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008012e0:	48 01 d0             	add    rax,rdx
ffff8000008012e3:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff8000008012e7:	72 a6                	jb     ffff80000080128f <main+0x11c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:88
            }

		}
		break;
ffff8000008012e9:	e9 c2 01 00 00       	jmp    ffff8000008014b0 <main+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:93
		case MULTIBOOT_TAG_TYPE_FRAMEBUFFER:
		{
			multiboot_uint32_t color;
			unsigned i;
			struct multiboot_tag_framebuffer *tagfb = (struct multiboot_tag_framebuffer *)tag;
ffff8000008012ee:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008012f2:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:94
			void *fb = (void *) FRAMEBUFFER_ADDR;
ffff8000008012f6:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff8000008012fd:	80 ff ff 
ffff800000801300:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:95
			set_framebuffer(*tagfb);
ffff800000801304:	48 83 ec 08          	sub    rsp,0x8
ffff800000801308:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080130c:	ff 70 20             	push   QWORD PTR [rax+0x20]
ffff80000080130f:	ff 70 18             	push   QWORD PTR [rax+0x18]
ffff800000801312:	ff 70 10             	push   QWORD PTR [rax+0x10]
ffff800000801315:	ff 70 08             	push   QWORD PTR [rax+0x8]
ffff800000801318:	ff 30                	push   QWORD PTR [rax]
ffff80000080131a:	49 89 df             	mov    r15,rbx
ffff80000080131d:	48 b8 aa 99 ee ff ff 	movabs rax,0xffffffffffee99aa
ffff800000801324:	ff ff ff 
ffff800000801327:	48 01 d8             	add    rax,rbx
ffff80000080132a:	ff d0                	call   rax
ffff80000080132c:	48 83 c4 30          	add    rsp,0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:97

			switch (tagfb->common.framebuffer_type)
ffff800000801330:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801334:	0f b6 40 1d          	movzx  eax,BYTE PTR [rax+0x1d]
ffff800000801338:	0f b6 c0             	movzx  eax,al
ffff80000080133b:	83 f8 02             	cmp    eax,0x2
ffff80000080133e:	0f 84 5a 01 00 00    	je     ffff80000080149e <main+0x32b>
ffff800000801344:	83 f8 02             	cmp    eax,0x2
ffff800000801347:	0f 8f 5a 01 00 00    	jg     ffff8000008014a7 <main+0x334>
ffff80000080134d:	85 c0                	test   eax,eax
ffff80000080134f:	74 0e                	je     ffff80000080135f <main+0x1ec>
ffff800000801351:	83 f8 01             	cmp    eax,0x1
ffff800000801354:	0f 84 15 01 00 00    	je     ffff80000080146f <main+0x2fc>
ffff80000080135a:	e9 48 01 00 00       	jmp    ffff8000008014a7 <main+0x334>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:104
			case MULTIBOOT_FRAMEBUFFER_TYPE_INDEXED:
			{
				unsigned best_distance, distance;
				struct multiboot_color *palette;

				palette = tagfb->framebuffer_palette;
ffff80000080135f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801363:	48 83 c0 22          	add    rax,0x22
ffff800000801367:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:106

				color = 0;
ffff80000080136b:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:107
				best_distance = 4 * 256 * 256;
ffff800000801372:	c7 45 d8 00 00 04 00 	mov    DWORD PTR [rbp-0x28],0x40000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109

				for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
ffff800000801379:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff800000801380:	e9 d4 00 00 00       	jmp    ffff800000801459 <main+0x2e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:111
				{
					distance = (0xff - palette[i].blue) * (0xff - palette[i].blue) + palette[i].red * palette[i].red + palette[i].green * palette[i].green;
ffff800000801385:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801388:	48 89 d0             	mov    rax,rdx
ffff80000080138b:	48 01 c0             	add    rax,rax
ffff80000080138e:	48 01 c2             	add    rdx,rax
ffff800000801391:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801395:	48 01 d0             	add    rax,rdx
ffff800000801398:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffff80000080139c:	0f b6 c0             	movzx  eax,al
ffff80000080139f:	ba ff 00 00 00       	mov    edx,0xff
ffff8000008013a4:	89 d1                	mov    ecx,edx
ffff8000008013a6:	29 c1                	sub    ecx,eax
ffff8000008013a8:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008013ab:	48 89 d0             	mov    rax,rdx
ffff8000008013ae:	48 01 c0             	add    rax,rax
ffff8000008013b1:	48 01 c2             	add    rdx,rax
ffff8000008013b4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008013b8:	48 01 d0             	add    rax,rdx
ffff8000008013bb:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffff8000008013bf:	0f b6 d0             	movzx  edx,al
ffff8000008013c2:	b8 ff 00 00 00       	mov    eax,0xff
ffff8000008013c7:	29 d0                	sub    eax,edx
ffff8000008013c9:	89 ce                	mov    esi,ecx
ffff8000008013cb:	0f af f0             	imul   esi,eax
ffff8000008013ce:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008013d1:	48 89 d0             	mov    rax,rdx
ffff8000008013d4:	48 01 c0             	add    rax,rax
ffff8000008013d7:	48 01 c2             	add    rdx,rax
ffff8000008013da:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008013de:	48 01 d0             	add    rax,rdx
ffff8000008013e1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008013e4:	0f b6 c8             	movzx  ecx,al
ffff8000008013e7:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008013ea:	48 89 d0             	mov    rax,rdx
ffff8000008013ed:	48 01 c0             	add    rax,rax
ffff8000008013f0:	48 01 c2             	add    rdx,rax
ffff8000008013f3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008013f7:	48 01 d0             	add    rax,rdx
ffff8000008013fa:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008013fd:	0f b6 c0             	movzx  eax,al
ffff800000801400:	0f af c1             	imul   eax,ecx
ffff800000801403:	01 c6                	add    esi,eax
ffff800000801405:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801408:	48 89 d0             	mov    rax,rdx
ffff80000080140b:	48 01 c0             	add    rax,rax
ffff80000080140e:	48 01 c2             	add    rdx,rax
ffff800000801411:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801415:	48 01 d0             	add    rax,rdx
ffff800000801418:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffff80000080141c:	0f b6 c8             	movzx  ecx,al
ffff80000080141f:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801422:	48 89 d0             	mov    rax,rdx
ffff800000801425:	48 01 c0             	add    rax,rax
ffff800000801428:	48 01 c2             	add    rdx,rax
ffff80000080142b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080142f:	48 01 d0             	add    rax,rdx
ffff800000801432:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffff800000801436:	0f b6 c0             	movzx  eax,al
ffff800000801439:	0f af c1             	imul   eax,ecx
ffff80000080143c:	01 f0                	add    eax,esi
ffff80000080143e:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:112
					if (distance < best_distance)
ffff800000801441:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000801444:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000801447:	73 0c                	jae    ffff800000801455 <main+0x2e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:114
					{
						color = i;
ffff800000801449:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080144c:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:115
						best_distance = distance;
ffff80000080144f:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000801452:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109 (discriminator 2)
				for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
ffff800000801455:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109 (discriminator 1)
ffff800000801459:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080145d:	0f b7 40 20          	movzx  eax,WORD PTR [rax+0x20]
ffff800000801461:	0f b7 c0             	movzx  eax,ax
ffff800000801464:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000801467:	0f 82 18 ff ff ff    	jb     ffff800000801385 <main+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:119
					}
				}
			}
			break;
ffff80000080146d:	eb 40                	jmp    ffff8000008014af <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:122

			case MULTIBOOT_FRAMEBUFFER_TYPE_RGB:
				color = ((1 << tagfb->framebuffer_blue_mask_size) - 1) << tagfb->framebuffer_blue_field_position;
ffff80000080146f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801473:	0f b6 40 25          	movzx  eax,BYTE PTR [rax+0x25]
ffff800000801477:	0f b6 c0             	movzx  eax,al
ffff80000080147a:	ba 01 00 00 00       	mov    edx,0x1
ffff80000080147f:	89 c1                	mov    ecx,eax
ffff800000801481:	d3 e2                	shl    edx,cl
ffff800000801483:	89 d0                	mov    eax,edx
ffff800000801485:	8d 50 ff             	lea    edx,[rax-0x1]
ffff800000801488:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080148c:	0f b6 40 24          	movzx  eax,BYTE PTR [rax+0x24]
ffff800000801490:	0f b6 c0             	movzx  eax,al
ffff800000801493:	89 c1                	mov    ecx,eax
ffff800000801495:	d3 e2                	shl    edx,cl
ffff800000801497:	89 d0                	mov    eax,edx
ffff800000801499:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:123
				break;
ffff80000080149c:	eb 11                	jmp    ffff8000008014af <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:126

			case MULTIBOOT_FRAMEBUFFER_TYPE_EGA_TEXT:
				color = '\\' | 0x0100;
ffff80000080149e:	c7 45 b4 5c 01 00 00 	mov    DWORD PTR [rbp-0x4c],0x15c
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:127
				break;
ffff8000008014a5:	eb 08                	jmp    ffff8000008014af <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:130

			default:
				color = 0xffffffff;
ffff8000008014a7:	c7 45 b4 ff ff ff ff 	mov    DWORD PTR [rbp-0x4c],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:131
				break;
ffff8000008014ae:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:134 (discriminator 1)
			}

			break;
ffff8000008014af:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:45
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
ffff8000008014b0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008014b4:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008014b7:	83 c0 07             	add    eax,0x7
ffff8000008014ba:	89 c0                	mov    eax,eax
ffff8000008014bc:	83 e0 f8             	and    eax,0xfffffff8
ffff8000008014bf:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:44
		 tag->type != MULTIBOOT_TAG_TYPE_END;
ffff8000008014c3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008014c7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008014c9:	85 c0                	test   eax,eax
ffff8000008014cb:	0f 85 5f fd ff ff    	jne    ffff800000801230 <main+0xbd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:138
		}
		}
	}
	tag = (struct multiboot_tag *)((multiboot_uint8_t *)tag + ((tag->size + 7) & ~7));
ffff8000008014d1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008014d5:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008014d8:	83 c0 07             	add    eax,0x7
ffff8000008014db:	89 c0                	mov    eax,eax
ffff8000008014dd:	83 e0 f8             	and    eax,0xfffffff8
ffff8000008014e0:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:139
    init_memory();
ffff8000008014e4:	49 89 df             	mov    r15,rbx
ffff8000008014e7:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008014ec:	48 ba 44 19 ee ff ff 	movabs rdx,0xffffffffffee1944
ffff8000008014f3:	ff ff ff 
ffff8000008014f6:	48 01 da             	add    rdx,rbx
ffff8000008014f9:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:140
    init_framebuffer();
ffff8000008014fb:	49 89 df             	mov    r15,rbx
ffff8000008014fe:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801503:	48 ba c4 96 ee ff ff 	movabs rdx,0xffffffffffee96c4
ffff80000080150a:	ff ff ff 
ffff80000080150d:	48 01 da             	add    rdx,rbx
ffff800000801510:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:142
	//printf("Total mbi size 0x%x\n", (unsigned)tag - addr);
	char disk_count=*(char*)0x475;
ffff800000801512:	b8 75 04 00 00       	mov    eax,0x475
ffff800000801517:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080151a:	88 45 cb             	mov    BYTE PTR [rbp-0x35],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:144
	//printf("disk count:%d\n",disk_count);
    init_font();
ffff80000080151d:	49 89 df             	mov    r15,rbx
ffff800000801520:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801525:	48 ba f5 97 ee ff ff 	movabs rdx,0xffffffffffee97f5
ffff80000080152c:	ff ff ff 
ffff80000080152f:	48 01 da             	add    rdx,rbx
ffff800000801532:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:147
    //初始化区域
    //fill_rect(0,0,100,100,255);
    print("gamessis os loaded.\nkernel:>");
ffff800000801534:	48 b8 e7 d3 ff ff ff 	movabs rax,0xffffffffffffd3e7
ffff80000080153b:	ff ff ff 
ffff80000080153e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801542:	48 89 c7             	mov    rdi,rax
ffff800000801545:	49 89 df             	mov    r15,rbx
ffff800000801548:	48 b8 11 9f ee ff ff 	movabs rax,0xffffffffffee9f11
ffff80000080154f:	ff ff ff 
ffff800000801552:	48 01 d8             	add    rax,rbx
ffff800000801555:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:148
    init_int();
ffff800000801557:	49 89 df             	mov    r15,rbx
ffff80000080155a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080155f:	48 ba b0 f0 ed ff ff 	movabs rdx,0xffffffffffedf0b0
ffff800000801566:	ff ff ff 
ffff800000801569:	48 01 da             	add    rdx,rbx
ffff80000080156c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:149
    print("int loaded.\n");
ffff80000080156e:	48 b8 04 d4 ff ff ff 	movabs rax,0xffffffffffffd404
ffff800000801575:	ff ff ff 
ffff800000801578:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080157c:	48 89 c7             	mov    rdi,rax
ffff80000080157f:	49 89 df             	mov    r15,rbx
ffff800000801582:	48 b8 11 9f ee ff ff 	movabs rax,0xffffffffffee9f11
ffff800000801589:	ff ff ff 
ffff80000080158c:	48 01 d8             	add    rax,rbx
ffff80000080158f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:151
//    set_tss(0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000);
	init_paging();
ffff800000801591:	49 89 df             	mov    r15,rbx
ffff800000801594:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801599:	48 ba 57 11 ee ff ff 	movabs rdx,0xffffffffffee1157
ffff8000008015a0:	ff ff ff 
ffff8000008015a3:	48 01 da             	add    rdx,rbx
ffff8000008015a6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:152
 	init_gdt();
ffff8000008015a8:	49 89 df             	mov    r15,rbx
ffff8000008015ab:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008015b0:	48 ba 4d 72 ee ff ff 	movabs rdx,0xffffffffffee724d
ffff8000008015b7:	ff ff ff 
ffff8000008015ba:	48 01 da             	add    rdx,rbx
ffff8000008015bd:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:154

	init_blkdev();
ffff8000008015bf:	49 89 df             	mov    r15,rbx
ffff8000008015c2:	48 b8 6f ca ee ff ff 	movabs rax,0xffffffffffeeca6f
ffff8000008015c9:	ff ff ff 
ffff8000008015cc:	48 01 d8             	add    rax,rbx
ffff8000008015cf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:155
	init_blkbuf();
ffff8000008015d1:	49 89 df             	mov    r15,rbx
ffff8000008015d4:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008015d9:	48 ba c2 ca ee ff ff 	movabs rdx,0xffffffffffeecac2
ffff8000008015e0:	ff ff ff 
ffff8000008015e3:	48 01 da             	add    rdx,rbx
ffff8000008015e6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:157
	// init_disk();
    init_ramdisk();
ffff8000008015e8:	49 89 df             	mov    r15,rbx
ffff8000008015eb:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008015f0:	48 ba 3c c5 ee ff ff 	movabs rdx,0xffffffffffeec53c
ffff8000008015f7:	ff ff ff 
ffff8000008015fa:	48 01 da             	add    rdx,rbx
ffff8000008015fd:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:158
    init_rootfs();
ffff8000008015ff:	49 89 df             	mov    r15,rbx
ffff800000801602:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801607:	48 ba dd aa ee ff ff 	movabs rdx,0xffffffffffeeaadd
ffff80000080160e:	ff ff ff 
ffff800000801611:	48 01 da             	add    rdx,rbx
ffff800000801614:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:159
    init_devfs();
ffff800000801616:	49 89 df             	mov    r15,rbx
ffff800000801619:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080161e:	48 ba cc 29 ee ff ff 	movabs rdx,0xffffffffffee29cc
ffff800000801625:	ff ff ff 
ffff800000801628:	48 01 da             	add    rdx,rbx
ffff80000080162b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:161

    init_proc();
ffff80000080162d:	49 89 df             	mov    r15,rbx
ffff800000801630:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801635:	48 ba 9c 37 ee ff ff 	movabs rdx,0xffffffffffee379c
ffff80000080163c:	ff ff ff 
ffff80000080163f:	48 01 da             	add    rdx,rbx
ffff800000801642:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:163
	// init_ramfs();
  	DISK1_FAT32_FS_init();
ffff800000801644:	49 89 df             	mov    r15,rbx
ffff800000801647:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080164c:	48 ba 40 12 ef ff ff 	movabs rdx,0xffffffffffef1240
ffff800000801653:	ff ff ff 
ffff800000801656:	48 01 da             	add    rdx,rbx
ffff800000801659:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:167

    //自带驱动
    //init_tty();
    init_kb();
ffff80000080165b:	49 89 df             	mov    r15,rbx
ffff80000080165e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801663:	48 ba f8 d6 ee ff ff 	movabs rdx,0xffffffffffeed6f8
ffff80000080166a:	ff ff ff 
ffff80000080166d:	48 01 da             	add    rdx,rbx
ffff800000801670:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:169
//    init_disk();
    sti();
ffff800000801672:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:170
    manage_proc_lock=0;
ffff800000801673:	48 b8 00 fd ff ff ff 	movabs rax,0xfffffffffffffd00
ffff80000080167a:	ff ff ff 
ffff80000080167d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000801681:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:173


    move_to_user_mode();
ffff800000801687:	49 89 df             	mov    r15,rbx
ffff80000080168a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080168f:	48 ba cd 2a ef ff ff 	movabs rdx,0xffffffffffef2acd
ffff800000801696:	ff ff ff 
ffff800000801699:	48 01 da             	add    rdx,rbx
ffff80000080169c:	ff d2                	call   rdx
ffff80000080169e:	48 c7 45 98 1b 00 00 	mov    QWORD PTR [rbp-0x68],0x1b
ffff8000008016a5:	00 
ffff8000008016a6:	48 c7 45 90 00 00 00 	mov    QWORD PTR [rbp-0x70],0x0
ffff8000008016ad:	00 
ffff8000008016ae:	48 c7 45 88 00 00 00 	mov    QWORD PTR [rbp-0x78],0x0
ffff8000008016b5:	00 
ffff8000008016b6:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
ffff8000008016bd:	00 
ffff8000008016be:	48 c7 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],0x0
ffff8000008016c5:	00 00 00 00 
ffff8000008016c9:	48 c7 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],0x0
ffff8000008016d0:	00 00 00 00 
ffff8000008016d4:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x0
ffff8000008016db:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:63

#define	SYSTEM_REBOOT	(1UL << 0)
#define	SYSTEM_POWEROFF	(1UL << 1)

__attribute__((__always_inline__))inline int do_syscall(long func,long a1,long a2,long a3,long a4,long a5,long a6){
        asm volatile(".byte 0x48\n"
ffff8000008016df:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008016e3:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
ffff8000008016e7:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
ffff8000008016eb:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff8000008016ef:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
ffff8000008016f6:	4c 8b 85 70 ff ff ff 	mov    r8,QWORD PTR [rbp-0x90]
ffff8000008016fd:	4c 8b 8d 68 ff ff ff 	mov    r9,QWORD PTR [rbp-0x98]
ffff800000801704:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:65
                 "syscall"::"a"(func),"D"(a1),"S"(a2),"d"(a3),"c"(a4),"r"(a5),"r"(a6));
        long ret=0;
ffff800000801707:	48 c7 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],0x0
ffff80000080170e:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:66
        asm volatile("mov %%rax,%0"::"m"(ret));
ffff800000801712:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:67
        return ret;
ffff800000801719:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:174
    if(do_syscall(SYSCALL_FORK,0,0,0,0,0,0)==0){
ffff800000801720:	85 c0                	test   eax,eax
ffff800000801722:	0f 85 ca 00 00 00    	jne    ffff8000008017f2 <main+0x67f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:175
        char *argv[]={"/mnt/test.elf","gamessis os"};
ffff800000801728:	48 b8 11 d4 ff ff ff 	movabs rax,0xffffffffffffd411
ffff80000080172f:	ff ff ff 
ffff800000801732:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801736:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffff80000080173d:	48 b8 1f d4 ff ff ff 	movabs rax,0xffffffffffffd41f
ffff800000801744:	ff ff ff 
ffff800000801747:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080174b:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:176
        do_syscall(SYSCALL_EXECVE, (long) "/mnt/test.elf", 2, (long) &argv[0], 0, 0, 0);
ffff800000801752:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
ffff800000801759:	48 ba 11 d4 ff ff ff 	movabs rdx,0xffffffffffffd411
ffff800000801760:	ff ff ff 
ffff800000801763:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000801767:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x1c
ffff80000080176e:	1c 00 00 00 
ffff800000801772:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
ffff800000801779:	48 c7 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],0x2
ffff800000801780:	02 00 00 00 
ffff800000801784:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
ffff80000080178b:	48 c7 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],0x0
ffff800000801792:	00 00 00 00 
ffff800000801796:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
ffff80000080179d:	00 00 00 00 
ffff8000008017a1:	48 c7 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],0x0
ffff8000008017a8:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:63
        asm volatile(".byte 0x48\n"
ffff8000008017ac:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff8000008017b3:	48 8b bd 58 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa8]
ffff8000008017ba:	48 8b b5 50 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb0]
ffff8000008017c1:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
ffff8000008017c8:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
ffff8000008017cf:	4c 8b 85 38 ff ff ff 	mov    r8,QWORD PTR [rbp-0xc8]
ffff8000008017d6:	4c 8b 8d 30 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd0]
ffff8000008017dd:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:65
        long ret=0;
ffff8000008017e0:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x0
ffff8000008017e7:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:66
        asm volatile("mov %%rax,%0"::"m"(ret));
ffff8000008017eb:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:187 (discriminator 3)
//    init_fat16();

//    extern device *dev_tree[];
//    blk_dev* p=dev_tree[DEVTREE_BLKDEVI];
//    mount_fs("fat16",p->par,vmalloc());
    while (1)
ffff8000008017f2:	eb fe                	jmp    ffff8000008017f2 <main+0x67f>

ffff8000008017f4 <init_logging>:
init_logging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:12
static unsigned char* video;
static int xpos,ypos;
/* 将整数 D 转换为字符串并保存在 BUF 中。如果 BASE 为 'd'，则 D 为十进制，如果 BASE 为 'x'，则 D 为十六进制。 */

int init_logging()
{
ffff8000008017f4:	f3 0f 1e fa          	endbr64 
ffff8000008017f8:	55                   	push   rbp
ffff8000008017f9:	48 89 e5             	mov    rbp,rsp
ffff8000008017fc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008017fc <init_logging+0x8>
ffff800000801803:	49 bb 54 f7 11 00 00 	movabs r11,0x11f754
ffff80000080180a:	00 00 00 
ffff80000080180d:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:13
    video=0xb8000;
ffff800000801810:	48 ba b0 f0 ad ff ff 	movabs rdx,0xffffffffffadf0b0
ffff800000801817:	ff ff ff 
ffff80000080181a:	48 c7 04 10 00 80 0b 	mov    QWORD PTR [rax+rdx*1],0xb8000
ffff800000801821:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:14
    xpos=0;
ffff800000801822:	48 ba b8 f0 ad ff ff 	movabs rdx,0xffffffffffadf0b8
ffff800000801829:	ff ff ff 
ffff80000080182c:	c7 04 10 00 00 00 00 	mov    DWORD PTR [rax+rdx*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:15
    ypos=0;
ffff800000801833:	48 ba bc f0 ad ff ff 	movabs rdx,0xffffffffffadf0bc
ffff80000080183a:	ff ff ff 
ffff80000080183d:	c7 04 10 00 00 00 00 	mov    DWORD PTR [rax+rdx*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:16
}
ffff800000801844:	90                   	nop
ffff800000801845:	5d                   	pop    rbp
ffff800000801846:	c3                   	ret    

ffff800000801847 <itoa>:
itoa():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:19

void itoa (char *buf, int base, int d)
{
ffff800000801847:	f3 0f 1e fa          	endbr64 
ffff80000080184b:	55                   	push   rbp
ffff80000080184c:	48 89 e5             	mov    rbp,rsp
ffff80000080184f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080184f <itoa+0x8>
ffff800000801856:	49 bb 01 f7 11 00 00 	movabs r11,0x11f701
ffff80000080185d:	00 00 00 
ffff800000801860:	4c 01 d8             	add    rax,r11
ffff800000801863:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000801867:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
ffff80000080186a:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:20
    char *p = buf;
ffff80000080186d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000801871:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:22
    char *p1, *p2;
    unsigned long ud = d;
ffff800000801875:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff800000801878:	48 98                	cdqe   
ffff80000080187a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:23
    int divisor = 10;
ffff80000080187e:	c7 45 dc 0a 00 00 00 	mov    DWORD PTR [rbp-0x24],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26
 
    /* 如果指定了 %d 并且 D 是负数，在开始添上负号。 */
    if (base == 'd' && d < 0)
ffff800000801885:	83 7d c4 64          	cmp    DWORD PTR [rbp-0x3c],0x64
ffff800000801889:	75 27                	jne    ffff8000008018b2 <itoa+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26 (discriminator 1)
ffff80000080188b:	83 7d c0 00          	cmp    DWORD PTR [rbp-0x40],0x0
ffff80000080188f:	79 21                	jns    ffff8000008018b2 <itoa+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:28
    {
        *p++ = '-';
ffff800000801891:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000801895:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000801899:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff80000080189d:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:29
        buf++;
ffff8000008018a0:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:30
        ud = -d;
ffff8000008018a5:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff8000008018a8:	f7 d8                	neg    eax
ffff8000008018aa:	48 98                	cdqe   
ffff8000008018ac:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff8000008018b0:	eb 0d                	jmp    ffff8000008018bf <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:32
    }
    else if (base == 'x')
ffff8000008018b2:	83 7d c4 78          	cmp    DWORD PTR [rbp-0x3c],0x78
ffff8000008018b6:	75 07                	jne    ffff8000008018bf <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:33
        divisor = 16;
ffff8000008018b8:	c7 45 dc 10 00 00 00 	mov    DWORD PTR [rbp-0x24],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:38
 
    /* 用 DIVISOR 去除 UD 直到 UD == 0。 */
    do
    {
        int remainder = ud % divisor;
ffff8000008018bf:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008018c2:	48 63 c8             	movsxd rcx,eax
ffff8000008018c5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008018c9:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008018ce:	48 f7 f1             	div    rcx
ffff8000008018d1:	48 89 d0             	mov    rax,rdx
ffff8000008018d4:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40
 
        *p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
ffff8000008018d7:	83 7d d8 09          	cmp    DWORD PTR [rbp-0x28],0x9
ffff8000008018db:	7f 0a                	jg     ffff8000008018e7 <itoa+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 1)
ffff8000008018dd:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008018e0:	83 c0 30             	add    eax,0x30
ffff8000008018e3:	89 c1                	mov    ecx,eax
ffff8000008018e5:	eb 08                	jmp    ffff8000008018ef <itoa+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 2)
ffff8000008018e7:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008018ea:	83 c0 57             	add    eax,0x57
ffff8000008018ed:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 4)
ffff8000008018ef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008018f3:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff8000008018f7:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff8000008018fb:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:42 (discriminator 4)
    }
    while (ud /= divisor);
ffff8000008018fd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000801900:	48 63 f0             	movsxd rsi,eax
ffff800000801903:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801907:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080190c:	48 f7 f6             	div    rsi
ffff80000080190f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff800000801913:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff800000801918:	75 a5                	jne    ffff8000008018bf <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:45
 
    /* 在字符串尾添上终结符。 */
    *p = 0;
ffff80000080191a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080191e:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:48
 
    /* 反转 BUF。 */
    p1 = buf;
ffff800000801921:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000801925:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:49
    p2 = p - 1;
ffff800000801929:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080192d:	48 83 e8 01          	sub    rax,0x1
ffff800000801931:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
ffff800000801935:	eb 2b                	jmp    ffff800000801962 <itoa+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:52
    {
        char tmp = *p1;
ffff800000801937:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080193b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080193e:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:53
        *p1 = *p2;
ffff800000801941:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801945:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000801948:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080194c:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:54
        *p2 = tmp;
ffff80000080194e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801952:	0f b6 55 d7          	movzx  edx,BYTE PTR [rbp-0x29]
ffff800000801956:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:55
        p1++;
ffff800000801958:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:56
        p2--;
ffff80000080195d:	48 83 6d e8 01       	sub    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
ffff800000801962:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000801966:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff80000080196a:	72 cb                	jb     ffff800000801937 <itoa+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:58
    }
}
ffff80000080196c:	90                   	nop
ffff80000080196d:	90                   	nop
ffff80000080196e:	5d                   	pop    rbp
ffff80000080196f:	c3                   	ret    

ffff800000801970 <putchar>:
putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:62
 
/* 在屏幕上输出字符 C 。 */
void putchar (char c)
{
ffff800000801970:	f3 0f 1e fa          	endbr64 
ffff800000801974:	55                   	push   rbp
ffff800000801975:	48 89 e5             	mov    rbp,rsp
ffff800000801978:	41 57                	push   r15
ffff80000080197a:	48 83 ec 28          	sub    rsp,0x28
ffff80000080197e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080197e <putchar+0xe>
ffff800000801985:	49 bb d2 f5 11 00 00 	movabs r11,0x11f5d2
ffff80000080198c:	00 00 00 
ffff80000080198f:	4c 01 d8             	add    rax,r11
ffff800000801992:	89 fa                	mov    edx,edi
ffff800000801994:	88 55 dc             	mov    BYTE PTR [rbp-0x24],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:63
    char s[2]={c,'\0'};
ffff800000801997:	0f b6 55 dc          	movzx  edx,BYTE PTR [rbp-0x24]
ffff80000080199b:	88 55 ee             	mov    BYTE PTR [rbp-0x12],dl
ffff80000080199e:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:64
    print(s);
ffff8000008019a2:	48 8d 55 ee          	lea    rdx,[rbp-0x12]
ffff8000008019a6:	48 89 d7             	mov    rdi,rdx
ffff8000008019a9:	49 89 c7             	mov    r15,rax
ffff8000008019ac:	48 ba 11 9f ee ff ff 	movabs rdx,0xffffffffffee9f11
ffff8000008019b3:	ff ff ff 
ffff8000008019b6:	48 01 c2             	add    rdx,rax
ffff8000008019b9:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:82
    *(video + (xpos + ypos * COLUMNS) * 2 + 1) = ATTRIBUTE;
 
    xpos++;
    if (xpos >= COLUMNS)
        goto newline;
}
ffff8000008019bb:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008019bf:	c9                   	leave  
ffff8000008019c0:	c3                   	ret    

ffff8000008019c1 <printf>:
printf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:86
 
/* 格式化字符串并在屏幕上输出，就像 libc 函数 printf 一样。 */
void printf (const char *format,...)
{
ffff8000008019c1:	f3 0f 1e fa          	endbr64 
ffff8000008019c5:	55                   	push   rbp
ffff8000008019c6:	48 89 e5             	mov    rbp,rsp
ffff8000008019c9:	41 57                	push   r15
ffff8000008019cb:	53                   	push   rbx
ffff8000008019cc:	48 81 ec 00 01 00 00 	sub    rsp,0x100
ffff8000008019d3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008019d3 <printf+0x12>
ffff8000008019da:	49 bb 7d f5 11 00 00 	movabs r11,0x11f57d
ffff8000008019e1:	00 00 00 
ffff8000008019e4:	4c 01 db             	add    rbx,r11
ffff8000008019e7:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
ffff8000008019ee:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffff8000008019f5:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffff8000008019fc:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffff800000801a03:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffff800000801a0a:	4c 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r9
ffff800000801a11:	84 c0                	test   al,al
ffff800000801a13:	74 23                	je     ffff800000801a38 <printf+0x77>
ffff800000801a15:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
ffff800000801a1c:	0f 29 4d 80          	movaps XMMWORD PTR [rbp-0x80],xmm1
ffff800000801a20:	0f 29 55 90          	movaps XMMWORD PTR [rbp-0x70],xmm2
ffff800000801a24:	0f 29 5d a0          	movaps XMMWORD PTR [rbp-0x60],xmm3
ffff800000801a28:	0f 29 65 b0          	movaps XMMWORD PTR [rbp-0x50],xmm4
ffff800000801a2c:	0f 29 6d c0          	movaps XMMWORD PTR [rbp-0x40],xmm5
ffff800000801a30:	0f 29 75 d0          	movaps XMMWORD PTR [rbp-0x30],xmm6
ffff800000801a34:	0f 29 7d e0          	movaps XMMWORD PTR [rbp-0x20],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:87
    if(strlen(format)>=1024)
ffff800000801a38:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000801a3f:	48 89 c7             	mov    rdi,rax
ffff800000801a42:	49 89 df             	mov    r15,rbx
ffff800000801a45:	48 b8 24 25 ef ff ff 	movabs rax,0xffffffffffef2524
ffff800000801a4c:	ff ff ff 
ffff800000801a4f:	48 01 d8             	add    rax,rbx
ffff800000801a52:	ff d0                	call   rax
ffff800000801a54:	3d ff 03 00 00       	cmp    eax,0x3ff
ffff800000801a59:	0f 8f f2 02 00 00    	jg     ffff800000801d51 <printf+0x390>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:89
        return;//一次性输出不了太长
    char* tmp=(char*) kmalloc();
ffff800000801a5f:	49 89 df             	mov    r15,rbx
ffff800000801a62:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801a67:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff800000801a6e:	ff ff ff 
ffff800000801a71:	48 01 da             	add    rdx,rbx
ffff800000801a74:	ff d2                	call   rdx
ffff800000801a76:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:91
    va_list vargs;
    va_start(vargs,format);
ffff800000801a7d:	c7 85 00 ff ff ff 08 	mov    DWORD PTR [rbp-0x100],0x8
ffff800000801a84:	00 00 00 
ffff800000801a87:	c7 85 04 ff ff ff 30 	mov    DWORD PTR [rbp-0xfc],0x30
ffff800000801a8e:	00 00 00 
ffff800000801a91:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff800000801a95:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffff800000801a9c:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffff800000801aa3:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:92
    char *pstr=format;
ffff800000801aaa:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000801ab1:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
ffff800000801ab8:	e9 27 02 00 00       	jmp    ffff800000801ce4 <printf+0x323>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff800000801abd:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801ac4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801ac7:	3c 25                	cmp    al,0x25
ffff800000801ac9:	0f 85 e2 01 00 00    	jne    ffff800000801cb1 <printf+0x2f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94 (discriminator 1)
ffff800000801acf:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801ad6:	48 83 c0 01          	add    rax,0x1
ffff800000801ada:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801add:	84 c0                	test   al,al
ffff800000801adf:	0f 84 cc 01 00 00    	je     ffff800000801cb1 <printf+0x2f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:95
            pstr++;
ffff800000801ae5:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000801aec:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801aed:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801af4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801af7:	3c 78                	cmp    al,0x78
ffff800000801af9:	75 75                	jne    ffff800000801b70 <printf+0x1af>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:97
                int v=va_arg(vargs,int);
ffff800000801afb:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff800000801b01:	83 f8 2f             	cmp    eax,0x2f
ffff800000801b04:	77 23                	ja     ffff800000801b29 <printf+0x168>
ffff800000801b06:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000801b0d:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801b13:	89 d2                	mov    edx,edx
ffff800000801b15:	48 01 d0             	add    rax,rdx
ffff800000801b18:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801b1e:	83 c2 08             	add    edx,0x8
ffff800000801b21:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff800000801b27:	eb 12                	jmp    ffff800000801b3b <printf+0x17a>
ffff800000801b29:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000801b30:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801b34:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff800000801b3b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801b3d:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:98
                sprint_hex(tmp,v);
ffff800000801b43:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
ffff800000801b49:	48 63 d0             	movsxd rdx,eax
ffff800000801b4c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801b53:	48 89 d6             	mov    rsi,rdx
ffff800000801b56:	48 89 c7             	mov    rdi,rax
ffff800000801b59:	49 89 df             	mov    r15,rbx
ffff800000801b5c:	48 b8 77 29 ef ff ff 	movabs rax,0xffffffffffef2977
ffff800000801b63:	ff ff ff 
ffff800000801b66:	48 01 d8             	add    rax,rbx
ffff800000801b69:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801b6b:	e9 6c 01 00 00       	jmp    ffff800000801cdc <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:99
            }else if(*pstr=='s'){
ffff800000801b70:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801b77:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801b7a:	3c 73                	cmp    al,0x73
ffff800000801b7c:	75 75                	jne    ffff800000801bf3 <printf+0x232>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:100
                char* v=va_arg(vargs,char*);
ffff800000801b7e:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff800000801b84:	83 f8 2f             	cmp    eax,0x2f
ffff800000801b87:	77 23                	ja     ffff800000801bac <printf+0x1eb>
ffff800000801b89:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000801b90:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801b96:	89 d2                	mov    edx,edx
ffff800000801b98:	48 01 d0             	add    rax,rdx
ffff800000801b9b:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801ba1:	83 c2 08             	add    edx,0x8
ffff800000801ba4:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff800000801baa:	eb 12                	jmp    ffff800000801bbe <printf+0x1fd>
ffff800000801bac:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000801bb3:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801bb7:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff800000801bbe:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801bc1:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:101
                sprintn(tmp,v);
ffff800000801bc8:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
ffff800000801bcf:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801bd6:	48 89 d6             	mov    rsi,rdx
ffff800000801bd9:	48 89 c7             	mov    rdi,rax
ffff800000801bdc:	49 89 df             	mov    r15,rbx
ffff800000801bdf:	48 b8 05 2a ef ff ff 	movabs rax,0xffffffffffef2a05
ffff800000801be6:	ff ff ff 
ffff800000801be9:	48 01 d8             	add    rax,rbx
ffff800000801bec:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801bee:	e9 e9 00 00 00       	jmp    ffff800000801cdc <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:102
            }else if(*pstr=='d'){
ffff800000801bf3:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801bfa:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801bfd:	3c 64                	cmp    al,0x64
ffff800000801bff:	75 73                	jne    ffff800000801c74 <printf+0x2b3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:103
                char* v=va_arg(vargs,char*);
ffff800000801c01:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff800000801c07:	83 f8 2f             	cmp    eax,0x2f
ffff800000801c0a:	77 23                	ja     ffff800000801c2f <printf+0x26e>
ffff800000801c0c:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000801c13:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801c19:	89 d2                	mov    edx,edx
ffff800000801c1b:	48 01 d0             	add    rax,rdx
ffff800000801c1e:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801c24:	83 c2 08             	add    edx,0x8
ffff800000801c27:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff800000801c2d:	eb 12                	jmp    ffff800000801c41 <printf+0x280>
ffff800000801c2f:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000801c36:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801c3a:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff800000801c41:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801c44:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:104
                sprint_decimal(tmp,v);
ffff800000801c4b:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff800000801c52:	89 c2                	mov    edx,eax
ffff800000801c54:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801c5b:	89 d6                	mov    esi,edx
ffff800000801c5d:	48 89 c7             	mov    rdi,rax
ffff800000801c60:	49 89 df             	mov    r15,rbx
ffff800000801c63:	48 b8 bc 28 ef ff ff 	movabs rax,0xffffffffffef28bc
ffff800000801c6a:	ff ff ff 
ffff800000801c6d:	48 01 d8             	add    rax,rbx
ffff800000801c70:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801c72:	eb 68                	jmp    ffff800000801cdc <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:105
            }else if(*pstr=='c'){
ffff800000801c74:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801c7b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801c7e:	3c 63                	cmp    al,0x63
ffff800000801c80:	75 02                	jne    ffff800000801c84 <printf+0x2c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:106
                char v=va_arg(vargs,char);
ffff800000801c82:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:109
                sprintchar(tmp,v);
            }else{
                sprintchar(tmp,*pstr);
ffff800000801c84:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801c8b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801c8e:	0f be d0             	movsx  edx,al
ffff800000801c91:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801c98:	89 d6                	mov    esi,edx
ffff800000801c9a:	48 89 c7             	mov    rdi,rax
ffff800000801c9d:	49 89 df             	mov    r15,rbx
ffff800000801ca0:	48 b8 7d 28 ef ff ff 	movabs rax,0xffffffffffef287d
ffff800000801ca7:	ff ff ff 
ffff800000801caa:	48 01 d8             	add    rax,rbx
ffff800000801cad:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801caf:	eb 2b                	jmp    ffff800000801cdc <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:112
            }
        }else{
            sprintchar(tmp,*pstr);
ffff800000801cb1:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801cb8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801cbb:	0f be d0             	movsx  edx,al
ffff800000801cbe:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801cc5:	89 d6                	mov    esi,edx
ffff800000801cc7:	48 89 c7             	mov    rdi,rax
ffff800000801cca:	49 89 df             	mov    r15,rbx
ffff800000801ccd:	48 b8 7d 28 ef ff ff 	movabs rax,0xffffffffffef287d
ffff800000801cd4:	ff ff ff 
ffff800000801cd7:	48 01 d8             	add    rax,rbx
ffff800000801cda:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
ffff800000801cdc:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000801ce3:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93 (discriminator 1)
ffff800000801ce4:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801ceb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801cee:	84 c0                	test   al,al
ffff800000801cf0:	0f 85 c7 fd ff ff    	jne    ffff800000801abd <printf+0xfc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:116
        }
    }
    va_end(vargs);
    print(tmp);
ffff800000801cf6:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801cfd:	48 89 c7             	mov    rdi,rax
ffff800000801d00:	49 89 df             	mov    r15,rbx
ffff800000801d03:	48 b8 11 9f ee ff ff 	movabs rax,0xffffffffffee9f11
ffff800000801d0a:	ff ff ff 
ffff800000801d0d:	48 01 d8             	add    rax,rbx
ffff800000801d10:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:117
    comprintf(tmp);
ffff800000801d12:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801d19:	48 89 c7             	mov    rdi,rax
ffff800000801d1c:	49 89 df             	mov    r15,rbx
ffff800000801d1f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801d24:	48 ba b3 1c ef ff ff 	movabs rdx,0xffffffffffef1cb3
ffff800000801d2b:	ff ff ff 
ffff800000801d2e:	48 01 da             	add    rdx,rbx
ffff800000801d31:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:118
    kmfree(tmp);
ffff800000801d33:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801d3a:	48 89 c7             	mov    rdi,rax
ffff800000801d3d:	49 89 df             	mov    r15,rbx
ffff800000801d40:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff800000801d47:	ff ff ff 
ffff800000801d4a:	48 01 d8             	add    rax,rbx
ffff800000801d4d:	ff d0                	call   rax
ffff800000801d4f:	eb 01                	jmp    ffff800000801d52 <printf+0x391>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:88
        return;//一次性输出不了太长
ffff800000801d51:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:160
//                putchar (*((int *) arg++));
//                break;
//            }
//        }
//    }
}
ffff800000801d52:	48 81 c4 00 01 00 00 	add    rsp,0x100
ffff800000801d59:	5b                   	pop    rbx
ffff800000801d5a:	41 5f                	pop    r15
ffff800000801d5c:	5d                   	pop    rbp
ffff800000801d5d:	c3                   	ret    

ffff800000801d5e <mmap>:
mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:27
//以kb为单位
int high_mem_base=1024;
int mmap_t_i=0;

stat_t mmap(addr_t pa,addr_t la,u32 attr)
{
ffff800000801d5e:	f3 0f 1e fa          	endbr64 
ffff800000801d62:	55                   	push   rbp
ffff800000801d63:	48 89 e5             	mov    rbp,rsp
ffff800000801d66:	41 57                	push   r15
ffff800000801d68:	48 83 ec 28          	sub    rsp,0x28
ffff800000801d6c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801d6c <mmap+0xe>
ffff800000801d73:	49 bb e4 f1 11 00 00 	movabs r11,0x11f1e4
ffff800000801d7a:	00 00 00 
ffff800000801d7d:	4c 01 d8             	add    rax,r11
ffff800000801d80:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000801d84:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000801d88:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:28
    return smmap(pa,la,attr,current->pml4);
ffff800000801d8b:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff800000801d92:	ff ff ff 
ffff800000801d95:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801d99:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000801d9c:	48 8b 8a e0 00 00 00 	mov    rcx,QWORD PTR [rdx+0xe0]
ffff800000801da3:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801da6:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff800000801daa:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffff800000801dae:	49 89 c7             	mov    r15,rax
ffff800000801db1:	49 b8 77 0e ee ff ff 	movabs r8,0xffffffffffee0e77
ffff800000801db8:	ff ff ff 
ffff800000801dbb:	49 01 c0             	add    r8,rax
ffff800000801dbe:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:58
    pt=(page_item*)((addr_t)pt & ~0xff);

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_SIZE]=pa|attr;//映射
    return NORMAL;*/
}
ffff800000801dc1:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000801dc5:	c9                   	leave  
ffff800000801dc6:	c3                   	ret    

ffff800000801dc7 <smmap>:
smmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:60
stat_t smmap(addr_t pa,addr_t la,u32 attr,page_item* pml4p)
{
ffff800000801dc7:	f3 0f 1e fa          	endbr64 
ffff800000801dcb:	55                   	push   rbp
ffff800000801dcc:	48 89 e5             	mov    rbp,rsp
ffff800000801dcf:	41 57                	push   r15
ffff800000801dd1:	53                   	push   rbx
ffff800000801dd2:	48 83 ec 40          	sub    rsp,0x40
ffff800000801dd6:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000801dd6 <smmap+0xf>
ffff800000801ddd:	49 bb 7a f1 11 00 00 	movabs r11,0x11f17a
ffff800000801de4:	00 00 00 
ffff800000801de7:	4c 01 db             	add    rbx,r11
ffff800000801dea:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000801dee:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000801df2:	89 55 bc             	mov    DWORD PTR [rbp-0x44],edx
ffff800000801df5:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:63
    //从pml4中找到la所属的pml4项目，即属于第几个512GB
    //canonical 高地址判断
    if(la>0x7ffffffffffful){
ffff800000801df9:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000801e00:	7f 00 00 
ffff800000801e03:	48 39 45 c0          	cmp    QWORD PTR [rbp-0x40],rax
ffff800000801e07:	76 0e                	jbe    ffff800000801e17 <smmap+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:64
        la&=~0xffff000000000000ul;
ffff800000801e09:	48 b8 ff ff ff ff ff 	movabs rax,0xffffffffffff
ffff800000801e10:	ff 00 00 
ffff800000801e13:	48 21 45 c0          	and    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:66
    }
    page_item *pdptp= (page_item *) (pml4p[la / PML4E_SIZE]);//指向的pdpt表
ffff800000801e17:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801e1b:	48 c1 e8 27          	shr    rax,0x27
ffff800000801e1f:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801e26:	00 
ffff800000801e27:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000801e2b:	48 01 d0             	add    rax,rdx
ffff800000801e2e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801e31:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:67
    int pml4i=la / PML4E_SIZE;
ffff800000801e35:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801e39:	48 c1 e8 27          	shr    rax,0x27
ffff800000801e3d:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:68
    if(!((unsigned long long)pdptp&PAGE_PRESENT))
ffff800000801e40:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801e44:	83 e0 01             	and    eax,0x1
ffff800000801e47:	48 85 c0             	test   rax,rax
ffff800000801e4a:	75 6f                	jne    ffff800000801ebb <smmap+0xf4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:70
    {
        pdptp=(page_item*) kmalloc();
ffff800000801e4c:	49 89 df             	mov    r15,rbx
ffff800000801e4f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801e54:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff800000801e5b:	ff ff ff 
ffff800000801e5e:	48 01 da             	add    rdx,rbx
ffff800000801e61:	ff d2                	call   rdx
ffff800000801e63:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:71
        memset(pdptp,0,4096);
ffff800000801e67:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801e6b:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801e70:	be 00 00 00 00       	mov    esi,0x0
ffff800000801e75:	48 89 c7             	mov    rdi,rax
ffff800000801e78:	49 89 df             	mov    r15,rbx
ffff800000801e7b:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff800000801e82:	ff ff ff 
ffff800000801e85:	48 01 d8             	add    rax,rbx
ffff800000801e88:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:73
        //这里使用了狡猾的技巧：kmalloc的内存-KNL_BASE直接就是实际的物理地址
        pml4p[pml4i]=((addr_t)pdptp&~KNL_BASE)|attr;
ffff800000801e8a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801e8e:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801e95:	7f 00 00 
ffff800000801e98:	48 21 d0             	and    rax,rdx
ffff800000801e9b:	48 89 c1             	mov    rcx,rax
ffff800000801e9e:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801ea1:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000801ea4:	48 98                	cdqe   
ffff800000801ea6:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801ead:	00 
ffff800000801eae:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000801eb2:	48 01 f0             	add    rax,rsi
ffff800000801eb5:	48 09 ca             	or     rdx,rcx
ffff800000801eb8:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:75
    }
    pdptp=(page_item*)(((addr_t)pdptp&~0xff)|KNL_BASE);
ffff800000801ebb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801ebf:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801ec6:	7f 00 00 
ffff800000801ec9:	48 21 c2             	and    rdx,rax
ffff800000801ecc:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801ed3:	80 ff ff 
ffff800000801ed6:	48 09 d0             	or     rax,rdx
ffff800000801ed9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:78

    //在这个512GB（一张pdpt表）中找到la所属的pdpt项目，找到指向的pd
    int pdpti=la%PML4E_SIZE/PDPTE_SIZE;
ffff800000801edd:	48 b8 ff ff ff ff 7f 	movabs rax,0x7fffffffff
ffff800000801ee4:	00 00 00 
ffff800000801ee7:	48 23 45 c0          	and    rax,QWORD PTR [rbp-0x40]
ffff800000801eeb:	48 c1 e8 1e          	shr    rax,0x1e
ffff800000801eef:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:79
    page_item* pdp= (page_item *) pdptp[pdpti];//指向的pd
ffff800000801ef2:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000801ef5:	48 98                	cdqe   
ffff800000801ef7:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801efe:	00 
ffff800000801eff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801f03:	48 01 d0             	add    rax,rdx
ffff800000801f06:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801f09:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:81
    //检查pdptp是否被占用
    if(!((unsigned long long)pdp&PAGE_PRESENT))
ffff800000801f0d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801f11:	83 e0 01             	and    eax,0x1
ffff800000801f14:	48 85 c0             	test   rax,rax
ffff800000801f17:	75 6f                	jne    ffff800000801f88 <smmap+0x1c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:83
    {
        pdp=(page_item*) kmalloc();
ffff800000801f19:	49 89 df             	mov    r15,rbx
ffff800000801f1c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801f21:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff800000801f28:	ff ff ff 
ffff800000801f2b:	48 01 da             	add    rdx,rbx
ffff800000801f2e:	ff d2                	call   rdx
ffff800000801f30:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:84
        memset(pdp,0,4096);
ffff800000801f34:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801f38:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801f3d:	be 00 00 00 00       	mov    esi,0x0
ffff800000801f42:	48 89 c7             	mov    rdi,rax
ffff800000801f45:	49 89 df             	mov    r15,rbx
ffff800000801f48:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff800000801f4f:	ff ff ff 
ffff800000801f52:	48 01 d8             	add    rax,rbx
ffff800000801f55:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:85
        pdptp[pdpti]=((addr_t)pdp&~KNL_BASE)|attr;
ffff800000801f57:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801f5b:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801f62:	7f 00 00 
ffff800000801f65:	48 21 d0             	and    rax,rdx
ffff800000801f68:	48 89 c1             	mov    rcx,rax
ffff800000801f6b:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801f6e:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000801f71:	48 98                	cdqe   
ffff800000801f73:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801f7a:	00 
ffff800000801f7b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801f7f:	48 01 f0             	add    rax,rsi
ffff800000801f82:	48 09 ca             	or     rdx,rcx
ffff800000801f85:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:87
    }
    pdp=(page_item*)(((addr_t)(pdp)&~0xff)|KNL_BASE);
ffff800000801f88:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801f8c:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801f93:	7f 00 00 
ffff800000801f96:	48 21 c2             	and    rdx,rax
ffff800000801f99:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801fa0:	80 ff ff 
ffff800000801fa3:	48 09 d0             	or     rax,rdx
ffff800000801fa6:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:90

    //在pd中找到la指向的pt
    page_item* pt=(page_item*)pdp[la % PDPTE_SIZE / PDE_SIZE];
ffff800000801faa:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801fae:	25 ff ff ff 3f       	and    eax,0x3fffffff
ffff800000801fb3:	48 c1 e8 15          	shr    rax,0x15
ffff800000801fb7:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801fbe:	00 
ffff800000801fbf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801fc3:	48 01 d0             	add    rax,rdx
ffff800000801fc6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801fc9:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:91
    if(!((unsigned long long)pt & PAGE_PRESENT))
ffff800000801fcd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801fd1:	83 e0 01             	and    eax,0x1
ffff800000801fd4:	48 85 c0             	test   rax,rax
ffff800000801fd7:	75 77                	jne    ffff800000802050 <smmap+0x289>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:93
    {
        pt=(page_item*) kmalloc();
ffff800000801fd9:	49 89 df             	mov    r15,rbx
ffff800000801fdc:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801fe1:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff800000801fe8:	ff ff ff 
ffff800000801feb:	48 01 da             	add    rdx,rbx
ffff800000801fee:	ff d2                	call   rdx
ffff800000801ff0:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:94
        memset(pt,0,4096);
ffff800000801ff4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801ff8:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801ffd:	be 00 00 00 00       	mov    esi,0x0
ffff800000802002:	48 89 c7             	mov    rdi,rax
ffff800000802005:	49 89 df             	mov    r15,rbx
ffff800000802008:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff80000080200f:	ff ff ff 
ffff800000802012:	48 01 d8             	add    rax,rbx
ffff800000802015:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:95
        pdp[la%PDPTE_SIZE/PDE_SIZE]= ((addr_t)pt&~KNL_BASE) | attr;
ffff800000802017:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080201b:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000802022:	7f 00 00 
ffff800000802025:	48 21 d0             	and    rax,rdx
ffff800000802028:	48 89 c1             	mov    rcx,rax
ffff80000080202b:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff80000080202e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000802032:	25 ff ff ff 3f       	and    eax,0x3fffffff
ffff800000802037:	48 c1 e8 15          	shr    rax,0x15
ffff80000080203b:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000802042:	00 
ffff800000802043:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000802047:	48 01 f0             	add    rax,rsi
ffff80000080204a:	48 09 ca             	or     rdx,rcx
ffff80000080204d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:97
    }
    pt=(page_item*)(((addr_t)pt & ~0xff)|KNL_BASE);
ffff800000802050:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000802054:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff80000080205b:	7f 00 00 
ffff80000080205e:	48 21 c2             	and    rdx,rax
ffff800000802061:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000802068:	80 ff ff 
ffff80000080206b:	48 09 d0             	or     rax,rdx
ffff80000080206e:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:100

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_4K_SIZE]=pa|attr;//映射
ffff800000802072:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff800000802075:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000802079:	81 e2 ff ff 1f 00    	and    edx,0x1fffff
ffff80000080207f:	48 c1 ea 0c          	shr    rdx,0xc
ffff800000802083:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff80000080208a:	00 
ffff80000080208b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080208f:	48 01 ca             	add    rdx,rcx
ffff800000802092:	48 0b 45 c8          	or     rax,QWORD PTR [rbp-0x38]
ffff800000802096:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:101
    return NORMAL;
ffff800000802099:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:102
}
ffff80000080209e:	48 83 c4 40          	add    rsp,0x40
ffff8000008020a2:	5b                   	pop    rbx
ffff8000008020a3:	41 5f                	pop    r15
ffff8000008020a5:	5d                   	pop    rbp
ffff8000008020a6:	c3                   	ret    

ffff8000008020a7 <init_paging>:
init_paging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:106


int init_paging()
{
ffff8000008020a7:	f3 0f 1e fa          	endbr64 
ffff8000008020ab:	55                   	push   rbp
ffff8000008020ac:	48 89 e5             	mov    rbp,rsp
ffff8000008020af:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008020af <init_paging+0x8>
ffff8000008020b6:	49 bb a1 ee 11 00 00 	movabs r11,0x11eea1
ffff8000008020bd:	00 00 00 
ffff8000008020c0:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:139
//    set_page_item(pml4,PDPT_ADDR,PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX);
    //设置第一项pdpte，也就是内核空间
//    set_1gb_pdpt(pdpt,0,PAGE_RWX);//设置PDPT0x40000000ul
//    set_page_item(pdpt+1,PD_ADDR,PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX);
    //把低512GB的空间取消映射，留给用户
    pml4[0]=0;
ffff8000008020c3:	48 ba a8 ff ff ff ff 	movabs rdx,0xffffffffffffffa8
ffff8000008020ca:	ff ff ff 
ffff8000008020cd:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008020d1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008020d4:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:141
    #endif
}
ffff8000008020db:	90                   	nop
ffff8000008020dc:	5d                   	pop    rbp
ffff8000008020dd:	c3                   	ret    

ffff8000008020de <set_high_mem_base>:
set_high_mem_base():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:143
void set_high_mem_base(int base)
{
ffff8000008020de:	f3 0f 1e fa          	endbr64 
ffff8000008020e2:	55                   	push   rbp
ffff8000008020e3:	48 89 e5             	mov    rbp,rsp
ffff8000008020e6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008020e6 <set_high_mem_base+0x8>
ffff8000008020ed:	49 bb 6a ee 11 00 00 	movabs r11,0x11ee6a
ffff8000008020f4:	00 00 00 
ffff8000008020f7:	4c 01 d8             	add    rax,r11
ffff8000008020fa:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:144
    high_mem_base=base;
ffff8000008020fd:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000802104:	ff ff ff 
ffff800000802107:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080210b:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080210e:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:145
}
ffff800000802110:	90                   	nop
ffff800000802111:	5d                   	pop    rbp
ffff800000802112:	c3                   	ret    

ffff800000802113 <set_mem_area>:
set_mem_area():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:147
void set_mem_area(unsigned long base, unsigned long len, unsigned long type)
{
ffff800000802113:	f3 0f 1e fa          	endbr64 
ffff800000802117:	55                   	push   rbp
ffff800000802118:	48 89 e5             	mov    rbp,rsp
ffff80000080211b:	41 57                	push   r15
ffff80000080211d:	48 83 ec 28          	sub    rsp,0x28
ffff800000802121:	4c 8d 05 f9 ff ff ff 	lea    r8,[rip+0xfffffffffffffff9]        # ffff800000802121 <set_mem_area+0xe>
ffff800000802128:	49 bb 2f ee 11 00 00 	movabs r11,0x11ee2f
ffff80000080212f:	00 00 00 
ffff800000802132:	4d 01 d8             	add    r8,r11
ffff800000802135:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000802139:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080213d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:148
    mmap_struct[mmap_t_i].base=base;
ffff800000802141:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000802148:	ff ff ff 
ffff80000080214b:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080214f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802151:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff800000802158:	ff ff ff 
ffff80000080215b:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff80000080215f:	48 63 d0             	movsxd rdx,eax
ffff800000802162:	48 89 d0             	mov    rax,rdx
ffff800000802165:	48 01 c0             	add    rax,rax
ffff800000802168:	48 01 d0             	add    rax,rdx
ffff80000080216b:	48 c1 e0 03          	shl    rax,0x3
ffff80000080216f:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000802173:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802177:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:149
    mmap_struct[mmap_t_i].len=len;
ffff80000080217a:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000802181:	ff ff ff 
ffff800000802184:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000802188:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080218a:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff800000802191:	ff ff ff 
ffff800000802194:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000802198:	48 63 d0             	movsxd rdx,eax
ffff80000080219b:	48 89 d0             	mov    rax,rdx
ffff80000080219e:	48 01 c0             	add    rax,rax
ffff8000008021a1:	48 01 d0             	add    rax,rdx
ffff8000008021a4:	48 c1 e0 03          	shl    rax,0x3
ffff8000008021a8:	48 01 c8             	add    rax,rcx
ffff8000008021ab:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008021af:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008021b3:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:150
    mmap_struct[mmap_t_i++].type=type;
ffff8000008021b6:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008021bd:	ff ff ff 
ffff8000008021c0:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff8000008021c4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008021c6:	8d 48 01             	lea    ecx,[rax+0x1]
ffff8000008021c9:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff8000008021d0:	ff ff ff 
ffff8000008021d3:	49 8b 14 10          	mov    rdx,QWORD PTR [r8+rdx*1]
ffff8000008021d7:	89 0a                	mov    DWORD PTR [rdx],ecx
ffff8000008021d9:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff8000008021e0:	ff ff ff 
ffff8000008021e3:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff8000008021e7:	48 63 d0             	movsxd rdx,eax
ffff8000008021ea:	48 89 d0             	mov    rax,rdx
ffff8000008021ed:	48 01 c0             	add    rax,rax
ffff8000008021f0:	48 01 d0             	add    rax,rdx
ffff8000008021f3:	48 c1 e0 03          	shl    rax,0x3
ffff8000008021f7:	48 01 c8             	add    rax,rcx
ffff8000008021fa:	48 8d 50 10          	lea    rdx,[rax+0x10]
ffff8000008021fe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000802202:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:151
    comprintf("mem info:base=0x%l,len=0x%l,type=%d\n",base,len,type);
ffff800000802205:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000802209:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080220d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802211:	48 89 c6             	mov    rsi,rax
ffff800000802214:	48 b8 78 d4 ff ff ff 	movabs rax,0xffffffffffffd478
ffff80000080221b:	ff ff ff 
ffff80000080221e:	49 8d 04 00          	lea    rax,[r8+rax*1]
ffff800000802222:	48 89 c7             	mov    rdi,rax
ffff800000802225:	4d 89 c7             	mov    r15,r8
ffff800000802228:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080222d:	49 b9 b3 1c ef ff ff 	movabs r9,0xffffffffffef1cb3
ffff800000802234:	ff ff ff 
ffff800000802237:	4d 01 c1             	add    r9,r8
ffff80000080223a:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:152
}
ffff80000080223d:	90                   	nop
ffff80000080223e:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000802242:	c9                   	leave  
ffff800000802243:	c3                   	ret    

ffff800000802244 <kmalloc>:
kmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:154
addr_t kmalloc()
{
ffff800000802244:	f3 0f 1e fa          	endbr64 
ffff800000802248:	55                   	push   rbp
ffff800000802249:	48 89 e5             	mov    rbp,rsp
ffff80000080224c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080224c <kmalloc+0x8>
ffff800000802253:	49 bb 04 ed 11 00 00 	movabs r11,0x11ed04
ffff80000080225a:	00 00 00 
ffff80000080225d:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:155
    for(int i=0;i<VMALLOC_PGN/32;i++)
ffff800000802260:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000802267:	e9 c6 00 00 00       	jmp    ffff800000802332 <kmalloc+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157
    {
        for(int j=0;j<32;j++)
ffff80000080226c:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff800000802273:	e9 ac 00 00 00       	jmp    ffff800000802324 <kmalloc+0xe0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:159
        {
            if(!(vmalloc_map[i]&(1<<j)))
ffff800000802278:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff80000080227f:	ff ff ff 
ffff800000802282:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802286:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000802289:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080228c:	48 63 d2             	movsxd rdx,edx
ffff80000080228f:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802293:	48 01 ca             	add    rdx,rcx
ffff800000802296:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802298:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080229b:	bf 01 00 00 00       	mov    edi,0x1
ffff8000008022a0:	89 d1                	mov    ecx,edx
ffff8000008022a2:	d3 e7                	shl    edi,cl
ffff8000008022a4:	89 fa                	mov    edx,edi
ffff8000008022a6:	21 f2                	and    edx,esi
ffff8000008022a8:	85 d2                	test   edx,edx
ffff8000008022aa:	75 74                	jne    ffff800000802320 <kmalloc+0xdc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:161
            {
                vmalloc_map[i]|=(1<<j);
ffff8000008022ac:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff8000008022b3:	ff ff ff 
ffff8000008022b6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008022ba:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008022bd:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008022c0:	48 63 d2             	movsxd rdx,edx
ffff8000008022c3:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008022c7:	48 01 ca             	add    rdx,rcx
ffff8000008022ca:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff8000008022cc:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff8000008022cf:	bf 01 00 00 00       	mov    edi,0x1
ffff8000008022d4:	89 d1                	mov    ecx,edx
ffff8000008022d6:	d3 e7                	shl    edi,cl
ffff8000008022d8:	89 fa                	mov    edx,edi
ffff8000008022da:	89 d1                	mov    ecx,edx
ffff8000008022dc:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff8000008022e3:	ff ff ff 
ffff8000008022e6:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008022ea:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008022ed:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008022f0:	48 98                	cdqe   
ffff8000008022f2:	48 c1 e0 02          	shl    rax,0x2
ffff8000008022f6:	48 01 d0             	add    rax,rdx
ffff8000008022f9:	09 ce                	or     esi,ecx
ffff8000008022fb:	89 f2                	mov    edx,esi
ffff8000008022fd:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:162
                return VMALLOC_BASE+(i*32+j)*0x1000;
ffff8000008022ff:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802302:	c1 e0 05             	shl    eax,0x5
ffff800000802305:	89 c2                	mov    edx,eax
ffff800000802307:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080230a:	01 d0                	add    eax,edx
ffff80000080230c:	c1 e0 0c             	shl    eax,0xc
ffff80000080230f:	48 98                	cdqe   
ffff800000802311:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
ffff800000802318:	80 ff ff 
ffff80000080231b:	48 01 d0             	add    rax,rdx
ffff80000080231e:	eb 1c                	jmp    ffff80000080233c <kmalloc+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157 (discriminator 2)
        for(int j=0;j<32;j++)
ffff800000802320:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157 (discriminator 1)
ffff800000802324:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
ffff800000802328:	0f 8e 4a ff ff ff    	jle    ffff800000802278 <kmalloc+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:155 (discriminator 2)
    for(int i=0;i<VMALLOC_PGN/32;i++)
ffff80000080232e:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:155 (discriminator 1)
ffff800000802332:	83 7d fc 7f          	cmp    DWORD PTR [rbp-0x4],0x7f
ffff800000802336:	0f 8e 30 ff ff ff    	jle    ffff80000080226c <kmalloc+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:166
            }
        }
    }
}
ffff80000080233c:	5d                   	pop    rbp
ffff80000080233d:	c3                   	ret    

ffff80000080233e <kmallocat>:
kmallocat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:168
addr_t kmallocat(addr_t addr,int pgc)
{
ffff80000080233e:	f3 0f 1e fa          	endbr64 
ffff800000802342:	55                   	push   rbp
ffff800000802343:	48 89 e5             	mov    rbp,rsp
ffff800000802346:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802346 <kmallocat+0x8>
ffff80000080234d:	49 bb 0a ec 11 00 00 	movabs r11,0x11ec0a
ffff800000802354:	00 00 00 
ffff800000802357:	4c 01 d8             	add    rax,r11
ffff80000080235a:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080235e:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:169
    int pi=(addr-VMALLOC_BASE)/PAGE_4K_SIZE;
ffff800000802361:	48 b9 00 00 00 fe ff 	movabs rcx,0x7ffffe000000
ffff800000802368:	7f 00 00 
ffff80000080236b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080236f:	48 01 ca             	add    rdx,rcx
ffff800000802372:	48 c1 ea 0c          	shr    rdx,0xc
ffff800000802376:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:170
    if(addr==0){
ffff800000802379:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080237e:	0f 85 3f 01 00 00    	jne    ffff8000008024c3 <kmallocat+0x185>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:171
        int l=0,p=0;
ffff800000802384:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080238b:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:172
        for(int i=0;i<kmalloc_pgc;i++){
ffff800000802392:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff800000802399:	eb 63                	jmp    ffff8000008023fe <kmallocat+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:173
            if(!(vmalloc_map[i/32]&(1u<<(i%32)))){
ffff80000080239b:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff8000008023a2:	ff ff ff 
ffff8000008023a5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008023a9:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008023ac:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff8000008023af:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff8000008023b2:	85 d2                	test   edx,edx
ffff8000008023b4:	0f 48 d1             	cmovs  edx,ecx
ffff8000008023b7:	c1 fa 05             	sar    edx,0x5
ffff8000008023ba:	48 63 d2             	movsxd rdx,edx
ffff8000008023bd:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008023c1:	48 01 f2             	add    rdx,rsi
ffff8000008023c4:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff8000008023c6:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff8000008023c9:	83 e2 1f             	and    edx,0x1f
ffff8000008023cc:	89 d1                	mov    ecx,edx
ffff8000008023ce:	d3 ee                	shr    esi,cl
ffff8000008023d0:	89 f2                	mov    edx,esi
ffff8000008023d2:	83 e2 01             	and    edx,0x1
ffff8000008023d5:	85 d2                	test   edx,edx
ffff8000008023d7:	75 12                	jne    ffff8000008023eb <kmallocat+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:174
                if(l==0)
ffff8000008023d9:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff8000008023dd:	75 06                	jne    ffff8000008023e5 <kmallocat+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:175
                    p=i;//开头空页
ffff8000008023df:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff8000008023e2:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:176
                l++;
ffff8000008023e5:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffff8000008023e9:	eb 07                	jmp    ffff8000008023f2 <kmallocat+0xb4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:178
            } else
                l=0;
ffff8000008023eb:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:179
            if(l==pgc)break;
ffff8000008023f2:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008023f5:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff8000008023f8:	74 1b                	je     ffff800000802415 <kmallocat+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:172 (discriminator 2)
        for(int i=0;i<kmalloc_pgc;i++){
ffff8000008023fa:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:172 (discriminator 1)
ffff8000008023fe:	48 ba 48 ff ff ff ff 	movabs rdx,0xffffffffffffff48
ffff800000802405:	ff ff ff 
ffff800000802408:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080240c:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080240e:	39 55 f4             	cmp    DWORD PTR [rbp-0xc],edx
ffff800000802411:	7c 88                	jl     ffff80000080239b <kmallocat+0x5d>
ffff800000802413:	eb 01                	jmp    ffff800000802416 <kmallocat+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:179
            if(l==pgc)break;
ffff800000802415:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:181
        }
        if(l<pgc)return -1;
ffff800000802416:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802419:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff80000080241c:	7d 0c                	jge    ffff80000080242a <kmallocat+0xec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:181 (discriminator 1)
ffff80000080241e:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000802425:	e9 87 01 00 00       	jmp    ffff8000008025b1 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:183
        //开始占用
        for(int i=0;i<pgc;i++){
ffff80000080242a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
ffff800000802431:	eb 6e                	jmp    ffff8000008024a1 <kmallocat+0x163>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:184 (discriminator 3)
            vmalloc_map[(p+i)/32]|=1u<<((p+i)%32);
ffff800000802433:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff80000080243a:	ff ff ff 
ffff80000080243d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802441:	48 8b 3a             	mov    rdi,QWORD PTR [rdx]
ffff800000802444:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff800000802447:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080244a:	01 ca                	add    edx,ecx
ffff80000080244c:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff80000080244f:	85 d2                	test   edx,edx
ffff800000802451:	0f 48 d1             	cmovs  edx,ecx
ffff800000802454:	c1 fa 05             	sar    edx,0x5
ffff800000802457:	89 d6                	mov    esi,edx
ffff800000802459:	48 63 d6             	movsxd rdx,esi
ffff80000080245c:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802460:	48 01 fa             	add    rdx,rdi
ffff800000802463:	8b 3a                	mov    edi,DWORD PTR [rdx]
ffff800000802465:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff800000802468:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080246b:	01 ca                	add    edx,ecx
ffff80000080246d:	83 e2 1f             	and    edx,0x1f
ffff800000802470:	41 b8 01 00 00 00    	mov    r8d,0x1
ffff800000802476:	89 d1                	mov    ecx,edx
ffff800000802478:	41 d3 e0             	shl    r8d,cl
ffff80000080247b:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff800000802482:	ff ff ff 
ffff800000802485:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802489:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080248c:	48 63 d6             	movsxd rdx,esi
ffff80000080248f:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802493:	48 01 ca             	add    rdx,rcx
ffff800000802496:	44 09 c7             	or     edi,r8d
ffff800000802499:	89 f9                	mov    ecx,edi
ffff80000080249b:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:183 (discriminator 3)
        for(int i=0;i<pgc;i++){
ffff80000080249d:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:183 (discriminator 1)
ffff8000008024a1:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff8000008024a4:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff8000008024a7:	7c 8a                	jl     ffff800000802433 <kmallocat+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:186
        }
        return VMALLOC_BASE+PAGE_4K_SIZE*p;
ffff8000008024a9:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff8000008024ac:	c1 e0 0c             	shl    eax,0xc
ffff8000008024af:	48 98                	cdqe   
ffff8000008024b1:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
ffff8000008024b8:	80 ff ff 
ffff8000008024bb:	48 01 d0             	add    rax,rdx
ffff8000008024be:	e9 ee 00 00 00       	jmp    ffff8000008025b1 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:188
    }
    for(int i=0;i<pgc;i++){
ffff8000008024c3:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008024ca:	eb 5c                	jmp    ffff800000802528 <kmallocat+0x1ea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:189
        if(vmalloc_map[(pi+i)/32]&(1<<((pi+i)%32)))
ffff8000008024cc:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff8000008024d3:	ff ff ff 
ffff8000008024d6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008024da:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008024dd:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff8000008024e0:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008024e3:	01 ca                	add    edx,ecx
ffff8000008024e5:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff8000008024e8:	85 d2                	test   edx,edx
ffff8000008024ea:	0f 48 d1             	cmovs  edx,ecx
ffff8000008024ed:	c1 fa 05             	sar    edx,0x5
ffff8000008024f0:	48 63 d2             	movsxd rdx,edx
ffff8000008024f3:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008024f7:	48 01 f2             	add    rdx,rsi
ffff8000008024fa:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff8000008024fc:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff8000008024ff:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000802502:	01 ca                	add    edx,ecx
ffff800000802504:	83 e2 1f             	and    edx,0x1f
ffff800000802507:	bf 01 00 00 00       	mov    edi,0x1
ffff80000080250c:	89 d1                	mov    ecx,edx
ffff80000080250e:	d3 e7                	shl    edi,cl
ffff800000802510:	89 fa                	mov    edx,edi
ffff800000802512:	21 f2                	and    edx,esi
ffff800000802514:	85 d2                	test   edx,edx
ffff800000802516:	74 0c                	je     ffff800000802524 <kmallocat+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:190
            return -1;
ffff800000802518:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080251f:	e9 8d 00 00 00       	jmp    ffff8000008025b1 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:188 (discriminator 2)
    for(int i=0;i<pgc;i++){
ffff800000802524:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:188 (discriminator 1)
ffff800000802528:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080252b:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff80000080252e:	7c 9c                	jl     ffff8000008024cc <kmallocat+0x18e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:193
    }
    //
    for(int i=0;i<pgc;i++){
ffff800000802530:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000802537:	eb 6c                	jmp    ffff8000008025a5 <kmallocat+0x267>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:194 (discriminator 3)
        vmalloc_map[(pi+i)]|=(1<<((pi+i)%32));
ffff800000802539:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff800000802540:	ff ff ff 
ffff800000802543:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802547:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080254a:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
ffff80000080254d:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000802550:	01 f2                	add    edx,esi
ffff800000802552:	48 63 d2             	movsxd rdx,edx
ffff800000802555:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802559:	48 01 ca             	add    rdx,rcx
ffff80000080255c:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff80000080255e:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff800000802561:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000802564:	01 ca                	add    edx,ecx
ffff800000802566:	83 e2 1f             	and    edx,0x1f
ffff800000802569:	bf 01 00 00 00       	mov    edi,0x1
ffff80000080256e:	89 d1                	mov    ecx,edx
ffff800000802570:	d3 e7                	shl    edi,cl
ffff800000802572:	89 fa                	mov    edx,edi
ffff800000802574:	41 89 d0             	mov    r8d,edx
ffff800000802577:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff80000080257e:	ff ff ff 
ffff800000802581:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802585:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000802588:	8b 7d e4             	mov    edi,DWORD PTR [rbp-0x1c]
ffff80000080258b:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080258e:	01 fa                	add    edx,edi
ffff800000802590:	48 63 d2             	movsxd rdx,edx
ffff800000802593:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802597:	48 01 ca             	add    rdx,rcx
ffff80000080259a:	44 09 c6             	or     esi,r8d
ffff80000080259d:	89 f1                	mov    ecx,esi
ffff80000080259f:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:193 (discriminator 3)
    for(int i=0;i<pgc;i++){
ffff8000008025a1:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:193 (discriminator 1)
ffff8000008025a5:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008025a8:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff8000008025ab:	7c 8c                	jl     ffff800000802539 <kmallocat+0x1fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:196
    }
    return addr;
ffff8000008025ad:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:198

}
ffff8000008025b1:	5d                   	pop    rbp
ffff8000008025b2:	c3                   	ret    

ffff8000008025b3 <kmfree>:
kmfree():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:201

int kmfree(addr_t ptr)
{
ffff8000008025b3:	f3 0f 1e fa          	endbr64 
ffff8000008025b7:	55                   	push   rbp
ffff8000008025b8:	48 89 e5             	mov    rbp,rsp
ffff8000008025bb:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008025bb <kmfree+0x8>
ffff8000008025c2:	49 bb 95 e9 11 00 00 	movabs r11,0x11e995
ffff8000008025c9:	00 00 00 
ffff8000008025cc:	4c 01 da             	add    rdx,r11
ffff8000008025cf:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:202
    int num=ptr/PAGE_SIZE;
ffff8000008025d3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008025d7:	48 c1 e8 0c          	shr    rax,0xc
ffff8000008025db:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:203
    int n=num/32;
ffff8000008025de:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008025e1:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff8000008025e4:	85 c0                	test   eax,eax
ffff8000008025e6:	0f 48 c1             	cmovs  eax,ecx
ffff8000008025e9:	c1 f8 05             	sar    eax,0x5
ffff8000008025ec:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:204
    int r=num%32;
ffff8000008025ef:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008025f2:	89 c1                	mov    ecx,eax
ffff8000008025f4:	c1 f9 1f             	sar    ecx,0x1f
ffff8000008025f7:	c1 e9 1b             	shr    ecx,0x1b
ffff8000008025fa:	01 c8                	add    eax,ecx
ffff8000008025fc:	83 e0 1f             	and    eax,0x1f
ffff8000008025ff:	29 c8                	sub    eax,ecx
ffff800000802601:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:205
    vmalloc_map[n]=vmalloc_map[n]&~(unsigned int)(1<<r);
ffff800000802604:	48 b8 30 fd ff ff ff 	movabs rax,0xfffffffffffffd30
ffff80000080260b:	ff ff ff 
ffff80000080260e:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802612:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802615:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802618:	48 98                	cdqe   
ffff80000080261a:	48 c1 e0 02          	shl    rax,0x2
ffff80000080261e:	48 01 c8             	add    rax,rcx
ffff800000802621:	8b 30                	mov    esi,DWORD PTR [rax]
ffff800000802623:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802626:	bf 01 00 00 00       	mov    edi,0x1
ffff80000080262b:	89 c1                	mov    ecx,eax
ffff80000080262d:	d3 e7                	shl    edi,cl
ffff80000080262f:	89 f8                	mov    eax,edi
ffff800000802631:	f7 d0                	not    eax
ffff800000802633:	89 c1                	mov    ecx,eax
ffff800000802635:	48 b8 30 fd ff ff ff 	movabs rax,0xfffffffffffffd30
ffff80000080263c:	ff ff ff 
ffff80000080263f:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802643:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802646:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802649:	48 98                	cdqe   
ffff80000080264b:	48 c1 e0 02          	shl    rax,0x2
ffff80000080264f:	48 01 d0             	add    rax,rdx
ffff800000802652:	21 ce                	and    esi,ecx
ffff800000802654:	89 f2                	mov    edx,esi
ffff800000802656:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:206
}
ffff800000802658:	90                   	nop
ffff800000802659:	5d                   	pop    rbp
ffff80000080265a:	c3                   	ret    

ffff80000080265b <page_err>:
page_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:207
void page_err(){
ffff80000080265b:	f3 0f 1e fa          	endbr64 
ffff80000080265f:	55                   	push   rbp
ffff800000802660:	48 89 e5             	mov    rbp,rsp
ffff800000802663:	41 57                	push   r15
ffff800000802665:	41 55                	push   r13
ffff800000802667:	41 54                	push   r12
ffff800000802669:	53                   	push   rbx
ffff80000080266a:	48 83 ec 30          	sub    rsp,0x30
ffff80000080266e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080266e <page_err+0x13>
ffff800000802675:	49 bb e2 e8 11 00 00 	movabs r11,0x11e8e2
ffff80000080267c:	00 00 00 
ffff80000080267f:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:208
    asm("cli");
ffff800000802682:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:209
    printf("page err\n");
ffff800000802683:	48 b8 9d d4 ff ff ff 	movabs rax,0xffffffffffffd49d
ffff80000080268a:	ff ff ff 
ffff80000080268d:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802691:	48 89 c7             	mov    rdi,rax
ffff800000802694:	49 89 df             	mov    r15,rbx
ffff800000802697:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080269c:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff8000008026a3:	ff ff ff 
ffff8000008026a6:	48 01 da             	add    rdx,rbx
ffff8000008026a9:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:210
    unsigned long err_code=0,l_addr=0;
ffff8000008026ab:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff8000008026b2:	00 
ffff8000008026b3:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff8000008026ba:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:211
    asm volatile("mov 8(%%rbp),%0":"=r"(err_code));
ffff8000008026bb:	48 8b 45 08          	mov    rax,QWORD PTR [rbp+0x8]
ffff8000008026bf:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:212
    asm volatile("mov %%cr2,%0":"=r"(l_addr));//试图访问的地址
ffff8000008026c3:	0f 20 d0             	mov    rax,cr2
ffff8000008026c6:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:213
    int p=err_code&1;
ffff8000008026ca:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008026ce:	83 e0 01             	and    eax,0x1
ffff8000008026d1:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:215
    
    off_t *stk=0;
ffff8000008026d4:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff8000008026db:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:216
    asm volatile("mov %%rbp,%0":"=m"(stk));
ffff8000008026dc:	48 89 6d b8          	mov    QWORD PTR [rbp-0x48],rbp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:217
    stk-=2;
ffff8000008026e0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008026e4:	48 83 e8 10          	sub    rax,0x10
ffff8000008026e8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:218
    backtrace(stk);
ffff8000008026ec:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008026f0:	48 89 c7             	mov    rdi,rax
ffff8000008026f3:	49 89 df             	mov    r15,rbx
ffff8000008026f6:	48 b8 37 01 ee ff ff 	movabs rax,0xffffffffffee0137
ffff8000008026fd:	ff ff ff 
ffff800000802700:	48 01 d8             	add    rax,rbx
ffff800000802703:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:220

    if(!p)
ffff800000802705:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff800000802709:	75 72                	jne    ffff80000080277d <page_err+0x122>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:227
        //accessing non-existent page
        //检查地址合法性
        if(l_addr>=MEM_END)
            ;
        //在进程的页表中申请新页
        smmap(get_phyaddr(req_a_page()),l_addr&~0xfff,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,current->pml4);
ffff80000080270b:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000802712:	ff ff ff 
ffff800000802715:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802719:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080271c:	4c 8b a0 e0 00 00 00 	mov    r12,QWORD PTR [rax+0xe0]
ffff800000802723:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000802727:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff80000080272d:	49 89 c5             	mov    r13,rax
ffff800000802730:	49 89 df             	mov    r15,rbx
ffff800000802733:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802738:	48 ba d0 1d ee ff ff 	movabs rdx,0xffffffffffee1dd0
ffff80000080273f:	ff ff ff 
ffff800000802742:	48 01 da             	add    rdx,rbx
ffff800000802745:	ff d2                	call   rdx
ffff800000802747:	89 c7                	mov    edi,eax
ffff800000802749:	49 89 df             	mov    r15,rbx
ffff80000080274c:	48 b8 e8 20 ee ff ff 	movabs rax,0xffffffffffee20e8
ffff800000802753:	ff ff ff 
ffff800000802756:	48 01 d8             	add    rax,rbx
ffff800000802759:	ff d0                	call   rax
ffff80000080275b:	48 98                	cdqe   
ffff80000080275d:	4c 89 e1             	mov    rcx,r12
ffff800000802760:	ba 07 00 00 00       	mov    edx,0x7
ffff800000802765:	4c 89 ee             	mov    rsi,r13
ffff800000802768:	48 89 c7             	mov    rdi,rax
ffff80000080276b:	49 89 df             	mov    r15,rbx
ffff80000080276e:	48 b8 77 0e ee ff ff 	movabs rax,0xffffffffffee0e77
ffff800000802775:	ff ff ff 
ffff800000802778:	48 01 d8             	add    rax,rbx
ffff80000080277b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:245
    }
    else
    {
        //page level protection
    }
    p=err_code&2;
ffff80000080277d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802781:	83 e0 02             	and    eax,0x2
ffff800000802784:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:246
    if(p)printf("when writing\n");else //puts("when reading");
ffff800000802787:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080278b:	74 2a                	je     ffff8000008027b7 <page_err+0x15c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:246 (discriminator 1)
ffff80000080278d:	48 b8 a7 d4 ff ff ff 	movabs rax,0xffffffffffffd4a7
ffff800000802794:	ff ff ff 
ffff800000802797:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080279b:	48 89 c7             	mov    rdi,rax
ffff80000080279e:	49 89 df             	mov    r15,rbx
ffff8000008027a1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008027a6:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff8000008027ad:	ff ff ff 
ffff8000008027b0:	48 01 da             	add    rdx,rbx
ffff8000008027b3:	ff d2                	call   rdx
ffff8000008027b5:	eb 0a                	jmp    ffff8000008027c1 <page_err+0x166>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:247
    p=err_code&4;
ffff8000008027b7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008027bb:	83 e0 04             	and    eax,0x4
ffff8000008027be:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:248
    if(!p)printf("supervisor mode\n");else //puts("user mode");
ffff8000008027c1:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff8000008027c5:	75 2a                	jne    ffff8000008027f1 <page_err+0x196>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:248 (discriminator 1)
ffff8000008027c7:	48 b8 b5 d4 ff ff ff 	movabs rax,0xffffffffffffd4b5
ffff8000008027ce:	ff ff ff 
ffff8000008027d1:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008027d5:	48 89 c7             	mov    rdi,rax
ffff8000008027d8:	49 89 df             	mov    r15,rbx
ffff8000008027db:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008027e0:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff8000008027e7:	ff ff ff 
ffff8000008027ea:	48 01 da             	add    rdx,rbx
ffff8000008027ed:	ff d2                	call   rdx
ffff8000008027ef:	eb 0a                	jmp    ffff8000008027fb <page_err+0x1a0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:249
    p=err_code&16;
ffff8000008027f1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008027f5:	83 e0 10             	and    eax,0x10
ffff8000008027f8:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:250
    if(p)printf("an instruction tries to fetch\n");
ffff8000008027fb:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff8000008027ff:	74 28                	je     ffff800000802829 <page_err+0x1ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:250 (discriminator 1)
ffff800000802801:	48 b8 c8 d4 ff ff ff 	movabs rax,0xffffffffffffd4c8
ffff800000802808:	ff ff ff 
ffff80000080280b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080280f:	48 89 c7             	mov    rdi,rax
ffff800000802812:	49 89 df             	mov    r15,rbx
ffff800000802815:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080281a:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff800000802821:	ff ff ff 
ffff800000802824:	48 01 da             	add    rdx,rbx
ffff800000802827:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:251
    unsigned int addr=0;
ffff800000802829:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:252
    asm volatile("mov 8(%%rbp),%0":"=r"(addr));
ffff800000802830:	8b 45 08             	mov    eax,DWORD PTR [rbp+0x8]
ffff800000802833:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:253
    printf("occurred at %x(paddr), %x(laddr)\n",addr,l_addr);
ffff800000802836:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080283a:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080283d:	89 c6                	mov    esi,eax
ffff80000080283f:	48 b8 e8 d4 ff ff ff 	movabs rax,0xffffffffffffd4e8
ffff800000802846:	ff ff ff 
ffff800000802849:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080284d:	48 89 c7             	mov    rdi,rax
ffff800000802850:	49 89 df             	mov    r15,rbx
ffff800000802853:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802858:	48 b9 71 0a ee ff ff 	movabs rcx,0xffffffffffee0a71
ffff80000080285f:	ff ff ff 
ffff800000802862:	48 01 d9             	add    rcx,rbx
ffff800000802865:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:265
    }*/
    //杀死问题进程
//    del_proc(cur_proc);
    // printf("killed the problem process.\n");
    // printf("shell:>");
    eoi();
ffff800000802867:	49 89 df             	mov    r15,rbx
ffff80000080286a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080286f:	48 ba fe 71 ee ff ff 	movabs rdx,0xffffffffffee71fe
ffff800000802876:	ff ff ff 
ffff800000802879:	48 01 da             	add    rdx,rbx
ffff80000080287c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:267
    //这里对esp的加法是必要的，因为page fault多push了一个错误码，但是iret识别不了
    __asm__ volatile ("sti \r\n  leave\n add $8,%rsp \n iretq");
ffff80000080287e:	fb                   	sti    
ffff80000080287f:	c9                   	leave  
ffff800000802880:	48 83 c4 08          	add    rsp,0x8
ffff800000802884:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:268
}
ffff800000802886:	90                   	nop
ffff800000802887:	48 83 c4 30          	add    rsp,0x30
ffff80000080288b:	5b                   	pop    rbx
ffff80000080288c:	41 5c                	pop    r12
ffff80000080288e:	41 5d                	pop    r13
ffff800000802890:	41 5f                	pop    r15
ffff800000802892:	5d                   	pop    rbp
ffff800000802893:	c3                   	ret    

ffff800000802894 <init_memory>:
init_memory():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:270
void init_memory()
{
ffff800000802894:	f3 0f 1e fa          	endbr64 
ffff800000802898:	55                   	push   rbp
ffff800000802899:	48 89 e5             	mov    rbp,rsp
ffff80000080289c:	41 57                	push   r15
ffff80000080289e:	53                   	push   rbx
ffff80000080289f:	48 83 ec 60          	sub    rsp,0x60
ffff8000008028a3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008028a3 <init_memory+0xf>
ffff8000008028aa:	49 bb ad e6 11 00 00 	movabs r11,0x11e6ad
ffff8000008028b1:	00 00 00 
ffff8000008028b4:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:273
    extern addr_t _knl_end,_knl_start;//lds中声明的内核的结尾地址，放置位图
    //获取可用内存大小mem_size
    size_t tot_mem_size=mmap_struct[mmap_t_i-1].base+mmap_struct[mmap_t_i-1].len,mem_size=0;
ffff8000008028b7:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008028be:	ff ff ff 
ffff8000008028c1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008028c5:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008028c7:	8d 50 ff             	lea    edx,[rax-0x1]
ffff8000008028ca:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff8000008028d1:	ff ff ff 
ffff8000008028d4:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008028d8:	48 63 d2             	movsxd rdx,edx
ffff8000008028db:	48 89 d0             	mov    rax,rdx
ffff8000008028de:	48 01 c0             	add    rax,rax
ffff8000008028e1:	48 01 d0             	add    rax,rdx
ffff8000008028e4:	48 c1 e0 03          	shl    rax,0x3
ffff8000008028e8:	48 01 c8             	add    rax,rcx
ffff8000008028eb:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008028ee:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008028f5:	ff ff ff 
ffff8000008028f8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008028fc:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008028fe:	8d 50 ff             	lea    edx,[rax-0x1]
ffff800000802901:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff800000802908:	ff ff ff 
ffff80000080290b:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff80000080290f:	48 63 d2             	movsxd rdx,edx
ffff800000802912:	48 89 d0             	mov    rax,rdx
ffff800000802915:	48 01 c0             	add    rax,rax
ffff800000802918:	48 01 d0             	add    rax,rdx
ffff80000080291b:	48 c1 e0 03          	shl    rax,0x3
ffff80000080291f:	48 01 f0             	add    rax,rsi
ffff800000802922:	48 83 c0 08          	add    rax,0x8
ffff800000802926:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802929:	48 01 c8             	add    rax,rcx
ffff80000080292c:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff800000802930:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000802937:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:274
    for(int i=0;i<mmap_t_i;i++)
ffff800000802938:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080293f:	eb 64                	jmp    ffff8000008029a5 <init_memory+0x111>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:276
    {
        if(mmap_struct[i].type==MULTIBOOT_MEMORY_AVAILABLE)
ffff800000802941:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff800000802948:	ff ff ff 
ffff80000080294b:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080294f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802952:	48 63 d0             	movsxd rdx,eax
ffff800000802955:	48 89 d0             	mov    rax,rdx
ffff800000802958:	48 01 c0             	add    rax,rax
ffff80000080295b:	48 01 d0             	add    rax,rdx
ffff80000080295e:	48 c1 e0 03          	shl    rax,0x3
ffff800000802962:	48 01 c8             	add    rax,rcx
ffff800000802965:	48 83 c0 10          	add    rax,0x10
ffff800000802969:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080296c:	48 83 f8 01          	cmp    rax,0x1
ffff800000802970:	75 2f                	jne    ffff8000008029a1 <init_memory+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:277
            mem_size+=mmap_struct[i].len;
ffff800000802972:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff800000802979:	ff ff ff 
ffff80000080297c:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802980:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802983:	48 63 d0             	movsxd rdx,eax
ffff800000802986:	48 89 d0             	mov    rax,rdx
ffff800000802989:	48 01 c0             	add    rax,rax
ffff80000080298c:	48 01 d0             	add    rax,rdx
ffff80000080298f:	48 c1 e0 03          	shl    rax,0x3
ffff800000802993:	48 01 c8             	add    rax,rcx
ffff800000802996:	48 83 c0 08          	add    rax,0x8
ffff80000080299a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080299d:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:274 (discriminator 2)
    for(int i=0;i<mmap_t_i;i++)
ffff8000008029a1:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:274 (discriminator 1)
ffff8000008029a5:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008029ac:	ff ff ff 
ffff8000008029af:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008029b3:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008029b5:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008029b8:	7c 87                	jl     ffff800000802941 <init_memory+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:279
    }
    usr_mem_pa=PAGE_4K_ALIGN(mem_size/2);
ffff8000008029ba:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008029be:	48 d1 e8             	shr    rax,1
ffff8000008029c1:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff8000008029c7:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff8000008029cd:	48 89 c2             	mov    rdx,rax
ffff8000008029d0:	48 b8 f0 fc ff ff ff 	movabs rax,0xfffffffffffffcf0
ffff8000008029d7:	ff ff ff 
ffff8000008029da:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008029de:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:286
    /*
     * 注：物理内存的一半会分给内核。
     * 前半部分是计算内存大小使多少个页，在位图中，一页表示为一位，所以除以后面部分，
     * 即一页位图可以有多少位。
     * */
    pmalloc_entc= tot_mem_size / PAGE_4K_SIZE/32;
ffff8000008029e1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008029e5:	48 c1 e8 11          	shr    rax,0x11
ffff8000008029e9:	89 c2                	mov    edx,eax
ffff8000008029eb:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff8000008029f2:	ff ff ff 
ffff8000008029f5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008029f9:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:287
    int pgc=(tot_mem_size/PAGE_4K_SIZE)/(PAGE_4K_SIZE*8);
ffff8000008029fb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008029ff:	48 c1 e8 1b          	shr    rax,0x1b
ffff800000802a03:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:289
    //计算出位图所需的字节数
    int pg_bytes=pgc>>5;//=/32
ffff800000802a06:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000802a09:	c1 f8 05             	sar    eax,0x5
ffff800000802a0c:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:292
    //初始化vmalloc内存位图
    //计算位图需要多少个int
    size_t vmec= (mem_size/2-0x1000000)/PAGE_4K_SIZE/32;//去掉内核代码16M
ffff800000802a0f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802a13:	48 d1 e8             	shr    rax,1
ffff800000802a16:	48 2d 00 00 00 01    	sub    rax,0x1000000
ffff800000802a1c:	48 c1 e8 11          	shr    rax,0x11
ffff800000802a20:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:293
    size_t vmms=vmec*4/PAGE_4K_SIZE;//位图自己需要多少页
ffff800000802a24:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000802a28:	48 c1 e0 02          	shl    rax,0x2
ffff800000802a2c:	48 c1 e8 0c          	shr    rax,0xc
ffff800000802a30:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:294
    comprintf("tot memsize:0x%l,available size 0x%l,kmalloc pages count:%d,kmalloc bitmap taking 0x%d pages\n", tot_mem_size,mem_size,vmec,vmms);
ffff800000802a34:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff800000802a38:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
ffff800000802a3c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000802a40:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000802a44:	49 89 f0             	mov    r8,rsi
ffff800000802a47:	48 89 c6             	mov    rsi,rax
ffff800000802a4a:	48 b8 10 d5 ff ff ff 	movabs rax,0xffffffffffffd510
ffff800000802a51:	ff ff ff 
ffff800000802a54:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802a58:	48 89 c7             	mov    rdi,rax
ffff800000802a5b:	49 89 df             	mov    r15,rbx
ffff800000802a5e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802a63:	49 b9 b3 1c ef ff ff 	movabs r9,0xffffffffffef1cb3
ffff800000802a6a:	ff ff ff 
ffff800000802a6d:	49 01 d9             	add    r9,rbx
ffff800000802a70:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:295
    if(vmec*4%PAGE_4K_SIZE)
ffff800000802a73:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000802a77:	48 c1 e0 02          	shl    rax,0x2
ffff800000802a7b:	25 fc 0f 00 00       	and    eax,0xffc
ffff800000802a80:	48 85 c0             	test   rax,rax
ffff800000802a83:	74 05                	je     ffff800000802a8a <init_memory+0x1f6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:296
        vmms++;
ffff800000802a85:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:297
    for(int i=0;i<vmec;i++){
ffff800000802a8a:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff800000802a91:	eb 27                	jmp    ffff800000802aba <init_memory+0x226>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:298 (discriminator 3)
        vmalloc_map[i]=0;
ffff800000802a93:	48 b8 30 fd ff ff ff 	movabs rax,0xfffffffffffffd30
ffff800000802a9a:	ff ff ff 
ffff800000802a9d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802aa1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802aa4:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000802aa7:	48 98                	cdqe   
ffff800000802aa9:	48 c1 e0 02          	shl    rax,0x2
ffff800000802aad:	48 01 d0             	add    rax,rdx
ffff800000802ab0:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:297 (discriminator 3)
    for(int i=0;i<vmec;i++){
ffff800000802ab6:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:297 (discriminator 1)
ffff800000802aba:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000802abd:	48 98                	cdqe   
ffff800000802abf:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff800000802ac3:	77 ce                	ja     ffff800000802a93 <init_memory+0x1ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:301
    }
    //位图占用前几页
    for(int i=0,j=0;j*32+i<vmms;i++)
ffff800000802ac5:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff800000802acc:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000802ad3:	eb 61                	jmp    ffff800000802b36 <init_memory+0x2a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:303
    {
        if(i==32)
ffff800000802ad5:	83 7d d0 20          	cmp    DWORD PTR [rbp-0x30],0x20
ffff800000802ad9:	75 0b                	jne    ffff800000802ae6 <init_memory+0x252>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:305
        {
            i=0;
ffff800000802adb:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:306
            j++;
ffff800000802ae2:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:308 (discriminator 2)
        }
        vmalloc_map[j]|=1u<<i;
ffff800000802ae6:	48 b8 30 fd ff ff ff 	movabs rax,0xfffffffffffffd30
ffff800000802aed:	ff ff ff 
ffff800000802af0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802af4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802af7:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000802afa:	48 98                	cdqe   
ffff800000802afc:	48 c1 e0 02          	shl    rax,0x2
ffff800000802b00:	48 01 d0             	add    rax,rdx
ffff800000802b03:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802b05:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000802b08:	be 01 00 00 00       	mov    esi,0x1
ffff800000802b0d:	89 c1                	mov    ecx,eax
ffff800000802b0f:	d3 e6                	shl    esi,cl
ffff800000802b11:	48 b8 30 fd ff ff ff 	movabs rax,0xfffffffffffffd30
ffff800000802b18:	ff ff ff 
ffff800000802b1b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802b1f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802b22:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000802b25:	48 98                	cdqe   
ffff800000802b27:	48 c1 e0 02          	shl    rax,0x2
ffff800000802b2b:	48 01 c8             	add    rax,rcx
ffff800000802b2e:	09 f2                	or     edx,esi
ffff800000802b30:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:301 (discriminator 2)
    for(int i=0,j=0;j*32+i<vmms;i++)
ffff800000802b32:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:301 (discriminator 1)
ffff800000802b36:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000802b39:	c1 e0 05             	shl    eax,0x5
ffff800000802b3c:	89 c2                	mov    edx,eax
ffff800000802b3e:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000802b41:	01 d0                	add    eax,edx
ffff800000802b43:	48 98                	cdqe   
ffff800000802b45:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff800000802b49:	77 8a                	ja     ffff800000802ad5 <init_memory+0x241>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:311
    }
    //kmalloc连续的内存
    page_map=kmallocat(0,pgc);//(unsigned int*)PAGE_4K_ALIGN(0xc00000);
ffff800000802b4b:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000802b4e:	89 c6                	mov    esi,eax
ffff800000802b50:	bf 00 00 00 00       	mov    edi,0x0
ffff800000802b55:	49 89 df             	mov    r15,rbx
ffff800000802b58:	48 b8 ee 13 ee ff ff 	movabs rax,0xffffffffffee13ee
ffff800000802b5f:	ff ff ff 
ffff800000802b62:	48 01 d8             	add    rax,rbx
ffff800000802b65:	ff d0                	call   rax
ffff800000802b67:	48 89 c2             	mov    rdx,rax
ffff800000802b6a:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802b71:	ff ff ff 
ffff800000802b74:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802b78:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:312
    int* p=page_map;
ffff800000802b7b:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802b82:	ff ff ff 
ffff800000802b85:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802b89:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802b8c:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:313
    addr_t curp=0;
ffff800000802b90:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff800000802b97:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:315
    //不能使用的内存提前占用掉
    for(int i=0;i<mmap_t_i;i++){
ffff800000802b98:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
ffff800000802b9f:	e9 1f 01 00 00       	jmp    ffff800000802cc3 <init_memory+0x42f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:316
        if(mmap_struct[i].type==MULTIBOOT_MEMORY_AVAILABLE)
ffff800000802ba4:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff800000802bab:	ff ff ff 
ffff800000802bae:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802bb2:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff800000802bb5:	48 63 d0             	movsxd rdx,eax
ffff800000802bb8:	48 89 d0             	mov    rax,rdx
ffff800000802bbb:	48 01 c0             	add    rax,rax
ffff800000802bbe:	48 01 d0             	add    rax,rdx
ffff800000802bc1:	48 c1 e0 03          	shl    rax,0x3
ffff800000802bc5:	48 01 c8             	add    rax,rcx
ffff800000802bc8:	48 83 c0 10          	add    rax,0x10
ffff800000802bcc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802bcf:	48 83 f8 01          	cmp    rax,0x1
ffff800000802bd3:	0f 84 e5 00 00 00    	je     ffff800000802cbe <init_memory+0x42a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:318
            continue;
        int b=(mmap_struct[i].base-usr_mem_pa)/PAGE_4K_SIZE;
ffff800000802bd9:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff800000802be0:	ff ff ff 
ffff800000802be3:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802be7:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff800000802bea:	48 63 d0             	movsxd rdx,eax
ffff800000802bed:	48 89 d0             	mov    rax,rdx
ffff800000802bf0:	48 01 c0             	add    rax,rax
ffff800000802bf3:	48 01 d0             	add    rax,rdx
ffff800000802bf6:	48 c1 e0 03          	shl    rax,0x3
ffff800000802bfa:	48 01 c8             	add    rax,rcx
ffff800000802bfd:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802c00:	48 b8 f0 fc ff ff ff 	movabs rax,0xfffffffffffffcf0
ffff800000802c07:	ff ff ff 
ffff800000802c0a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802c0e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802c11:	48 89 d0             	mov    rax,rdx
ffff800000802c14:	48 29 c8             	sub    rax,rcx
ffff800000802c17:	48 c1 e8 0c          	shr    rax,0xc
ffff800000802c1b:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:319
        int l=mmap_struct[i].len/PAGE_4K_SIZE;
ffff800000802c1e:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff800000802c25:	ff ff ff 
ffff800000802c28:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802c2c:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff800000802c2f:	48 63 d0             	movsxd rdx,eax
ffff800000802c32:	48 89 d0             	mov    rax,rdx
ffff800000802c35:	48 01 c0             	add    rax,rax
ffff800000802c38:	48 01 d0             	add    rax,rdx
ffff800000802c3b:	48 c1 e0 03          	shl    rax,0x3
ffff800000802c3f:	48 01 c8             	add    rax,rcx
ffff800000802c42:	48 83 c0 08          	add    rax,0x8
ffff800000802c46:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802c49:	48 c1 e8 0c          	shr    rax,0xc
ffff800000802c4d:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:320
        for(int j=0;j<l;j++){
ffff800000802c50:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
ffff800000802c57:	eb 5b                	jmp    ffff800000802cb4 <init_memory+0x420>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:321 (discriminator 3)
            p[b+j/32]|=1u<<(j%32);
ffff800000802c59:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000802c5c:	8d 50 1f             	lea    edx,[rax+0x1f]
ffff800000802c5f:	85 c0                	test   eax,eax
ffff800000802c61:	0f 48 c2             	cmovs  eax,edx
ffff800000802c64:	c1 f8 05             	sar    eax,0x5
ffff800000802c67:	89 c6                	mov    esi,eax
ffff800000802c69:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff800000802c6c:	01 f0                	add    eax,esi
ffff800000802c6e:	48 98                	cdqe   
ffff800000802c70:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000802c77:	00 
ffff800000802c78:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000802c7c:	48 01 d0             	add    rax,rdx
ffff800000802c7f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802c81:	89 c7                	mov    edi,eax
ffff800000802c83:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000802c86:	83 e0 1f             	and    eax,0x1f
ffff800000802c89:	ba 01 00 00 00       	mov    edx,0x1
ffff800000802c8e:	89 c1                	mov    ecx,eax
ffff800000802c90:	d3 e2                	shl    edx,cl
ffff800000802c92:	89 d0                	mov    eax,edx
ffff800000802c94:	09 c7                	or     edi,eax
ffff800000802c96:	89 fa                	mov    edx,edi
ffff800000802c98:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff800000802c9b:	01 f0                	add    eax,esi
ffff800000802c9d:	48 98                	cdqe   
ffff800000802c9f:	48 8d 0c 85 00 00 00 	lea    rcx,[rax*4+0x0]
ffff800000802ca6:	00 
ffff800000802ca7:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000802cab:	48 01 c8             	add    rax,rcx
ffff800000802cae:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:320 (discriminator 3)
        for(int j=0;j<l;j++){
ffff800000802cb0:	83 45 c4 01          	add    DWORD PTR [rbp-0x3c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:320 (discriminator 1)
ffff800000802cb4:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000802cb7:	3b 45 90             	cmp    eax,DWORD PTR [rbp-0x70]
ffff800000802cba:	7c 9d                	jl     ffff800000802c59 <init_memory+0x3c5>
ffff800000802cbc:	eb 01                	jmp    ffff800000802cbf <init_memory+0x42b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:317
            continue;
ffff800000802cbe:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:315 (discriminator 2)
    for(int i=0;i<mmap_t_i;i++){
ffff800000802cbf:	83 45 c8 01          	add    DWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:315 (discriminator 1)
ffff800000802cc3:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000802cca:	ff ff ff 
ffff800000802ccd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802cd1:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802cd3:	39 45 c8             	cmp    DWORD PTR [rbp-0x38],eax
ffff800000802cd6:	0f 8c c8 fe ff ff    	jl     ffff800000802ba4 <init_memory+0x310>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:325
        }
    }
    //低1gb提前占用掉 knl
    for(int j=0;j<0x2000;j++){
ffff800000802cdc:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [rbp-0x40],0x0
ffff800000802ce3:	eb 27                	jmp    ffff800000802d0c <init_memory+0x478>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:326 (discriminator 3)
        page_map[j]=-1;
ffff800000802ce5:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802cec:	ff ff ff 
ffff800000802cef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802cf3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802cf6:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff800000802cf9:	48 98                	cdqe   
ffff800000802cfb:	48 c1 e0 02          	shl    rax,0x2
ffff800000802cff:	48 01 d0             	add    rax,rdx
ffff800000802d02:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:325 (discriminator 3)
    for(int j=0;j<0x2000;j++){
ffff800000802d08:	83 45 c0 01          	add    DWORD PTR [rbp-0x40],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:325 (discriminator 1)
ffff800000802d0c:	81 7d c0 ff 1f 00 00 	cmp    DWORD PTR [rbp-0x40],0x1fff
ffff800000802d13:	7e d0                	jle    ffff800000802ce5 <init_memory+0x451>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:356
        pd[i+mapai]=ptpm|PAGE_PRESENT|PAGE_RWX;
    }
    page_item *pdpt=(addr_t)pml4[256]&PAGE_4K_MASK+KNL_BASE;
    pdpt[0]=pdpm|PAGE_PRESENT|PAGE_RWX;*/

}
ffff800000802d15:	90                   	nop
ffff800000802d16:	90                   	nop
ffff800000802d17:	48 83 c4 60          	add    rsp,0x60
ffff800000802d1b:	5b                   	pop    rbx
ffff800000802d1c:	41 5f                	pop    r15
ffff800000802d1e:	5d                   	pop    rbp
ffff800000802d1f:	c3                   	ret    

ffff800000802d20 <req_a_page>:
req_a_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:362
/*
page_map存储方式:
0x00000000
little end
*/
addr_t req_a_page(){
ffff800000802d20:	f3 0f 1e fa          	endbr64 
ffff800000802d24:	55                   	push   rbp
ffff800000802d25:	48 89 e5             	mov    rbp,rsp
ffff800000802d28:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802d28 <req_a_page+0x8>
ffff800000802d2f:	49 bb 28 e2 11 00 00 	movabs r11,0x11e228
ffff800000802d36:	00 00 00 
ffff800000802d39:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:363
    for(int i=0; i < pmalloc_entc; i++){
ffff800000802d3c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000802d43:	e9 d3 00 00 00       	jmp    ffff800000802e1b <req_a_page+0xfb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:364
        for(int j=0;j<32;j++){
ffff800000802d48:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff800000802d4f:	e9 b9 00 00 00       	jmp    ffff800000802e0d <req_a_page+0xed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:365
            unsigned int bit=page_map[i]&(1<<j);
ffff800000802d54:	48 ba 88 fe ff ff ff 	movabs rdx,0xfffffffffffffe88
ffff800000802d5b:	ff ff ff 
ffff800000802d5e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802d62:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000802d65:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802d68:	48 63 d2             	movsxd rdx,edx
ffff800000802d6b:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802d6f:	48 01 ca             	add    rdx,rcx
ffff800000802d72:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802d74:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000802d77:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802d7c:	89 d1                	mov    ecx,edx
ffff800000802d7e:	d3 e7                	shl    edi,cl
ffff800000802d80:	89 fa                	mov    edx,edi
ffff800000802d82:	21 f2                	and    edx,esi
ffff800000802d84:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:366
            if((i*32+j)*4096>=0x100000&&(bit==0u))
ffff800000802d87:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802d8a:	89 d1                	mov    ecx,edx
ffff800000802d8c:	c1 e1 05             	shl    ecx,0x5
ffff800000802d8f:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000802d92:	01 ca                	add    edx,ecx
ffff800000802d94:	c1 e2 0c             	shl    edx,0xc
ffff800000802d97:	81 fa ff ff 0f 00    	cmp    edx,0xfffff
ffff800000802d9d:	7e 6a                	jle    ffff800000802e09 <req_a_page+0xe9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:366 (discriminator 1)
ffff800000802d9f:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
ffff800000802da3:	75 64                	jne    ffff800000802e09 <req_a_page+0xe9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:369
            {
                // comprintf("req_a_page:before:page_map[%d]=0x%x,",i,page_map[i]);
                page_map[i]=page_map[i]|(1<<j);
ffff800000802da5:	48 ba 88 fe ff ff ff 	movabs rdx,0xfffffffffffffe88
ffff800000802dac:	ff ff ff 
ffff800000802daf:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802db3:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000802db6:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802db9:	48 63 d2             	movsxd rdx,edx
ffff800000802dbc:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802dc0:	48 01 ca             	add    rdx,rcx
ffff800000802dc3:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802dc5:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000802dc8:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802dcd:	89 d1                	mov    ecx,edx
ffff800000802dcf:	d3 e7                	shl    edi,cl
ffff800000802dd1:	89 fa                	mov    edx,edi
ffff800000802dd3:	89 d1                	mov    ecx,edx
ffff800000802dd5:	48 ba 88 fe ff ff ff 	movabs rdx,0xfffffffffffffe88
ffff800000802ddc:	ff ff ff 
ffff800000802ddf:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000802de3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802de6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802de9:	48 98                	cdqe   
ffff800000802deb:	48 c1 e0 02          	shl    rax,0x2
ffff800000802def:	48 01 d0             	add    rax,rdx
ffff800000802df2:	09 ce                	or     esi,ecx
ffff800000802df4:	89 f2                	mov    edx,esi
ffff800000802df6:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:371
                // comprintf("now = 0x%x",page_map[i]);
                return i*32+j;//num of page
ffff800000802df8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802dfb:	c1 e0 05             	shl    eax,0x5
ffff800000802dfe:	89 c2                	mov    edx,eax
ffff800000802e00:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802e03:	01 d0                	add    eax,edx
ffff800000802e05:	48 98                	cdqe   
ffff800000802e07:	eb 32                	jmp    ffff800000802e3b <req_a_page+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:364 (discriminator 2)
        for(int j=0;j<32;j++){
ffff800000802e09:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:364 (discriminator 1)
ffff800000802e0d:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
ffff800000802e11:	0f 8e 3d ff ff ff    	jle    ffff800000802d54 <req_a_page+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:363 (discriminator 2)
    for(int i=0; i < pmalloc_entc; i++){
ffff800000802e17:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:363 (discriminator 1)
ffff800000802e1b:	48 ba 18 ff ff ff ff 	movabs rdx,0xffffffffffffff18
ffff800000802e22:	ff ff ff 
ffff800000802e25:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802e29:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000802e2b:	39 55 fc             	cmp    DWORD PTR [rbp-0x4],edx
ffff800000802e2e:	0f 8c 14 ff ff ff    	jl     ffff800000802d48 <req_a_page+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:376

            }
        }
    }
    return -1;
ffff800000802e34:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:377
}
ffff800000802e3b:	5d                   	pop    rbp
ffff800000802e3c:	c3                   	ret    

ffff800000802e3d <pmalloc>:
pmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:379

void * pmalloc(){
ffff800000802e3d:	f3 0f 1e fa          	endbr64 
ffff800000802e41:	55                   	push   rbp
ffff800000802e42:	48 89 e5             	mov    rbp,rsp
ffff800000802e45:	41 57                	push   r15
ffff800000802e47:	53                   	push   rbx
ffff800000802e48:	48 83 ec 10          	sub    rsp,0x10
ffff800000802e4c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802e4c <pmalloc+0xf>
ffff800000802e53:	49 bb 04 e1 11 00 00 	movabs r11,0x11e104
ffff800000802e5a:	00 00 00 
ffff800000802e5d:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:380
    void *ret=(void*)(get_phyaddr(req_a_page()));
ffff800000802e60:	49 89 df             	mov    r15,rbx
ffff800000802e63:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802e68:	48 ba d0 1d ee ff ff 	movabs rdx,0xffffffffffee1dd0
ffff800000802e6f:	ff ff ff 
ffff800000802e72:	48 01 da             	add    rdx,rbx
ffff800000802e75:	ff d2                	call   rdx
ffff800000802e77:	89 c7                	mov    edi,eax
ffff800000802e79:	49 89 df             	mov    r15,rbx
ffff800000802e7c:	48 b8 e8 20 ee ff ff 	movabs rax,0xffffffffffee20e8
ffff800000802e83:	ff ff ff 
ffff800000802e86:	48 01 d8             	add    rax,rbx
ffff800000802e89:	ff d0                	call   rax
ffff800000802e8b:	48 98                	cdqe   
ffff800000802e8d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:382
    // comprintf("pmalloc():%l\n",ret);
    return ret;
ffff800000802e91:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:383
}
ffff800000802e95:	48 83 c4 10          	add    rsp,0x10
ffff800000802e99:	5b                   	pop    rbx
ffff800000802e9a:	41 5f                	pop    r15
ffff800000802e9c:	5d                   	pop    rbp
ffff800000802e9d:	c3                   	ret    

ffff800000802e9e <free_page>:
free_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:384
int free_page(char *paddr){
ffff800000802e9e:	f3 0f 1e fa          	endbr64 
ffff800000802ea2:	55                   	push   rbp
ffff800000802ea3:	48 89 e5             	mov    rbp,rsp
ffff800000802ea6:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000802ea6 <free_page+0x8>
ffff800000802ead:	49 bb aa e0 11 00 00 	movabs r11,0x11e0aa
ffff800000802eb4:	00 00 00 
ffff800000802eb7:	4c 01 da             	add    rdx,r11
ffff800000802eba:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:385
    int num=(int)paddr/4096;
ffff800000802ebe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802ec2:	8d 88 ff 0f 00 00    	lea    ecx,[rax+0xfff]
ffff800000802ec8:	85 c0                	test   eax,eax
ffff800000802eca:	0f 48 c1             	cmovs  eax,ecx
ffff800000802ecd:	c1 f8 0c             	sar    eax,0xc
ffff800000802ed0:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:386
    int n=num/32;
ffff800000802ed3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802ed6:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802ed9:	85 c0                	test   eax,eax
ffff800000802edb:	0f 48 c1             	cmovs  eax,ecx
ffff800000802ede:	c1 f8 05             	sar    eax,0x5
ffff800000802ee1:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:387
    int r=num%32;
ffff800000802ee4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802ee7:	89 c1                	mov    ecx,eax
ffff800000802ee9:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802eec:	c1 e9 1b             	shr    ecx,0x1b
ffff800000802eef:	01 c8                	add    eax,ecx
ffff800000802ef1:	83 e0 1f             	and    eax,0x1f
ffff800000802ef4:	29 c8                	sub    eax,ecx
ffff800000802ef6:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:388
    page_map[n]=page_map[n]&~(unsigned int)(1<<r);
ffff800000802ef9:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802f00:	ff ff ff 
ffff800000802f03:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802f07:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802f0a:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802f0d:	48 98                	cdqe   
ffff800000802f0f:	48 c1 e0 02          	shl    rax,0x2
ffff800000802f13:	48 01 c8             	add    rax,rcx
ffff800000802f16:	8b 30                	mov    esi,DWORD PTR [rax]
ffff800000802f18:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802f1b:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802f20:	89 c1                	mov    ecx,eax
ffff800000802f22:	d3 e7                	shl    edi,cl
ffff800000802f24:	89 f8                	mov    eax,edi
ffff800000802f26:	f7 d0                	not    eax
ffff800000802f28:	89 c1                	mov    ecx,eax
ffff800000802f2a:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000802f31:	ff ff ff 
ffff800000802f34:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802f38:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802f3b:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802f3e:	48 98                	cdqe   
ffff800000802f40:	48 c1 e0 02          	shl    rax,0x2
ffff800000802f44:	48 01 d0             	add    rax,rdx
ffff800000802f47:	21 ce                	and    esi,ecx
ffff800000802f49:	89 f2                	mov    edx,esi
ffff800000802f4b:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:389
}
ffff800000802f4d:	90                   	nop
ffff800000802f4e:	5d                   	pop    rbp
ffff800000802f4f:	c3                   	ret    

ffff800000802f50 <free_pages_at>:
free_pages_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:391

int free_pages_at(int base,int pgn){
ffff800000802f50:	f3 0f 1e fa          	endbr64 
ffff800000802f54:	55                   	push   rbp
ffff800000802f55:	48 89 e5             	mov    rbp,rsp
ffff800000802f58:	41 57                	push   r15
ffff800000802f5a:	53                   	push   rbx
ffff800000802f5b:	48 83 ec 20          	sub    rsp,0x20
ffff800000802f5f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802f5f <free_pages_at+0xf>
ffff800000802f66:	49 bb f1 df 11 00 00 	movabs r11,0x11dff1
ffff800000802f6d:	00 00 00 
ffff800000802f70:	4c 01 db             	add    rbx,r11
ffff800000802f73:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000802f76:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:392
    for(int i=0;i<pgn;i++){
ffff800000802f79:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000802f80:	eb 28                	jmp    ffff800000802faa <free_pages_at+0x5a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:393 (discriminator 3)
        free_page(base+i*PAGE_4K_SIZE);
ffff800000802f82:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802f85:	c1 e0 0c             	shl    eax,0xc
ffff800000802f88:	89 c2                	mov    edx,eax
ffff800000802f8a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000802f8d:	01 d0                	add    eax,edx
ffff800000802f8f:	48 98                	cdqe   
ffff800000802f91:	48 89 c7             	mov    rdi,rax
ffff800000802f94:	49 89 df             	mov    r15,rbx
ffff800000802f97:	48 b8 4e 1f ee ff ff 	movabs rax,0xffffffffffee1f4e
ffff800000802f9e:	ff ff ff 
ffff800000802fa1:	48 01 d8             	add    rax,rbx
ffff800000802fa4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:392 (discriminator 3)
    for(int i=0;i<pgn;i++){
ffff800000802fa6:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:392 (discriminator 1)
ffff800000802faa:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802fad:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000802fb0:	7c d0                	jl     ffff800000802f82 <free_pages_at+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:395
    }
}
ffff800000802fb2:	90                   	nop
ffff800000802fb3:	48 83 c4 20          	add    rsp,0x20
ffff800000802fb7:	5b                   	pop    rbx
ffff800000802fb8:	41 5f                	pop    r15
ffff800000802fba:	5d                   	pop    rbp
ffff800000802fbb:	c3                   	ret    

ffff800000802fbc <check_page>:
check_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:396
int check_page(int num){
ffff800000802fbc:	f3 0f 1e fa          	endbr64 
ffff800000802fc0:	55                   	push   rbp
ffff800000802fc1:	48 89 e5             	mov    rbp,rsp
ffff800000802fc4:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000802fc4 <check_page+0x8>
ffff800000802fcb:	49 bb 8c df 11 00 00 	movabs r11,0x11df8c
ffff800000802fd2:	00 00 00 
ffff800000802fd5:	4c 01 da             	add    rdx,r11
ffff800000802fd8:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:397
    int n=num/32;
ffff800000802fdb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802fde:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802fe1:	85 c0                	test   eax,eax
ffff800000802fe3:	0f 48 c1             	cmovs  eax,ecx
ffff800000802fe6:	c1 f8 05             	sar    eax,0x5
ffff800000802fe9:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:398
    int r=num%32;
ffff800000802fec:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802fef:	89 c1                	mov    ecx,eax
ffff800000802ff1:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802ff4:	c1 e9 1b             	shr    ecx,0x1b
ffff800000802ff7:	01 c8                	add    eax,ecx
ffff800000802ff9:	83 e0 1f             	and    eax,0x1f
ffff800000802ffc:	29 c8                	sub    eax,ecx
ffff800000802ffe:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:399
    int bit=page_map[n]&(1<<r);
ffff800000803001:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000803008:	ff ff ff 
ffff80000080300b:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080300f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803012:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000803015:	48 98                	cdqe   
ffff800000803017:	48 c1 e0 02          	shl    rax,0x2
ffff80000080301b:	48 01 d0             	add    rax,rdx
ffff80000080301e:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000803020:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000803023:	be 01 00 00 00       	mov    esi,0x1
ffff800000803028:	89 c1                	mov    ecx,eax
ffff80000080302a:	d3 e6                	shl    esi,cl
ffff80000080302c:	89 f0                	mov    eax,esi
ffff80000080302e:	21 d0                	and    eax,edx
ffff800000803030:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:400
    return bit;
ffff800000803033:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:401
}
ffff800000803036:	5d                   	pop    rbp
ffff800000803037:	c3                   	ret    

ffff800000803038 <get_phyaddr>:
get_phyaddr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:405
/*
 * 获得这个页对应的物理内存地址
 * */
int get_phyaddr(int num){
ffff800000803038:	f3 0f 1e fa          	endbr64 
ffff80000080303c:	55                   	push   rbp
ffff80000080303d:	48 89 e5             	mov    rbp,rsp
ffff800000803040:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803040 <get_phyaddr+0x8>
ffff800000803047:	49 bb 10 df 11 00 00 	movabs r11,0x11df10
ffff80000080304e:	00 00 00 
ffff800000803051:	4c 01 d8             	add    rax,r11
ffff800000803054:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:406
    if(num==-1)return -1;
ffff800000803057:	83 7d fc ff          	cmp    DWORD PTR [rbp-0x4],0xffffffff
ffff80000080305b:	75 07                	jne    ffff800000803064 <get_phyaddr+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:406 (discriminator 1)
ffff80000080305d:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000803062:	eb 06                	jmp    ffff80000080306a <get_phyaddr+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:407
    return num*0x1000;
ffff800000803064:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000803067:	c1 e0 0c             	shl    eax,0xc
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:408
}
ffff80000080306a:	5d                   	pop    rbp
ffff80000080306b:	c3                   	ret    

ffff80000080306c <set_page_item>:
set_page_item():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:411

void set_page_item(page_item *item_addr,int phy_addr,int attr)
{
ffff80000080306c:	f3 0f 1e fa          	endbr64 
ffff800000803070:	55                   	push   rbp
ffff800000803071:	48 89 e5             	mov    rbp,rsp
ffff800000803074:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803074 <set_page_item+0x8>
ffff80000080307b:	49 bb dc de 11 00 00 	movabs r11,0x11dedc
ffff800000803082:	00 00 00 
ffff800000803085:	4c 01 d8             	add    rax,r11
ffff800000803088:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080308c:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffff80000080308f:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:412
    *item_addr=0;
ffff800000803092:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803096:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:413
    *item_addr|=phy_addr&0xfffff000;
ffff80000080309d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008030a1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008030a4:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff8000008030a7:	89 c0                	mov    eax,eax
ffff8000008030a9:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff8000008030ae:	48 09 c2             	or     rdx,rax
ffff8000008030b1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008030b5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:414
    *item_addr|=attr;
ffff8000008030b8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008030bc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008030bf:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
ffff8000008030c2:	48 98                	cdqe   
ffff8000008030c4:	48 09 c2             	or     rdx,rax
ffff8000008030c7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008030cb:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:415
}
ffff8000008030ce:	90                   	nop
ffff8000008030cf:	5d                   	pop    rbp
ffff8000008030d0:	c3                   	ret    

ffff8000008030d1 <set_1gb_pdpt>:
set_1gb_pdpt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:417
void set_1gb_pdpt(page_item* ppdpt,int pa,unsigned int extra_attr)
{
ffff8000008030d1:	f3 0f 1e fa          	endbr64 
ffff8000008030d5:	55                   	push   rbp
ffff8000008030d6:	48 89 e5             	mov    rbp,rsp
ffff8000008030d9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008030d9 <set_1gb_pdpt+0x8>
ffff8000008030e0:	49 bb 77 de 11 00 00 	movabs r11,0x11de77
ffff8000008030e7:	00 00 00 
ffff8000008030ea:	4c 01 d8             	add    rax,r11
ffff8000008030ed:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff8000008030f1:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffff8000008030f4:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:418
    *ppdpt=0;
ffff8000008030f7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008030fb:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:419
    *ppdpt|=PAGE_PRESENT|PDPTE_1GB|extra_attr;
ffff800000803102:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803106:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803109:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080310c:	0c 81                	or     al,0x81
ffff80000080310e:	89 c0                	mov    eax,eax
ffff800000803110:	48 09 c2             	or     rdx,rax
ffff800000803113:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803117:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:420
    unsigned int hipa=pa&0xffffc0000000ul;
ffff80000080311a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080311d:	25 00 00 00 c0       	and    eax,0xc0000000
ffff800000803122:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:421
    *ppdpt|=hipa;
ffff800000803125:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803129:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080312c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080312f:	48 09 c2             	or     rdx,rax
ffff800000803132:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803136:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:422
}
ffff800000803139:	90                   	nop
ffff80000080313a:	5d                   	pop    rbp
ffff80000080313b:	c3                   	ret    

ffff80000080313c <set_2mb_pde>:
set_2mb_pde():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:424
void set_2mb_pde(page_item *pde, int pa, int extra_attr)
{
ffff80000080313c:	f3 0f 1e fa          	endbr64 
ffff800000803140:	55                   	push   rbp
ffff800000803141:	48 89 e5             	mov    rbp,rsp
ffff800000803144:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803144 <set_2mb_pde+0x8>
ffff80000080314b:	49 bb 0c de 11 00 00 	movabs r11,0x11de0c
ffff800000803152:	00 00 00 
ffff800000803155:	4c 01 d8             	add    rax,r11
ffff800000803158:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080315c:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffff80000080315f:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:425
    *pde=0;
ffff800000803162:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803166:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:426
    *pde|=PAGE_PRESENT|PAGE_4MB_PAGE|PDE_4MB_PAT|extra_attr;
ffff80000080316d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803171:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803174:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000803177:	0d 81 10 00 00       	or     eax,0x1081
ffff80000080317c:	48 98                	cdqe   
ffff80000080317e:	48 09 c2             	or     rdx,rax
ffff800000803181:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803185:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:427
    unsigned int hipa=pa&0xffc00000;
ffff800000803188:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080318b:	25 00 00 c0 ff       	and    eax,0xffc00000
ffff800000803190:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:428
    *pde|=hipa;
ffff800000803193:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803197:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080319a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080319d:	48 09 c2             	or     rdx,rax
ffff8000008031a0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008031a4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:429
}
ffff8000008031a7:	90                   	nop
ffff8000008031a8:	5d                   	pop    rbp
ffff8000008031a9:	c3                   	ret    

ffff8000008031aa <req_page_at>:
req_page_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:450
        page_map[i]&=(u32)(1<<j);
    return ret;
} */
//在bitmap申请指定的页面,base默认0x1000对齐
addr_t req_page_at(addr_t base,int pgn)
{
ffff8000008031aa:	f3 0f 1e fa          	endbr64 
ffff8000008031ae:	55                   	push   rbp
ffff8000008031af:	48 89 e5             	mov    rbp,rsp
ffff8000008031b2:	41 57                	push   r15
ffff8000008031b4:	53                   	push   rbx
ffff8000008031b5:	48 83 ec 20          	sub    rsp,0x20
ffff8000008031b9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008031b9 <req_page_at+0xf>
ffff8000008031c0:	49 bb 97 dd 11 00 00 	movabs r11,0x11dd97
ffff8000008031c7:	00 00 00 
ffff8000008031ca:	4c 01 db             	add    rbx,r11
ffff8000008031cd:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008031d1:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:451
    if(base==0)//不指定地址
ffff8000008031d4:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff8000008031d9:	75 32                	jne    ffff80000080320d <req_page_at+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:453
    {
        return get_phyaddr(req_a_page());
ffff8000008031db:	49 89 df             	mov    r15,rbx
ffff8000008031de:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008031e3:	48 ba d0 1d ee ff ff 	movabs rdx,0xffffffffffee1dd0
ffff8000008031ea:	ff ff ff 
ffff8000008031ed:	48 01 da             	add    rdx,rbx
ffff8000008031f0:	ff d2                	call   rdx
ffff8000008031f2:	89 c7                	mov    edi,eax
ffff8000008031f4:	49 89 df             	mov    r15,rbx
ffff8000008031f7:	48 b8 e8 20 ee ff ff 	movabs rax,0xffffffffffee20e8
ffff8000008031fe:	ff ff ff 
ffff800000803201:	48 01 d8             	add    rax,rbx
ffff800000803204:	ff d0                	call   rax
ffff800000803206:	48 98                	cdqe   
ffff800000803208:	e9 c6 00 00 00       	jmp    ffff8000008032d3 <req_page_at+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:455
    }
    if(!is_pgs_ava(base,pgn))return -1;//先检查
ffff80000080320d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803211:	89 c2                	mov    edx,eax
ffff800000803213:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000803216:	89 c6                	mov    esi,eax
ffff800000803218:	89 d7                	mov    edi,edx
ffff80000080321a:	49 89 df             	mov    r15,rbx
ffff80000080321d:	48 b8 5d 24 ee ff ff 	movabs rax,0xffffffffffee245d
ffff800000803224:	ff ff ff 
ffff800000803227:	48 01 d8             	add    rax,rbx
ffff80000080322a:	ff d0                	call   rax
ffff80000080322c:	85 c0                	test   eax,eax
ffff80000080322e:	75 0c                	jne    ffff80000080323c <req_page_at+0x92>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:455 (discriminator 1)
ffff800000803230:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000803237:	e9 97 00 00 00       	jmp    ffff8000008032d3 <req_page_at+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:456
    int pgni=base/4096;
ffff80000080323c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803240:	48 c1 e8 0c          	shr    rax,0xc
ffff800000803244:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:457
    int pgi=pgni/32;
ffff800000803247:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080324a:	8d 50 1f             	lea    edx,[rax+0x1f]
ffff80000080324d:	85 c0                	test   eax,eax
ffff80000080324f:	0f 48 c2             	cmovs  eax,edx
ffff800000803252:	c1 f8 05             	sar    eax,0x5
ffff800000803255:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:458
    int pgj=pgni%32;
ffff800000803258:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080325b:	99                   	cdq    
ffff80000080325c:	c1 ea 1b             	shr    edx,0x1b
ffff80000080325f:	01 d0                	add    eax,edx
ffff800000803261:	83 e0 1f             	and    eax,0x1f
ffff800000803264:	29 d0                	sub    eax,edx
ffff800000803266:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:459
    for(int i=0;i<pgn;i++)
ffff800000803269:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000803270:	eb 54                	jmp    ffff8000008032c6 <req_page_at+0x11c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:461 (discriminator 3)
    {
        page_map[i]|=(1<<pgj);
ffff800000803272:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000803279:	ff ff ff 
ffff80000080327c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803280:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803283:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803286:	48 98                	cdqe   
ffff800000803288:	48 c1 e0 02          	shl    rax,0x2
ffff80000080328c:	48 01 d0             	add    rax,rdx
ffff80000080328f:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000803291:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000803294:	be 01 00 00 00       	mov    esi,0x1
ffff800000803299:	89 c1                	mov    ecx,eax
ffff80000080329b:	d3 e6                	shl    esi,cl
ffff80000080329d:	89 f0                	mov    eax,esi
ffff80000080329f:	89 c6                	mov    esi,eax
ffff8000008032a1:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff8000008032a8:	ff ff ff 
ffff8000008032ab:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008032af:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008032b2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008032b5:	48 98                	cdqe   
ffff8000008032b7:	48 c1 e0 02          	shl    rax,0x2
ffff8000008032bb:	48 01 c8             	add    rax,rcx
ffff8000008032be:	09 f2                	or     edx,esi
ffff8000008032c0:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:459 (discriminator 3)
    for(int i=0;i<pgn;i++)
ffff8000008032c2:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:459 (discriminator 1)
ffff8000008032c6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008032c9:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff8000008032cc:	7c a4                	jl     ffff800000803272 <req_page_at+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:463
    }
    return 0;
ffff8000008032ce:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:465

}
ffff8000008032d3:	48 83 c4 20          	add    rsp,0x20
ffff8000008032d7:	5b                   	pop    rbx
ffff8000008032d8:	41 5f                	pop    r15
ffff8000008032da:	5d                   	pop    rbp
ffff8000008032db:	c3                   	ret    

ffff8000008032dc <chk_vm>:
chk_vm():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:467
int chk_vm(int base, int pgn)
{
ffff8000008032dc:	f3 0f 1e fa          	endbr64 
ffff8000008032e0:	55                   	push   rbp
ffff8000008032e1:	48 89 e5             	mov    rbp,rsp
ffff8000008032e4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008032e4 <chk_vm+0x8>
ffff8000008032eb:	49 bb 6c dc 11 00 00 	movabs r11,0x11dc6c
ffff8000008032f2:	00 00 00 
ffff8000008032f5:	4c 01 d8             	add    rax,r11
ffff8000008032f8:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff8000008032fb:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:468
    int *pdet=0;
ffff8000008032fe:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff800000803305:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:469
    asm volatile("mov %%cr3,%0":"=r"(pdet));
ffff800000803306:	0f 20 d8             	mov    rax,cr3
ffff800000803309:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:470
    int *pt=pdet[base/PAGE_INDEX_SIZE]&0xfffff000;
ffff80000080330d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803310:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff800000803316:	85 c0                	test   eax,eax
ffff800000803318:	0f 48 c2             	cmovs  eax,edx
ffff80000080331b:	c1 f8 15             	sar    eax,0x15
ffff80000080331e:	48 98                	cdqe   
ffff800000803320:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000803327:	00 
ffff800000803328:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080332c:	48 01 d0             	add    rax,rdx
ffff80000080332f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803331:	89 c0                	mov    eax,eax
ffff800000803333:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000803338:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:471
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
ffff80000080333c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080333f:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff800000803345:	85 c0                	test   eax,eax
ffff800000803347:	0f 48 c2             	cmovs  eax,edx
ffff80000080334a:	c1 f8 15             	sar    eax,0x15
ffff80000080334d:	48 98                	cdqe   
ffff80000080334f:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000803356:	00 
ffff800000803357:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080335b:	48 01 d0             	add    rax,rdx
ffff80000080335e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803360:	83 e0 01             	and    eax,0x1
ffff800000803363:	85 c0                	test   eax,eax
ffff800000803365:	74 38                	je     ffff80000080339f <chk_vm+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:472 (discriminator 1)
    !(pt[base%PAGE_INDEX_SIZE/PAGE_SIZE]&PAGE_PRESENT))
ffff800000803367:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080336a:	99                   	cdq    
ffff80000080336b:	c1 ea 0b             	shr    edx,0xb
ffff80000080336e:	01 d0                	add    eax,edx
ffff800000803370:	25 ff ff 1f 00       	and    eax,0x1fffff
ffff800000803375:	29 d0                	sub    eax,edx
ffff800000803377:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff80000080337d:	85 c0                	test   eax,eax
ffff80000080337f:	0f 48 c2             	cmovs  eax,edx
ffff800000803382:	c1 f8 0c             	sar    eax,0xc
ffff800000803385:	48 98                	cdqe   
ffff800000803387:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080338e:	00 
ffff80000080338f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000803393:	48 01 d0             	add    rax,rdx
ffff800000803396:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803398:	83 e0 01             	and    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:471 (discriminator 1)
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
ffff80000080339b:	85 c0                	test   eax,eax
ffff80000080339d:	75 07                	jne    ffff8000008033a6 <chk_vm+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:474
    {
        return -1;
ffff80000080339f:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008033a4:	eb 05                	jmp    ffff8000008033ab <chk_vm+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:476
    }
    return 0;
ffff8000008033a6:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:477
}
ffff8000008033ab:	5d                   	pop    rbp
ffff8000008033ac:	c3                   	ret    

ffff8000008033ad <is_pgs_ava>:
is_pgs_ava():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:480
//查看指定区域的页内存是否可用
int is_pgs_ava(int base,int pgn)
{
ffff8000008033ad:	f3 0f 1e fa          	endbr64 
ffff8000008033b1:	55                   	push   rbp
ffff8000008033b2:	48 89 e5             	mov    rbp,rsp
ffff8000008033b5:	41 57                	push   r15
ffff8000008033b7:	53                   	push   rbx
ffff8000008033b8:	48 83 ec 20          	sub    rsp,0x20
ffff8000008033bc:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008033bc <is_pgs_ava+0xf>
ffff8000008033c3:	49 bb 94 db 11 00 00 	movabs r11,0x11db94
ffff8000008033ca:	00 00 00 
ffff8000008033cd:	4c 01 db             	add    rbx,r11
ffff8000008033d0:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff8000008033d3:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:481
    int pgi=base/4096;
ffff8000008033d6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008033d9:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff8000008033df:	85 c0                	test   eax,eax
ffff8000008033e1:	0f 48 c2             	cmovs  eax,edx
ffff8000008033e4:	c1 f8 0c             	sar    eax,0xc
ffff8000008033e7:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:482
    for(int i=0;i<pgn;i++)
ffff8000008033ea:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008033f1:	eb 2b                	jmp    ffff80000080341e <is_pgs_ava+0x71>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:484
    {
        if(check_page(pgi+i)!=0)return 0;
ffff8000008033f3:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008033f6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008033f9:	01 d0                	add    eax,edx
ffff8000008033fb:	89 c7                	mov    edi,eax
ffff8000008033fd:	49 89 df             	mov    r15,rbx
ffff800000803400:	48 b8 6c 20 ee ff ff 	movabs rax,0xffffffffffee206c
ffff800000803407:	ff ff ff 
ffff80000080340a:	48 01 d8             	add    rax,rbx
ffff80000080340d:	ff d0                	call   rax
ffff80000080340f:	85 c0                	test   eax,eax
ffff800000803411:	74 07                	je     ffff80000080341a <is_pgs_ava+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:484 (discriminator 1)
ffff800000803413:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803418:	eb 11                	jmp    ffff80000080342b <is_pgs_ava+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:482 (discriminator 2)
    for(int i=0;i<pgn;i++)
ffff80000080341a:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:482 (discriminator 1)
ffff80000080341e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803421:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000803424:	7c cd                	jl     ffff8000008033f3 <is_pgs_ava+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:486
    }
    return 1;
ffff800000803426:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:488

}
ffff80000080342b:	48 83 c4 20          	add    rsp,0x20
ffff80000080342f:	5b                   	pop    rbx
ffff800000803430:	41 5f                	pop    r15
ffff800000803432:	5d                   	pop    rbp
ffff800000803433:	c3                   	ret    

ffff800000803434 <make_dentry>:
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:25
};
struct dir_entry_operations dev_dir_dops={

};
static int devd_fd=-1;
void make_dentry(struct dir_entry* d,char* name,int namelen,struct dir_entry* parent,struct dir_entry_operations* dops){
ffff800000803434:	f3 0f 1e fa          	endbr64 
ffff800000803438:	55                   	push   rbp
ffff800000803439:	48 89 e5             	mov    rbp,rsp
ffff80000080343c:	41 57                	push   r15
ffff80000080343e:	48 83 ec 78          	sub    rsp,0x78
ffff800000803442:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803442 <make_dentry+0xe>
ffff800000803449:	49 bb 0e db 11 00 00 	movabs r11,0x11db0e
ffff800000803450:	00 00 00 
ffff800000803453:	4c 01 d8             	add    rax,r11
ffff800000803456:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffff80000080345a:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
ffff80000080345e:	89 55 9c             	mov    DWORD PTR [rbp-0x64],edx
ffff800000803461:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
ffff800000803465:	4c 89 45 88          	mov    QWORD PTR [rbp-0x78],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:26
    strcpy(d->name,name);
ffff800000803469:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080346d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000803470:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
ffff800000803474:	48 89 ce             	mov    rsi,rcx
ffff800000803477:	48 89 d7             	mov    rdi,rdx
ffff80000080347a:	49 89 c7             	mov    r15,rax
ffff80000080347d:	48 ba 57 22 ef ff ff 	movabs rdx,0xffffffffffef2257
ffff800000803484:	ff ff ff 
ffff800000803487:	48 01 c2             	add    rdx,rax
ffff80000080348a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:27
    d->name_length=namelen;
ffff80000080348c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803490:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff800000803493:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:29
    //添加dentry的操作方法，这样能够查找设备
    d->dir_ops=dops;
ffff800000803496:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080349a:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080349e:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:30
    list_init(&d->subdirs_list);
ffff8000008034a2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008034a6:	48 83 c0 28          	add    rax,0x28
ffff8000008034aa:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    struct List * next;
};

__attribute__((always_inline)) inline void list_init(struct List * list)
{
    list->prev = NULL;
ffff8000008034ae:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008034b2:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff8000008034b9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008034bd:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008034c4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff8000008034c5:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:31
    list_init(&d->child_node);
ffff8000008034c6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008034ca:	48 83 c0 10          	add    rax,0x10
ffff8000008034ce:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff8000008034d2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008034d6:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff8000008034dd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008034e1:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008034e8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff8000008034e9:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:32
    d->child_node.data=d;
ffff8000008034ea:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008034ee:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff8000008034f2:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:33
    d->parent=parent;
ffff8000008034f6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008034fa:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff8000008034fe:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:34
    list_add(&parent->subdirs_list,&d->child_node);
ffff800000803502:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803506:	48 83 c0 10          	add    rax,0x10
ffff80000080350a:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff80000080350e:	48 83 c2 28          	add    rdx,0x28
ffff800000803512:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000803516:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
        new->next->prev = new;
    entry->next = new;
}
__attribute__((always_inline)) inline void list_add(struct List * entry,struct List * new)	////add to the tail of the link
{
    struct List* p=entry;
ffff80000080351a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080351e:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
    for(;p->next&&p->next!=p;p=p->next){
ffff800000803522:	eb 21                	jmp    ffff800000803545 <make_dentry+0x111>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        if(p->data==new->data)
ffff800000803524:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803528:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080352c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803530:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000803534:	48 39 c2             	cmp    rdx,rax
ffff800000803537:	74 7c                	je     ffff8000008035b5 <make_dentry+0x181>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
    for(;p->next&&p->next!=p;p=p->next){
ffff800000803539:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080353d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803541:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffff800000803545:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803549:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080354d:	48 85 c0             	test   rax,rax
ffff800000803550:	74 0e                	je     ffff800000803560 <make_dentry+0x12c>
ffff800000803552:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803556:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080355a:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000080355e:	75 c4                	jne    ffff800000803524 <make_dentry+0xf0>
ffff800000803560:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803564:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffff800000803568:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080356c:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->next = entry->next;
ffff800000803570:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803574:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000803578:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080357c:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    new->prev = entry;
ffff800000803580:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803584:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803588:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
    if(new->next)
ffff80000080358b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080358f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803593:	48 85 c0             	test   rax,rax
ffff800000803596:	74 0f                	je     ffff8000008035a7 <make_dentry+0x173>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
        new->next->prev = new;
ffff800000803598:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080359c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008035a0:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008035a4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
    entry->next = new;
ffff8000008035a7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008035ab:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008035af:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:31
}
ffff8000008035b3:	eb 01                	jmp    ffff8000008035b6 <make_dentry+0x182>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
            return;
ffff8000008035b5:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:35
}
ffff8000008035b6:	90                   	nop
ffff8000008035b7:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008035bb:	c9                   	leave  
ffff8000008035bc:	c3                   	ret    

ffff8000008035bd <make_inode>:
make_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:36
void make_inode(struct index_node* i,struct index_node_operations* iops,struct file_operations* fops,unsigned long attr,struct super_block* sb){
ffff8000008035bd:	f3 0f 1e fa          	endbr64 
ffff8000008035c1:	55                   	push   rbp
ffff8000008035c2:	48 89 e5             	mov    rbp,rsp
ffff8000008035c5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008035c5 <make_inode+0x8>
ffff8000008035cc:	49 bb 8b d9 11 00 00 	movabs r11,0x11d98b
ffff8000008035d3:	00 00 00 
ffff8000008035d6:	4c 01 d8             	add    rax,r11
ffff8000008035d9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008035dd:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008035e1:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff8000008035e5:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff8000008035e9:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:37
    i->f_ops=fops;
ffff8000008035ed:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008035f1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008035f5:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:38
    i->attribute=attr;
ffff8000008035f9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008035fd:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000803601:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:39
    i->sb=sb;
ffff800000803605:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803609:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080360d:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:40
    i->file_size=0;
ffff800000803611:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803615:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:41
    i->inode_ops=iops;
ffff80000080361c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803620:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000803624:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:42
}
ffff800000803628:	90                   	nop
ffff800000803629:	5d                   	pop    rbp
ffff80000080362a:	c3                   	ret    

ffff80000080362b <make_devf>:
make_devf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:47
/*
 * 创建/dev文件夹，添加必要的设备文件。
 * 这个/dev文件夹的dentry和inode等数据由devman管理，根文件系统切换时，这个文件夹会跟着挂载到新文件系统的根目录下。
 * */
void make_devf(struct dir_entry* d,struct index_node* i,char* name,struct dir_entry* dir_dev,struct file_operations* fops){
ffff80000080362b:	f3 0f 1e fa          	endbr64 
ffff80000080362f:	55                   	push   rbp
ffff800000803630:	48 89 e5             	mov    rbp,rsp
ffff800000803633:	41 57                	push   r15
ffff800000803635:	53                   	push   rbx
ffff800000803636:	48 83 ec 30          	sub    rsp,0x30
ffff80000080363a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080363a <make_devf+0xf>
ffff800000803641:	49 bb 16 d9 11 00 00 	movabs r11,0x11d916
ffff800000803648:	00 00 00 
ffff80000080364b:	4c 01 db             	add    rbx,r11
ffff80000080364e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000803652:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000803656:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff80000080365a:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
ffff80000080365e:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:48
    make_dentry(d,name, strlen(name),dir_dev,&dev_dir_dops);
ffff800000803662:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803666:	48 89 c7             	mov    rdi,rax
ffff800000803669:	49 89 df             	mov    r15,rbx
ffff80000080366c:	48 b8 24 25 ef ff ff 	movabs rax,0xffffffffffef2524
ffff800000803673:	ff ff ff 
ffff800000803676:	48 01 d8             	add    rax,rbx
ffff800000803679:	ff d0                	call   rax
ffff80000080367b:	89 c7                	mov    edi,eax
ffff80000080367d:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803681:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff800000803685:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803689:	48 b9 b8 ff ff ff ff 	movabs rcx,0xffffffffffffffb8
ffff800000803690:	ff ff ff 
ffff800000803693:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803697:	49 89 c8             	mov    r8,rcx
ffff80000080369a:	48 89 d1             	mov    rcx,rdx
ffff80000080369d:	89 fa                	mov    edx,edi
ffff80000080369f:	48 89 c7             	mov    rdi,rax
ffff8000008036a2:	49 89 df             	mov    r15,rbx
ffff8000008036a5:	48 b8 e4 24 ee ff ff 	movabs rax,0xffffffffffee24e4
ffff8000008036ac:	ff ff ff 
ffff8000008036af:	48 01 d8             	add    rax,rbx
ffff8000008036b2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:49
    d->dir_inode=i;
ffff8000008036b4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008036b8:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008036bc:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:50
    make_inode(i,dir_dev->dir_inode->inode_ops,fops,FS_ATTR_DEVICE,root_sb);
ffff8000008036c0:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff8000008036c7:	ff ff ff 
ffff8000008036ca:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008036ce:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008036d1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008036d5:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008036d9:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff8000008036dd:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008036e1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008036e5:	49 89 c8             	mov    r8,rcx
ffff8000008036e8:	b9 04 00 00 00       	mov    ecx,0x4
ffff8000008036ed:	48 89 c7             	mov    rdi,rax
ffff8000008036f0:	49 89 df             	mov    r15,rbx
ffff8000008036f3:	48 b8 6d 26 ee ff ff 	movabs rax,0xffffffffffee266d
ffff8000008036fa:	ff ff ff 
ffff8000008036fd:	48 01 d8             	add    rax,rbx
ffff800000803700:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:52
    // list_add(&dir_dev->subdirs_list,&d->child_node);//添加到/dev下
}
ffff800000803702:	90                   	nop
ffff800000803703:	48 83 c4 30          	add    rsp,0x30
ffff800000803707:	5b                   	pop    rbx
ffff800000803708:	41 5f                	pop    r15
ffff80000080370a:	5d                   	pop    rbp
ffff80000080370b:	c3                   	ret    

ffff80000080370c <devfs_lookup>:
devfs_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:53
struct dir_entry* devfs_lookup(struct index_node* parent_inode,struct dir_entry* dest_dentry){
ffff80000080370c:	f3 0f 1e fa          	endbr64 
ffff800000803710:	55                   	push   rbp
ffff800000803711:	48 89 e5             	mov    rbp,rsp
ffff800000803714:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803714 <devfs_lookup+0x8>
ffff80000080371b:	49 bb 3c d8 11 00 00 	movabs r11,0x11d83c
ffff800000803722:	00 00 00 
ffff800000803725:	4c 01 d8             	add    rax,r11
ffff800000803728:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080372c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:55
    //TODO 待完成
}
ffff800000803730:	90                   	nop
ffff800000803731:	5d                   	pop    rbp
ffff800000803732:	c3                   	ret    

ffff800000803733 <devfs_read_superblock>:
devfs_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:68
};
struct super_block_operations devfs_sops={
    //TODO 待完成
    
};
struct super_block* devfs_read_superblock(struct Disk_Partition_Table_Entry *PDTE,void *buf){
ffff800000803733:	f3 0f 1e fa          	endbr64 
ffff800000803737:	55                   	push   rbp
ffff800000803738:	48 89 e5             	mov    rbp,rsp
ffff80000080373b:	41 57                	push   r15
ffff80000080373d:	53                   	push   rbx
ffff80000080373e:	48 83 ec 30          	sub    rsp,0x30
ffff800000803742:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803742 <devfs_read_superblock+0xf>
ffff800000803749:	49 bb 0e d8 11 00 00 	movabs r11,0x11d80e
ffff800000803750:	00 00 00 
ffff800000803753:	4c 01 db             	add    rbx,r11
ffff800000803756:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080375a:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:69
    struct super_block* sb=kmalloc();
ffff80000080375e:	49 89 df             	mov    r15,rbx
ffff800000803761:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803766:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff80000080376d:	ff ff ff 
ffff800000803770:	48 01 da             	add    rdx,rbx
ffff800000803773:	ff d2                	call   rdx
ffff800000803775:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:70
    sb->dev=0;//不存在具体的存储设备
ffff800000803779:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080377d:	66 c7 40 10 00 00    	mov    WORD PTR [rax+0x10],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:71
    sb->p_dev=0;
ffff800000803783:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803787:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff80000080378e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:72
    sb->root=sb+1;
ffff80000080378f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803793:	48 8d 50 28          	lea    rdx,[rax+0x28]
ffff800000803797:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080379b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:73
    sb->sb_ops=&devfs_sops;
ffff80000080379e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008037a2:	48 ba e8 fd ff ff ff 	movabs rdx,0xfffffffffffffde8
ffff8000008037a9:	ff ff ff 
ffff8000008037ac:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008037b0:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:75

    sb->root->dir_inode=sb->root+1;
ffff8000008037b4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008037b8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008037bb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008037bf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008037c2:	48 83 c2 60          	add    rdx,0x60
ffff8000008037c6:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:76
    sb->root->dir_ops=&devfs_dops;
ffff8000008037ca:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008037ce:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008037d1:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff8000008037d8:	ff ff ff 
ffff8000008037db:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008037df:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:77
    list_init(&sb->root->child_node);
ffff8000008037e3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008037e7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008037ea:	48 83 c0 10          	add    rax,0x10
ffff8000008037ee:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff8000008037f2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008037f6:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff8000008037fd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803801:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000803808:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff800000803809:	90                   	nop
devfs_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:78
    list_init(&sb->root->subdirs_list);
ffff80000080380a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080380e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803811:	48 83 c0 28          	add    rax,0x28
ffff800000803815:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff800000803819:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080381d:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff800000803824:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803828:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080382f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff800000803830:	90                   	nop
devfs_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:79
    sb->root->name="dev";
ffff800000803831:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803835:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803838:	48 ba 6e d5 ff ff ff 	movabs rdx,0xffffffffffffd56e
ffff80000080383f:	ff ff ff 
ffff800000803842:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803846:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:80
    sb->root->name_length=3;
ffff800000803849:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080384d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803850:	c7 40 08 03 00 00 00 	mov    DWORD PTR [rax+0x8],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:82

    sb->root->dir_inode->dev=0;
ffff800000803857:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080385b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080385e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803862:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:83
    sb->root->dir_inode->inode_ops=&devfs_iops;
ffff800000803868:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080386c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080386f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803873:	48 ba 88 ff ff ff ff 	movabs rdx,0xffffffffffffff88
ffff80000080387a:	ff ff ff 
ffff80000080387d:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000803881:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:84
    sb->root->dir_inode->sb=sb;
ffff800000803885:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803889:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080388c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803890:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000803894:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:85
    sb->root->dir_inode->file_size=0;
ffff800000803898:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080389c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080389f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008038a3:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:86
    sb->root->dir_inode->f_ops=&devfs_fops;
ffff8000008038aa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008038ae:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008038b1:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008038b5:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff8000008038bc:	ff ff ff 
ffff8000008038bf:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008038c3:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:87
    sb->root->dir_inode->blocks=0;
ffff8000008038c7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008038cb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008038ce:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008038d2:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff8000008038d9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:88
    sb->root->dir_inode->attribute|=FS_ATTR_DIR;
ffff8000008038da:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008038de:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008038e1:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008038e5:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008038e9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008038ed:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008038f0:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008038f4:	48 83 ca 02          	or     rdx,0x2
ffff8000008038f8:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:89
    sb->root->dir_inode->private_index_info=0;
ffff8000008038fc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803900:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803903:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803907:	48 c7 40 38 00 00 00 	mov    QWORD PTR [rax+0x38],0x0
ffff80000080390e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:91

    return sb;
ffff80000080390f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:92
}
ffff800000803913:	48 83 c4 30          	add    rsp,0x30
ffff800000803917:	5b                   	pop    rbx
ffff800000803918:	41 5f                	pop    r15
ffff80000080391a:	5d                   	pop    rbp
ffff80000080391b:	c3                   	ret    

ffff80000080391c <init_devfs>:
init_devfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:101
    .name="devfs",
    .next=0,
    .read_superblock=devfs_read_superblock
};
int init_devfs()
{
ffff80000080391c:	f3 0f 1e fa          	endbr64 
ffff800000803920:	55                   	push   rbp
ffff800000803921:	48 89 e5             	mov    rbp,rsp
ffff800000803924:	41 57                	push   r15
ffff800000803926:	53                   	push   rbx
ffff800000803927:	48 83 ec 40          	sub    rsp,0x40
ffff80000080392b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080392b <init_devfs+0xf>
ffff800000803932:	49 bb 25 d6 11 00 00 	movabs r11,0x11d625
ffff800000803939:	00 00 00 
ffff80000080393c:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:103
    //创建dev文件夹
    ddev=(struct dir_entry*) kmalloc();
ffff80000080393f:	49 89 df             	mov    r15,rbx
ffff800000803942:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803947:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff80000080394e:	ff ff ff 
ffff800000803951:	48 01 da             	add    rdx,rbx
ffff800000803954:	ff d2                	call   rdx
ffff800000803956:	48 89 c2             	mov    rdx,rax
ffff800000803959:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff800000803960:	ff ff ff 
ffff800000803963:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803967:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:104
    struct index_node* idev=ddev+1;
ffff80000080396a:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff800000803971:	ff ff ff 
ffff800000803974:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803978:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080397b:	48 83 c0 60          	add    rax,0x60
ffff80000080397f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:105
    ddev->name=idev+1;
ffff800000803983:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080398a:	ff ff ff 
ffff80000080398d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803991:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803994:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000803998:	48 83 c2 40          	add    rdx,0x40
ffff80000080399c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:106
    make_dentry(ddev,"dev",3,root_sb->root,root_sb->root->dir_ops);
ffff80000080399f:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff8000008039a6:	ff ff ff 
ffff8000008039a9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008039ad:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008039b0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008039b3:	48 8b 48 58          	mov    rcx,QWORD PTR [rax+0x58]
ffff8000008039b7:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff8000008039be:	ff ff ff 
ffff8000008039c1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008039c5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008039c8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008039cb:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff8000008039d2:	ff ff ff 
ffff8000008039d5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008039d9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008039dc:	49 89 c8             	mov    r8,rcx
ffff8000008039df:	48 89 d1             	mov    rcx,rdx
ffff8000008039e2:	ba 03 00 00 00       	mov    edx,0x3
ffff8000008039e7:	48 be 6e d5 ff ff ff 	movabs rsi,0xffffffffffffd56e
ffff8000008039ee:	ff ff ff 
ffff8000008039f1:	48 8d 34 33          	lea    rsi,[rbx+rsi*1]
ffff8000008039f5:	48 89 c7             	mov    rdi,rax
ffff8000008039f8:	49 89 df             	mov    r15,rbx
ffff8000008039fb:	48 b8 e4 24 ee ff ff 	movabs rax,0xffffffffffee24e4
ffff800000803a02:	ff ff ff 
ffff800000803a05:	48 01 d8             	add    rax,rbx
ffff800000803a08:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:107
    ddev->dir_inode=idev;
ffff800000803a0a:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff800000803a11:	ff ff ff 
ffff800000803a14:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a18:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803a1b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000803a1f:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:108
    make_inode(idev,root_sb->root->dir_inode->inode_ops,root_sb->root->dir_inode->f_ops,FS_ATTR_DIR,root_sb);
ffff800000803a23:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff800000803a2a:	ff ff ff 
ffff800000803a2d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a31:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000803a34:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff800000803a3b:	ff ff ff 
ffff800000803a3e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a42:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803a45:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803a48:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803a4c:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff800000803a50:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff800000803a57:	ff ff ff 
ffff800000803a5a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a5e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803a61:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803a64:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803a68:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff800000803a6c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803a70:	49 89 c8             	mov    r8,rcx
ffff800000803a73:	b9 02 00 00 00       	mov    ecx,0x2
ffff800000803a78:	48 89 c7             	mov    rdi,rax
ffff800000803a7b:	49 89 df             	mov    r15,rbx
ffff800000803a7e:	48 b8 6d 26 ee ff ff 	movabs rax,0xffffffffffee266d
ffff800000803a85:	ff ff ff 
ffff800000803a88:	48 01 d8             	add    rax,rbx
ffff800000803a8b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:109
    idev->private_index_info=ddev;
ffff800000803a8d:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff800000803a94:	ff ff ff 
ffff800000803a97:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a9b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803a9e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803aa2:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:112

    //创建mnt文件夹
    dmnt=(struct dir_entry*) kmalloc();
ffff800000803aa6:	49 89 df             	mov    r15,rbx
ffff800000803aa9:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803aae:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff800000803ab5:	ff ff ff 
ffff800000803ab8:	48 01 da             	add    rdx,rbx
ffff800000803abb:	ff d2                	call   rdx
ffff800000803abd:	48 89 c2             	mov    rdx,rax
ffff800000803ac0:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000803ac7:	ff ff ff 
ffff800000803aca:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803ace:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:113
    struct index_node* imnt=dmnt+1;
ffff800000803ad1:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000803ad8:	ff ff ff 
ffff800000803adb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803adf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803ae2:	48 83 c0 60          	add    rax,0x60
ffff800000803ae6:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:114
    dmnt->name=imnt+1;
ffff800000803aea:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000803af1:	ff ff ff 
ffff800000803af4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803af8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803afb:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000803aff:	48 83 c2 40          	add    rdx,0x40
ffff800000803b03:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:115
    make_dentry(dmnt,"mnt",3,root_sb->root,root_sb->root->dir_ops);
ffff800000803b06:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff800000803b0d:	ff ff ff 
ffff800000803b10:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b14:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803b17:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803b1a:	48 8b 48 58          	mov    rcx,QWORD PTR [rax+0x58]
ffff800000803b1e:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff800000803b25:	ff ff ff 
ffff800000803b28:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b2c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803b2f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803b32:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000803b39:	ff ff ff 
ffff800000803b3c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b40:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803b43:	49 89 c8             	mov    r8,rcx
ffff800000803b46:	48 89 d1             	mov    rcx,rdx
ffff800000803b49:	ba 03 00 00 00       	mov    edx,0x3
ffff800000803b4e:	48 be 78 d5 ff ff ff 	movabs rsi,0xffffffffffffd578
ffff800000803b55:	ff ff ff 
ffff800000803b58:	48 8d 34 33          	lea    rsi,[rbx+rsi*1]
ffff800000803b5c:	48 89 c7             	mov    rdi,rax
ffff800000803b5f:	49 89 df             	mov    r15,rbx
ffff800000803b62:	48 b8 e4 24 ee ff ff 	movabs rax,0xffffffffffee24e4
ffff800000803b69:	ff ff ff 
ffff800000803b6c:	48 01 d8             	add    rax,rbx
ffff800000803b6f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:116
    dmnt->dir_inode=imnt;
ffff800000803b71:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000803b78:	ff ff ff 
ffff800000803b7b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b7f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803b82:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000803b86:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:117
    make_inode(imnt,root_sb->root->dir_inode->inode_ops,root_sb->root->dir_inode->f_ops,FS_ATTR_DIR,root_sb);
ffff800000803b8a:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff800000803b91:	ff ff ff 
ffff800000803b94:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b98:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000803b9b:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff800000803ba2:	ff ff ff 
ffff800000803ba5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803ba9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803bac:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803baf:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803bb3:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff800000803bb7:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff800000803bbe:	ff ff ff 
ffff800000803bc1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803bc5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803bc8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803bcb:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803bcf:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff800000803bd3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803bd7:	49 89 c8             	mov    r8,rcx
ffff800000803bda:	b9 02 00 00 00       	mov    ecx,0x2
ffff800000803bdf:	48 89 c7             	mov    rdi,rax
ffff800000803be2:	49 89 df             	mov    r15,rbx
ffff800000803be5:	48 b8 6d 26 ee ff ff 	movabs rax,0xffffffffffee266d
ffff800000803bec:	ff ff ff 
ffff800000803bef:	48 01 d8             	add    rax,rbx
ffff800000803bf2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:118
    imnt->private_index_info=dmnt;
ffff800000803bf4:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000803bfb:	ff ff ff 
ffff800000803bfe:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803c02:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803c05:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803c09:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:120

    register_filesystem(&fs_devfs);
ffff800000803c0d:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff800000803c14:	ff ff ff 
ffff800000803c17:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803c1b:	48 89 c7             	mov    rdi,rax
ffff800000803c1e:	49 89 df             	mov    r15,rbx
ffff800000803c21:	48 b8 bb a8 ee ff ff 	movabs rax,0xffffffffffeea8bb
ffff800000803c28:	ff ff ff 
ffff800000803c2b:	48 01 d8             	add    rax,rbx
ffff800000803c2e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:121
    struct super_block *sb_devfs=mount_fs("devfs",0,0);
ffff800000803c30:	ba 00 00 00 00       	mov    edx,0x0
ffff800000803c35:	be 00 00 00 00       	mov    esi,0x0
ffff800000803c3a:	48 b8 72 d5 ff ff ff 	movabs rax,0xffffffffffffd572
ffff800000803c41:	ff ff ff 
ffff800000803c44:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000803c48:	48 89 c7             	mov    rdi,rax
ffff800000803c4b:	49 89 df             	mov    r15,rbx
ffff800000803c4e:	48 b8 d6 a6 ee ff ff 	movabs rax,0xffffffffffeea6d6
ffff800000803c55:	ff ff ff 
ffff800000803c58:	48 01 d8             	add    rax,rbx
ffff800000803c5b:	ff d0                	call   rax
ffff800000803c5d:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:122
    mount_fs_on(ddev,&fs_devfs);
ffff800000803c61:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff800000803c68:	ff ff ff 
ffff800000803c6b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803c6f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803c72:	48 ba e8 ff ff ff ff 	movabs rdx,0xffffffffffffffe8
ffff800000803c79:	ff ff ff 
ffff800000803c7c:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000803c80:	48 89 d6             	mov    rsi,rdx
ffff800000803c83:	48 89 c7             	mov    rdi,rax
ffff800000803c86:	49 89 df             	mov    r15,rbx
ffff800000803c89:	48 b8 83 a7 ee ff ff 	movabs rax,0xffffffffffeea783
ffff800000803c90:	ff ff ff 
ffff800000803c93:	48 01 d8             	add    rax,rbx
ffff800000803c96:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:124
    
    struct dir_entry* rt_devfs=sb_devfs->root;
ffff800000803c98:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803c9c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803c9f:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:129

    
    //创建几个设备文件
    //console-framebuffer.c
    dconsole= (struct dir_entry *) kmalloc();
ffff800000803ca3:	49 89 df             	mov    r15,rbx
ffff800000803ca6:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803cab:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff800000803cb2:	ff ff ff 
ffff800000803cb5:	48 01 da             	add    rdx,rbx
ffff800000803cb8:	ff d2                	call   rdx
ffff800000803cba:	48 89 c2             	mov    rdx,rax
ffff800000803cbd:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000803cc4:	ff ff ff 
ffff800000803cc7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803ccb:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:130
    struct index_node* iconsole=dconsole+1;
ffff800000803cce:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000803cd5:	ff ff ff 
ffff800000803cd8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803cdc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803cdf:	48 83 c0 60          	add    rax,0x60
ffff800000803ce3:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:131
    dconsole->name=iconsole+1;
ffff800000803ce7:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000803cee:	ff ff ff 
ffff800000803cf1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803cf5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803cf8:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000803cfc:	48 83 c2 40          	add    rdx,0x40
ffff800000803d00:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:132
    iconsole->dev=0x10000;
ffff800000803d03:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803d07:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:133
    make_devf(dconsole,iconsole,"console",rt_devfs,&devfs_fops);
ffff800000803d0d:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000803d14:	ff ff ff 
ffff800000803d17:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803d1b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803d1e:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803d22:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffff800000803d26:	48 b9 b8 fd ff ff ff 	movabs rcx,0xfffffffffffffdb8
ffff800000803d2d:	ff ff ff 
ffff800000803d30:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803d34:	49 89 c8             	mov    r8,rcx
ffff800000803d37:	48 89 d1             	mov    rcx,rdx
ffff800000803d3a:	48 ba 7c d5 ff ff ff 	movabs rdx,0xffffffffffffd57c
ffff800000803d41:	ff ff ff 
ffff800000803d44:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803d48:	48 89 c7             	mov    rdi,rax
ffff800000803d4b:	49 89 df             	mov    r15,rbx
ffff800000803d4e:	48 b8 db 26 ee ff ff 	movabs rax,0xffffffffffee26db
ffff800000803d55:	ff ff ff 
ffff800000803d58:	48 01 d8             	add    rax,rbx
ffff800000803d5b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:135
    //hd0-disk.c
    dhd0= (struct dir_entry *) kmalloc();
ffff800000803d5d:	49 89 df             	mov    r15,rbx
ffff800000803d60:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803d65:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff800000803d6c:	ff ff ff 
ffff800000803d6f:	48 01 da             	add    rdx,rbx
ffff800000803d72:	ff d2                	call   rdx
ffff800000803d74:	48 89 c2             	mov    rdx,rax
ffff800000803d77:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff800000803d7e:	ff ff ff 
ffff800000803d81:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803d85:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:136
    struct index_node* ihd0=dhd0+1;
ffff800000803d88:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff800000803d8f:	ff ff ff 
ffff800000803d92:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803d96:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803d99:	48 83 c0 60          	add    rax,0x60
ffff800000803d9d:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:137
    dhd0->name=ihd0+1;
ffff800000803da1:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff800000803da8:	ff ff ff 
ffff800000803dab:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803daf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803db2:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000803db6:	48 83 c2 40          	add    rdx,0x40
ffff800000803dba:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:139
    extern int dev_hd;
    ihd0->dev=dev_hd<<8;
ffff800000803dbd:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff800000803dc4:	ff ff ff 
ffff800000803dc7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803dcb:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803dcd:	c1 e0 08             	shl    eax,0x8
ffff800000803dd0:	89 c2                	mov    edx,eax
ffff800000803dd2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000803dd6:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:140
    make_devf(dhd0,ihd0,"hd0",rt_devfs,&devfs_fops);
ffff800000803dda:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff800000803de1:	ff ff ff 
ffff800000803de4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803de8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803deb:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803def:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000803df3:	48 b9 b8 fd ff ff ff 	movabs rcx,0xfffffffffffffdb8
ffff800000803dfa:	ff ff ff 
ffff800000803dfd:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803e01:	49 89 c8             	mov    r8,rcx
ffff800000803e04:	48 89 d1             	mov    rcx,rdx
ffff800000803e07:	48 ba 84 d5 ff ff ff 	movabs rdx,0xffffffffffffd584
ffff800000803e0e:	ff ff ff 
ffff800000803e11:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803e15:	48 89 c7             	mov    rdi,rax
ffff800000803e18:	49 89 df             	mov    r15,rbx
ffff800000803e1b:	48 b8 db 26 ee ff ff 	movabs rax,0xffffffffffee26db
ffff800000803e22:	ff ff ff 
ffff800000803e25:	48 01 d8             	add    rax,rbx
ffff800000803e28:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:142
    //tty-tty.c
    dtty= (struct dir_entry *) kmalloc();
ffff800000803e2a:	49 89 df             	mov    r15,rbx
ffff800000803e2d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803e32:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff800000803e39:	ff ff ff 
ffff800000803e3c:	48 01 da             	add    rdx,rbx
ffff800000803e3f:	ff d2                	call   rdx
ffff800000803e41:	48 89 c2             	mov    rdx,rax
ffff800000803e44:	48 b8 40 fd ff ff ff 	movabs rax,0xfffffffffffffd40
ffff800000803e4b:	ff ff ff 
ffff800000803e4e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803e52:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:143
    struct index_node* itty=dtty+1;
ffff800000803e55:	48 b8 40 fd ff ff ff 	movabs rax,0xfffffffffffffd40
ffff800000803e5c:	ff ff ff 
ffff800000803e5f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803e63:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803e66:	48 83 c0 60          	add    rax,0x60
ffff800000803e6a:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:144
    dtty->name=itty+1;
ffff800000803e6e:	48 b8 40 fd ff ff ff 	movabs rax,0xfffffffffffffd40
ffff800000803e75:	ff ff ff 
ffff800000803e78:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803e7c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803e7f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000803e83:	48 83 c2 40          	add    rdx,0x40
ffff800000803e87:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:145
    itty->dev|=0x10000;
ffff800000803e8a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000803e8e:	0f b7 50 18          	movzx  edx,WORD PTR [rax+0x18]
ffff800000803e92:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000803e96:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:146
    make_devf(dtty,itty,"tty",rt_devfs,&devfs_fops);
ffff800000803e9a:	48 b8 40 fd ff ff ff 	movabs rax,0xfffffffffffffd40
ffff800000803ea1:	ff ff ff 
ffff800000803ea4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803ea8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803eab:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803eaf:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
ffff800000803eb3:	48 b9 b8 fd ff ff ff 	movabs rcx,0xfffffffffffffdb8
ffff800000803eba:	ff ff ff 
ffff800000803ebd:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803ec1:	49 89 c8             	mov    r8,rcx
ffff800000803ec4:	48 89 d1             	mov    rcx,rdx
ffff800000803ec7:	48 ba 88 d5 ff ff ff 	movabs rdx,0xffffffffffffd588
ffff800000803ece:	ff ff ff 
ffff800000803ed1:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803ed5:	48 89 c7             	mov    rdi,rax
ffff800000803ed8:	49 89 df             	mov    r15,rbx
ffff800000803edb:	48 b8 db 26 ee ff ff 	movabs rax,0xffffffffffee26db
ffff800000803ee2:	ff ff ff 
ffff800000803ee5:	48 01 d8             	add    rax,rbx
ffff800000803ee8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:148
    //初始化一下
    tty_fops.open(itty,&ftty);
ffff800000803eea:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000803ef1:	ff ff ff 
ffff800000803ef4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803ef8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803efb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000803eff:	48 b9 10 fe ff ff ff 	movabs rcx,0xfffffffffffffe10
ffff800000803f06:	ff ff ff 
ffff800000803f09:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803f0d:	48 89 ce             	mov    rsi,rcx
ffff800000803f10:	48 89 c7             	mov    rdi,rax
ffff800000803f13:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:151

    //ramdisk- ramdisk.c
    dramdisk= (struct dir_entry *) kmalloc();
ffff800000803f15:	49 89 df             	mov    r15,rbx
ffff800000803f18:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803f1d:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff800000803f24:	ff ff ff 
ffff800000803f27:	48 01 da             	add    rdx,rbx
ffff800000803f2a:	ff d2                	call   rdx
ffff800000803f2c:	48 89 c2             	mov    rdx,rax
ffff800000803f2f:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff800000803f36:	ff ff ff 
ffff800000803f39:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803f3d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:152
    struct index_node* iramdisk=dramdisk+1;
ffff800000803f40:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff800000803f47:	ff ff ff 
ffff800000803f4a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803f4e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803f51:	48 83 c0 60          	add    rax,0x60
ffff800000803f55:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:153
    dramdisk->name=iramdisk+1;
ffff800000803f59:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff800000803f60:	ff ff ff 
ffff800000803f63:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803f67:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803f6a:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000803f6e:	48 83 c2 40          	add    rdx,0x40
ffff800000803f72:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:154
    iramdisk->dev=dev_ramdisk<<8;
ffff800000803f75:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff800000803f7c:	ff ff ff 
ffff800000803f7f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803f83:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803f85:	c1 e0 08             	shl    eax,0x8
ffff800000803f88:	89 c2                	mov    edx,eax
ffff800000803f8a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000803f8e:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:155
    make_devf(dramdisk,iramdisk,"ram",rt_devfs,&devfs_fops);
ffff800000803f92:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff800000803f99:	ff ff ff 
ffff800000803f9c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803fa0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803fa3:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803fa7:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
ffff800000803fab:	48 b9 b8 fd ff ff ff 	movabs rcx,0xfffffffffffffdb8
ffff800000803fb2:	ff ff ff 
ffff800000803fb5:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803fb9:	49 89 c8             	mov    r8,rcx
ffff800000803fbc:	48 89 d1             	mov    rcx,rdx
ffff800000803fbf:	48 ba 8c d5 ff ff ff 	movabs rdx,0xffffffffffffd58c
ffff800000803fc6:	ff ff ff 
ffff800000803fc9:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803fcd:	48 89 c7             	mov    rdi,rax
ffff800000803fd0:	49 89 df             	mov    r15,rbx
ffff800000803fd3:	48 b8 db 26 ee ff ff 	movabs rax,0xffffffffffee26db
ffff800000803fda:	ff ff ff 
ffff800000803fdd:	48 01 d8             	add    rax,rbx
ffff800000803fe0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:157

}
ffff800000803fe2:	90                   	nop
ffff800000803fe3:	48 83 c4 40          	add    rsp,0x40
ffff800000803fe7:	5b                   	pop    rbx
ffff800000803fe8:	41 5f                	pop    r15
ffff800000803fea:	5d                   	pop    rbp
ffff800000803feb:	c3                   	ret    

ffff800000803fec <open_dev>:
open_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:159
//
long open_dev(struct index_node * inode,struct file * filp){
ffff800000803fec:	f3 0f 1e fa          	endbr64 
ffff800000803ff0:	55                   	push   rbp
ffff800000803ff1:	48 89 e5             	mov    rbp,rsp
ffff800000803ff4:	41 57                	push   r15
ffff800000803ff6:	53                   	push   rbx
ffff800000803ff7:	48 83 ec 20          	sub    rsp,0x20
ffff800000803ffb:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803ffb <open_dev+0xf>
ffff800000804002:	49 bb 55 cf 11 00 00 	movabs r11,0x11cf55
ffff800000804009:	00 00 00 
ffff80000080400c:	4c 01 db             	add    rbx,r11
ffff80000080400f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000804013:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:161
    //查看文件名
    char* name=filp->dentry->name;
ffff800000804017:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080401b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080401f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804022:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:162
    char* p=name+ strlen(name)-1;
ffff800000804026:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080402a:	48 89 c7             	mov    rdi,rax
ffff80000080402d:	49 89 df             	mov    r15,rbx
ffff800000804030:	48 b8 24 25 ef ff ff 	movabs rax,0xffffffffffef2524
ffff800000804037:	ff ff ff 
ffff80000080403a:	48 01 d8             	add    rax,rbx
ffff80000080403d:	ff d0                	call   rax
ffff80000080403f:	48 98                	cdqe   
ffff800000804041:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000804045:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804049:	48 01 d0             	add    rax,rdx
ffff80000080404c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:163
    for(;*p!='/'&&p>=name;p--);
ffff800000804050:	eb 05                	jmp    ffff800000804057 <open_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:163 (discriminator 3)
ffff800000804052:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:163 (discriminator 1)
ffff800000804057:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080405b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080405e:	3c 2f                	cmp    al,0x2f
ffff800000804060:	74 0a                	je     ffff80000080406c <open_dev+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:163 (discriminator 2)
ffff800000804062:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804066:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff80000080406a:	73 e6                	jae    ffff800000804052 <open_dev+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:164
    if(p>=name)
ffff80000080406c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804070:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804074:	72 0c                	jb     ffff800000804082 <open_dev+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:165
        name=p+1;
ffff800000804076:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080407a:	48 83 c0 01          	add    rax,0x1
ffff80000080407e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:166
    if(memcmp(name,"tty",3)==0){
ffff800000804082:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804086:	ba 03 00 00 00       	mov    edx,0x3
ffff80000080408b:	48 b9 88 d5 ff ff ff 	movabs rcx,0xffffffffffffd588
ffff800000804092:	ff ff ff 
ffff800000804095:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000804099:	48 89 ce             	mov    rsi,rcx
ffff80000080409c:	48 89 c7             	mov    rdi,rax
ffff80000080409f:	49 89 df             	mov    r15,rbx
ffff8000008040a2:	48 b8 9d 21 ef ff ff 	movabs rax,0xffffffffffef219d
ffff8000008040a9:	ff ff ff 
ffff8000008040ac:	48 01 d8             	add    rax,rbx
ffff8000008040af:	ff d0                	call   rax
ffff8000008040b1:	85 c0                	test   eax,eax
ffff8000008040b3:	75 22                	jne    ffff8000008040d7 <open_dev+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:167
        return init_tty(inode,filp);
ffff8000008040b5:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008040b9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008040bd:	48 89 d6             	mov    rsi,rdx
ffff8000008040c0:	48 89 c7             	mov    rdi,rax
ffff8000008040c3:	49 89 df             	mov    r15,rbx
ffff8000008040c6:	48 b8 1c 15 ef ff ff 	movabs rax,0xffffffffffef151c
ffff8000008040cd:	ff ff ff 
ffff8000008040d0:	48 01 d8             	add    rax,rbx
ffff8000008040d3:	ff d0                	call   rax
ffff8000008040d5:	eb 57                	jmp    ffff80000080412e <open_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:168
    }else if(strcmp(name,"console")==0){
ffff8000008040d7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008040db:	48 ba 7c d5 ff ff ff 	movabs rdx,0xffffffffffffd57c
ffff8000008040e2:	ff ff ff 
ffff8000008040e5:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff8000008040e9:	48 89 d6             	mov    rsi,rdx
ffff8000008040ec:	48 89 c7             	mov    rdi,rax
ffff8000008040ef:	49 89 df             	mov    r15,rbx
ffff8000008040f2:	48 b8 a5 24 ef ff ff 	movabs rax,0xffffffffffef24a5
ffff8000008040f9:	ff ff ff 
ffff8000008040fc:	48 01 d8             	add    rax,rbx
ffff8000008040ff:	ff d0                	call   rax
ffff800000804101:	85 c0                	test   eax,eax
ffff800000804103:	75 22                	jne    ffff800000804127 <open_dev+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169
        return open_framebuffer(inode,filp);
ffff800000804105:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804109:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080410d:	48 89 d6             	mov    rsi,rdx
ffff800000804110:	48 89 c7             	mov    rdi,rax
ffff800000804113:	49 89 df             	mov    r15,rbx
ffff800000804116:	48 b8 ac a0 ee ff ff 	movabs rax,0xffffffffffeea0ac
ffff80000080411d:	ff ff ff 
ffff800000804120:	48 01 d8             	add    rax,rbx
ffff800000804123:	ff d0                	call   rax
ffff800000804125:	eb 07                	jmp    ffff80000080412e <open_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:171
    }
    return -1;
ffff800000804127:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:172
}
ffff80000080412e:	48 83 c4 20          	add    rsp,0x20
ffff800000804132:	5b                   	pop    rbx
ffff800000804133:	41 5f                	pop    r15
ffff800000804135:	5d                   	pop    rbp
ffff800000804136:	c3                   	ret    

ffff800000804137 <close_dev>:
close_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:173
long close_dev(struct index_node * inode,struct file * filp){
ffff800000804137:	f3 0f 1e fa          	endbr64 
ffff80000080413b:	55                   	push   rbp
ffff80000080413c:	48 89 e5             	mov    rbp,rsp
ffff80000080413f:	41 57                	push   r15
ffff800000804141:	53                   	push   rbx
ffff800000804142:	48 83 ec 20          	sub    rsp,0x20
ffff800000804146:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804146 <close_dev+0xf>
ffff80000080414d:	49 bb 0a ce 11 00 00 	movabs r11,0x11ce0a
ffff800000804154:	00 00 00 
ffff800000804157:	4c 01 db             	add    rbx,r11
ffff80000080415a:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080415e:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:175
    //查看文件名
    char* name=filp->dentry->name;
ffff800000804162:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000804166:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080416a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080416d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:176
    char* p=name+ strlen(name)-1;
ffff800000804171:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804175:	48 89 c7             	mov    rdi,rax
ffff800000804178:	49 89 df             	mov    r15,rbx
ffff80000080417b:	48 b8 24 25 ef ff ff 	movabs rax,0xffffffffffef2524
ffff800000804182:	ff ff ff 
ffff800000804185:	48 01 d8             	add    rax,rbx
ffff800000804188:	ff d0                	call   rax
ffff80000080418a:	48 98                	cdqe   
ffff80000080418c:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000804190:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804194:	48 01 d0             	add    rax,rdx
ffff800000804197:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:177
    for(;*p!='/'&&p>=name;p--);
ffff80000080419b:	eb 05                	jmp    ffff8000008041a2 <close_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:177 (discriminator 3)
ffff80000080419d:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:177 (discriminator 1)
ffff8000008041a2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008041a6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008041a9:	3c 2f                	cmp    al,0x2f
ffff8000008041ab:	74 0a                	je     ffff8000008041b7 <close_dev+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:177 (discriminator 2)
ffff8000008041ad:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008041b1:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff8000008041b5:	73 e6                	jae    ffff80000080419d <close_dev+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:178
    if(p>=name)
ffff8000008041b7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008041bb:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff8000008041bf:	72 0c                	jb     ffff8000008041cd <close_dev+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:179
        name=p+1;
ffff8000008041c1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008041c5:	48 83 c0 01          	add    rax,0x1
ffff8000008041c9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:180
    if(memcmp(name,"tty",3)==0){
ffff8000008041cd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008041d1:	ba 03 00 00 00       	mov    edx,0x3
ffff8000008041d6:	48 b9 88 d5 ff ff ff 	movabs rcx,0xffffffffffffd588
ffff8000008041dd:	ff ff ff 
ffff8000008041e0:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff8000008041e4:	48 89 ce             	mov    rsi,rcx
ffff8000008041e7:	48 89 c7             	mov    rdi,rax
ffff8000008041ea:	49 89 df             	mov    r15,rbx
ffff8000008041ed:	48 b8 9d 21 ef ff ff 	movabs rax,0xffffffffffef219d
ffff8000008041f4:	ff ff ff 
ffff8000008041f7:	48 01 d8             	add    rax,rbx
ffff8000008041fa:	ff d0                	call   rax
ffff8000008041fc:	85 c0                	test   eax,eax
ffff8000008041fe:	75 22                	jne    ffff800000804222 <close_dev+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:181
        return close_tty(inode,filp);
ffff800000804200:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804204:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804208:	48 89 d6             	mov    rsi,rdx
ffff80000080420b:	48 89 c7             	mov    rdi,rax
ffff80000080420e:	49 89 df             	mov    r15,rbx
ffff800000804211:	48 b8 4f 14 ef ff ff 	movabs rax,0xffffffffffef144f
ffff800000804218:	ff ff ff 
ffff80000080421b:	48 01 d8             	add    rax,rbx
ffff80000080421e:	ff d0                	call   rax
ffff800000804220:	eb 57                	jmp    ffff800000804279 <close_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:182
    }else if(strcmp(name,"console")==0){
ffff800000804222:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804226:	48 ba 7c d5 ff ff ff 	movabs rdx,0xffffffffffffd57c
ffff80000080422d:	ff ff ff 
ffff800000804230:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804234:	48 89 d6             	mov    rsi,rdx
ffff800000804237:	48 89 c7             	mov    rdi,rax
ffff80000080423a:	49 89 df             	mov    r15,rbx
ffff80000080423d:	48 b8 a5 24 ef ff ff 	movabs rax,0xffffffffffef24a5
ffff800000804244:	ff ff ff 
ffff800000804247:	48 01 d8             	add    rax,rbx
ffff80000080424a:	ff d0                	call   rax
ffff80000080424c:	85 c0                	test   eax,eax
ffff80000080424e:	75 22                	jne    ffff800000804272 <close_dev+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:183
        return close_framebuffer(inode,filp);
ffff800000804250:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804254:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804258:	48 89 d6             	mov    rsi,rdx
ffff80000080425b:	48 89 c7             	mov    rdi,rax
ffff80000080425e:	49 89 df             	mov    r15,rbx
ffff800000804261:	48 b8 03 a1 ee ff ff 	movabs rax,0xffffffffffeea103
ffff800000804268:	ff ff ff 
ffff80000080426b:	48 01 d8             	add    rax,rbx
ffff80000080426e:	ff d0                	call   rax
ffff800000804270:	eb 07                	jmp    ffff800000804279 <close_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:185
    }
    return -1;
ffff800000804272:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:187

}
ffff800000804279:	48 83 c4 20          	add    rsp,0x20
ffff80000080427d:	5b                   	pop    rbx
ffff80000080427e:	41 5f                	pop    r15
ffff800000804280:	5d                   	pop    rbp
ffff800000804281:	c3                   	ret    

ffff800000804282 <read_dev>:
read_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:188
long read_dev(struct file * filp,char * buf,unsigned long count,long * position){
ffff800000804282:	f3 0f 1e fa          	endbr64 
ffff800000804286:	55                   	push   rbp
ffff800000804287:	48 89 e5             	mov    rbp,rsp
ffff80000080428a:	41 57                	push   r15
ffff80000080428c:	53                   	push   rbx
ffff80000080428d:	48 83 ec 40          	sub    rsp,0x40
ffff800000804291:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804291 <read_dev+0xf>
ffff800000804298:	49 bb bf cc 11 00 00 	movabs r11,0x11ccbf
ffff80000080429f:	00 00 00 
ffff8000008042a2:	4c 01 db             	add    rbx,r11
ffff8000008042a5:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff8000008042a9:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff8000008042ad:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff8000008042b1:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:190
    //判断是不是块设备文件
    struct index_node* i_dev=filp->dentry->dir_inode;
ffff8000008042b5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008042b9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008042bd:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008042c1:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:197
        //这里需要调用缓冲区层的函数读取块设备
        return blkdev_read(i_dev->dev,*position,count,buf);
    }
    
    //查看文件名
    char* name=filp->dentry->name;
ffff8000008042c5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008042c9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008042cd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008042d0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:198
    char* p=name+ strlen(name)-1;
ffff8000008042d4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008042d8:	48 89 c7             	mov    rdi,rax
ffff8000008042db:	49 89 df             	mov    r15,rbx
ffff8000008042de:	48 b8 24 25 ef ff ff 	movabs rax,0xffffffffffef2524
ffff8000008042e5:	ff ff ff 
ffff8000008042e8:	48 01 d8             	add    rax,rbx
ffff8000008042eb:	ff d0                	call   rax
ffff8000008042ed:	48 98                	cdqe   
ffff8000008042ef:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff8000008042f3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008042f7:	48 01 d0             	add    rax,rdx
ffff8000008042fa:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:199
    for(;*p!='/'&&p>=name;p--);
ffff8000008042fe:	eb 05                	jmp    ffff800000804305 <read_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:199 (discriminator 3)
ffff800000804300:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:199 (discriminator 1)
ffff800000804305:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804309:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080430c:	3c 2f                	cmp    al,0x2f
ffff80000080430e:	74 0a                	je     ffff80000080431a <read_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:199 (discriminator 2)
ffff800000804310:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804314:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804318:	73 e6                	jae    ffff800000804300 <read_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:200
    if(p>=name)
ffff80000080431a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080431e:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804322:	72 0c                	jb     ffff800000804330 <read_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:201
        name=p+1;
ffff800000804324:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804328:	48 83 c0 01          	add    rax,0x1
ffff80000080432c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:202
    if(memcmp(name,"tty",3)==0){
ffff800000804330:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804334:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804339:	48 b9 88 d5 ff ff ff 	movabs rcx,0xffffffffffffd588
ffff800000804340:	ff ff ff 
ffff800000804343:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000804347:	48 89 ce             	mov    rsi,rcx
ffff80000080434a:	48 89 c7             	mov    rdi,rax
ffff80000080434d:	49 89 df             	mov    r15,rbx
ffff800000804350:	48 b8 9d 21 ef ff ff 	movabs rax,0xffffffffffef219d
ffff800000804357:	ff ff ff 
ffff80000080435a:	48 01 d8             	add    rax,rbx
ffff80000080435d:	ff d0                	call   rax
ffff80000080435f:	85 c0                	test   eax,eax
ffff800000804361:	75 27                	jne    ffff80000080438a <read_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:203
        return read_tty(filp,buf,count,position);
ffff800000804363:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000804367:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080436b:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff80000080436f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804373:	48 89 c7             	mov    rdi,rax
ffff800000804376:	49 89 df             	mov    r15,rbx
ffff800000804379:	48 b8 70 16 ef ff ff 	movabs rax,0xffffffffffef1670
ffff800000804380:	ff ff ff 
ffff800000804383:	48 01 d8             	add    rax,rbx
ffff800000804386:	ff d0                	call   rax
ffff800000804388:	eb 5c                	jmp    ffff8000008043e6 <read_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:204
    }else if(strcmp(name,"console")==0){
ffff80000080438a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080438e:	48 ba 7c d5 ff ff ff 	movabs rdx,0xffffffffffffd57c
ffff800000804395:	ff ff ff 
ffff800000804398:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080439c:	48 89 d6             	mov    rsi,rdx
ffff80000080439f:	48 89 c7             	mov    rdi,rax
ffff8000008043a2:	49 89 df             	mov    r15,rbx
ffff8000008043a5:	48 b8 a5 24 ef ff ff 	movabs rax,0xffffffffffef24a5
ffff8000008043ac:	ff ff ff 
ffff8000008043af:	48 01 d8             	add    rax,rbx
ffff8000008043b2:	ff d0                	call   rax
ffff8000008043b4:	85 c0                	test   eax,eax
ffff8000008043b6:	75 27                	jne    ffff8000008043df <read_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:205
        return read_framebuffer(filp,buf,count,position);
ffff8000008043b8:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff8000008043bc:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008043c0:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff8000008043c4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008043c8:	48 89 c7             	mov    rdi,rax
ffff8000008043cb:	49 89 df             	mov    r15,rbx
ffff8000008043ce:	48 b8 2a a1 ee ff ff 	movabs rax,0xffffffffffeea12a
ffff8000008043d5:	ff ff ff 
ffff8000008043d8:	48 01 d8             	add    rax,rbx
ffff8000008043db:	ff d0                	call   rax
ffff8000008043dd:	eb 07                	jmp    ffff8000008043e6 <read_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:207
    }
    return -1;
ffff8000008043df:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:209

}
ffff8000008043e6:	48 83 c4 40          	add    rsp,0x40
ffff8000008043ea:	5b                   	pop    rbx
ffff8000008043eb:	41 5f                	pop    r15
ffff8000008043ed:	5d                   	pop    rbp
ffff8000008043ee:	c3                   	ret    

ffff8000008043ef <write_dev>:
write_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:210
long write_dev(struct file * filp,char * buf,unsigned long count,long * position){
ffff8000008043ef:	f3 0f 1e fa          	endbr64 
ffff8000008043f3:	55                   	push   rbp
ffff8000008043f4:	48 89 e5             	mov    rbp,rsp
ffff8000008043f7:	41 57                	push   r15
ffff8000008043f9:	53                   	push   rbx
ffff8000008043fa:	48 83 ec 40          	sub    rsp,0x40
ffff8000008043fe:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008043fe <write_dev+0xf>
ffff800000804405:	49 bb 52 cb 11 00 00 	movabs r11,0x11cb52
ffff80000080440c:	00 00 00 
ffff80000080440f:	4c 01 db             	add    rbx,r11
ffff800000804412:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000804416:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff80000080441a:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff80000080441e:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:212
    //判断是不是块设备文件
    struct index_node* idev=filp->dentry->dir_inode;
ffff800000804422:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804426:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080442a:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080442e:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:219
        //这里需要调用缓冲区层的函数写块设备
        return blkdev_write(idev->dev,*position,count,buf);
    }

    //查看文件名
    char* name=filp->dentry->name;
ffff800000804432:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804436:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080443a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080443d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:220
    char* p=name+ strlen(name)-1;
ffff800000804441:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804445:	48 89 c7             	mov    rdi,rax
ffff800000804448:	49 89 df             	mov    r15,rbx
ffff80000080444b:	48 b8 24 25 ef ff ff 	movabs rax,0xffffffffffef2524
ffff800000804452:	ff ff ff 
ffff800000804455:	48 01 d8             	add    rax,rbx
ffff800000804458:	ff d0                	call   rax
ffff80000080445a:	48 98                	cdqe   
ffff80000080445c:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000804460:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804464:	48 01 d0             	add    rax,rdx
ffff800000804467:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:221
    for(;*p!='/'&&p>=name;p--);
ffff80000080446b:	eb 05                	jmp    ffff800000804472 <write_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:221 (discriminator 3)
ffff80000080446d:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:221 (discriminator 1)
ffff800000804472:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804476:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000804479:	3c 2f                	cmp    al,0x2f
ffff80000080447b:	74 0a                	je     ffff800000804487 <write_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:221 (discriminator 2)
ffff80000080447d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804481:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804485:	73 e6                	jae    ffff80000080446d <write_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:222
    if(p>=name)
ffff800000804487:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080448b:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff80000080448f:	72 0c                	jb     ffff80000080449d <write_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:223
        name=p+1;
ffff800000804491:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804495:	48 83 c0 01          	add    rax,0x1
ffff800000804499:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:224
    if(memcmp(name,"tty",3)==0){
ffff80000080449d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008044a1:	ba 03 00 00 00       	mov    edx,0x3
ffff8000008044a6:	48 b9 88 d5 ff ff ff 	movabs rcx,0xffffffffffffd588
ffff8000008044ad:	ff ff ff 
ffff8000008044b0:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff8000008044b4:	48 89 ce             	mov    rsi,rcx
ffff8000008044b7:	48 89 c7             	mov    rdi,rax
ffff8000008044ba:	49 89 df             	mov    r15,rbx
ffff8000008044bd:	48 b8 9d 21 ef ff ff 	movabs rax,0xffffffffffef219d
ffff8000008044c4:	ff ff ff 
ffff8000008044c7:	48 01 d8             	add    rax,rbx
ffff8000008044ca:	ff d0                	call   rax
ffff8000008044cc:	85 c0                	test   eax,eax
ffff8000008044ce:	75 27                	jne    ffff8000008044f7 <write_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:225
        return write_tty(filp,buf,count,position);
ffff8000008044d0:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff8000008044d4:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008044d8:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff8000008044dc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008044e0:	48 89 c7             	mov    rdi,rax
ffff8000008044e3:	49 89 df             	mov    r15,rbx
ffff8000008044e6:	48 b8 31 17 ef ff ff 	movabs rax,0xffffffffffef1731
ffff8000008044ed:	ff ff ff 
ffff8000008044f0:	48 01 d8             	add    rax,rbx
ffff8000008044f3:	ff d0                	call   rax
ffff8000008044f5:	eb 5c                	jmp    ffff800000804553 <write_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:226
    }else if(strcmp(name,"console")==0){
ffff8000008044f7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008044fb:	48 ba 7c d5 ff ff ff 	movabs rdx,0xffffffffffffd57c
ffff800000804502:	ff ff ff 
ffff800000804505:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804509:	48 89 d6             	mov    rsi,rdx
ffff80000080450c:	48 89 c7             	mov    rdi,rax
ffff80000080450f:	49 89 df             	mov    r15,rbx
ffff800000804512:	48 b8 a5 24 ef ff ff 	movabs rax,0xffffffffffef24a5
ffff800000804519:	ff ff ff 
ffff80000080451c:	48 01 d8             	add    rax,rbx
ffff80000080451f:	ff d0                	call   rax
ffff800000804521:	85 c0                	test   eax,eax
ffff800000804523:	75 27                	jne    ffff80000080454c <write_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:227
        return write_framebuffer(filp,buf,count,position);
ffff800000804525:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000804529:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080452d:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000804531:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804535:	48 89 c7             	mov    rdi,rax
ffff800000804538:	49 89 df             	mov    r15,rbx
ffff80000080453b:	48 b8 59 a1 ee ff ff 	movabs rax,0xffffffffffeea159
ffff800000804542:	ff ff ff 
ffff800000804545:	48 01 d8             	add    rax,rbx
ffff800000804548:	ff d0                	call   rax
ffff80000080454a:	eb 07                	jmp    ffff800000804553 <write_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:229
    }
    return -1;
ffff80000080454c:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:231

}
ffff800000804553:	48 83 c4 40          	add    rsp,0x40
ffff800000804557:	5b                   	pop    rbx
ffff800000804558:	41 5f                	pop    r15
ffff80000080455a:	5d                   	pop    rbp
ffff80000080455b:	c3                   	ret    

ffff80000080455c <ioctl_dev>:
ioctl_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:232
long ioctl_dev(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff80000080455c:	f3 0f 1e fa          	endbr64 
ffff800000804560:	55                   	push   rbp
ffff800000804561:	48 89 e5             	mov    rbp,rsp
ffff800000804564:	41 57                	push   r15
ffff800000804566:	53                   	push   rbx
ffff800000804567:	48 83 ec 40          	sub    rsp,0x40
ffff80000080456b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080456b <ioctl_dev+0xf>
ffff800000804572:	49 bb e5 c9 11 00 00 	movabs r11,0x11c9e5
ffff800000804579:	00 00 00 
ffff80000080457c:	4c 01 db             	add    rbx,r11
ffff80000080457f:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000804583:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000804587:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff80000080458b:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:234
    //判断是不是块设备文件
    struct index_node* idev=filp->dentry->dir_inode;
ffff80000080458f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000804593:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804597:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080459b:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:240
    if(IS_BLKDEV(idev->dev)){
        //这里需要调用缓冲区层的函数ioctl块设备
        return 1;
    }
    //查看文件名
    char* name=filp->dentry->name;
ffff80000080459f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008045a3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008045a7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008045aa:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:241
    char* p=name+ strlen(name)-1;
ffff8000008045ae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008045b2:	48 89 c7             	mov    rdi,rax
ffff8000008045b5:	49 89 df             	mov    r15,rbx
ffff8000008045b8:	48 b8 24 25 ef ff ff 	movabs rax,0xffffffffffef2524
ffff8000008045bf:	ff ff ff 
ffff8000008045c2:	48 01 d8             	add    rax,rbx
ffff8000008045c5:	ff d0                	call   rax
ffff8000008045c7:	48 98                	cdqe   
ffff8000008045c9:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff8000008045cd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008045d1:	48 01 d0             	add    rax,rdx
ffff8000008045d4:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:242
    for(;*p!='/'&&p>=name;p--);
ffff8000008045d8:	eb 05                	jmp    ffff8000008045df <ioctl_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:242 (discriminator 3)
ffff8000008045da:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:242 (discriminator 1)
ffff8000008045df:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008045e3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008045e6:	3c 2f                	cmp    al,0x2f
ffff8000008045e8:	74 0a                	je     ffff8000008045f4 <ioctl_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:242 (discriminator 2)
ffff8000008045ea:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008045ee:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff8000008045f2:	73 e6                	jae    ffff8000008045da <ioctl_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:243
    if(p>=name)
ffff8000008045f4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008045f8:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff8000008045fc:	72 0c                	jb     ffff80000080460a <ioctl_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:244
        name=p+1;
ffff8000008045fe:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804602:	48 83 c0 01          	add    rax,0x1
ffff800000804606:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:245
    if(memcmp(name,"tty",3)==0){
ffff80000080460a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080460e:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804613:	48 b9 88 d5 ff ff ff 	movabs rcx,0xffffffffffffd588
ffff80000080461a:	ff ff ff 
ffff80000080461d:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000804621:	48 89 ce             	mov    rsi,rcx
ffff800000804624:	48 89 c7             	mov    rdi,rax
ffff800000804627:	49 89 df             	mov    r15,rbx
ffff80000080462a:	48 b8 9d 21 ef ff ff 	movabs rax,0xffffffffffef219d
ffff800000804631:	ff ff ff 
ffff800000804634:	48 01 d8             	add    rax,rbx
ffff800000804637:	ff d0                	call   rax
ffff800000804639:	85 c0                	test   eax,eax
ffff80000080463b:	75 27                	jne    ffff800000804664 <ioctl_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:246
        return ioctl_tty(inode, filp, cmd, arg);
ffff80000080463d:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000804641:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000804645:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000804649:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080464d:	48 89 c7             	mov    rdi,rax
ffff800000804650:	49 89 df             	mov    r15,rbx
ffff800000804653:	48 b8 21 18 ef ff ff 	movabs rax,0xffffffffffef1821
ffff80000080465a:	ff ff ff 
ffff80000080465d:	48 01 d8             	add    rax,rbx
ffff800000804660:	ff d0                	call   rax
ffff800000804662:	eb 5c                	jmp    ffff8000008046c0 <ioctl_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:247
    }else if(strcmp(name,"console")==0){
ffff800000804664:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804668:	48 ba 7c d5 ff ff ff 	movabs rdx,0xffffffffffffd57c
ffff80000080466f:	ff ff ff 
ffff800000804672:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804676:	48 89 d6             	mov    rsi,rdx
ffff800000804679:	48 89 c7             	mov    rdi,rax
ffff80000080467c:	49 89 df             	mov    r15,rbx
ffff80000080467f:	48 b8 a5 24 ef ff ff 	movabs rax,0xffffffffffef24a5
ffff800000804686:	ff ff ff 
ffff800000804689:	48 01 d8             	add    rax,rbx
ffff80000080468c:	ff d0                	call   rax
ffff80000080468e:	85 c0                	test   eax,eax
ffff800000804690:	75 27                	jne    ffff8000008046b9 <ioctl_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:248
        return ioctl_framebuffer(inode,filp,cmd,arg);
ffff800000804692:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000804696:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080469a:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff80000080469e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008046a2:	48 89 c7             	mov    rdi,rax
ffff8000008046a5:	49 89 df             	mov    r15,rbx
ffff8000008046a8:	48 b8 7a a2 ee ff ff 	movabs rax,0xffffffffffeea27a
ffff8000008046af:	ff ff ff 
ffff8000008046b2:	48 01 d8             	add    rax,rbx
ffff8000008046b5:	ff d0                	call   rax
ffff8000008046b7:	eb 07                	jmp    ffff8000008046c0 <ioctl_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:250
    }
    return -1;
ffff8000008046b9:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:252

}
ffff8000008046c0:	48 83 c4 40          	add    rsp,0x40
ffff8000008046c4:	5b                   	pop    rbx
ffff8000008046c5:	41 5f                	pop    r15
ffff8000008046c7:	5d                   	pop    rbp
ffff8000008046c8:	c3                   	ret    

ffff8000008046c9 <load_driver>:
load_driver():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:254
int load_driver(char *path)
{
ffff8000008046c9:	f3 0f 1e fa          	endbr64 
ffff8000008046cd:	55                   	push   rbp
ffff8000008046ce:	48 89 e5             	mov    rbp,rsp
ffff8000008046d1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008046d1 <load_driver+0x8>
ffff8000008046d8:	49 bb 7f c8 11 00 00 	movabs r11,0x11c87f
ffff8000008046df:	00 00 00 
ffff8000008046e2:	4c 01 d8             	add    rax,r11
ffff8000008046e5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:256
    
}
ffff8000008046e9:	90                   	nop
ffff8000008046ea:	5d                   	pop    rbp
ffff8000008046eb:	c3                   	ret    

ffff8000008046ec <init_proc>:
init_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:26
TSS *tss=0xffff800000108000ul;
int cur_proc=0;
int pidd=0;
int palloc_paddr=0;
static pid_t sidd=0;
void init_proc(){
ffff8000008046ec:	f3 0f 1e fa          	endbr64 
ffff8000008046f0:	55                   	push   rbp
ffff8000008046f1:	48 89 e5             	mov    rbp,rsp
ffff8000008046f4:	41 57                	push   r15
ffff8000008046f6:	53                   	push   rbx
ffff8000008046f7:	48 83 ec 10          	sub    rsp,0x10
ffff8000008046fb:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008046fb <init_proc+0xf>
ffff800000804702:	49 bb 55 c8 11 00 00 	movabs r11,0x11c855
ffff800000804709:	00 00 00 
ffff80000080470c:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:28
    //task=(struct process*)get_global_var(TASK_PCBS_ADDR);//[MAX_TASKS];;
    task=(struct process*)kmallocat(0,13);
ffff80000080470f:	be 0d 00 00 00       	mov    esi,0xd
ffff800000804714:	bf 00 00 00 00       	mov    edi,0x0
ffff800000804719:	49 89 df             	mov    r15,rbx
ffff80000080471c:	48 b8 ee 13 ee ff ff 	movabs rax,0xffffffffffee13ee
ffff800000804723:	ff ff ff 
ffff800000804726:	48 01 d8             	add    rax,rbx
ffff800000804729:	ff d0                	call   rax
ffff80000080472b:	48 89 c2             	mov    rdx,rax
ffff80000080472e:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000804735:	ff ff ff 
ffff800000804738:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080473c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29
    for(int i=0;i<MAX_PROC_COUNT;i++){
ffff80000080473f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000804746:	eb 7b                	jmp    ffff8000008047c3 <init_proc+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:30 (discriminator 3)
        task[i].pid=-1;
ffff800000804748:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff80000080474f:	ff ff ff 
ffff800000804752:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804756:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804759:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080475c:	48 98                	cdqe   
ffff80000080475e:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804765:	48 01 d0             	add    rax,rdx
ffff800000804768:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:31 (discriminator 3)
        task[i].stat=TASK_EMPTY;
ffff80000080476e:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000804775:	ff ff ff 
ffff800000804778:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080477c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080477f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804782:	48 98                	cdqe   
ffff800000804784:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080478b:	48 01 d0             	add    rax,rdx
ffff80000080478e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:32 (discriminator 3)
        task[i].parent_pid=-1;
ffff800000804795:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff80000080479c:	ff ff ff 
ffff80000080479f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008047a3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008047a6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008047a9:	48 98                	cdqe   
ffff8000008047ab:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008047b2:	48 01 d0             	add    rax,rdx
ffff8000008047b5:	c7 80 bc 00 00 00 ff 	mov    DWORD PTR [rax+0xbc],0xffffffff
ffff8000008047bc:	ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29 (discriminator 3)
    for(int i=0;i<MAX_PROC_COUNT;i++){
ffff8000008047bf:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29 (discriminator 1)
ffff8000008047c3:	83 7d ec 3f          	cmp    DWORD PTR [rbp-0x14],0x3f
ffff8000008047c7:	0f 8e 7b ff ff ff    	jle    ffff800000804748 <init_proc+0x5c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:34
    }
    cur_proc=0;//proc zero
ffff8000008047cd:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff8000008047d4:	ff ff ff 
ffff8000008047d7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008047db:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:35
    current=task;
ffff8000008047e1:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff8000008047e8:	ff ff ff 
ffff8000008047eb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008047ef:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008047f2:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff8000008047f9:	ff ff ff 
ffff8000008047fc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804800:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:36
    pidd=1;
ffff800000804803:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080480a:	ff ff ff 
ffff80000080480d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804811:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:41


    //asm volatile("lldt %0"::"m"(xi));
    //asm volatile("ltr %0"::"m"(zi));
    set_tss(0x400000+KNL_BASE,0x400000+KNL_BASE,0x400000+KNL_BASE\
ffff800000804817:	68 00 00 80 00       	push   0x800000
ffff80000080481c:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff800000804823:	ff 
ffff800000804824:	68 00 00 80 00       	push   0x800000
ffff800000804829:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff800000804830:	ff 
ffff800000804831:	68 00 00 80 00       	push   0x800000
ffff800000804836:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff80000080483d:	ff 
ffff80000080483e:	68 00 00 80 00       	push   0x800000
ffff800000804843:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff80000080484a:	ff 
ffff80000080484b:	49 b9 00 00 80 00 00 	movabs r9,0xffff800000800000
ffff800000804852:	80 ff ff 
ffff800000804855:	49 b8 00 00 80 00 00 	movabs r8,0xffff800000800000
ffff80000080485c:	80 ff ff 
ffff80000080485f:	48 b8 00 00 80 00 00 	movabs rax,0xffff800000800000
ffff800000804866:	80 ff ff 
ffff800000804869:	48 89 c1             	mov    rcx,rax
ffff80000080486c:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff800000804873:	80 ff ff 
ffff800000804876:	48 89 c2             	mov    rdx,rax
ffff800000804879:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff800000804880:	80 ff ff 
ffff800000804883:	48 89 c6             	mov    rsi,rax
ffff800000804886:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff80000080488d:	80 ff ff 
ffff800000804890:	48 89 c7             	mov    rdi,rax
ffff800000804893:	49 89 df             	mov    r15,rbx
ffff800000804896:	48 b8 e2 57 ee ff ff 	movabs rax,0xffffffffffee57e2
ffff80000080489d:	ff ff ff 
ffff8000008048a0:	48 01 d8             	add    rax,rbx
ffff8000008048a3:	ff d0                	call   rax
ffff8000008048a5:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:46
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE\
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE);

    //===============创建0号进程======================
    int zi= init_proc0();
ffff8000008048a9:	49 89 df             	mov    r15,rbx
ffff8000008048ac:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008048b1:	48 ba 2b 3d ee ff ff 	movabs rdx,0xffffffffffee3d2b
ffff8000008048b8:	ff ff ff 
ffff8000008048bb:	48 01 da             	add    rdx,rbx
ffff8000008048be:	ff d2                	call   rdx
ffff8000008048c0:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:47
    task[zi].stat=TASK_READY;
ffff8000008048c3:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff8000008048ca:	ff ff ff 
ffff8000008048cd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008048d1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008048d4:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008048d7:	48 98                	cdqe   
ffff8000008048d9:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008048e0:	48 01 d0             	add    rax,rdx
ffff8000008048e3:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:49
    //IA32_INTERRUPT_SSP_TABLE_ADDR，准备IST
    wrmsr(0x6a8,tss->rsvd2);
ffff8000008048ea:	48 b8 f8 fd ff ff ff 	movabs rax,0xfffffffffffffdf8
ffff8000008048f1:	ff ff ff 
ffff8000008048f4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008048f8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008048fb:	48 8b 40 1c          	mov    rax,QWORD PTR [rax+0x1c]
ffff8000008048ff:	48 89 c6             	mov    rsi,rax
ffff800000804902:	bf a8 06 00 00       	mov    edi,0x6a8
ffff800000804907:	49 89 df             	mov    r15,rbx
ffff80000080490a:	48 b8 36 ff ed ff ff 	movabs rax,0xffffffffffedff36
ffff800000804911:	ff ff ff 
ffff800000804914:	48 01 d8             	add    rax,rbx
ffff800000804917:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:51
    //把内核代码段选择子写到MSR寄存器中准备用于特权级转换(sysexit，现在没用)
    wrmsr(0x174,0x8);
ffff800000804919:	be 08 00 00 00       	mov    esi,0x8
ffff80000080491e:	bf 74 01 00 00       	mov    edi,0x174
ffff800000804923:	49 89 df             	mov    r15,rbx
ffff800000804926:	48 b8 36 ff ed ff ff 	movabs rax,0xffffffffffedff36
ffff80000080492d:	ff ff ff 
ffff800000804930:	48 01 d8             	add    rax,rbx
ffff800000804933:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:53
    //准备用于特权级转换(sysret，正在使用)
    wrmsr(0xc0000081,0x0020000800000000ul);
ffff800000804935:	48 b8 00 00 00 00 08 	movabs rax,0x20000800000000
ffff80000080493c:	00 20 00 
ffff80000080493f:	48 89 c6             	mov    rsi,rax
ffff800000804942:	b8 81 00 00 c0       	mov    eax,0xc0000081
ffff800000804947:	48 89 c7             	mov    rdi,rax
ffff80000080494a:	49 89 df             	mov    r15,rbx
ffff80000080494d:	48 b8 36 ff ed ff ff 	movabs rax,0xffffffffffedff36
ffff800000804954:	ff ff ff 
ffff800000804957:	48 01 d8             	add    rax,rbx
ffff80000080495a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:55

    comprintf("proc init set.\r\ntss.ist=0x%p\r\n",tss->ists[0]);
ffff80000080495c:	48 b8 f8 fd ff ff ff 	movabs rax,0xfffffffffffffdf8
ffff800000804963:	ff ff ff 
ffff800000804966:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080496a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080496d:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
ffff800000804971:	48 89 c6             	mov    rsi,rax
ffff800000804974:	48 b8 90 d5 ff ff ff 	movabs rax,0xffffffffffffd590
ffff80000080497b:	ff ff ff 
ffff80000080497e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000804982:	48 89 c7             	mov    rdi,rax
ffff800000804985:	49 89 df             	mov    r15,rbx
ffff800000804988:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080498d:	48 ba b3 1c ef ff ff 	movabs rdx,0xffffffffffef1cb3
ffff800000804994:	ff ff ff 
ffff800000804997:	48 01 da             	add    rdx,rbx
ffff80000080499a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:58
    //创建一个测试进程
//    create_test_proc();
}
ffff80000080499c:	90                   	nop
ffff80000080499d:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff8000008049a1:	5b                   	pop    rbx
ffff8000008049a2:	41 5f                	pop    r15
ffff8000008049a4:	5d                   	pop    rbp
ffff8000008049a5:	c3                   	ret    

ffff8000008049a6 <create_test_proc>:
create_test_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:59
void create_test_proc(){
ffff8000008049a6:	f3 0f 1e fa          	endbr64 
ffff8000008049aa:	55                   	push   rbp
ffff8000008049ab:	48 89 e5             	mov    rbp,rsp
ffff8000008049ae:	41 57                	push   r15
ffff8000008049b0:	53                   	push   rbx
ffff8000008049b1:	48 83 ec 20          	sub    rsp,0x20
ffff8000008049b5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008049b5 <create_test_proc+0xf>
ffff8000008049bc:	49 bb 9b c5 11 00 00 	movabs r11,0x11c59b
ffff8000008049c3:	00 00 00 
ffff8000008049c6:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:61

    int index=req_proc();
ffff8000008049c9:	49 89 df             	mov    r15,rbx
ffff8000008049cc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008049d1:	48 ba 6d 3f ee ff ff 	movabs rdx,0xffffffffffee3f6d
ffff8000008049d8:	ff ff ff 
ffff8000008049db:	48 01 da             	add    rdx,rbx
ffff8000008049de:	ff d2                	call   rdx
ffff8000008049e0:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:62
    task[index].stat=TASK_READY;
ffff8000008049e3:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff8000008049ea:	ff ff ff 
ffff8000008049ed:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008049f1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008049f4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008049f7:	48 98                	cdqe   
ffff8000008049f9:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804a00:	48 01 d0             	add    rax,rdx
ffff800000804a03:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:63
    int currsp=0x9fc00-1;
ffff800000804a0a:	c7 45 dc ff fb 09 00 	mov    DWORD PTR [rbp-0x24],0x9fbff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:64
    asm volatile("mov %%rsp,%0":"=m"(currsp));
ffff800000804a11:	48 89 65 dc          	mov    QWORD PTR [rbp-0x24],rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:65
    set_proc(0, 0, 0, 0, 0x10, 0x8, 0x10, 0x10, 0x10, 0x10,
ffff800000804a15:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000804a1c:	ff ff ff 
ffff800000804a1f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804a23:	48 89 c2             	mov    rdx,rax
ffff800000804a26:	48 83 ec 08          	sub    rsp,0x8
ffff800000804a2a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804a2d:	50                   	push   rax
ffff800000804a2e:	6a 00                	push   0x0
ffff800000804a30:	52                   	push   rdx
ffff800000804a31:	6a 00                	push   0x0
ffff800000804a33:	6a 00                	push   0x0
ffff800000804a35:	6a 00                	push   0x0
ffff800000804a37:	68 58 7d 00 00       	push   0x7d58
ffff800000804a3c:	6a 10                	push   0x10
ffff800000804a3e:	6a 10                	push   0x10
ffff800000804a40:	6a 10                	push   0x10
ffff800000804a42:	6a 10                	push   0x10
ffff800000804a44:	41 b9 08 00 00 00    	mov    r9d,0x8
ffff800000804a4a:	41 b8 10 00 00 00    	mov    r8d,0x10
ffff800000804a50:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000804a55:	ba 00 00 00 00       	mov    edx,0x0
ffff800000804a5a:	be 00 00 00 00       	mov    esi,0x0
ffff800000804a5f:	bf 00 00 00 00       	mov    edi,0x0
ffff800000804a64:	49 89 df             	mov    r15,rbx
ffff800000804a67:	48 b8 be 40 ee ff ff 	movabs rax,0xffffffffffee40be
ffff800000804a6e:	ff ff ff 
ffff800000804a71:	48 01 d8             	add    rax,rbx
ffff800000804a74:	ff d0                	call   rax
ffff800000804a76:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:67
             0x7e00- sizeof(stack_store_regs), 0, 0, 0, (long)_syscall_sysret, 0, index);
    task[index].tss.rsp0=0x400000;
ffff800000804a7a:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000804a81:	ff ff ff 
ffff800000804a84:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804a88:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804a8b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804a8e:	48 98                	cdqe   
ffff800000804a90:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804a97:	48 01 d0             	add    rax,rdx
ffff800000804a9a:	48 c7 80 fc 01 00 00 	mov    QWORD PTR [rax+0x1fc],0x400000
ffff800000804aa1:	00 00 40 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:68
    task[index].mem_struct.stack_top=0x7e00;
ffff800000804aa5:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000804aac:	ff ff ff 
ffff800000804aaf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804ab3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804ab6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804ab9:	48 98                	cdqe   
ffff800000804abb:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804ac2:	48 01 d0             	add    rax,rdx
ffff800000804ac5:	48 c7 40 40 00 7e 00 	mov    QWORD PTR [rax+0x40],0x7e00
ffff800000804acc:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:69
    task[index].mem_struct.stack_bottom=0x6e00;
ffff800000804acd:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000804ad4:	ff ff ff 
ffff800000804ad7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804adb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804ade:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804ae1:	48 98                	cdqe   
ffff800000804ae3:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804aea:	48 01 d0             	add    rax,rdx
ffff800000804aed:	48 c7 40 38 00 6e 00 	mov    QWORD PTR [rax+0x38],0x6e00
ffff800000804af4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:70
    task[index].mem_struct.heap_top=0x1101000;
ffff800000804af5:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000804afc:	ff ff ff 
ffff800000804aff:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804b03:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804b06:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804b09:	48 98                	cdqe   
ffff800000804b0b:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804b12:	48 01 d0             	add    rax,rdx
ffff800000804b15:	48 c7 40 30 00 10 10 	mov    QWORD PTR [rax+0x30],0x1101000
ffff800000804b1c:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:71
    task[index].mem_struct.heap_base=0x1100000;
ffff800000804b1d:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000804b24:	ff ff ff 
ffff800000804b27:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804b2b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804b2e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804b31:	48 98                	cdqe   
ffff800000804b33:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804b3a:	48 01 d0             	add    rax,rdx
ffff800000804b3d:	48 c7 40 28 00 00 10 	mov    QWORD PTR [rax+0x28],0x1100000
ffff800000804b44:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:74

    //把还原现场时用到的堆栈设置好
    stack_store_regs *str= (stack_store_regs *) (0x7e00 - sizeof(stack_store_regs));
ffff800000804b45:	48 c7 45 e0 58 7d 00 	mov    QWORD PTR [rbp-0x20],0x7d58
ffff800000804b4c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:75
    str->rax=0;
ffff800000804b4d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804b51:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
ffff800000804b58:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:76
    str->rbx=0;
ffff800000804b59:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804b5d:	48 c7 40 70 00 00 00 	mov    QWORD PTR [rax+0x70],0x0
ffff800000804b64:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:77
    str->rcx=proc_zero;//sysret采用的返回地址
ffff800000804b65:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000804b6c:	ff ff ff 
ffff800000804b6f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804b73:	48 89 c2             	mov    rdx,rax
ffff800000804b76:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804b7a:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:78
    str->rdx=0;
ffff800000804b7e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804b82:	48 c7 40 60 00 00 00 	mov    QWORD PTR [rax+0x60],0x0
ffff800000804b89:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:79
    str->rsi=0;
ffff800000804b8a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804b8e:	48 c7 40 50 00 00 00 	mov    QWORD PTR [rax+0x50],0x0
ffff800000804b95:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:80
    str->rdi=0;
ffff800000804b96:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804b9a:	48 c7 40 58 00 00 00 	mov    QWORD PTR [rax+0x58],0x0
ffff800000804ba1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:81
    str->r15=0;
ffff800000804ba2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804ba6:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000804bad:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:82
    str->r14=0;
ffff800000804bae:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804bb2:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff800000804bb9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:83
    str->r13=0;
ffff800000804bba:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804bbe:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffff800000804bc5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:84
    str->r12=0;
ffff800000804bc6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804bca:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffff800000804bd1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:85
    str->r11=0x200;
ffff800000804bd2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804bd6:	48 c7 40 30 00 02 00 	mov    QWORD PTR [rax+0x30],0x200
ffff800000804bdd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:86
    str->r10=0;
ffff800000804bde:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804be2:	48 c7 40 38 00 00 00 	mov    QWORD PTR [rax+0x38],0x0
ffff800000804be9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:87
    str->r9=0;
ffff800000804bea:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804bee:	48 c7 40 40 00 00 00 	mov    QWORD PTR [rax+0x40],0x0
ffff800000804bf5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:88
    str->r8=0;
ffff800000804bf6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804bfa:	48 c7 40 48 00 00 00 	mov    QWORD PTR [rax+0x48],0x0
ffff800000804c01:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:89
    str->rip=proc_zero;
ffff800000804c02:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000804c09:	ff ff ff 
ffff800000804c0c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804c10:	48 89 c2             	mov    rdx,rax
ffff800000804c13:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804c17:	48 89 90 80 00 00 00 	mov    QWORD PTR [rax+0x80],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:90
    str->cs=0x8;
ffff800000804c1e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804c22:	48 c7 80 88 00 00 00 	mov    QWORD PTR [rax+0x88],0x8
ffff800000804c29:	08 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:91
    str->rflags=0x00200206;
ffff800000804c2d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804c31:	48 c7 80 90 00 00 00 	mov    QWORD PTR [rax+0x90],0x200206
ffff800000804c38:	06 02 20 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:92
    str->rsp=0x7e00;
ffff800000804c3c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804c40:	48 c7 80 98 00 00 00 	mov    QWORD PTR [rax+0x98],0x7e00
ffff800000804c47:	00 7e 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:93
    str->ss=0x2b;
ffff800000804c4b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804c4f:	48 c7 80 a0 00 00 00 	mov    QWORD PTR [rax+0xa0],0x2b
ffff800000804c56:	2b 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:94
    str->ds=0x2b;
ffff800000804c5a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804c5e:	48 c7 00 2b 00 00 00 	mov    QWORD PTR [rax],0x2b
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:95
    str->es=0x2b;
ffff800000804c65:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804c69:	48 c7 40 08 2b 00 00 	mov    QWORD PTR [rax+0x8],0x2b
ffff800000804c70:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:97

}
ffff800000804c71:	90                   	nop
ffff800000804c72:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff800000804c76:	5b                   	pop    rbx
ffff800000804c77:	41 5f                	pop    r15
ffff800000804c79:	5d                   	pop    rbp
ffff800000804c7a:	c3                   	ret    

ffff800000804c7b <init_proc0>:
init_proc0():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:99
int init_proc0()
{
ffff800000804c7b:	f3 0f 1e fa          	endbr64 
ffff800000804c7f:	55                   	push   rbp
ffff800000804c80:	48 89 e5             	mov    rbp,rsp
ffff800000804c83:	41 57                	push   r15
ffff800000804c85:	53                   	push   rbx
ffff800000804c86:	48 83 ec 10          	sub    rsp,0x10
ffff800000804c8a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804c8a <init_proc0+0xf>
ffff800000804c91:	49 bb c6 c2 11 00 00 	movabs r11,0x11c2c6
ffff800000804c98:	00 00 00 
ffff800000804c9b:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:101

    task[0].pid=pidd++;
ffff800000804c9e:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000804ca5:	ff ff ff 
ffff800000804ca8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804cac:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000804cae:	8d 48 01             	lea    ecx,[rax+0x1]
ffff800000804cb1:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000804cb8:	ff ff ff 
ffff800000804cbb:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000804cbf:	89 0a                	mov    DWORD PTR [rdx],ecx
ffff800000804cc1:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000804cc8:	ff ff ff 
ffff800000804ccb:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000804ccf:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000804cd2:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:102
    task[0].stat=TASK_RUNNING;
ffff800000804cd4:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000804cdb:	ff ff ff 
ffff800000804cde:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804ce2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804ce5:	c7 40 18 01 00 00 00 	mov    DWORD PTR [rax+0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:103
    task[0].utime=0;
ffff800000804cec:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000804cf3:	ff ff ff 
ffff800000804cf6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804cfa:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804cfd:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:104
    task[0].priority=0;
ffff800000804d04:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000804d0b:	ff ff ff 
ffff800000804d0e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804d12:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804d15:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:106

    struct process *pz=task;
ffff800000804d1c:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000804d23:	ff ff ff 
ffff800000804d26:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804d2a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804d2d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:115
//    task[index].tss.eip=(long)proc_zero;
    extern struct dir_entry* dtty;
    //stdin stdout stderr
    //这里绕开了sys open，这样是为了尽量快
    extern struct file ftty;
    pz->openf[0]=(struct file*)&ftty;
ffff800000804d31:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804d35:	48 ba 10 fe ff ff ff 	movabs rdx,0xfffffffffffffe10
ffff800000804d3c:	ff ff ff 
ffff800000804d3f:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000804d43:	48 89 90 f8 00 00 00 	mov    QWORD PTR [rax+0xf8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:116
    pz->openf[1]=(struct file*)&ftty;
ffff800000804d4a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804d4e:	48 ba 10 fe ff ff ff 	movabs rdx,0xfffffffffffffe10
ffff800000804d55:	ff ff ff 
ffff800000804d58:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000804d5c:	48 89 90 00 01 00 00 	mov    QWORD PTR [rax+0x100],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:117
    pz->openf[2]=(struct file*)&ftty;
ffff800000804d63:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804d67:	48 ba 10 fe ff ff ff 	movabs rdx,0xfffffffffffffe10
ffff800000804d6e:	ff ff ff 
ffff800000804d71:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000804d75:	48 89 90 08 01 00 00 	mov    QWORD PTR [rax+0x108],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:119

    pz->mem_struct.stack_top=STACK_TOP;
ffff800000804d7c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804d80:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff800000804d87:	7f 00 00 
ffff800000804d8a:	48 89 70 40          	mov    QWORD PTR [rax+0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:120
    pz->mem_struct.stack_bottom=STACK_TOP;
ffff800000804d8e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804d92:	48 89 70 38          	mov    QWORD PTR [rax+0x38],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:121
    pz->mem_struct.heap_top=HEAP_BASE;
ffff800000804d96:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804d9a:	48 c7 40 30 00 00 00 	mov    QWORD PTR [rax+0x30],0x1000000
ffff800000804da1:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:122
    pz->mem_struct.heap_base=HEAP_BASE;
ffff800000804da2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804da6:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x1000000
ffff800000804dad:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:123
    memcpy(&pz->tss,tss, sizeof(TSS));
ffff800000804dae:	48 b8 f8 fd ff ff ff 	movabs rax,0xfffffffffffffdf8
ffff800000804db5:	ff ff ff 
ffff800000804db8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804dbc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804dbf:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000804dc3:	48 8d 8a f8 01 00 00 	lea    rcx,[rdx+0x1f8]
ffff800000804dca:	ba 6c 00 00 00       	mov    edx,0x6c
ffff800000804dcf:	48 89 c6             	mov    rsi,rax
ffff800000804dd2:	48 89 cf             	mov    rdi,rcx
ffff800000804dd5:	49 89 df             	mov    r15,rbx
ffff800000804dd8:	48 b8 53 21 ef ff ff 	movabs rax,0xffffffffffef2153
ffff800000804ddf:	ff ff ff 
ffff800000804de2:	48 01 d8             	add    rax,rbx
ffff800000804de5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:125

    pz->child_procs=NULL;
ffff800000804de7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804deb:	48 c7 80 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],0x0
ffff800000804df2:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:128

    //这个是进程切换的时候要读取的值
    pz->regs.cr3=PML4_ADDR&~KNL_BASE;
ffff800000804df6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804dfa:	48 c7 80 64 02 00 00 	mov    QWORD PTR [rax+0x264],0x101000
ffff800000804e01:	00 10 10 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:129
    pz->pml4=PML4_ADDR;
ffff800000804e05:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804e09:	48 bf 00 10 10 00 00 	movabs rdi,0xffff800000101000
ffff800000804e10:	80 ff ff 
ffff800000804e13:	48 89 b8 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:130
    pz->cwd=root_sb->root;
ffff800000804e1a:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff800000804e21:	ff ff ff 
ffff800000804e24:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804e28:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804e2b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804e2e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804e32:	48 89 90 e8 00 00 00 	mov    QWORD PTR [rax+0xe8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:131
    pz->exef=NULL;
ffff800000804e39:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804e3d:	48 c7 80 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],0x0
ffff800000804e44:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:132
    list_init(&pz->node);
ffff800000804e48:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804e4c:	48 05 34 03 00 00    	add    rax,0x334
ffff800000804e52:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff800000804e56:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804e5a:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff800000804e61:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804e65:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000804e6c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff800000804e6d:	90                   	nop
init_proc0():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:133
    pz->node.data=pz;
ffff800000804e6e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804e72:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000804e76:	48 89 90 3c 03 00 00 	mov    QWORD PTR [rax+0x33c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:135
    
    pz->gpid=pz->pid;
ffff800000804e7d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804e81:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000804e83:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804e87:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:136
    pz->sid=pz->pid;
ffff800000804e8a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804e8e:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000804e90:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804e94:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:137
    pz->fg_pgid=pz->pid;
ffff800000804e97:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804e9b:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000804e9d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804ea1:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:138
    pz->in_bgpg=0;
ffff800000804ea4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804ea8:	c7 40 10 00 00 00 00 	mov    DWORD PTR [rax+0x10],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:139
    return 0;
ffff800000804eaf:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:140
}
ffff800000804eb4:	48 83 c4 10          	add    rsp,0x10
ffff800000804eb8:	5b                   	pop    rbx
ffff800000804eb9:	41 5f                	pop    r15
ffff800000804ebb:	5d                   	pop    rbp
ffff800000804ebc:	c3                   	ret    

ffff800000804ebd <req_proc>:
req_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:141
int req_proc(){
ffff800000804ebd:	f3 0f 1e fa          	endbr64 
ffff800000804ec1:	55                   	push   rbp
ffff800000804ec2:	48 89 e5             	mov    rbp,rsp
ffff800000804ec5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804ec5 <req_proc+0x8>
ffff800000804ecc:	49 bb 8b c0 11 00 00 	movabs r11,0x11c08b
ffff800000804ed3:	00 00 00 
ffff800000804ed6:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:142
    int num=0;
ffff800000804ed9:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
ffff800000804ee0:	eb 04                	jmp    ffff800000804ee6 <req_proc+0x29>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:145
    num<=MAX_PROC_COUNT){
        num++;
ffff800000804ee2:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
ffff800000804ee6:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000804eed:	ff ff ff 
ffff800000804ef0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804ef4:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804ef7:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804efa:	48 63 d2             	movsxd rdx,edx
ffff800000804efd:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804f04:	48 01 ca             	add    rdx,rcx
ffff800000804f07:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804f09:	83 fa ff             	cmp    edx,0xffffffff
ffff800000804f0c:	74 2e                	je     ffff800000804f3c <req_proc+0x7f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143 (discriminator 1)
ffff800000804f0e:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000804f15:	ff ff ff 
ffff800000804f18:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f1c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804f1f:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804f22:	48 63 d2             	movsxd rdx,edx
ffff800000804f25:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804f2c:	48 01 ca             	add    rdx,rcx
ffff800000804f2f:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff800000804f32:	85 d2                	test   edx,edx
ffff800000804f34:	74 06                	je     ffff800000804f3c <req_proc+0x7f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143 (discriminator 2)
ffff800000804f36:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff800000804f3a:	7e a6                	jle    ffff800000804ee2 <req_proc+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:147
    }
    if(num>=MAX_PROC_COUNT)
ffff800000804f3c:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff800000804f40:	7e 0a                	jle    ffff800000804f4c <req_proc+0x8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:148
        return -1;
ffff800000804f42:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000804f47:	e9 c0 00 00 00       	jmp    ffff80000080500c <req_proc+0x14f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:149
    task[num].pid=pidd++;
ffff800000804f4c:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000804f53:	ff ff ff 
ffff800000804f56:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f5a:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804f5c:	8d 72 01             	lea    esi,[rdx+0x1]
ffff800000804f5f:	48 b9 48 fe ff ff ff 	movabs rcx,0xfffffffffffffe48
ffff800000804f66:	ff ff ff 
ffff800000804f69:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000804f6d:	89 31                	mov    DWORD PTR [rcx],esi
ffff800000804f6f:	48 b9 98 fe ff ff ff 	movabs rcx,0xfffffffffffffe98
ffff800000804f76:	ff ff ff 
ffff800000804f79:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000804f7d:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
ffff800000804f80:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000804f83:	48 63 c9             	movsxd rcx,ecx
ffff800000804f86:	48 69 c9 58 03 00 00 	imul   rcx,rcx,0x358
ffff800000804f8d:	48 01 f1             	add    rcx,rsi
ffff800000804f90:	89 11                	mov    DWORD PTR [rcx],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:150
    task[num].stat=TASK_ZOMBIE;
ffff800000804f92:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000804f99:	ff ff ff 
ffff800000804f9c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804fa0:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804fa3:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804fa6:	48 63 d2             	movsxd rdx,edx
ffff800000804fa9:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804fb0:	48 01 ca             	add    rdx,rcx
ffff800000804fb3:	c7 42 18 04 00 00 00 	mov    DWORD PTR [rdx+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:151
    task[num].utime=0;
ffff800000804fba:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000804fc1:	ff ff ff 
ffff800000804fc4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804fc8:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804fcb:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804fce:	48 63 d2             	movsxd rdx,edx
ffff800000804fd1:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804fd8:	48 01 ca             	add    rdx,rcx
ffff800000804fdb:	c7 42 1c 00 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:152
    task[num].priority=0;
ffff800000804fe2:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000804fe9:	ff ff ff 
ffff800000804fec:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000804ff0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804ff3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000804ff6:	48 98                	cdqe   
ffff800000804ff8:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804fff:	48 01 d0             	add    rax,rdx
ffff800000805002:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:153
    return num;
ffff800000805009:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:154
}
ffff80000080500c:	5d                   	pop    rbp
ffff80000080500d:	c3                   	ret    

ffff80000080500e <set_proc>:
set_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:156
void set_proc(long rax, long rbx, long rcx, long rdx, long es, long cs, long ss, long ds, long fs, long gs, long rsp,
              long rbp, long rsi, long rdi, long rip, long rflags, int proc_nr) {
ffff80000080500e:	f3 0f 1e fa          	endbr64 
ffff800000805012:	55                   	push   rbp
ffff800000805013:	48 89 e5             	mov    rbp,rsp
ffff800000805016:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805016 <set_proc+0x8>
ffff80000080501d:	49 bb 3a bf 11 00 00 	movabs r11,0x11bf3a
ffff800000805024:	00 00 00 
ffff800000805027:	4c 01 d8             	add    rax,r11
ffff80000080502a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080502e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000805032:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff800000805036:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
ffff80000080503a:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
ffff80000080503e:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:157
    struct process* proc=&task[proc_nr];
ffff800000805042:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000805049:	ff ff ff 
ffff80000080504c:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000805050:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805053:	8b 45 60             	mov    eax,DWORD PTR [rbp+0x60]
ffff800000805056:	48 98                	cdqe   
ffff800000805058:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080505f:	48 01 d0             	add    rax,rdx
ffff800000805062:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:158
    proc->regs.rax=rax;
ffff800000805066:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080506a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080506e:	48 89 90 7c 02 00 00 	mov    QWORD PTR [rax+0x27c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:159
    proc->regs.rbx=rbx;
ffff800000805075:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805079:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080507d:	48 89 90 94 02 00 00 	mov    QWORD PTR [rax+0x294],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:160
    proc->regs.rcx=rcx;
ffff800000805084:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805088:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080508c:	48 89 90 84 02 00 00 	mov    QWORD PTR [rax+0x284],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:161
    proc->regs.rdx=rdx;
ffff800000805093:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805097:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080509b:	48 89 90 8c 02 00 00 	mov    QWORD PTR [rax+0x28c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:162
    proc->regs.es=es;
ffff8000008050a2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008050a6:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008050aa:	48 89 90 bc 02 00 00 	mov    QWORD PTR [rax+0x2bc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:163
    proc->regs.cs=cs;
ffff8000008050b1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008050b5:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008050b9:	48 89 90 c4 02 00 00 	mov    QWORD PTR [rax+0x2c4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:164
    proc->regs.ss=ss;
ffff8000008050c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008050c4:	48 8b 55 10          	mov    rdx,QWORD PTR [rbp+0x10]
ffff8000008050c8:	48 89 90 cc 02 00 00 	mov    QWORD PTR [rax+0x2cc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:165
    proc->regs.ds=ds;
ffff8000008050cf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008050d3:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
ffff8000008050d7:	48 89 90 d4 02 00 00 	mov    QWORD PTR [rax+0x2d4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:166
    proc->regs.fs=fs;
ffff8000008050de:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008050e2:	48 8b 55 20          	mov    rdx,QWORD PTR [rbp+0x20]
ffff8000008050e6:	48 89 90 dc 02 00 00 	mov    QWORD PTR [rax+0x2dc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:167
    proc->regs.gs=gs;
ffff8000008050ed:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008050f1:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
ffff8000008050f5:	48 89 90 e4 02 00 00 	mov    QWORD PTR [rax+0x2e4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:168
    proc->regs.rsp=rsp;
ffff8000008050fc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805100:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
ffff800000805104:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:169
    proc->regs.rbp=rbp;
ffff80000080510b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080510f:	48 8b 55 38          	mov    rdx,QWORD PTR [rbp+0x38]
ffff800000805113:	48 89 90 a4 02 00 00 	mov    QWORD PTR [rax+0x2a4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:170
    proc->regs.rsi=rsi;
ffff80000080511a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080511e:	48 8b 55 40          	mov    rdx,QWORD PTR [rbp+0x40]
ffff800000805122:	48 89 90 ac 02 00 00 	mov    QWORD PTR [rax+0x2ac],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:171
    proc->regs.rdi=rdi;
ffff800000805129:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080512d:	48 8b 55 48          	mov    rdx,QWORD PTR [rbp+0x48]
ffff800000805131:	48 89 90 b4 02 00 00 	mov    QWORD PTR [rax+0x2b4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:172
    proc->regs.rflags=0x202;//设置为默认值:0b 0010 0000 0010
ffff800000805138:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080513c:	48 c7 80 74 02 00 00 	mov    QWORD PTR [rax+0x274],0x202
ffff800000805143:	02 02 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:174
    //能接受中断
    proc->regs.rip=rip;
ffff800000805147:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080514b:	48 8b 55 50          	mov    rdx,QWORD PTR [rbp+0x50]
ffff80000080514f:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:176

    proc->regs.cs=cs;
ffff800000805156:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080515a:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080515e:	48 89 90 c4 02 00 00 	mov    QWORD PTR [rax+0x2c4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:177
    proc->regs.ds=ds;
ffff800000805165:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805169:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
ffff80000080516d:	48 89 90 d4 02 00 00 	mov    QWORD PTR [rax+0x2d4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:178
    proc->regs.es=es;
ffff800000805174:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805178:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080517c:	48 89 90 bc 02 00 00 	mov    QWORD PTR [rax+0x2bc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:179
    proc->regs.cr3=PML4_ADDR;//get_phyaddr(n1);//暂时先搞成全局
ffff800000805183:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805187:	48 b9 00 10 10 00 00 	movabs rcx,0xffff800000101000
ffff80000080518e:	80 ff ff 
ffff800000805191:	48 89 88 64 02 00 00 	mov    QWORD PTR [rax+0x264],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:180
    proc->pml4=PML4_ADDR;
ffff800000805198:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080519c:	48 89 88 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:183


}
ffff8000008051a3:	90                   	nop
ffff8000008051a4:	5d                   	pop    rbp
ffff8000008051a5:	c3                   	ret    

ffff8000008051a6 <proc_zero>:
proc_zero():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:185
void proc_zero()
{
ffff8000008051a6:	f3 0f 1e fa          	endbr64 
ffff8000008051aa:	55                   	push   rbp
ffff8000008051ab:	48 89 e5             	mov    rbp,rsp
ffff8000008051ae:	41 57                	push   r15
ffff8000008051b0:	53                   	push   rbx
ffff8000008051b1:	48 83 ec 10          	sub    rsp,0x10
ffff8000008051b5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008051b5 <proc_zero+0xf>
ffff8000008051bc:	49 bb 9b bd 11 00 00 	movabs r11,0x11bd9b
ffff8000008051c3:	00 00 00 
ffff8000008051c6:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:198 (discriminator 1)
//    }else{
//        printf("parent proc ret:%d\n",rax);
//    }
    while (1)
    {
        char c= sys_analyse_key();
ffff8000008051c9:	49 89 df             	mov    r15,rbx
ffff8000008051cc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008051d1:	48 ba 5b d9 ee ff ff 	movabs rdx,0xffffffffffeed95b
ffff8000008051d8:	ff ff ff 
ffff8000008051db:	48 01 da             	add    rdx,rbx
ffff8000008051de:	ff d2                	call   rdx
ffff8000008051e0:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:199 (discriminator 1)
        putchar(c);
ffff8000008051e3:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff8000008051e7:	89 c7                	mov    edi,eax
ffff8000008051e9:	49 89 df             	mov    r15,rbx
ffff8000008051ec:	48 b8 20 0a ee ff ff 	movabs rax,0xffffffffffee0a20
ffff8000008051f3:	ff ff ff 
ffff8000008051f6:	48 01 d8             	add    rax,rbx
ffff8000008051f9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:197 (discriminator 1)
    {
ffff8000008051fb:	eb cc                	jmp    ffff8000008051c9 <proc_zero+0x23>

ffff8000008051fd <save_rsp>:
save_rsp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:202
    }
}
void save_rsp(){
ffff8000008051fd:	f3 0f 1e fa          	endbr64 
ffff800000805201:	55                   	push   rbp
ffff800000805202:	48 89 e5             	mov    rbp,rsp
ffff800000805205:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805205 <save_rsp+0x8>
ffff80000080520c:	49 bb 4b bd 11 00 00 	movabs r11,0x11bd4b
ffff800000805213:	00 00 00 
ffff800000805216:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:204
    //在时钟中断context下
    addr_t * p=INT_STACK_TOP-16;
ffff800000805219:	48 be f0 ff 7f 00 00 	movabs rsi,0xffff8000007ffff0
ffff800000805220:	80 ff ff 
ffff800000805223:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:205
    current->regs.rsp=*p;
ffff800000805227:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080522b:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080522e:	48 b9 80 fe ff ff ff 	movabs rcx,0xfffffffffffffe80
ffff800000805235:	ff ff ff 
ffff800000805238:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080523c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080523f:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:206
}
ffff800000805246:	90                   	nop
ffff800000805247:	5d                   	pop    rbp
ffff800000805248:	c3                   	ret    

ffff800000805249 <manage_proc>:
manage_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:207
void manage_proc(){
ffff800000805249:	f3 0f 1e fa          	endbr64 
ffff80000080524d:	55                   	push   rbp
ffff80000080524e:	48 89 e5             	mov    rbp,rsp
ffff800000805251:	41 57                	push   r15
ffff800000805253:	48 83 ec 18          	sub    rsp,0x18
ffff800000805257:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805257 <manage_proc+0xe>
ffff80000080525e:	49 bb f9 bc 11 00 00 	movabs r11,0x11bcf9
ffff800000805265:	00 00 00 
ffff800000805268:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:208
    if(cur_proc!=-1)
ffff80000080526b:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000805272:	ff ff ff 
ffff800000805275:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805279:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080527b:	83 fa ff             	cmp    edx,0xffffffff
ffff80000080527e:	74 37                	je     ffff8000008052b7 <manage_proc+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:209
        task[cur_proc].utime++;
ffff800000805280:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000805287:	ff ff ff 
ffff80000080528a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080528e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805291:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000805298:	ff ff ff 
ffff80000080529b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080529f:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008052a1:	48 63 d2             	movsxd rdx,edx
ffff8000008052a4:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008052ab:	48 01 ca             	add    rdx,rcx
ffff8000008052ae:	8b 4a 1c             	mov    ecx,DWORD PTR [rdx+0x1c]
ffff8000008052b1:	83 c1 01             	add    ecx,0x1
ffff8000008052b4:	89 4a 1c             	mov    DWORD PTR [rdx+0x1c],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:210
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
ffff8000008052b7:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008052be:	ff ff ff 
ffff8000008052c1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008052c5:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008052c7:	83 fa ff             	cmp    edx,0xffffffff
ffff8000008052ca:	74 70                	je     ffff80000080533c <manage_proc+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:210 (discriminator 1)
ffff8000008052cc:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff8000008052d3:	ff ff ff 
ffff8000008052d6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008052da:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008052dd:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008052e4:	ff ff ff 
ffff8000008052e7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008052eb:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008052ed:	48 63 d2             	movsxd rdx,edx
ffff8000008052f0:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008052f7:	48 01 ca             	add    rdx,rcx
ffff8000008052fa:	8b 52 1c             	mov    edx,DWORD PTR [rdx+0x1c]
ffff8000008052fd:	83 fa 0a             	cmp    edx,0xa
ffff800000805300:	77 3a                	ja     ffff80000080533c <manage_proc+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:211 (discriminator 2)
    task[cur_proc].stat != TASK_READY){
ffff800000805302:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000805309:	ff ff ff 
ffff80000080530c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805310:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805313:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080531a:	ff ff ff 
ffff80000080531d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805321:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805323:	48 63 d2             	movsxd rdx,edx
ffff800000805326:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff80000080532d:	48 01 ca             	add    rdx,rcx
ffff800000805330:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:210 (discriminator 2)
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
ffff800000805333:	83 fa 02             	cmp    edx,0x2
ffff800000805336:	0f 84 bf 01 00 00    	je     ffff8000008054fb <manage_proc+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:212
        if(cur_proc!=-1)
ffff80000080533c:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000805343:	ff ff ff 
ffff800000805346:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080534a:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080534c:	83 fa ff             	cmp    edx,0xffffffff
ffff80000080534f:	74 35                	je     ffff800000805386 <manage_proc+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:213
            task[cur_proc].utime=0;
ffff800000805351:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000805358:	ff ff ff 
ffff80000080535b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080535f:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805362:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000805369:	ff ff ff 
ffff80000080536c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805370:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805372:	48 63 d2             	movsxd rdx,edx
ffff800000805375:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff80000080537c:	48 01 ca             	add    rdx,rcx
ffff80000080537f:	c7 42 1c 00 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:215
        //find
        int i=cur_proc+1;
ffff800000805386:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080538d:	ff ff ff 
ffff800000805390:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805394:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805396:	83 c2 01             	add    edx,0x1
ffff800000805399:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:216
        int times=0;
ffff80000080539c:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:218
        //轮询，直到有一个符合条件
        while(times<10){
ffff8000008053a3:	eb 7b                	jmp    ffff800000805420 <manage_proc+0x1d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219
            if(task[i].pid!=-1 && task[i].stat == TASK_READY && i != cur_proc){
ffff8000008053a5:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff8000008053ac:	ff ff ff 
ffff8000008053af:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008053b3:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008053b6:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008053b9:	48 63 d2             	movsxd rdx,edx
ffff8000008053bc:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008053c3:	48 01 ca             	add    rdx,rcx
ffff8000008053c6:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008053c8:	83 fa ff             	cmp    edx,0xffffffff
ffff8000008053cb:	74 3e                	je     ffff80000080540b <manage_proc+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219 (discriminator 1)
ffff8000008053cd:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff8000008053d4:	ff ff ff 
ffff8000008053d7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008053db:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008053de:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008053e1:	48 63 d2             	movsxd rdx,edx
ffff8000008053e4:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008053eb:	48 01 ca             	add    rdx,rcx
ffff8000008053ee:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff8000008053f1:	83 fa 02             	cmp    edx,0x2
ffff8000008053f4:	75 15                	jne    ffff80000080540b <manage_proc+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219 (discriminator 2)
ffff8000008053f6:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008053fd:	ff ff ff 
ffff800000805400:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805404:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805406:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff800000805409:	75 21                	jne    ffff80000080542c <manage_proc+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:222
                break;
            }
            i++;
ffff80000080540b:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:223
            if(i>=MAX_TASKS){
ffff80000080540f:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff800000805413:	7e 0b                	jle    ffff800000805420 <manage_proc+0x1d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:224
                times++;
ffff800000805415:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:225
                i=0;
ffff800000805419:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:218
        while(times<10){
ffff800000805420:	83 7d e8 09          	cmp    DWORD PTR [rbp-0x18],0x9
ffff800000805424:	0f 8e 7b ff ff ff    	jle    ffff8000008053a5 <manage_proc+0x15c>
ffff80000080542a:	eb 01                	jmp    ffff80000080542d <manage_proc+0x1e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:220
                break;
ffff80000080542c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:228
            }
        }
        if(times==10)return;//超过十次尝试都没有，暂时不切换
ffff80000080542d:	83 7d e8 0a          	cmp    DWORD PTR [rbp-0x18],0xa
ffff800000805431:	0f 84 c7 00 00 00    	je     ffff8000008054fe <manage_proc+0x2b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:230
        //switch
        task[cur_proc].stat=TASK_READY;
ffff800000805437:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff80000080543e:	ff ff ff 
ffff800000805441:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805445:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805448:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080544f:	ff ff ff 
ffff800000805452:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805456:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805458:	48 63 d2             	movsxd rdx,edx
ffff80000080545b:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805462:	48 01 ca             	add    rdx,rcx
ffff800000805465:	c7 42 18 02 00 00 00 	mov    DWORD PTR [rdx+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:231
        task[i].stat=TASK_RUNNING;
ffff80000080546c:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000805473:	ff ff ff 
ffff800000805476:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080547a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080547d:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805480:	48 63 d2             	movsxd rdx,edx
ffff800000805483:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff80000080548a:	48 01 ca             	add    rdx,rcx
ffff80000080548d:	c7 42 18 01 00 00 00 	mov    DWORD PTR [rdx+0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:232
        switch_to(&task[cur_proc], &task[i]);
ffff800000805494:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff80000080549b:	ff ff ff 
ffff80000080549e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008054a2:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008054a5:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008054a8:	48 63 d2             	movsxd rdx,edx
ffff8000008054ab:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008054b2:	48 01 d1             	add    rcx,rdx
ffff8000008054b5:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff8000008054bc:	ff ff ff 
ffff8000008054bf:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008054c3:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008054c6:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008054cd:	ff ff ff 
ffff8000008054d0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008054d4:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008054d6:	48 63 d2             	movsxd rdx,edx
ffff8000008054d9:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008054e0:	48 01 f2             	add    rdx,rsi
ffff8000008054e3:	48 89 ce             	mov    rsi,rcx
ffff8000008054e6:	48 89 d7             	mov    rdi,rdx
ffff8000008054e9:	49 89 c7             	mov    r15,rax
ffff8000008054ec:	48 ba da 55 ee ff ff 	movabs rdx,0xffffffffffee55da
ffff8000008054f3:	ff ff ff 
ffff8000008054f6:	48 01 c2             	add    rdx,rax
ffff8000008054f9:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:234
    }
    return;
ffff8000008054fb:	90                   	nop
ffff8000008054fc:	eb 01                	jmp    ffff8000008054ff <manage_proc+0x2b6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:228
        if(times==10)return;//超过十次尝试都没有，暂时不切换
ffff8000008054fe:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:235
}
ffff8000008054ff:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000805503:	c9                   	leave  
ffff800000805504:	c3                   	ret    

ffff800000805505 <switch_proc_tss>:
switch_proc_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:238

void switch_proc_tss(int pnr)
{
ffff800000805505:	f3 0f 1e fa          	endbr64 
ffff800000805509:	55                   	push   rbp
ffff80000080550a:	48 89 e5             	mov    rbp,rsp
ffff80000080550d:	41 57                	push   r15
ffff80000080550f:	48 83 ec 28          	sub    rsp,0x28
ffff800000805513:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805513 <switch_proc_tss+0xe>
ffff80000080551a:	49 bb 3d ba 11 00 00 	movabs r11,0x11ba3d
ffff800000805521:	00 00 00 
ffff800000805524:	4c 01 d8             	add    rax,r11
ffff800000805527:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:239
    int sel=_TSS_IND(pnr)*8;
ffff80000080552a:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080552d:	01 d2                	add    edx,edx
ffff80000080552f:	83 c2 05             	add    edx,0x5
ffff800000805532:	c1 e2 03             	shl    edx,0x3
ffff800000805535:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:240
    cur_proc=pnr;
ffff800000805538:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080553f:	ff ff ff 
ffff800000805542:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805546:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
ffff800000805549:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:241
    switch_proc_asm(sel);
ffff80000080554b:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080554e:	89 d7                	mov    edi,edx
ffff800000805550:	49 89 c7             	mov    r15,rax
ffff800000805553:	48 ba 77 2a ef ff ff 	movabs rdx,0xffffffffffef2a77
ffff80000080555a:	ff ff ff 
ffff80000080555d:	48 01 c2             	add    rdx,rax
ffff800000805560:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:242
}
ffff800000805562:	90                   	nop
ffff800000805563:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000805567:	c9                   	leave  
ffff800000805568:	c3                   	ret    

ffff800000805569 <switch_proc>:
switch_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:243
void switch_proc(int pnr){
ffff800000805569:	f3 0f 1e fa          	endbr64 
ffff80000080556d:	55                   	push   rbp
ffff80000080556e:	48 89 e5             	mov    rbp,rsp
ffff800000805571:	41 57                	push   r15
ffff800000805573:	53                   	push   rbx
ffff800000805574:	48 81 ec 70 03 00 00 	sub    rsp,0x370
ffff80000080557b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080557b <switch_proc+0x12>
ffff800000805582:	49 bb d5 b9 11 00 00 	movabs r11,0x11b9d5
ffff800000805589:	00 00 00 
ffff80000080558c:	4c 01 db             	add    rbx,r11
ffff80000080558f:	89 bd 8c fc ff ff    	mov    DWORD PTR [rbp-0x374],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:246
    //printf("switching proc to %d\n",pnr);
    //printf("eip:%x\n",task[pnr].tss.eip);
    struct process p=task[pnr];
ffff800000805595:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff80000080559c:	ff ff ff 
ffff80000080559f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008055a3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008055a6:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff8000008055ac:	48 98                	cdqe   
ffff8000008055ae:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008055b5:	48 01 c2             	add    rdx,rax
ffff8000008055b8:	48 8d 85 90 fc ff ff 	lea    rax,[rbp-0x370]
ffff8000008055bf:	48 89 d6             	mov    rsi,rdx
ffff8000008055c2:	ba 6b 00 00 00       	mov    edx,0x6b
ffff8000008055c7:	48 89 c7             	mov    rdi,rax
ffff8000008055ca:	48 89 d1             	mov    rcx,rdx
ffff8000008055cd:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:247
    save_context(&task[cur_proc].tss);
ffff8000008055d0:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff8000008055d7:	ff ff ff 
ffff8000008055da:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008055de:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008055e1:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff8000008055e8:	ff ff ff 
ffff8000008055eb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008055ef:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008055f1:	48 98                	cdqe   
ffff8000008055f3:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008055fa:	48 01 d0             	add    rax,rdx
ffff8000008055fd:	48 05 f8 01 00 00    	add    rax,0x1f8
ffff800000805603:	48 89 c7             	mov    rdi,rax
ffff800000805606:	49 89 df             	mov    r15,rbx
ffff800000805609:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080560e:	48 ba 77 2a ef ff ff 	movabs rdx,0xffffffffffef2a77
ffff800000805615:	ff ff ff 
ffff800000805618:	48 01 da             	add    rdx,rbx
ffff80000080561b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:252
//    //重新设置0号进程
//    task[0].tss.eip=proc_zero;
//    task[0].tss.cr3=PAGE_INDEX_ADDR;
//    task[0].tss.eflags=0x202;
    cur_proc=pnr;
ffff80000080561d:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000805624:	ff ff ff 
ffff800000805627:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080562b:	8b 95 8c fc ff ff    	mov    edx,DWORD PTR [rbp-0x374]
ffff800000805631:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:253
    int sel=_TSS_IND(pnr)*8;
ffff800000805633:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff800000805639:	01 c0                	add    eax,eax
ffff80000080563b:	83 c0 05             	add    eax,0x5
ffff80000080563e:	c1 e0 03             	shl    eax,0x3
ffff800000805641:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:254
    switch_to(NULL, &task[pnr].tss);
ffff800000805644:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff80000080564b:	ff ff ff 
ffff80000080564e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805652:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805655:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff80000080565b:	48 98                	cdqe   
ffff80000080565d:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805664:	48 01 d0             	add    rax,rdx
ffff800000805667:	48 05 f8 01 00 00    	add    rax,0x1f8
ffff80000080566d:	48 89 c6             	mov    rsi,rax
ffff800000805670:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805675:	49 89 df             	mov    r15,rbx
ffff800000805678:	48 b8 da 55 ee ff ff 	movabs rax,0xffffffffffee55da
ffff80000080567f:	ff ff ff 
ffff800000805682:	48 01 d8             	add    rax,rbx
ffff800000805685:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:257
    //asm volatile("push %0":"=r"(task[pnr].tss.eip));
    //switch_proc_asm(pnr*8+0x8*3);
}
ffff800000805687:	90                   	nop
ffff800000805688:	48 81 c4 70 03 00 00 	add    rsp,0x370
ffff80000080568f:	5b                   	pop    rbx
ffff800000805690:	41 5f                	pop    r15
ffff800000805692:	5d                   	pop    rbp
ffff800000805693:	c3                   	ret    

ffff800000805694 <save_context_c>:
save_context_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:259
void save_context_c(void* ctx,void *int_stk)
{
ffff800000805694:	f3 0f 1e fa          	endbr64 
ffff800000805698:	55                   	push   rbp
ffff800000805699:	48 89 e5             	mov    rbp,rsp
ffff80000080569c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080569c <save_context_c+0x8>
ffff8000008056a3:	49 bb b4 b8 11 00 00 	movabs r11,0x11b8b4
ffff8000008056aa:	00 00 00 
ffff8000008056ad:	4c 01 d8             	add    rax,r11
ffff8000008056b0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff8000008056b4:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:260
    unsigned long long* rs=ctx;
ffff8000008056b8:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008056bc:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:261
    current->regs.rbp=rs[0];
ffff8000008056c0:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff8000008056c4:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008056c7:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff8000008056ce:	ff ff ff 
ffff8000008056d1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008056d5:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008056d8:	48 89 8a a4 02 00 00 	mov    QWORD PTR [rdx+0x2a4],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:262
    current->regs.rip=((unsigned long long*)int_stk)[0];
ffff8000008056df:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008056e3:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008056e6:	48 b9 80 fe ff ff ff 	movabs rcx,0xfffffffffffffe80
ffff8000008056ed:	ff ff ff 
ffff8000008056f0:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff8000008056f4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008056f7:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:263
}
ffff8000008056fe:	90                   	nop
ffff8000008056ff:	5d                   	pop    rbp
ffff800000805700:	c3                   	ret    

ffff800000805701 <palloc>:
palloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:424
    task[index].stat=TASK_READY;
    return index;
} */
//为指定进程申请新的内存，并返回这块内存的线性地址。
void* palloc(int proc_index,int size)
{
ffff800000805701:	f3 0f 1e fa          	endbr64 
ffff800000805705:	55                   	push   rbp
ffff800000805706:	48 89 e5             	mov    rbp,rsp
ffff800000805709:	41 57                	push   r15
ffff80000080570b:	53                   	push   rbx
ffff80000080570c:	48 83 ec 60          	sub    rsp,0x60
ffff800000805710:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805710 <palloc+0xf>
ffff800000805717:	49 bb 40 b8 11 00 00 	movabs r11,0x11b840
ffff80000080571e:	00 00 00 
ffff800000805721:	4c 01 db             	add    rbx,r11
ffff800000805724:	89 7d 9c             	mov    DWORD PTR [rbp-0x64],edi
ffff800000805727:	89 75 98             	mov    DWORD PTR [rbp-0x68],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:425
    int page_c=size/4096+size%4096?1:0;
ffff80000080572a:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffff80000080572d:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff800000805733:	85 c0                	test   eax,eax
ffff800000805735:	0f 48 c2             	cmovs  eax,edx
ffff800000805738:	c1 f8 0c             	sar    eax,0xc
ffff80000080573b:	89 c1                	mov    ecx,eax
ffff80000080573d:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffff800000805740:	99                   	cdq    
ffff800000805741:	c1 ea 14             	shr    edx,0x14
ffff800000805744:	01 d0                	add    eax,edx
ffff800000805746:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080574b:	29 d0                	sub    eax,edx
ffff80000080574d:	01 c8                	add    eax,ecx
ffff80000080574f:	85 c0                	test   eax,eax
ffff800000805751:	0f 95 c0             	setne  al
ffff800000805754:	0f b6 c0             	movzx  eax,al
ffff800000805757:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:426
    int c=0;
ffff80000080575a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:427
    void *ptr=NULL;
ffff800000805761:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff800000805768:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:428
    page_item *pgind=NULL;//task[proc_index].tss.cr3;
ffff800000805769:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000805770:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:429
    pgind++;
ffff800000805771:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:430
    for(int i=1;i<1024;i++)
ffff800000805776:	c7 45 dc 01 00 00 00 	mov    DWORD PTR [rbp-0x24],0x1
ffff80000080577d:	e9 07 03 00 00       	jmp    ffff800000805a89 <palloc+0x388>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:432
    {
        page_item* tblp=*pgind&0xfffff000;
ffff800000805782:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805786:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805789:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff80000080578e:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:433
        for(int j=0;j<1024;j++)
ffff800000805792:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000805799:	e9 d5 02 00 00       	jmp    ffff800000805a73 <palloc+0x372>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:435
        {
            int v=*tblp&PAGE_PRESENT;
ffff80000080579e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008057a2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008057a5:	83 e0 01             	and    eax,0x1
ffff8000008057a8:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:436
            if(!v)
ffff8000008057ab:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff8000008057af:	0f 85 b5 02 00 00    	jne    ffff800000805a6a <palloc+0x369>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:438
            {
                int new_pg=req_a_page();
ffff8000008057b5:	49 89 df             	mov    r15,rbx
ffff8000008057b8:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008057bd:	48 ba d0 1d ee ff ff 	movabs rdx,0xffffffffffee1dd0
ffff8000008057c4:	ff ff ff 
ffff8000008057c7:	48 01 da             	add    rdx,rbx
ffff8000008057ca:	ff d2                	call   rdx
ffff8000008057cc:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:439
                if(new_pg==-1)
ffff8000008057cf:	83 7d b8 ff          	cmp    DWORD PTR [rbp-0x48],0xffffffff
ffff8000008057d3:	0f 85 0c 01 00 00    	jne    ffff8000008058e5 <palloc+0x1e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:442
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
ffff8000008057d9:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff8000008057e0:	ff ff ff 
ffff8000008057e3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008057e7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008057ea:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008057ed:	48 98                	cdqe   
ffff8000008057ef:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008057f6:	48 01 d0             	add    rax,rdx
ffff8000008057f9:	0f b7 80 88 00 00 00 	movzx  eax,WORD PTR [rax+0x88]
ffff800000805800:	0f b7 c0             	movzx  eax,ax
ffff800000805803:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:443
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
ffff800000805806:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff80000080580d:	ff ff ff 
ffff800000805810:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805814:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805817:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080581a:	48 98                	cdqe   
ffff80000080581c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805823:	48 01 d0             	add    rax,rdx
ffff800000805826:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff80000080582d:	0f b7 c0             	movzx  eax,ax
ffff800000805830:	c1 e0 10             	shl    eax,0x10
ffff800000805833:	25 00 00 0f 00       	and    eax,0xf0000
ffff800000805838:	01 45 a4             	add    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:444
                    size+=c;
ffff80000080583b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080583e:	01 45 a4             	add    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:445
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
ffff800000805841:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805848:	ff ff ff 
ffff80000080584b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080584f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805852:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000805855:	48 98                	cdqe   
ffff800000805857:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080585e:	48 01 d0             	add    rax,rdx
ffff800000805861:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
ffff800000805864:	66 89 90 88 00 00 00 	mov    WORD PTR [rax+0x88],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:446
                    int tmp_attr=task[proc_index].ldt[2].attr;
ffff80000080586b:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805872:	ff ff ff 
ffff800000805875:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805879:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080587c:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080587f:	48 98                	cdqe   
ffff800000805881:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805888:	48 01 d0             	add    rax,rdx
ffff80000080588b:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff800000805892:	0f b7 c0             	movzx  eax,ax
ffff800000805895:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:447
                    tmp_attr&=0xfff0;
ffff800000805898:	81 65 a0 f0 ff 00 00 	and    DWORD PTR [rbp-0x60],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:448
                    tmp_attr+=(size>>16)&0xf;
ffff80000080589f:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff8000008058a2:	c1 e8 10             	shr    eax,0x10
ffff8000008058a5:	83 e0 0f             	and    eax,0xf
ffff8000008058a8:	89 c2                	mov    edx,eax
ffff8000008058aa:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
ffff8000008058ad:	01 d0                	add    eax,edx
ffff8000008058af:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:449
                    task[proc_index].ldt[2].attr=tmp_attr;
ffff8000008058b2:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff8000008058b9:	ff ff ff 
ffff8000008058bc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008058c0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008058c3:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008058c6:	48 98                	cdqe   
ffff8000008058c8:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008058cf:	48 01 d0             	add    rax,rdx
ffff8000008058d2:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
ffff8000008058d5:	66 89 90 8d 00 00 00 	mov    WORD PTR [rax+0x8d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:450
                    return ptr;//失败了，只能申请一部分的内存或者返回NULL
ffff8000008058dc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008058e0:	e9 b6 01 00 00       	jmp    ffff800000805a9b <palloc+0x39a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:452
                }
                int addr=get_phyaddr(new_pg);
ffff8000008058e5:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff8000008058e8:	89 c7                	mov    edi,eax
ffff8000008058ea:	49 89 df             	mov    r15,rbx
ffff8000008058ed:	48 b8 e8 20 ee ff ff 	movabs rax,0xffffffffffee20e8
ffff8000008058f4:	ff ff ff 
ffff8000008058f7:	48 01 d8             	add    rax,rbx
ffff8000008058fa:	ff d0                	call   rax
ffff8000008058fc:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:453
                set_page_item(tblp,addr,PAGE_PRESENT|\
ffff8000008058ff:	8b 4d b4             	mov    ecx,DWORD PTR [rbp-0x4c]
ffff800000805902:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000805906:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080590b:	89 ce                	mov    esi,ecx
ffff80000080590d:	48 89 c7             	mov    rdi,rax
ffff800000805910:	49 89 df             	mov    r15,rbx
ffff800000805913:	48 b8 1c 21 ee ff ff 	movabs rax,0xffffffffffee211c
ffff80000080591a:	ff ff ff 
ffff80000080591d:	48 01 d8             	add    rax,rbx
ffff800000805920:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:455
                PAGE_RWX|PAGE_FOR_ALL);
                int laddr=i*0x400000+j*0x1000;//线性地址
ffff800000805922:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805925:	c1 e0 0a             	shl    eax,0xa
ffff800000805928:	89 c2                	mov    edx,eax
ffff80000080592a:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080592d:	01 d0                	add    eax,edx
ffff80000080592f:	c1 e0 0c             	shl    eax,0xc
ffff800000805932:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:456
                if(ptr==NULL)
ffff800000805935:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080593a:	75 13                	jne    ffff80000080594f <palloc+0x24e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:459
                {
                   // ptr=laddr;
                    palloc_paddr=addr;
ffff80000080593c:	48 b8 38 fd ff ff ff 	movabs rax,0xfffffffffffffd38
ffff800000805943:	ff ff ff 
ffff800000805946:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080594a:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
ffff80000080594d:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:461
                }
                page_c--;
ffff80000080594f:	83 6d ec 01          	sub    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:462
                c++;
ffff800000805953:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:463
                if(page_c==0)
ffff800000805957:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080595b:	0f 85 09 01 00 00    	jne    ffff800000805a6a <palloc+0x369>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:466
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
ffff800000805961:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805968:	ff ff ff 
ffff80000080596b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080596f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805972:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000805975:	48 98                	cdqe   
ffff800000805977:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080597e:	48 01 d0             	add    rax,rdx
ffff800000805981:	0f b7 80 88 00 00 00 	movzx  eax,WORD PTR [rax+0x88]
ffff800000805988:	0f b7 c0             	movzx  eax,ax
ffff80000080598b:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:467
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
ffff80000080598e:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805995:	ff ff ff 
ffff800000805998:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080599c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080599f:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008059a2:	48 98                	cdqe   
ffff8000008059a4:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008059ab:	48 01 d0             	add    rax,rdx
ffff8000008059ae:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff8000008059b5:	0f b7 c0             	movzx  eax,ax
ffff8000008059b8:	c1 e0 10             	shl    eax,0x10
ffff8000008059bb:	25 00 00 0f 00       	and    eax,0xf0000
ffff8000008059c0:	01 45 ac             	add    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:468
                    size+=c;
ffff8000008059c3:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008059c6:	01 45 ac             	add    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:469
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
ffff8000008059c9:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff8000008059d0:	ff ff ff 
ffff8000008059d3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008059d7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008059da:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008059dd:	48 98                	cdqe   
ffff8000008059df:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008059e6:	48 01 d0             	add    rax,rdx
ffff8000008059e9:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff8000008059ec:	66 89 90 88 00 00 00 	mov    WORD PTR [rax+0x88],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:470
                    int tmp_attr=task[proc_index].ldt[2].attr;
ffff8000008059f3:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff8000008059fa:	ff ff ff 
ffff8000008059fd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805a01:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805a04:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000805a07:	48 98                	cdqe   
ffff800000805a09:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805a10:	48 01 d0             	add    rax,rdx
ffff800000805a13:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff800000805a1a:	0f b7 c0             	movzx  eax,ax
ffff800000805a1d:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:471
                    tmp_attr&=0xfff0;
ffff800000805a20:	81 65 a8 f0 ff 00 00 	and    DWORD PTR [rbp-0x58],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:472
                    tmp_attr+=(size>>16)&0xf;
ffff800000805a27:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff800000805a2a:	c1 e8 10             	shr    eax,0x10
ffff800000805a2d:	83 e0 0f             	and    eax,0xf
ffff800000805a30:	89 c2                	mov    edx,eax
ffff800000805a32:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
ffff800000805a35:	01 d0                	add    eax,edx
ffff800000805a37:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:473
                    task[proc_index].ldt[2].attr=tmp_attr;
ffff800000805a3a:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805a41:	ff ff ff 
ffff800000805a44:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805a48:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805a4b:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000805a4e:	48 98                	cdqe   
ffff800000805a50:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805a57:	48 01 d0             	add    rax,rdx
ffff800000805a5a:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
ffff800000805a5d:	66 89 90 8d 00 00 00 	mov    WORD PTR [rax+0x8d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:474
                    return ptr;
ffff800000805a64:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000805a68:	eb 31                	jmp    ffff800000805a9b <palloc+0x39a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:477 (discriminator 2)
                }
            }
            tblp++;
ffff800000805a6a:	48 83 45 d0 08       	add    QWORD PTR [rbp-0x30],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:433 (discriminator 2)
        for(int j=0;j<1024;j++)
ffff800000805a6f:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:433 (discriminator 1)
ffff800000805a73:	81 7d cc ff 03 00 00 	cmp    DWORD PTR [rbp-0x34],0x3ff
ffff800000805a7a:	0f 8e 1e fd ff ff    	jle    ffff80000080579e <palloc+0x9d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:479 (discriminator 2)
        }
        pgind++;
ffff800000805a80:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:430 (discriminator 2)
    for(int i=1;i<1024;i++)
ffff800000805a85:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:430 (discriminator 1)
ffff800000805a89:	81 7d dc ff 03 00 00 	cmp    DWORD PTR [rbp-0x24],0x3ff
ffff800000805a90:	0f 8e ec fc ff ff    	jle    ffff800000805782 <palloc+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:481
    }
    return NULL;
ffff800000805a96:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:482
}
ffff800000805a9b:	48 83 c4 60          	add    rsp,0x60
ffff800000805a9f:	5b                   	pop    rbx
ffff800000805aa0:	41 5f                	pop    r15
ffff800000805aa2:	5d                   	pop    rbp
ffff800000805aa3:	c3                   	ret    

ffff800000805aa4 <malloc>:
malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:485
//为当前进程申请新的内存，并返回这块内存的线性地址。
void* malloc(int size)
{
ffff800000805aa4:	f3 0f 1e fa          	endbr64 
ffff800000805aa8:	55                   	push   rbp
ffff800000805aa9:	48 89 e5             	mov    rbp,rsp
ffff800000805aac:	41 57                	push   r15
ffff800000805aae:	48 83 ec 18          	sub    rsp,0x18
ffff800000805ab2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805ab2 <malloc+0xe>
ffff800000805ab9:	49 bb 9e b4 11 00 00 	movabs r11,0x11b49e
ffff800000805ac0:	00 00 00 
ffff800000805ac3:	4c 01 d8             	add    rax,r11
ffff800000805ac6:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:486
    return palloc(cur_proc,size);
ffff800000805ac9:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000805ad0:	ff ff ff 
ffff800000805ad3:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805ad7:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805ad9:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffff800000805adc:	89 ce                	mov    esi,ecx
ffff800000805ade:	89 d7                	mov    edi,edx
ffff800000805ae0:	49 89 c7             	mov    r15,rax
ffff800000805ae3:	48 ba b1 47 ee ff ff 	movabs rdx,0xffffffffffee47b1
ffff800000805aea:	ff ff ff 
ffff800000805aed:	48 01 c2             	add    rdx,rax
ffff800000805af0:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:487
}
ffff800000805af2:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000805af6:	c9                   	leave  
ffff800000805af7:	c3                   	ret    

ffff800000805af8 <proc_end>:
proc_end():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:489
void proc_end()
{
ffff800000805af8:	f3 0f 1e fa          	endbr64 
ffff800000805afc:	55                   	push   rbp
ffff800000805afd:	48 89 e5             	mov    rbp,rsp
ffff800000805b00:	41 57                	push   r15
ffff800000805b02:	53                   	push   rbx
ffff800000805b03:	48 83 ec 10          	sub    rsp,0x10
ffff800000805b07:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805b07 <proc_end+0xf>
ffff800000805b0e:	49 bb 49 b4 11 00 00 	movabs r11,0x11b449
ffff800000805b15:	00 00 00 
ffff800000805b18:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:491
    int ret;
    asm volatile("mov %%eax,%0":"=m"(ret));
ffff800000805b1b:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:495
    //printf("proc #%d ended with retv %d.\n",cur_proc,ret);
    //切换堆栈
    //asm volatile("mov %0,%%rsp"::"r"(task[0].tss.esp));
    del_proc(cur_proc);
ffff800000805b1e:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000805b25:	ff ff ff 
ffff800000805b28:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805b2c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805b2e:	89 c7                	mov    edi,eax
ffff800000805b30:	49 89 df             	mov    r15,rbx
ffff800000805b33:	48 b8 ef 4c ee ff ff 	movabs rax,0xffffffffffee4cef
ffff800000805b3a:	ff ff ff 
ffff800000805b3d:	48 01 d8             	add    rax,rbx
ffff800000805b40:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:496
    if(task[cur_proc].parent_pid!=-1){
ffff800000805b42:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805b49:	ff ff ff 
ffff800000805b4c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805b50:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805b53:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000805b5a:	ff ff ff 
ffff800000805b5d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805b61:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805b63:	48 98                	cdqe   
ffff800000805b65:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805b6c:	48 01 d0             	add    rax,rdx
ffff800000805b6f:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff800000805b75:	83 f8 ff             	cmp    eax,0xffffffff
ffff800000805b78:	0f 84 a0 00 00 00    	je     ffff800000805c1e <proc_end+0x126>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:497
        task[task[cur_proc].parent_pid].stat=TASK_READY;
ffff800000805b7e:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805b85:	ff ff ff 
ffff800000805b88:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805b8c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805b8f:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805b96:	ff ff ff 
ffff800000805b99:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805b9d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805ba0:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000805ba7:	ff ff ff 
ffff800000805baa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805bae:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805bb0:	48 98                	cdqe   
ffff800000805bb2:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805bb9:	48 01 c8             	add    rax,rcx
ffff800000805bbc:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff800000805bc2:	89 c0                	mov    eax,eax
ffff800000805bc4:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805bcb:	48 01 d0             	add    rax,rdx
ffff800000805bce:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:498
        switch_proc_tss(task[cur_proc].parent_pid);
ffff800000805bd5:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805bdc:	ff ff ff 
ffff800000805bdf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805be3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805be6:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000805bed:	ff ff ff 
ffff800000805bf0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805bf4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805bf6:	48 98                	cdqe   
ffff800000805bf8:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805bff:	48 01 d0             	add    rax,rdx
ffff800000805c02:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff800000805c08:	89 c7                	mov    edi,eax
ffff800000805c0a:	49 89 df             	mov    r15,rbx
ffff800000805c0d:	48 b8 b5 45 ee ff ff 	movabs rax,0xffffffffffee45b5
ffff800000805c14:	ff ff ff 
ffff800000805c17:	48 01 d8             	add    rax,rbx
ffff800000805c1a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:503
    }
    else
        switch_proc_tss(0);
    //syscall(SYSCALL_DEL_PROC,cur_proc,0,0,0,0);
}
ffff800000805c1c:	eb 17                	jmp    ffff800000805c35 <proc_end+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:501
        switch_proc_tss(0);
ffff800000805c1e:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805c23:	49 89 df             	mov    r15,rbx
ffff800000805c26:	48 b8 b5 45 ee ff ff 	movabs rax,0xffffffffffee45b5
ffff800000805c2d:	ff ff ff 
ffff800000805c30:	48 01 d8             	add    rax,rbx
ffff800000805c33:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:503
}
ffff800000805c35:	90                   	nop
ffff800000805c36:	48 83 c4 10          	add    rsp,0x10
ffff800000805c3a:	5b                   	pop    rbx
ffff800000805c3b:	41 5f                	pop    r15
ffff800000805c3d:	5d                   	pop    rbp
ffff800000805c3e:	c3                   	ret    

ffff800000805c3f <del_proc>:
del_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:505
void del_proc(int pnr)
{
ffff800000805c3f:	f3 0f 1e fa          	endbr64 
ffff800000805c43:	55                   	push   rbp
ffff800000805c44:	48 89 e5             	mov    rbp,rsp
ffff800000805c47:	41 57                	push   r15
ffff800000805c49:	53                   	push   rbx
ffff800000805c4a:	48 83 ec 20          	sub    rsp,0x20
ffff800000805c4e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805c4e <del_proc+0xf>
ffff800000805c55:	49 bb 02 b3 11 00 00 	movabs r11,0x11b302
ffff800000805c5c:	00 00 00 
ffff800000805c5f:	4c 01 db             	add    rbx,r11
ffff800000805c62:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:506
    task[pnr].stat=TASK_ZOMBIE;
ffff800000805c65:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805c6c:	ff ff ff 
ffff800000805c6f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805c73:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805c76:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805c79:	48 98                	cdqe   
ffff800000805c7b:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805c82:	48 01 d0             	add    rax,rdx
ffff800000805c85:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:509
//    task[pnr].pid=-1;
    //释放申请的页面
    release_mmap(&task[pnr]);
ffff800000805c8c:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805c93:	ff ff ff 
ffff800000805c96:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805c9a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805c9d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805ca0:	48 98                	cdqe   
ffff800000805ca2:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805ca9:	48 01 d0             	add    rax,rdx
ffff800000805cac:	48 89 c7             	mov    rdi,rax
ffff800000805caf:	49 89 df             	mov    r15,rbx
ffff800000805cb2:	48 b8 56 63 ee ff ff 	movabs rax,0xffffffffffee6356
ffff800000805cb9:	ff ff ff 
ffff800000805cbc:	48 01 d8             	add    rax,rbx
ffff800000805cbf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:511
    //释放存放页目录的页面
    kmfree(task[pnr].pml4);
ffff800000805cc1:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805cc8:	ff ff ff 
ffff800000805ccb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805ccf:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805cd2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805cd5:	48 98                	cdqe   
ffff800000805cd7:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805cde:	48 01 d0             	add    rax,rdx
ffff800000805ce1:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000805ce8:	48 89 c7             	mov    rdi,rax
ffff800000805ceb:	49 89 df             	mov    r15,rbx
ffff800000805cee:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff800000805cf5:	ff ff ff 
ffff800000805cf8:	48 01 d8             	add    rax,rbx
ffff800000805cfb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:513
    //关闭打开的文件
    for(int i=3;i<MAX_PROC_OPENF;i++){
ffff800000805cfd:	c7 45 ec 03 00 00 00 	mov    DWORD PTR [rbp-0x14],0x3
ffff800000805d04:	eb 4f                	jmp    ffff800000805d55 <del_proc+0x116>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:514
        if(task[pnr].openf[i]){
ffff800000805d06:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805d0d:	ff ff ff 
ffff800000805d10:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805d14:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805d17:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805d1a:	48 98                	cdqe   
ffff800000805d1c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805d23:	48 01 d0             	add    rax,rdx
ffff800000805d26:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805d29:	48 63 d2             	movsxd rdx,edx
ffff800000805d2c:	48 83 c2 1e          	add    rdx,0x1e
ffff800000805d30:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000805d35:	48 85 c0             	test   rax,rax
ffff800000805d38:	74 17                	je     ffff800000805d51 <del_proc+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:515
            sys_close(i);
ffff800000805d3a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805d3d:	89 c7                	mov    edi,eax
ffff800000805d3f:	49 89 df             	mov    r15,rbx
ffff800000805d42:	48 b8 1a b4 ee ff ff 	movabs rax,0xffffffffffeeb41a
ffff800000805d49:	ff ff ff 
ffff800000805d4c:	48 01 d8             	add    rax,rbx
ffff800000805d4f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:513 (discriminator 2)
    for(int i=3;i<MAX_PROC_OPENF;i++){
ffff800000805d51:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:513 (discriminator 1)
ffff800000805d55:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff800000805d59:	7e ab                	jle    ffff800000805d06 <del_proc+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:519
        }
    }
    //三个std判断一下是否是会话leader，是的话再关闭
    if(task[pnr].sid==task[pnr].pid){
ffff800000805d5b:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805d62:	ff ff ff 
ffff800000805d65:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805d69:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805d6c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805d6f:	48 98                	cdqe   
ffff800000805d71:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805d78:	48 01 d0             	add    rax,rdx
ffff800000805d7b:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000805d7e:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805d85:	ff ff ff 
ffff800000805d88:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805d8c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805d8f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805d92:	48 98                	cdqe   
ffff800000805d94:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805d9b:	48 01 c8             	add    rax,rcx
ffff800000805d9e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805da0:	39 c2                	cmp    edx,eax
ffff800000805da2:	75 79                	jne    ffff800000805e1d <del_proc+0x1de>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:521
        //tty和console断联
        sys_ioctl(0,TTY_DISCONNECT,0);
ffff800000805da4:	ba 00 00 00 00       	mov    edx,0x0
ffff800000805da9:	be 02 00 00 00       	mov    esi,0x2
ffff800000805dae:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805db3:	49 89 df             	mov    r15,rbx
ffff800000805db6:	48 b8 d9 70 ee ff ff 	movabs rax,0xffffffffffee70d9
ffff800000805dbd:	ff ff ff 
ffff800000805dc0:	48 01 d8             	add    rax,rbx
ffff800000805dc3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:522
        sys_close(0);
ffff800000805dc5:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805dca:	49 89 df             	mov    r15,rbx
ffff800000805dcd:	48 b8 1a b4 ee ff ff 	movabs rax,0xffffffffffeeb41a
ffff800000805dd4:	ff ff ff 
ffff800000805dd7:	48 01 d8             	add    rax,rbx
ffff800000805dda:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:523
        sys_close(1);
ffff800000805ddc:	bf 01 00 00 00       	mov    edi,0x1
ffff800000805de1:	49 89 df             	mov    r15,rbx
ffff800000805de4:	48 b8 1a b4 ee ff ff 	movabs rax,0xffffffffffeeb41a
ffff800000805deb:	ff ff ff 
ffff800000805dee:	48 01 d8             	add    rax,rbx
ffff800000805df1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:524
        sys_close(2);
ffff800000805df3:	bf 02 00 00 00       	mov    edi,0x2
ffff800000805df8:	49 89 df             	mov    r15,rbx
ffff800000805dfb:	48 b8 1a b4 ee ff ff 	movabs rax,0xffffffffffeeb41a
ffff800000805e02:	ff ff ff 
ffff800000805e05:	48 01 d8             	add    rax,rbx
ffff800000805e08:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:526
        //然后,关闭所有前台进程组的进程
        for(int i=0;i<MAX_TASKS;i++){
ffff800000805e0a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000805e11:	eb 04                	jmp    ffff800000805e17 <del_proc+0x1d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:526 (discriminator 3)
ffff800000805e13:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:526 (discriminator 1)
ffff800000805e17:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff800000805e1b:	7e f6                	jle    ffff800000805e13 <del_proc+0x1d4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:536
    }
    //TODO 给子进程发送SIGHUP信号结束他们
    //
    //从进程中解除cr3,tss和ldt
    //switch_proc_tss(task[pnr]);
}
ffff800000805e1d:	90                   	nop
ffff800000805e1e:	48 83 c4 20          	add    rsp,0x20
ffff800000805e22:	5b                   	pop    rbx
ffff800000805e23:	41 5f                	pop    r15
ffff800000805e25:	5d                   	pop    rbp
ffff800000805e26:	c3                   	ret    

ffff800000805e27 <set_proc_stat>:
set_proc_stat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:539

int set_proc_stat(int pid,int stat)
{
ffff800000805e27:	f3 0f 1e fa          	endbr64 
ffff800000805e2b:	55                   	push   rbp
ffff800000805e2c:	48 89 e5             	mov    rbp,rsp
ffff800000805e2f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805e2f <set_proc_stat+0x8>
ffff800000805e36:	49 bb 21 b1 11 00 00 	movabs r11,0x11b121
ffff800000805e3d:	00 00 00 
ffff800000805e40:	4c 01 d8             	add    rax,r11
ffff800000805e43:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000805e46:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:540
    if(pid==-1)return -1;
ffff800000805e49:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff800000805e4d:	75 0a                	jne    ffff800000805e59 <set_proc_stat+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:540 (discriminator 1)
ffff800000805e4f:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805e54:	e9 b9 00 00 00       	jmp    ffff800000805f12 <set_proc_stat+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:541
    int i=0;
ffff800000805e59:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:542
    for(;task[i].pid!=pid;i++);
ffff800000805e60:	eb 04                	jmp    ffff800000805e66 <set_proc_stat+0x3f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:542 (discriminator 2)
ffff800000805e62:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:542 (discriminator 1)
ffff800000805e66:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000805e6d:	ff ff ff 
ffff800000805e70:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805e74:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805e77:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805e7a:	48 63 d2             	movsxd rdx,edx
ffff800000805e7d:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805e84:	48 01 ca             	add    rdx,rcx
ffff800000805e87:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000805e89:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805e8c:	39 d1                	cmp    ecx,edx
ffff800000805e8e:	75 d2                	jne    ffff800000805e62 <set_proc_stat+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:543
    if(i==MAX_PROC_COUNT)return -1;
ffff800000805e90:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff800000805e94:	75 07                	jne    ffff800000805e9d <set_proc_stat+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:543 (discriminator 1)
ffff800000805e96:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805e9b:	eb 75                	jmp    ffff800000805f12 <set_proc_stat+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:544
    task[i].stat=stat;
ffff800000805e9d:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000805ea4:	ff ff ff 
ffff800000805ea7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805eab:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805eae:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805eb1:	48 63 d2             	movsxd rdx,edx
ffff800000805eb4:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805ebb:	48 01 d1             	add    rcx,rdx
ffff800000805ebe:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000805ec1:	89 51 18             	mov    DWORD PTR [rcx+0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:546
    //如果这就是正在运行的进程，那么马上停止
    if(cur_proc==i)
ffff800000805ec4:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000805ecb:	ff ff ff 
ffff800000805ece:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805ed2:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805ed4:	39 55 fc             	cmp    DWORD PTR [rbp-0x4],edx
ffff800000805ed7:	75 34                	jne    ffff800000805f0d <set_proc_stat+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:547
        task[cur_proc].utime=MAX_UTIME;
ffff800000805ed9:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000805ee0:	ff ff ff 
ffff800000805ee3:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805ee7:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805eea:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000805ef1:	ff ff ff 
ffff800000805ef4:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000805ef8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805efa:	48 98                	cdqe   
ffff800000805efc:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805f03:	48 01 c8             	add    rax,rcx
ffff800000805f06:	c7 40 1c 0a 00 00 00 	mov    DWORD PTR [rax+0x1c],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:548
    return 0;
ffff800000805f0d:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:549
}
ffff800000805f12:	5d                   	pop    rbp
ffff800000805f13:	c3                   	ret    

ffff800000805f14 <sys_exit>:
sys_exit():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:581
//}
/*
 * 进程结束。
 * */
int sys_exit(int code)
{
ffff800000805f14:	f3 0f 1e fa          	endbr64 
ffff800000805f18:	55                   	push   rbp
ffff800000805f19:	48 89 e5             	mov    rbp,rsp
ffff800000805f1c:	41 57                	push   r15
ffff800000805f1e:	53                   	push   rbx
ffff800000805f1f:	48 83 ec 10          	sub    rsp,0x10
ffff800000805f23:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805f23 <sys_exit+0xf>
ffff800000805f2a:	49 bb 2d b0 11 00 00 	movabs r11,0x11b02d
ffff800000805f31:	00 00 00 
ffff800000805f34:	4c 01 db             	add    rbx,r11
ffff800000805f37:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:582
    current->exit_code=code;
ffff800000805f3a:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000805f41:	ff ff ff 
ffff800000805f44:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805f48:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805f4b:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805f4e:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:583
    del_proc(cur_proc);
ffff800000805f51:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000805f58:	ff ff ff 
ffff800000805f5b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805f5f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805f61:	89 c7                	mov    edi,eax
ffff800000805f63:	49 89 df             	mov    r15,rbx
ffff800000805f66:	48 b8 ef 4c ee ff ff 	movabs rax,0xffffffffffee4cef
ffff800000805f6d:	ff ff ff 
ffff800000805f70:	48 01 d8             	add    rax,rbx
ffff800000805f73:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:585 (discriminator 1)
    while(1)
        manage_proc();
ffff800000805f75:	49 89 df             	mov    r15,rbx
ffff800000805f78:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805f7d:	48 ba f9 42 ee ff ff 	movabs rdx,0xffffffffffee42f9
ffff800000805f84:	ff ff ff 
ffff800000805f87:	48 01 da             	add    rdx,rbx
ffff800000805f8a:	ff d2                	call   rdx
ffff800000805f8c:	eb e7                	jmp    ffff800000805f75 <sys_exit+0x61>

ffff800000805f8e <reg_proc>:
reg_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:641
    dllmain(NULL,0,NULL);
    
}*/

int reg_proc(addr_t entry, struct index_node *cwd, struct index_node *exef)
{
ffff800000805f8e:	f3 0f 1e fa          	endbr64 
ffff800000805f92:	55                   	push   rbp
ffff800000805f93:	48 89 e5             	mov    rbp,rsp
ffff800000805f96:	41 57                	push   r15
ffff800000805f98:	41 54                	push   r12
ffff800000805f9a:	53                   	push   rbx
ffff800000805f9b:	48 83 ec 48          	sub    rsp,0x48
ffff800000805f9f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805f9f <reg_proc+0x11>
ffff800000805fa6:	49 bb b1 af 11 00 00 	movabs r11,0x11afb1
ffff800000805fad:	00 00 00 
ffff800000805fb0:	4c 01 db             	add    rbx,r11
ffff800000805fb3:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff800000805fb7:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff800000805fbb:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:643
    
    int i=req_proc();
ffff800000805fbf:	49 89 df             	mov    r15,rbx
ffff800000805fc2:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805fc7:	48 ba 6d 3f ee ff ff 	movabs rdx,0xffffffffffee3f6d
ffff800000805fce:	ff ff ff 
ffff800000805fd1:	48 01 da             	add    rdx,rbx
ffff800000805fd4:	ff d2                	call   rdx
ffff800000805fd6:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:644
    if(i==-1)return -1;
ffff800000805fd9:	83 7d dc ff          	cmp    DWORD PTR [rbp-0x24],0xffffffff
ffff800000805fdd:	75 0a                	jne    ffff800000805fe9 <reg_proc+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:644 (discriminator 1)
ffff800000805fdf:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805fe4:	e9 7e 02 00 00       	jmp    ffff800000806267 <reg_proc+0x2d9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:647

    //栈顶设置在了4G处
    set_proc(0, 0, 0, 0, DS_USER, CS_USER, DS_USER, DS_USER\
ffff800000805fe9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000805fed:	48 83 ec 08          	sub    rsp,0x8
ffff800000805ff1:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000805ff4:	52                   	push   rdx
ffff800000805ff5:	6a 00                	push   0x0
ffff800000805ff7:	50                   	push   rax
ffff800000805ff8:	6a 00                	push   0x0
ffff800000805ffa:	6a 00                	push   0x0
ffff800000805ffc:	6a 00                	push   0x0
ffff800000805ffe:	68 00 f0 ff ff       	push   0xfffffffffffff000
ffff800000806003:	c7 44 24 04 ff 7f 00 	mov    DWORD PTR [rsp+0x4],0x7fff
ffff80000080600a:	00 
ffff80000080600b:	6a 28                	push   0x28
ffff80000080600d:	6a 28                	push   0x28
ffff80000080600f:	6a 28                	push   0x28
ffff800000806011:	6a 28                	push   0x28
ffff800000806013:	41 b9 30 00 00 00    	mov    r9d,0x30
ffff800000806019:	41 b8 28 00 00 00    	mov    r8d,0x28
ffff80000080601f:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000806024:	ba 00 00 00 00       	mov    edx,0x0
ffff800000806029:	be 00 00 00 00       	mov    esi,0x0
ffff80000080602e:	bf 00 00 00 00       	mov    edi,0x0
ffff800000806033:	49 89 df             	mov    r15,rbx
ffff800000806036:	48 b8 be 40 ee ff ff 	movabs rax,0xffffffffffee40be
ffff80000080603d:	ff ff ff 
ffff800000806040:	48 01 d8             	add    rax,rbx
ffff800000806043:	ff d0                	call   rax
ffff800000806045:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:649
, DS_USER, DS_USER, STACK_TOP, 0, 0, 0, entry, 0, i);
    task[i].pml4= kmalloc();
ffff800000806049:	49 89 df             	mov    r15,rbx
ffff80000080604c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806051:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff800000806058:	ff ff ff 
ffff80000080605b:	48 01 da             	add    rdx,rbx
ffff80000080605e:	ff d2                	call   rdx
ffff800000806060:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000806067:	ff ff ff 
ffff80000080606a:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080606e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000806071:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000806074:	48 63 d2             	movsxd rdx,edx
ffff800000806077:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff80000080607e:	48 01 ca             	add    rdx,rcx
ffff800000806081:	48 89 82 e0 00 00 00 	mov    QWORD PTR [rdx+0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:650
    task[i].pml4[0]= kmalloc();
ffff800000806088:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff80000080608f:	ff ff ff 
ffff800000806092:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806096:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806099:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080609c:	48 98                	cdqe   
ffff80000080609e:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008060a5:	48 01 d0             	add    rax,rdx
ffff8000008060a8:	4c 8b a0 e0 00 00 00 	mov    r12,QWORD PTR [rax+0xe0]
ffff8000008060af:	49 89 df             	mov    r15,rbx
ffff8000008060b2:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008060b7:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff8000008060be:	ff ff ff 
ffff8000008060c1:	48 01 da             	add    rdx,rbx
ffff8000008060c4:	ff d2                	call   rdx
ffff8000008060c6:	49 89 04 24          	mov    QWORD PTR [r12],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:651
    unsigned long *pdpt=task[i].pml4;
ffff8000008060ca:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff8000008060d1:	ff ff ff 
ffff8000008060d4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008060d8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008060db:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008060de:	48 98                	cdqe   
ffff8000008060e0:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008060e7:	48 01 d0             	add    rax,rdx
ffff8000008060ea:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff8000008060f1:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:653
    //pdpt第一项(0-1GB)设置为内核空间，这样才能访问中断
    set_1gb_pdpt(pdpt,0,PAGE_PRESENT|PAGE_RWX);
ffff8000008060f5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008060f9:	ba 03 00 00 00       	mov    edx,0x3
ffff8000008060fe:	be 00 00 00 00       	mov    esi,0x0
ffff800000806103:	48 89 c7             	mov    rdi,rax
ffff800000806106:	49 89 df             	mov    r15,rbx
ffff800000806109:	48 b8 81 21 ee ff ff 	movabs rax,0xffffffffffee2181
ffff800000806110:	ff ff ff 
ffff800000806113:	48 01 d8             	add    rax,rbx
ffff800000806116:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:656

    //申请一项pd,里面申请一2mb页用于堆栈
    addr_t *stackb= kmalloc();
ffff800000806118:	49 89 df             	mov    r15,rbx
ffff80000080611b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806120:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff800000806127:	ff ff ff 
ffff80000080612a:	48 01 da             	add    rdx,rbx
ffff80000080612d:	ff d2                	call   rdx
ffff80000080612f:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:657
    pdpt[3]=(unsigned long)stackb|PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX;//3-4G分配栈空间
ffff800000806133:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000806137:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080613b:	48 83 c0 18          	add    rax,0x18
ffff80000080613f:	48 83 ca 07          	or     rdx,0x7
ffff800000806143:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:658
    set_2mb_pde(stackb + 511, get_phyaddr(req_a_page()), PAGE_FOR_ALL|PAGE_RWX);
ffff800000806146:	49 89 df             	mov    r15,rbx
ffff800000806149:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080614e:	48 ba d0 1d ee ff ff 	movabs rdx,0xffffffffffee1dd0
ffff800000806155:	ff ff ff 
ffff800000806158:	48 01 da             	add    rdx,rbx
ffff80000080615b:	ff d2                	call   rdx
ffff80000080615d:	89 c7                	mov    edi,eax
ffff80000080615f:	49 89 df             	mov    r15,rbx
ffff800000806162:	48 b8 e8 20 ee ff ff 	movabs rax,0xffffffffffee20e8
ffff800000806169:	ff ff ff 
ffff80000080616c:	48 01 d8             	add    rax,rbx
ffff80000080616f:	ff d0                	call   rax
ffff800000806171:	89 c1                	mov    ecx,eax
ffff800000806173:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000806177:	48 05 f8 0f 00 00    	add    rax,0xff8
ffff80000080617d:	ba 06 00 00 00       	mov    edx,0x6
ffff800000806182:	89 ce                	mov    esi,ecx
ffff800000806184:	48 89 c7             	mov    rdi,rax
ffff800000806187:	49 89 df             	mov    r15,rbx
ffff80000080618a:	48 b8 ec 21 ee ff ff 	movabs rax,0xffffffffffee21ec
ffff800000806191:	ff ff ff 
ffff800000806194:	48 01 d8             	add    rax,rbx
ffff800000806197:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:659
    task[i].regs.cr3=task[i].pml4;
ffff800000806199:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff8000008061a0:	ff ff ff 
ffff8000008061a3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008061a7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008061aa:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008061ad:	48 98                	cdqe   
ffff8000008061af:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008061b6:	48 01 d0             	add    rax,rdx
ffff8000008061b9:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff8000008061c0:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff8000008061c7:	ff ff ff 
ffff8000008061ca:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008061ce:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008061d1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008061d4:	48 98                	cdqe   
ffff8000008061d6:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008061dd:	48 01 c8             	add    rax,rcx
ffff8000008061e0:	48 89 90 64 02 00 00 	mov    QWORD PTR [rax+0x264],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:661

    task[i].stat=TASK_READY;
ffff8000008061e7:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff8000008061ee:	ff ff ff 
ffff8000008061f1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008061f5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008061f8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008061fb:	48 98                	cdqe   
ffff8000008061fd:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806204:	48 01 d0             	add    rax,rdx
ffff800000806207:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:662
    task[i].cwd=cwd;
ffff80000080620e:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806215:	ff ff ff 
ffff800000806218:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080621c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080621f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806222:	48 98                	cdqe   
ffff800000806224:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080622b:	48 01 c2             	add    rdx,rax
ffff80000080622e:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000806232:	48 89 82 e8 00 00 00 	mov    QWORD PTR [rdx+0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:663
    task[i].exef=exef;
ffff800000806239:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806240:	ff ff ff 
ffff800000806243:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806247:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080624a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080624d:	48 98                	cdqe   
ffff80000080624f:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806256:	48 01 c2             	add    rdx,rax
ffff800000806259:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080625d:	48 89 82 f0 00 00 00 	mov    QWORD PTR [rdx+0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:665

    return i;
ffff800000806264:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:720
    proc_ret_stack *pstack=stack_paddr+stack_size-12;
    pstack->argc=0;
    pstack->argv=0;
    pstack->proc_end_addr=proc_end;
    int *pptr=pstack;*/
}
ffff800000806267:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
ffff80000080626b:	5b                   	pop    rbx
ffff80000080626c:	41 5c                	pop    r12
ffff80000080626e:	41 5f                	pop    r15
ffff800000806270:	5d                   	pop    rbp
ffff800000806271:	c3                   	ret    

ffff800000806272 <sys_malloc>:
sys_malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:723

void * sys_malloc(size_t size)
{
ffff800000806272:	f3 0f 1e fa          	endbr64 
ffff800000806276:	55                   	push   rbp
ffff800000806277:	48 89 e5             	mov    rbp,rsp
ffff80000080627a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080627a <sys_malloc+0x8>
ffff800000806281:	49 bb d6 ac 11 00 00 	movabs r11,0x11acd6
ffff800000806288:	00 00 00 
ffff80000080628b:	4c 01 d8             	add    rax,r11
ffff80000080628e:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:740
    void *data=current->mem_struct.heap_top;
    current->mem_struct.heap_top=new_heaptop;
    return data; */
    

    int n=size/CHUNK_SIZE+size%CHUNK_SIZE?1:0;
ffff800000806292:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000806296:	48 89 d1             	mov    rcx,rdx
ffff800000806299:	48 c1 e9 0c          	shr    rcx,0xc
ffff80000080629d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008062a1:	81 e2 ff 0f 00 00    	and    edx,0xfff
ffff8000008062a7:	48 01 ca             	add    rdx,rcx
ffff8000008062aa:	48 85 d2             	test   rdx,rdx
ffff8000008062ad:	0f 95 c2             	setne  dl
ffff8000008062b0:	0f b6 d2             	movzx  edx,dl
ffff8000008062b3:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:741
    chunk_header *hp=(chunk_header*)task[cur_proc].mem_struct.heap_base;
ffff8000008062b6:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff8000008062bd:	ff ff ff 
ffff8000008062c0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008062c4:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008062c7:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008062ce:	ff ff ff 
ffff8000008062d1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008062d5:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008062d7:	48 63 d2             	movsxd rdx,edx
ffff8000008062da:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008062e1:	48 01 ca             	add    rdx,rcx
ffff8000008062e4:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff8000008062e8:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:742
    while (hp->next!=NULL&&hp->alloc==0&&hp->pgn>=n)
ffff8000008062ec:	eb 0c                	jmp    ffff8000008062fa <sys_malloc+0x88>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:743
        hp=hp->next;
ffff8000008062ee:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff8000008062f2:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff8000008062f6:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:742
    while (hp->next!=NULL&&hp->alloc==0&&hp->pgn>=n)
ffff8000008062fa:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff8000008062fe:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff800000806302:	48 85 d2             	test   rdx,rdx
ffff800000806305:	74 16                	je     ffff80000080631d <sys_malloc+0xab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:742 (discriminator 1)
ffff800000806307:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080630b:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080630e:	85 d2                	test   edx,edx
ffff800000806310:	75 0b                	jne    ffff80000080631d <sys_malloc+0xab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:742 (discriminator 2)
ffff800000806312:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000806316:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806318:	39 55 e8             	cmp    DWORD PTR [rbp-0x18],edx
ffff80000080631b:	7e d1                	jle    ffff8000008062ee <sys_malloc+0x7c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:744
    if(hp->pgn<n)
ffff80000080631d:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000806321:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806323:	39 55 e8             	cmp    DWORD PTR [rbp-0x18],edx
ffff800000806326:	0f 8e b8 00 00 00    	jle    ffff8000008063e4 <sys_malloc+0x172>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:747
    {
        //上抬heap top
        if(task[cur_proc].mem_struct.heap_top+CHUNK_SIZE*n>=HEAP_MAXTOP)
ffff80000080632c:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000806333:	ff ff ff 
ffff800000806336:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080633a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080633d:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000806344:	ff ff ff 
ffff800000806347:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080634b:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080634d:	48 63 d2             	movsxd rdx,edx
ffff800000806350:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000806357:	48 01 ca             	add    rdx,rcx
ffff80000080635a:	48 8b 4a 30          	mov    rcx,QWORD PTR [rdx+0x30]
ffff80000080635e:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000806361:	c1 e2 0c             	shl    edx,0xc
ffff800000806364:	48 63 d2             	movsxd rdx,edx
ffff800000806367:	48 01 ca             	add    rdx,rcx
ffff80000080636a:	48 81 fa ff ff ef 01 	cmp    rdx,0x1efffff
ffff800000806371:	76 0a                	jbe    ffff80000080637d <sys_malloc+0x10b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:750
        {
            //超过顶部
            return NULL;
ffff800000806373:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806378:	e9 e0 00 00 00       	jmp    ffff80000080645d <sys_malloc+0x1eb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:752
        }
        int needed=n-hp->pgn;
ffff80000080637d:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000806381:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000806383:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000806386:	29 ca                	sub    edx,ecx
ffff800000806388:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:753
        char* p=task[cur_proc].mem_struct.heap_top;
ffff80000080638b:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000806392:	ff ff ff 
ffff800000806395:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806399:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080639c:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008063a3:	ff ff ff 
ffff8000008063a6:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008063aa:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008063ac:	48 98                	cdqe   
ffff8000008063ae:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008063b5:	48 01 c8             	add    rax,rcx
ffff8000008063b8:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff8000008063bc:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:754
        for(int i=0;i<needed*CHUNK_SIZE/PAGE_SIZE;i++)
ffff8000008063c0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008063c7:	eb 13                	jmp    ffff8000008063dc <sys_malloc+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:756 (discriminator 3)
        {
            *p=0;//触发缺页中断
ffff8000008063c9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008063cd:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:757 (discriminator 3)
            p+=PAGE_SIZE;
ffff8000008063d0:	48 81 45 f0 00 10 00 	add    QWORD PTR [rbp-0x10],0x1000
ffff8000008063d7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:754 (discriminator 3)
        for(int i=0;i<needed*CHUNK_SIZE/PAGE_SIZE;i++)
ffff8000008063d8:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:754 (discriminator 1)
ffff8000008063dc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008063df:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
ffff8000008063e2:	7c e5                	jl     ffff8000008063c9 <sys_malloc+0x157>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:760
        }
    }
    if(hp->pgn>n)
ffff8000008063e4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008063e8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008063ea:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
ffff8000008063ed:	7d 59                	jge    ffff800000806448 <sys_malloc+0x1d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:763
    {
        //在后面新建一个头
        char *p=hp;
ffff8000008063ef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008063f3:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:764
        p+=(n+1)*CHUNK_SIZE;//算上存储头一个
ffff8000008063f7:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008063fa:	83 c0 01             	add    eax,0x1
ffff8000008063fd:	c1 e0 0c             	shl    eax,0xc
ffff800000806400:	48 98                	cdqe   
ffff800000806402:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:765
        chunk_header *np=p;
ffff800000806406:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080640a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:766
        np->pgn=hp->pgn-n-1;
ffff80000080640e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806412:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806414:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
ffff800000806417:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080641a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080641e:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:767
        np->next=hp->next;
ffff800000806420:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806424:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000806428:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080642c:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:768
        np->prev=hp;
ffff800000806430:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806434:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000806438:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:769
        hp->next=np;
ffff80000080643c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806440:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000806444:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:771
    }
    hp->alloc=1;//分配完毕
ffff800000806448:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080644c:	c7 40 04 01 00 00 00 	mov    DWORD PTR [rax+0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:772
    return (char*)hp+CHUNK_SIZE;//返回后边的第一个数据块地址
ffff800000806453:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806457:	48 05 00 10 00 00    	add    rax,0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:773
}
ffff80000080645d:	5d                   	pop    rbp
ffff80000080645e:	c3                   	ret    

ffff80000080645f <sys_free>:
sys_free():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:775
int sys_free(int ptr)
{
ffff80000080645f:	f3 0f 1e fa          	endbr64 
ffff800000806463:	55                   	push   rbp
ffff800000806464:	48 89 e5             	mov    rbp,rsp
ffff800000806467:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000806467 <sys_free+0x8>
ffff80000080646e:	49 bb e9 aa 11 00 00 	movabs r11,0x11aae9
ffff800000806475:	00 00 00 
ffff800000806478:	4c 01 d8             	add    rax,r11
ffff80000080647b:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:776
    chunk_header *hp=ptr-CHUNK_SIZE;//回退到头
ffff80000080647e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806481:	2d 00 10 00 00       	sub    eax,0x1000
ffff800000806486:	48 98                	cdqe   
ffff800000806488:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:777
    hp->alloc=0;    //合并
ffff80000080648c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806490:	c7 40 04 00 00 00 00 	mov    DWORD PTR [rax+0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:779
    //向后合并
    chunk_header *p=hp->next;
ffff800000806497:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080649b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080649f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:780
    while(p!=NULL)
ffff8000008064a3:	eb 2e                	jmp    ffff8000008064d3 <sys_free+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:782
    {
        if(p->alloc==0)
ffff8000008064a5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008064a9:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008064ac:	85 c0                	test   eax,eax
ffff8000008064ae:	75 2c                	jne    ffff8000008064dc <sys_free+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:784
        {
            hp->pgn+=p->pgn+1;//把区域合并
ffff8000008064b0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008064b4:	8b 10                	mov    edx,DWORD PTR [rax]
ffff8000008064b6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008064ba:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008064bc:	83 c0 01             	add    eax,0x1
ffff8000008064bf:	01 c2                	add    edx,eax
ffff8000008064c1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008064c5:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:787
        }else
            break;
        p=p->next;
ffff8000008064c7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008064cb:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008064cf:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:780
    while(p!=NULL)
ffff8000008064d3:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff8000008064d8:	75 cb                	jne    ffff8000008064a5 <sys_free+0x46>
ffff8000008064da:	eb 01                	jmp    ffff8000008064dd <sys_free+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:786
            break;
ffff8000008064dc:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:790
    }
    //向前合并
    p=hp->prev;
ffff8000008064dd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008064e1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008064e5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:791
    while(p!=NULL)
ffff8000008064e9:	eb 2e                	jmp    ffff800000806519 <sys_free+0xba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:793
    {
        if(p->alloc==0)
ffff8000008064eb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008064ef:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008064f2:	85 c0                	test   eax,eax
ffff8000008064f4:	75 2c                	jne    ffff800000806522 <sys_free+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:795
        {
            p->pgn+=hp->pgn+1;//把区域合并
ffff8000008064f6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008064fa:	8b 10                	mov    edx,DWORD PTR [rax]
ffff8000008064fc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806500:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806502:	83 c0 01             	add    eax,0x1
ffff800000806505:	01 c2                	add    edx,eax
ffff800000806507:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080650b:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:798
        }else
            break;
        p=p->prev;
ffff80000080650d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806511:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806515:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:791
    while(p!=NULL)
ffff800000806519:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080651e:	75 cb                	jne    ffff8000008064eb <sys_free+0x8c>
ffff800000806520:	eb 01                	jmp    ffff800000806523 <sys_free+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:797
            break;
ffff800000806522:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:801
    }
    //合并完成
    return 0;
ffff800000806523:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:802
}
ffff800000806528:	5d                   	pop    rbp
ffff800000806529:	c3                   	ret    

ffff80000080652a <switch_to>:
switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:804

void switch_to(struct process *from, struct process *to) {
ffff80000080652a:	f3 0f 1e fa          	endbr64 
ffff80000080652e:	55                   	push   rbp
ffff80000080652f:	48 89 e5             	mov    rbp,rsp
ffff800000806532:	53                   	push   rbx
ffff800000806533:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000806533 <switch_to+0x9>
ffff80000080653a:	49 bb 1d aa 11 00 00 	movabs r11,0x11aa1d
ffff800000806541:	00 00 00 
ffff800000806544:	4c 01 d8             	add    rax,r11
ffff800000806547:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffff80000080654b:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:805
    cur_proc=to-task;
ffff80000080654f:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000806556:	ff ff ff 
ffff800000806559:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080655d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000806560:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000806564:	48 29 ca             	sub    rdx,rcx
ffff800000806567:	48 89 d1             	mov    rcx,rdx
ffff80000080656a:	48 c1 f9 03          	sar    rcx,0x3
ffff80000080656e:	48 ba 43 ac 28 8d 8f 	movabs rdx,0x77a04c8f8d28ac43
ffff800000806575:	4c a0 77 
ffff800000806578:	48 0f af d1          	imul   rdx,rcx
ffff80000080657c:	89 d1                	mov    ecx,edx
ffff80000080657e:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000806585:	ff ff ff 
ffff800000806588:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080658c:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:806
    current=&task[cur_proc];
ffff80000080658e:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000806595:	ff ff ff 
ffff800000806598:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080659c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080659f:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008065a6:	ff ff ff 
ffff8000008065a9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008065ad:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008065af:	48 63 d2             	movsxd rdx,edx
ffff8000008065b2:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008065b9:	48 01 ca             	add    rdx,rcx
ffff8000008065bc:	48 b9 80 fe ff ff ff 	movabs rcx,0xfffffffffffffe80
ffff8000008065c3:	ff ff ff 
ffff8000008065c6:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff8000008065ca:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:808
    //cr3需要物理地址,regs.cr3里面填的就是物理地址
    asm volatile("mov %0,%%rax\n"
ffff8000008065cd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008065d1:	48 8b 80 64 02 00 00 	mov    rax,QWORD PTR [rax+0x264]
ffff8000008065d8:	0f 22 d8             	mov    cr3,rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:810
                 "mov %%rax,%%cr3\n":"=m"(to->regs.cr3));
    asm volatile("mov %%rsp,%0\r\n"
ffff8000008065db:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
ffff8000008065df:	4c 8b 55 f0          	mov    r10,QWORD PTR [rbp-0x10]
ffff8000008065e3:	4c 8b 5d f0          	mov    r11,QWORD PTR [rbp-0x10]
ffff8000008065e7:	48 8b 5d f0          	mov    rbx,QWORD PTR [rbp-0x10]
ffff8000008065eb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008065ef:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008065f3:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff8000008065f7:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
ffff8000008065fb:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffff8000008065ff:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000806603:	49 89 a1 9c 02 00 00 	mov    QWORD PTR [r9+0x29c],rsp
ffff80000080660a:	48 8d 05 24 00 00 00 	lea    rax,[rip+0x24]        # ffff800000806635 <done>
ffff800000806611:	49 89 82 6c 02 00 00 	mov    QWORD PTR [r10+0x26c],rax
ffff800000806618:	41 8c a3 dc 02 00 00 	mov    WORD PTR [r11+0x2dc],fs
ffff80000080661f:	8c ab e4 02 00 00    	mov    WORD PTR [rbx+0x2e4],gs
ffff800000806625:	48 8b a1 9c 02 00 00 	mov    rsp,QWORD PTR [rcx+0x29c]
ffff80000080662c:	41 ff b0 6c 02 00 00 	push   QWORD PTR [r8+0x26c]
ffff800000806633:	eb 08                	jmp    ffff80000080663d <__switch_to>

ffff800000806635 <done>:
ffff800000806635:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:824
                 "nop":"=m"(from->regs.rsp),"=m"(from->regs.rip),
                 "=m"(from->regs.fs),"=m"(from->regs.gs):
                "m"(to->regs.fs),"m"(to->regs.gs),"m"(to->regs.rsp),"m"(to->regs.rip),
                "D"(from),"S"(to));

}
ffff800000806636:	90                   	nop
ffff800000806637:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff80000080663b:	c9                   	leave  
ffff80000080663c:	c3                   	ret    

ffff80000080663d <__switch_to>:
__switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:825
void __switch_to(struct process *from, struct process *to) {
ffff80000080663d:	f3 0f 1e fa          	endbr64 
ffff800000806641:	55                   	push   rbp
ffff800000806642:	48 89 e5             	mov    rbp,rsp
ffff800000806645:	41 57                	push   r15
ffff800000806647:	41 54                	push   r12
ffff800000806649:	53                   	push   rbx
ffff80000080664a:	48 83 ec 18          	sub    rsp,0x18
ffff80000080664e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080664e <__switch_to+0x11>
ffff800000806655:	49 bb 02 a9 11 00 00 	movabs r11,0x11a902
ffff80000080665c:	00 00 00 
ffff80000080665f:	4c 01 d8             	add    rax,r11
ffff800000806662:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000806666:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:826
    set_tss(to->tss.rsp0,to->tss.rsp1,to->tss.rsp2,to->tss.ists[0],to->tss.ists[1],
ffff80000080666a:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080666e:	4c 8b 9a 4c 02 00 00 	mov    r11,QWORD PTR [rdx+0x24c]
ffff800000806675:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000806679:	4c 8b 92 44 02 00 00 	mov    r10,QWORD PTR [rdx+0x244]
ffff800000806680:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000806684:	4c 8b 8a 3c 02 00 00 	mov    r9,QWORD PTR [rdx+0x23c]
ffff80000080668b:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080668f:	4c 8b 82 34 02 00 00 	mov    r8,QWORD PTR [rdx+0x234]
ffff800000806696:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080669a:	4c 8b a2 2c 02 00 00 	mov    r12,QWORD PTR [rdx+0x22c]
ffff8000008066a1:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008066a5:	48 8b 9a 24 02 00 00 	mov    rbx,QWORD PTR [rdx+0x224]
ffff8000008066ac:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008066b0:	48 8b 8a 1c 02 00 00 	mov    rcx,QWORD PTR [rdx+0x21c]
ffff8000008066b7:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008066bb:	48 8b 92 0c 02 00 00 	mov    rdx,QWORD PTR [rdx+0x20c]
ffff8000008066c2:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff8000008066c6:	48 8b b6 04 02 00 00 	mov    rsi,QWORD PTR [rsi+0x204]
ffff8000008066cd:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffff8000008066d1:	48 8b bf fc 01 00 00 	mov    rdi,QWORD PTR [rdi+0x1fc]
ffff8000008066d8:	41 53                	push   r11
ffff8000008066da:	41 52                	push   r10
ffff8000008066dc:	41 51                	push   r9
ffff8000008066de:	41 50                	push   r8
ffff8000008066e0:	4d 89 e1             	mov    r9,r12
ffff8000008066e3:	49 89 d8             	mov    r8,rbx
ffff8000008066e6:	49 89 c7             	mov    r15,rax
ffff8000008066e9:	49 ba e2 57 ee ff ff 	movabs r10,0xffffffffffee57e2
ffff8000008066f0:	ff ff ff 
ffff8000008066f3:	49 01 c2             	add    r10,rax
ffff8000008066f6:	41 ff d2             	call   r10
ffff8000008066f9:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:828
            to->tss.ists[2],to->tss.ists[3],to->tss.ists[4],to->tss.ists[5],to->tss.ists[6]);
    asm volatile("mov %%fs,%0\r\n"
ffff8000008066fd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806701:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000806705:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000806709:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080670d:	8c a0 dc 02 00 00    	mov    WORD PTR [rax+0x2dc],fs
ffff800000806713:	8c ae e4 02 00 00    	mov    WORD PTR [rsi+0x2e4],gs
ffff800000806719:	8e a2 dc 02 00 00    	mov    fs,WORD PTR [rdx+0x2dc]
ffff80000080671f:	8e a9 e4 02 00 00    	mov    gs,WORD PTR [rcx+0x2e4]
ffff800000806725:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:834
                 "mov %%gs,%1\r\n"
                 "mov %2,%%fs\r\n"
                 "mov %3,%%gs\r\n"
                 "sti":"=m"(to->regs.fs),"=m"(to->regs.gs):
                 "m"(from->regs.fs),"m"(from->regs.gs));
}
ffff800000806726:	90                   	nop
ffff800000806727:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
ffff80000080672b:	5b                   	pop    rbx
ffff80000080672c:	41 5c                	pop    r12
ffff80000080672e:	41 5f                	pop    r15
ffff800000806730:	5d                   	pop    rbp
ffff800000806731:	c3                   	ret    

ffff800000806732 <set_tss>:
set_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:836

void set_tss(u64 rsp0,u64 rsp1,u64 rsp2,u64 ist0,u64 ist1,u64 ist2,u64 ist3,u64 ist4,u64 ist5,u64 ist6){
ffff800000806732:	f3 0f 1e fa          	endbr64 
ffff800000806736:	55                   	push   rbp
ffff800000806737:	48 89 e5             	mov    rbp,rsp
ffff80000080673a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080673a <set_tss+0x8>
ffff800000806741:	49 bb 16 a8 11 00 00 	movabs r11,0x11a816
ffff800000806748:	00 00 00 
ffff80000080674b:	4c 01 d8             	add    rax,r11
ffff80000080674e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000806752:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000806756:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080675a:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff80000080675e:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
ffff800000806762:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:837
    tss->rsp0=rsp0;
ffff800000806766:	48 ba f8 fd ff ff ff 	movabs rdx,0xfffffffffffffdf8
ffff80000080676d:	ff ff ff 
ffff800000806770:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806774:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806777:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff80000080677b:	48 89 4a 04          	mov    QWORD PTR [rdx+0x4],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:838
    tss->rsp1=rsp1;
ffff80000080677f:	48 ba f8 fd ff ff ff 	movabs rdx,0xfffffffffffffdf8
ffff800000806786:	ff ff ff 
ffff800000806789:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080678d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806790:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000806794:	48 89 4a 0c          	mov    QWORD PTR [rdx+0xc],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:839
    tss->rsp2=rsp2;
ffff800000806798:	48 ba f8 fd ff ff ff 	movabs rdx,0xfffffffffffffdf8
ffff80000080679f:	ff ff ff 
ffff8000008067a2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008067a6:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008067a9:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff8000008067ad:	48 89 4a 14          	mov    QWORD PTR [rdx+0x14],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:840
    tss->ists[0]=ist0;
ffff8000008067b1:	48 ba f8 fd ff ff ff 	movabs rdx,0xfffffffffffffdf8
ffff8000008067b8:	ff ff ff 
ffff8000008067bb:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008067bf:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008067c2:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff8000008067c6:	48 89 4a 24          	mov    QWORD PTR [rdx+0x24],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:841
    tss->ists[1]=ist1;
ffff8000008067ca:	48 ba f8 fd ff ff ff 	movabs rdx,0xfffffffffffffdf8
ffff8000008067d1:	ff ff ff 
ffff8000008067d4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008067d8:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008067db:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff8000008067df:	48 89 4a 2c          	mov    QWORD PTR [rdx+0x2c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:842
    tss->ists[2]=ist2;
ffff8000008067e3:	48 ba f8 fd ff ff ff 	movabs rdx,0xfffffffffffffdf8
ffff8000008067ea:	ff ff ff 
ffff8000008067ed:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008067f1:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008067f4:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff8000008067f8:	48 89 4a 34          	mov    QWORD PTR [rdx+0x34],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:843
    tss->ists[3]=ist3;
ffff8000008067fc:	48 ba f8 fd ff ff ff 	movabs rdx,0xfffffffffffffdf8
ffff800000806803:	ff ff ff 
ffff800000806806:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080680a:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080680d:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
ffff800000806811:	48 89 4a 3c          	mov    QWORD PTR [rdx+0x3c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:844
    tss->ists[4]=ist4;
ffff800000806815:	48 ba f8 fd ff ff ff 	movabs rdx,0xfffffffffffffdf8
ffff80000080681c:	ff ff ff 
ffff80000080681f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806823:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806826:	48 8b 4d 18          	mov    rcx,QWORD PTR [rbp+0x18]
ffff80000080682a:	48 89 4a 44          	mov    QWORD PTR [rdx+0x44],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:845
    tss->ists[5]=ist5;
ffff80000080682e:	48 ba f8 fd ff ff ff 	movabs rdx,0xfffffffffffffdf8
ffff800000806835:	ff ff ff 
ffff800000806838:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080683c:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080683f:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
ffff800000806843:	48 89 4a 4c          	mov    QWORD PTR [rdx+0x4c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:846
    tss->ists[6]=ist6;
ffff800000806847:	48 ba f8 fd ff ff ff 	movabs rdx,0xfffffffffffffdf8
ffff80000080684e:	ff ff ff 
ffff800000806851:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000806855:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806858:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
ffff80000080685c:	48 89 50 54          	mov    QWORD PTR [rax+0x54],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:847
}
ffff800000806860:	90                   	nop
ffff800000806861:	5d                   	pop    rbp
ffff800000806862:	c3                   	ret    

ffff800000806863 <fork_child_ret>:
fork_child_ret():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:849

int fork_child_ret(){
ffff800000806863:	f3 0f 1e fa          	endbr64 
ffff800000806867:	55                   	push   rbp
ffff800000806868:	48 89 e5             	mov    rbp,rsp
ffff80000080686b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080686b <fork_child_ret+0x8>
ffff800000806872:	49 bb e5 a6 11 00 00 	movabs r11,0x11a6e5
ffff800000806879:	00 00 00 
ffff80000080687c:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:850
    return 0;
ffff80000080687f:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:852

}
ffff800000806884:	5d                   	pop    rbp
ffff800000806885:	c3                   	ret    

ffff800000806886 <sys_fork>:
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:854

int sys_fork(void){
ffff800000806886:	f3 0f 1e fa          	endbr64 
ffff80000080688a:	55                   	push   rbp
ffff80000080688b:	48 89 e5             	mov    rbp,rsp
ffff80000080688e:	41 57                	push   r15
ffff800000806890:	53                   	push   rbx
ffff800000806891:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff800000806895:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000806895 <sys_fork+0xf>
ffff80000080689c:	49 bb bb a6 11 00 00 	movabs r11,0x11a6bb
ffff8000008068a3:	00 00 00 
ffff8000008068a6:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:855
    cli();
ffff8000008068a9:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:856
    int pid=req_proc();
ffff8000008068aa:	49 89 df             	mov    r15,rbx
ffff8000008068ad:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008068b2:	48 ba 6d 3f ee ff ff 	movabs rdx,0xffffffffffee3f6d
ffff8000008068b9:	ff ff ff 
ffff8000008068bc:	48 01 da             	add    rdx,rbx
ffff8000008068bf:	ff d2                	call   rdx
ffff8000008068c1:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:857
    int pids=task[pid].pid;
ffff8000008068c4:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff8000008068cb:	ff ff ff 
ffff8000008068ce:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008068d2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008068d5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008068d8:	48 98                	cdqe   
ffff8000008068da:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008068e1:	48 01 d0             	add    rax,rdx
ffff8000008068e4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008068e6:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:858
    if(pid==-1)return -1;
ffff8000008068e9:	83 7d dc ff          	cmp    DWORD PTR [rbp-0x24],0xffffffff
ffff8000008068ed:	75 0a                	jne    ffff8000008068f9 <sys_fork+0x73>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:858 (discriminator 1)
ffff8000008068ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008068f4:	e9 a4 09 00 00       	jmp    ffff80000080729d <sys_fork+0xa17>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:860
    //首先完全复制
    task[pid]=*current;
ffff8000008068f9:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000806900:	ff ff ff 
ffff800000806903:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806907:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080690a:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806911:	ff ff ff 
ffff800000806914:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806918:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080691b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080691e:	48 98                	cdqe   
ffff800000806920:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806927:	48 01 d0             	add    rax,rdx
ffff80000080692a:	48 89 c2             	mov    rdx,rax
ffff80000080692d:	48 89 c8             	mov    rax,rcx
ffff800000806930:	b9 58 03 00 00       	mov    ecx,0x358
ffff800000806935:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000806938:	48 89 32             	mov    QWORD PTR [rdx],rsi
ffff80000080693b:	89 ce                	mov    esi,ecx
ffff80000080693d:	48 01 d6             	add    rsi,rdx
ffff800000806940:	48 8d 7e 08          	lea    rdi,[rsi+0x8]
ffff800000806944:	89 ce                	mov    esi,ecx
ffff800000806946:	48 01 c6             	add    rsi,rax
ffff800000806949:	48 83 c6 08          	add    rsi,0x8
ffff80000080694d:	48 8b 76 f0          	mov    rsi,QWORD PTR [rsi-0x10]
ffff800000806951:	48 89 77 f0          	mov    QWORD PTR [rdi-0x10],rsi
ffff800000806955:	48 8d 7a 08          	lea    rdi,[rdx+0x8]
ffff800000806959:	48 83 e7 f8          	and    rdi,0xfffffffffffffff8
ffff80000080695d:	48 29 fa             	sub    rdx,rdi
ffff800000806960:	48 29 d0             	sub    rax,rdx
ffff800000806963:	01 d1                	add    ecx,edx
ffff800000806965:	83 e1 f8             	and    ecx,0xfffffff8
ffff800000806968:	c1 e9 03             	shr    ecx,0x3
ffff80000080696b:	89 ca                	mov    edx,ecx
ffff80000080696d:	89 d2                	mov    edx,edx
ffff80000080696f:	48 89 c6             	mov    rsi,rax
ffff800000806972:	48 89 d1             	mov    rcx,rdx
ffff800000806975:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:861
    task[pid].pid=pids;
ffff800000806978:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff80000080697f:	ff ff ff 
ffff800000806982:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806986:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806989:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080698c:	48 98                	cdqe   
ffff80000080698e:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806995:	48 01 c2             	add    rdx,rax
ffff800000806998:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080699b:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:862
    task[pid].stat=TASK_ZOMBIE;
ffff80000080699d:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff8000008069a4:	ff ff ff 
ffff8000008069a7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008069ab:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008069ae:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008069b1:	48 98                	cdqe   
ffff8000008069b3:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008069ba:	48 01 d0             	add    rax,rdx
ffff8000008069bd:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:869

//    asm volatile("mov %%r10,%0"::"m"(r->rip));
    // r->rip=current->regs.rip;

    // memcpy(&task[pid].tss,tss, sizeof(TSS));
    task[pid].parent_pid=current->pid;
ffff8000008069c4:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff8000008069cb:	ff ff ff 
ffff8000008069ce:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008069d2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008069d5:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff8000008069dc:	ff ff ff 
ffff8000008069df:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008069e3:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008069e6:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008069e9:	48 63 d2             	movsxd rdx,edx
ffff8000008069ec:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008069f3:	48 01 ca             	add    rdx,rcx
ffff8000008069f6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008069f8:	89 82 bc 00 00 00    	mov    DWORD PTR [rdx+0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:871
    //设置父子关系以及初始化子进程的的list节点
    list_init(&task[pid].node);
ffff8000008069fe:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806a05:	ff ff ff 
ffff800000806a08:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a0c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806a0f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806a12:	48 98                	cdqe   
ffff800000806a14:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806a1b:	48 01 d0             	add    rax,rdx
ffff800000806a1e:	48 05 34 03 00 00    	add    rax,0x334
ffff800000806a24:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff800000806a28:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000806a2c:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff800000806a33:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000806a37:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000806a3e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff800000806a3f:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:872
    task[pid].child_procs=NULL;
ffff800000806a40:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806a47:	ff ff ff 
ffff800000806a4a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a4e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806a51:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806a54:	48 98                	cdqe   
ffff800000806a56:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806a5d:	48 01 d0             	add    rax,rdx
ffff800000806a60:	48 c7 80 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],0x0
ffff800000806a67:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:873
    task[pid].node.data=&task[pid];
ffff800000806a6b:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806a72:	ff ff ff 
ffff800000806a75:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a79:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806a7c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806a7f:	48 98                	cdqe   
ffff800000806a81:	48 69 d0 58 03 00 00 	imul   rdx,rax,0x358
ffff800000806a88:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806a8f:	ff ff ff 
ffff800000806a92:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a96:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000806a99:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806a9c:	48 98                	cdqe   
ffff800000806a9e:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806aa5:	48 01 f0             	add    rax,rsi
ffff800000806aa8:	48 01 ca             	add    rdx,rcx
ffff800000806aab:	48 89 90 3c 03 00 00 	mov    QWORD PTR [rax+0x33c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:874
    if(!current->child_procs)
ffff800000806ab2:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000806ab9:	ff ff ff 
ffff800000806abc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806ac0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806ac3:	48 8b 80 4c 03 00 00 	mov    rax,QWORD PTR [rax+0x34c]
ffff800000806aca:	48 85 c0             	test   rax,rax
ffff800000806acd:	75 44                	jne    ffff800000806b13 <sys_fork+0x28d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:875
        current->child_procs=&task[pid].node;
ffff800000806acf:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806ad6:	ff ff ff 
ffff800000806ad9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806add:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806ae0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806ae3:	48 98                	cdqe   
ffff800000806ae5:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806aec:	48 01 c2             	add    rdx,rax
ffff800000806aef:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000806af6:	ff ff ff 
ffff800000806af9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806afd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806b00:	48 81 c2 34 03 00 00 	add    rdx,0x334
ffff800000806b07:	48 89 90 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],rdx
ffff800000806b0e:	e9 fc 00 00 00       	jmp    ffff800000806c0f <sys_fork+0x389>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:877
    else
        list_add(current->child_procs,&task[pid].node);
ffff800000806b13:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806b1a:	ff ff ff 
ffff800000806b1d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b21:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806b24:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806b27:	48 98                	cdqe   
ffff800000806b29:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806b30:	48 01 d0             	add    rax,rdx
ffff800000806b33:	48 8d 90 34 03 00 00 	lea    rdx,[rax+0x334]
ffff800000806b3a:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000806b41:	ff ff ff 
ffff800000806b44:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b48:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806b4b:	48 8b 80 4c 03 00 00 	mov    rax,QWORD PTR [rax+0x34c]
ffff800000806b52:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffff800000806b56:	48 89 55 90          	mov    QWORD PTR [rbp-0x70],rdx
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    struct List* p=entry;
ffff800000806b5a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000806b5e:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
    for(;p->next&&p->next!=p;p=p->next){
ffff800000806b62:	eb 25                	jmp    ffff800000806b89 <sys_fork+0x303>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        if(p->data==new->data)
ffff800000806b64:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000806b68:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000806b6c:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000806b70:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000806b74:	48 39 c2             	cmp    rdx,rax
ffff800000806b77:	0f 84 91 00 00 00    	je     ffff800000806c0e <sys_fork+0x388>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
    for(;p->next&&p->next!=p;p=p->next){
ffff800000806b7d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000806b81:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806b85:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffff800000806b89:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000806b8d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806b91:	48 85 c0             	test   rax,rax
ffff800000806b94:	74 0e                	je     ffff800000806ba4 <sys_fork+0x31e>
ffff800000806b96:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000806b9a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806b9e:	48 39 45 88          	cmp    QWORD PTR [rbp-0x78],rax
ffff800000806ba2:	75 c0                	jne    ffff800000806b64 <sys_fork+0x2de>
ffff800000806ba4:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000806ba8:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffff800000806bac:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000806bb0:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->next = entry->next;
ffff800000806bb7:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000806bbb:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000806bbf:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000806bc6:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    new->prev = entry;
ffff800000806bca:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000806bd1:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff800000806bd5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
    if(new->next)
ffff800000806bd8:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000806bdf:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806be3:	48 85 c0             	test   rax,rax
ffff800000806be6:	74 15                	je     ffff800000806bfd <sys_fork+0x377>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
        new->next->prev = new;
ffff800000806be8:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000806bef:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806bf3:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff800000806bfa:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
    entry->next = new;
ffff800000806bfd:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000806c01:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff800000806c08:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:31
}
ffff800000806c0c:	eb 01                	jmp    ffff800000806c0f <sys_fork+0x389>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
            return;
ffff800000806c0e:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:879

    task[pid].utime=0;
ffff800000806c0f:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806c16:	ff ff ff 
ffff800000806c19:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c1d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806c20:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806c23:	48 98                	cdqe   
ffff800000806c25:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806c2c:	48 01 d0             	add    rax,rdx
ffff800000806c2f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:882

    //复制父进程的内存映射到子进程，然后重新映射并复制子进程的堆栈和数据段
    copy_mmap(current,&task[pid]);
ffff800000806c36:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806c3d:	ff ff ff 
ffff800000806c40:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c44:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806c47:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806c4a:	48 98                	cdqe   
ffff800000806c4c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806c53:	48 01 c2             	add    rdx,rax
ffff800000806c56:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000806c5d:	ff ff ff 
ffff800000806c60:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c64:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806c67:	48 89 d6             	mov    rsi,rdx
ffff800000806c6a:	48 89 c7             	mov    rdi,rax
ffff800000806c6d:	49 89 df             	mov    r15,rbx
ffff800000806c70:	48 b8 f8 66 ee ff ff 	movabs rax,0xffffffffffee66f8
ffff800000806c77:	ff ff ff 
ffff800000806c7a:	48 01 d8             	add    rax,rbx
ffff800000806c7d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:887
    
    //复制完毕，开始更改堆栈
    //栈
    //首先获取物理内存，然后临时映射到一个地方，然后拷贝数据，再解除映射，再映射到目标进程的页表。
    addr_t stk=task[pid].mem_struct.stack_top-PAGE_4K_SIZE;
ffff800000806c7f:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806c86:	ff ff ff 
ffff800000806c89:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c8d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806c90:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806c93:	48 98                	cdqe   
ffff800000806c95:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806c9c:	48 01 d0             	add    rax,rdx
ffff800000806c9f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000806ca3:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000806ca9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:888
    addr_t tmpla=KNL_BASE+0x80000000;
ffff800000806cad:	48 b8 00 00 00 80 00 	movabs rax,0xffff800080000000
ffff800000806cb4:	80 ff ff 
ffff800000806cb7:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:889
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
ffff800000806cbb:	e9 d1 00 00 00       	jmp    ffff800000806d91 <sys_fork+0x50b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:890 (discriminator 2)
        addr_t new_stkpg= pmalloc();
ffff800000806cc0:	49 89 df             	mov    r15,rbx
ffff800000806cc3:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806cc8:	48 ba ed 1e ee ff ff 	movabs rdx,0xffffffffffee1eed
ffff800000806ccf:	ff ff ff 
ffff800000806cd2:	48 01 da             	add    rdx,rbx
ffff800000806cd5:	ff d2                	call   rdx
ffff800000806cd7:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:891 (discriminator 2)
        smmap(new_stkpg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff800000806cdb:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000806ce2:	ff ff ff 
ffff800000806ce5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806ce9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806cec:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806cf3:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000806cf7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000806cfb:	48 89 d1             	mov    rcx,rdx
ffff800000806cfe:	ba 03 00 00 00       	mov    edx,0x3
ffff800000806d03:	48 89 c7             	mov    rdi,rax
ffff800000806d06:	49 89 df             	mov    r15,rbx
ffff800000806d09:	48 b8 77 0e ee ff ff 	movabs rax,0xffffffffffee0e77
ffff800000806d10:	ff ff ff 
ffff800000806d13:	48 01 d8             	add    rax,rbx
ffff800000806d16:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:892 (discriminator 2)
        memcpy(tmpla,stk,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000806d18:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff800000806d1c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806d20:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000806d25:	48 89 ce             	mov    rsi,rcx
ffff800000806d28:	48 89 c7             	mov    rdi,rax
ffff800000806d2b:	49 89 df             	mov    r15,rbx
ffff800000806d2e:	48 b8 53 21 ef ff ff 	movabs rax,0xffffffffffef2153
ffff800000806d35:	ff ff ff 
ffff800000806d38:	48 01 d8             	add    rax,rbx
ffff800000806d3b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:895 (discriminator 2)
        
        //把新的页面映射到进程页表里
        smmap(new_stkpg,stk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000806d3d:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806d44:	ff ff ff 
ffff800000806d47:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806d4b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806d4e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806d51:	48 98                	cdqe   
ffff800000806d53:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806d5a:	48 01 d0             	add    rax,rdx
ffff800000806d5d:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806d64:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000806d68:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000806d6c:	48 89 d1             	mov    rcx,rdx
ffff800000806d6f:	ba 07 00 00 00       	mov    edx,0x7
ffff800000806d74:	48 89 c7             	mov    rdi,rax
ffff800000806d77:	49 89 df             	mov    r15,rbx
ffff800000806d7a:	48 b8 77 0e ee ff ff 	movabs rax,0xffffffffffee0e77
ffff800000806d81:	ff ff ff 
ffff800000806d84:	48 01 d8             	add    rax,rbx
ffff800000806d87:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:889 (discriminator 2)
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
ffff800000806d89:	48 81 6d e8 00 10 00 	sub    QWORD PTR [rbp-0x18],0x1000
ffff800000806d90:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:889 (discriminator 1)
ffff800000806d91:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806d98:	ff ff ff 
ffff800000806d9b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806d9f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806da2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806da5:	48 98                	cdqe   
ffff800000806da7:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806dae:	48 01 d0             	add    rax,rdx
ffff800000806db1:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000806db5:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff800000806db9:	0f 83 01 ff ff ff    	jae    ffff800000806cc0 <sys_fork+0x43a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:897
    }
    if(task[pid].mem_struct.stack_top<=task[pid].mem_struct.stack_bottom){
ffff800000806dbf:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806dc6:	ff ff ff 
ffff800000806dc9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806dcd:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806dd0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806dd3:	48 98                	cdqe   
ffff800000806dd5:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806ddc:	48 01 d0             	add    rax,rdx
ffff800000806ddf:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff800000806de3:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806dea:	ff ff ff 
ffff800000806ded:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806df1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806df4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806df7:	48 98                	cdqe   
ffff800000806df9:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806e00:	48 01 c8             	add    rax,rcx
ffff800000806e03:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000806e07:	48 39 c2             	cmp    rdx,rax
ffff800000806e0a:	0f 87 bd 00 00 00    	ja     ffff800000806ecd <sys_fork+0x647>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:900
        //父进程没有栈空间（一般是不可能的，这个几乎就是为了内核进程fork而写）
        //开辟一页空栈。
        addr_t new_stkpg= (addr_t) pmalloc();
ffff800000806e10:	49 89 df             	mov    r15,rbx
ffff800000806e13:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806e18:	48 ba ed 1e ee ff ff 	movabs rdx,0xffffffffffee1eed
ffff800000806e1f:	ff ff ff 
ffff800000806e22:	48 01 da             	add    rdx,rbx
ffff800000806e25:	ff d2                	call   rdx
ffff800000806e27:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:901
        stk=task[pid].mem_struct.stack_top-PAGE_4K_SIZE;
ffff800000806e2b:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806e32:	ff ff ff 
ffff800000806e35:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806e39:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806e3c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806e3f:	48 98                	cdqe   
ffff800000806e41:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806e48:	48 01 d0             	add    rax,rdx
ffff800000806e4b:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000806e4f:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000806e55:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:903
        //把新的页面映射到进程页表里
        smmap(new_stkpg,stk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000806e59:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806e60:	ff ff ff 
ffff800000806e63:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806e67:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806e6a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806e6d:	48 98                	cdqe   
ffff800000806e6f:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806e76:	48 01 d0             	add    rax,rdx
ffff800000806e79:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806e80:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000806e84:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000806e88:	48 89 d1             	mov    rcx,rdx
ffff800000806e8b:	ba 07 00 00 00       	mov    edx,0x7
ffff800000806e90:	48 89 c7             	mov    rdi,rax
ffff800000806e93:	49 89 df             	mov    r15,rbx
ffff800000806e96:	48 b8 77 0e ee ff ff 	movabs rax,0xffffffffffee0e77
ffff800000806e9d:	ff ff ff 
ffff800000806ea0:	48 01 d8             	add    rax,rbx
ffff800000806ea3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:905
        //给新进程分配一页栈
        task[pid].mem_struct.stack_bottom=stk;
ffff800000806ea5:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806eac:	ff ff ff 
ffff800000806eaf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806eb3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806eb6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806eb9:	48 98                	cdqe   
ffff800000806ebb:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806ec2:	48 01 c2             	add    rdx,rax
ffff800000806ec5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806ec9:	48 89 42 38          	mov    QWORD PTR [rdx+0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:911
        //给这页新的栈填上恢复上下文需要的内容
        
    }
    //中断使用的栈空间
    //ist一页就够
    addr_t new_stkpg= kmalloc();
ffff800000806ecd:	49 89 df             	mov    r15,rbx
ffff800000806ed0:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806ed5:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff800000806edc:	ff ff ff 
ffff800000806edf:	48 01 da             	add    rdx,rbx
ffff800000806ee2:	ff d2                	call   rdx
ffff800000806ee4:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:912
    memcpy(new_stkpg,current->tss.ists[0]-PAGE_4K_SIZE,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000806ee8:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000806eef:	ff ff ff 
ffff800000806ef2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806ef6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806ef9:	48 8b 80 1c 02 00 00 	mov    rax,QWORD PTR [rax+0x21c]
ffff800000806f00:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000806f06:	48 89 c1             	mov    rcx,rax
ffff800000806f09:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000806f0d:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000806f12:	48 89 ce             	mov    rsi,rcx
ffff800000806f15:	48 89 c7             	mov    rdi,rax
ffff800000806f18:	49 89 df             	mov    r15,rbx
ffff800000806f1b:	48 b8 53 21 ef ff ff 	movabs rax,0xffffffffffef2153
ffff800000806f22:	ff ff ff 
ffff800000806f25:	48 01 d8             	add    rax,rbx
ffff800000806f28:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:913
    stack_store_regs* ctx_dup=new_stkpg+PAGE_4K_SIZE-sizeof(stack_store_regs);//拷贝的上下文
ffff800000806f2a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000806f2e:	48 05 58 0f 00 00    	add    rax,0xf58
ffff800000806f34:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:914
    ctx_dup->rax=0;//这样进程切换到子进程的done标签，从时钟中断返回弹出堆栈的时候rax弹出来的就是0，成为返回值。
ffff800000806f38:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000806f3c:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
ffff800000806f43:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:915
    task[pid].regs.rip=clock_ret;
ffff800000806f44:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806f4b:	ff ff ff 
ffff800000806f4e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806f52:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806f55:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806f58:	48 98                	cdqe   
ffff800000806f5a:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806f61:	48 01 d0             	add    rax,rdx
ffff800000806f64:	48 ba c0 ff ff ff ff 	movabs rdx,0xffffffffffffffc0
ffff800000806f6b:	ff ff ff 
ffff800000806f6e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000806f72:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:916
    task[pid].regs.rsp=ctx_dup;
ffff800000806f79:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806f80:	ff ff ff 
ffff800000806f83:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806f87:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806f8a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806f8d:	48 98                	cdqe   
ffff800000806f8f:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806f96:	48 01 c2             	add    rdx,rax
ffff800000806f99:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000806f9d:	48 89 82 9c 02 00 00 	mov    QWORD PTR [rdx+0x29c],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:917
    task[pid].tss.ists[0]=new_stkpg+PAGE_4K_SIZE;
ffff800000806fa4:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806fab:	ff ff ff 
ffff800000806fae:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806fb2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806fb5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806fb8:	48 98                	cdqe   
ffff800000806fba:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806fc1:	48 01 d0             	add    rax,rdx
ffff800000806fc4:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806fc8:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806fcf:	48 89 90 1c 02 00 00 	mov    QWORD PTR [rax+0x21c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:918
    task[pid].tss.ists[1]=new_stkpg+PAGE_4K_SIZE;
ffff800000806fd6:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000806fdd:	ff ff ff 
ffff800000806fe0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806fe4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806fe7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806fea:	48 98                	cdqe   
ffff800000806fec:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806ff3:	48 01 d0             	add    rax,rdx
ffff800000806ff6:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806ffa:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000807001:	48 89 90 24 02 00 00 	mov    QWORD PTR [rax+0x224],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:919
    task[pid].tss.ists[2]=new_stkpg+PAGE_4K_SIZE;
ffff800000807008:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff80000080700f:	ff ff ff 
ffff800000807012:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807016:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807019:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080701c:	48 98                	cdqe   
ffff80000080701e:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807025:	48 01 d0             	add    rax,rdx
ffff800000807028:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080702c:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000807033:	48 89 90 2c 02 00 00 	mov    QWORD PTR [rax+0x22c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:920
    task[pid].tss.ists[3]=new_stkpg+PAGE_4K_SIZE;
ffff80000080703a:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000807041:	ff ff ff 
ffff800000807044:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807048:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080704b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080704e:	48 98                	cdqe   
ffff800000807050:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807057:	48 01 d0             	add    rax,rdx
ffff80000080705a:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080705e:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000807065:	48 89 90 34 02 00 00 	mov    QWORD PTR [rax+0x234],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:921
    task[pid].tss.ists[4]=new_stkpg+PAGE_4K_SIZE;
ffff80000080706c:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000807073:	ff ff ff 
ffff800000807076:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080707a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080707d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807080:	48 98                	cdqe   
ffff800000807082:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807089:	48 01 d0             	add    rax,rdx
ffff80000080708c:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000807090:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000807097:	48 89 90 3c 02 00 00 	mov    QWORD PTR [rax+0x23c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:922
    task[pid].tss.ists[5]=new_stkpg+PAGE_4K_SIZE;
ffff80000080709e:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff8000008070a5:	ff ff ff 
ffff8000008070a8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008070ac:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008070af:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008070b2:	48 98                	cdqe   
ffff8000008070b4:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008070bb:	48 01 d0             	add    rax,rdx
ffff8000008070be:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008070c2:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff8000008070c9:	48 89 90 44 02 00 00 	mov    QWORD PTR [rax+0x244],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:923
    task[pid].tss.ists[6]=new_stkpg+PAGE_4K_SIZE;
ffff8000008070d0:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff8000008070d7:	ff ff ff 
ffff8000008070da:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008070de:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008070e1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008070e4:	48 98                	cdqe   
ffff8000008070e6:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008070ed:	48 01 d0             	add    rax,rdx
ffff8000008070f0:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008070f4:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff8000008070fb:	48 89 90 4c 02 00 00 	mov    QWORD PTR [rax+0x24c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:926

    //堆
    addr_t hp=task[pid].mem_struct.heap_top-PAGE_4K_SIZE;
ffff800000807102:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000807109:	ff ff ff 
ffff80000080710c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807110:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807113:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807116:	48 98                	cdqe   
ffff800000807118:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080711f:	48 01 d0             	add    rax,rdx
ffff800000807122:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000807126:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff80000080712c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:927
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
ffff800000807130:	e9 d1 00 00 00       	jmp    ffff800000807206 <sys_fork+0x980>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:928 (discriminator 2)
        addr_t new_hppg= pmalloc();
ffff800000807135:	49 89 df             	mov    r15,rbx
ffff800000807138:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080713d:	48 ba ed 1e ee ff ff 	movabs rdx,0xffffffffffee1eed
ffff800000807144:	ff ff ff 
ffff800000807147:	48 01 da             	add    rdx,rbx
ffff80000080714a:	ff d2                	call   rdx
ffff80000080714c:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:929 (discriminator 2)
        smmap(new_hppg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff800000807150:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000807157:	ff ff ff 
ffff80000080715a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080715e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807161:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000807168:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff80000080716c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000807170:	48 89 d1             	mov    rcx,rdx
ffff800000807173:	ba 03 00 00 00       	mov    edx,0x3
ffff800000807178:	48 89 c7             	mov    rdi,rax
ffff80000080717b:	49 89 df             	mov    r15,rbx
ffff80000080717e:	48 b8 77 0e ee ff ff 	movabs rax,0xffffffffffee0e77
ffff800000807185:	ff ff ff 
ffff800000807188:	48 01 d8             	add    rax,rbx
ffff80000080718b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:930 (discriminator 2)
        memcpy(tmpla,hp,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff80000080718d:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff800000807191:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000807195:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080719a:	48 89 ce             	mov    rsi,rcx
ffff80000080719d:	48 89 c7             	mov    rdi,rax
ffff8000008071a0:	49 89 df             	mov    r15,rbx
ffff8000008071a3:	48 b8 53 21 ef ff ff 	movabs rax,0xffffffffffef2153
ffff8000008071aa:	ff ff ff 
ffff8000008071ad:	48 01 d8             	add    rax,rbx
ffff8000008071b0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:932 (discriminator 2)
        //把新的页面映射到进程页表里
        smmap(new_hppg,hp,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff8000008071b2:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff8000008071b9:	ff ff ff 
ffff8000008071bc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008071c0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008071c3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008071c6:	48 98                	cdqe   
ffff8000008071c8:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008071cf:	48 01 d0             	add    rax,rdx
ffff8000008071d2:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff8000008071d9:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff8000008071dd:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008071e1:	48 89 d1             	mov    rcx,rdx
ffff8000008071e4:	ba 07 00 00 00       	mov    edx,0x7
ffff8000008071e9:	48 89 c7             	mov    rdi,rax
ffff8000008071ec:	49 89 df             	mov    r15,rbx
ffff8000008071ef:	48 b8 77 0e ee ff ff 	movabs rax,0xffffffffffee0e77
ffff8000008071f6:	ff ff ff 
ffff8000008071f9:	48 01 d8             	add    rax,rbx
ffff8000008071fc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:927 (discriminator 2)
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
ffff8000008071fe:	48 81 6d e0 00 10 00 	sub    QWORD PTR [rbp-0x20],0x1000
ffff800000807205:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:927 (discriminator 1)
ffff800000807206:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff80000080720d:	ff ff ff 
ffff800000807210:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807214:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807217:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080721a:	48 98                	cdqe   
ffff80000080721c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807223:	48 01 d0             	add    rax,rdx
ffff800000807226:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080722a:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff80000080722e:	0f 83 01 ff ff ff    	jae    ffff800000807135 <sys_fork+0x8af>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:934
    }
    smmap(0,tmpla,0,current->pml4);//解除映射
ffff800000807234:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff80000080723b:	ff ff ff 
ffff80000080723e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807242:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807245:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff80000080724c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000807250:	48 89 d1             	mov    rcx,rdx
ffff800000807253:	ba 00 00 00 00       	mov    edx,0x0
ffff800000807258:	48 89 c6             	mov    rsi,rax
ffff80000080725b:	bf 00 00 00 00       	mov    edi,0x0
ffff800000807260:	49 89 df             	mov    r15,rbx
ffff800000807263:	48 b8 77 0e ee ff ff 	movabs rax,0xffffffffffee0e77
ffff80000080726a:	ff ff ff 
ffff80000080726d:	48 01 d8             	add    rax,rbx
ffff800000807270:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:935
    task[pid].stat=TASK_READY;
ffff800000807272:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000807279:	ff ff ff 
ffff80000080727c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807280:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807283:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807286:	48 98                	cdqe   
ffff800000807288:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080728f:	48 01 d0             	add    rax,rdx
ffff800000807292:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:938
    

    sti();
ffff800000807299:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:941
    //如果父进程没有堆，不开辟。留给load_xx函数。
    //父进程运行到这里
    return pid;
ffff80000080729a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:942
}
ffff80000080729d:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff8000008072a1:	5b                   	pop    rbx
ffff8000008072a2:	41 5f                	pop    r15
ffff8000008072a4:	5d                   	pop    rbp
ffff8000008072a5:	c3                   	ret    

ffff8000008072a6 <release_mmap>:
release_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:944
//释放进程页表映射的内存，内核空间除外。
void release_mmap(struct process* p){
ffff8000008072a6:	f3 0f 1e fa          	endbr64 
ffff8000008072aa:	55                   	push   rbp
ffff8000008072ab:	48 89 e5             	mov    rbp,rsp
ffff8000008072ae:	41 57                	push   r15
ffff8000008072b0:	53                   	push   rbx
ffff8000008072b1:	48 83 ec 50          	sub    rsp,0x50
ffff8000008072b5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008072b5 <release_mmap+0xf>
ffff8000008072bc:	49 bb 9b 9c 11 00 00 	movabs r11,0x119c9b
ffff8000008072c3:	00 00 00 
ffff8000008072c6:	4c 01 db             	add    rbx,r11
ffff8000008072c9:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:945
    page_item * pml4p=p->pml4;
ffff8000008072cd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008072d1:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff8000008072d8:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:947
    //复制pdpt
    page_item *pml4e= pml4p;
ffff8000008072dc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008072e0:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:948
    for(int i=0;i<256;i++)//高地址不释放（内核空间）
ffff8000008072e4:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008072eb:	e9 40 03 00 00       	jmp    ffff800000807630 <release_mmap+0x38a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:950
    {
        if(pml4e[i]&PAGE_PRESENT){
ffff8000008072f0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008072f3:	48 98                	cdqe   
ffff8000008072f5:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008072fc:	00 
ffff8000008072fd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000807301:	48 01 d0             	add    rax,rdx
ffff800000807304:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807307:	83 e0 01             	and    eax,0x1
ffff80000080730a:	48 85 c0             	test   rax,rax
ffff80000080730d:	0f 84 19 03 00 00    	je     ffff80000080762c <release_mmap+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:951
            page_item *pdpte=pml4e[i]&PAGE_4K_MASK|KNL_BASE;
ffff800000807313:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807316:	48 98                	cdqe   
ffff800000807318:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080731f:	00 
ffff800000807320:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000807324:	48 01 d0             	add    rax,rdx
ffff800000807327:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080732a:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000807331:	7f 00 00 
ffff800000807334:	48 21 c2             	and    rdx,rax
ffff800000807337:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff80000080733e:	80 ff ff 
ffff800000807341:	48 09 d0             	or     rax,rdx
ffff800000807344:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:952
            for(int j=0;j<512;j++)
ffff800000807348:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080734f:	e9 85 02 00 00       	jmp    ffff8000008075d9 <release_mmap+0x333>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:954
            {
                if(pdpte[j]&PAGE_PRESENT&&!(pdpte[j]&PDPTE_1GB)){
ffff800000807354:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807357:	48 98                	cdqe   
ffff800000807359:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807360:	00 
ffff800000807361:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000807365:	48 01 d0             	add    rax,rdx
ffff800000807368:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080736b:	83 e0 01             	and    eax,0x1
ffff80000080736e:	48 85 c0             	test   rax,rax
ffff800000807371:	0f 84 5e 02 00 00    	je     ffff8000008075d5 <release_mmap+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:954 (discriminator 1)
ffff800000807377:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080737a:	48 98                	cdqe   
ffff80000080737c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807383:	00 
ffff800000807384:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000807388:	48 01 d0             	add    rax,rdx
ffff80000080738b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080738e:	25 80 00 00 00       	and    eax,0x80
ffff800000807393:	48 85 c0             	test   rax,rax
ffff800000807396:	0f 85 39 02 00 00    	jne    ffff8000008075d5 <release_mmap+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:955
                    page_item *pde=pdpte[j]&PAGE_4K_MASK|KNL_BASE;
ffff80000080739c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080739f:	48 98                	cdqe   
ffff8000008073a1:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008073a8:	00 
ffff8000008073a9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008073ad:	48 01 d0             	add    rax,rdx
ffff8000008073b0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008073b3:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff8000008073ba:	7f 00 00 
ffff8000008073bd:	48 21 c2             	and    rdx,rax
ffff8000008073c0:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff8000008073c7:	80 ff ff 
ffff8000008073ca:	48 09 d0             	or     rax,rdx
ffff8000008073cd:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:956
                    for(int k=0;k<512;k++)
ffff8000008073d1:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff8000008073d8:	e9 a5 01 00 00       	jmp    ffff800000807582 <release_mmap+0x2dc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:958
                    {
                        if(pde[k]&PAGE_PRESENT&&!(pde[k] & PDE_2MB)){
ffff8000008073dd:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008073e0:	48 98                	cdqe   
ffff8000008073e2:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008073e9:	00 
ffff8000008073ea:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008073ee:	48 01 d0             	add    rax,rdx
ffff8000008073f1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008073f4:	83 e0 01             	and    eax,0x1
ffff8000008073f7:	48 85 c0             	test   rax,rax
ffff8000008073fa:	0f 84 09 01 00 00    	je     ffff800000807509 <release_mmap+0x263>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:958 (discriminator 1)
ffff800000807400:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807403:	48 98                	cdqe   
ffff800000807405:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080740c:	00 
ffff80000080740d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807411:	48 01 d0             	add    rax,rdx
ffff800000807414:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807417:	25 80 00 00 00       	and    eax,0x80
ffff80000080741c:	48 85 c0             	test   rax,rax
ffff80000080741f:	0f 85 e4 00 00 00    	jne    ffff800000807509 <release_mmap+0x263>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:959
                            page_item *pte=pde[k]&PAGE_4K_MASK|KNL_BASE;
ffff800000807425:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807428:	48 98                	cdqe   
ffff80000080742a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807431:	00 
ffff800000807432:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807436:	48 01 d0             	add    rax,rdx
ffff800000807439:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080743c:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000807443:	7f 00 00 
ffff800000807446:	48 21 c2             	and    rdx,rax
ffff800000807449:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000807450:	80 ff ff 
ffff800000807453:	48 09 d0             	or     rax,rdx
ffff800000807456:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:960
                            for(int l=0;l<512;l++){
ffff80000080745a:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000807461:	eb 55                	jmp    ffff8000008074b8 <release_mmap+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:961
                                if(pte[l]&PAGE_PRESENT){
ffff800000807463:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000807466:	48 98                	cdqe   
ffff800000807468:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080746f:	00 
ffff800000807470:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807474:	48 01 d0             	add    rax,rdx
ffff800000807477:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080747a:	83 e0 01             	and    eax,0x1
ffff80000080747d:	48 85 c0             	test   rax,rax
ffff800000807480:	74 32                	je     ffff8000008074b4 <release_mmap+0x20e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:963
                                    //释放申请的物理内存
                                    free_page(pte[l]&PAGE_4K_MASK);
ffff800000807482:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000807485:	48 98                	cdqe   
ffff800000807487:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080748e:	00 
ffff80000080748f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807493:	48 01 d0             	add    rax,rdx
ffff800000807496:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807499:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff80000080749f:	48 89 c7             	mov    rdi,rax
ffff8000008074a2:	49 89 df             	mov    r15,rbx
ffff8000008074a5:	48 b8 4e 1f ee ff ff 	movabs rax,0xffffffffffee1f4e
ffff8000008074ac:	ff ff ff 
ffff8000008074af:	48 01 d8             	add    rax,rbx
ffff8000008074b2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:960 (discriminator 2)
                            for(int l=0;l<512;l++){
ffff8000008074b4:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:960 (discriminator 1)
ffff8000008074b8:	81 7d e0 ff 01 00 00 	cmp    DWORD PTR [rbp-0x20],0x1ff
ffff8000008074bf:	7e a2                	jle    ffff800000807463 <release_mmap+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:967
                                }
                            }
                            //里面的项释放完了，这一项指向的vmalloc内存可以释放了
                            kmfree(pde[k] & PAGE_4K_MASK|KNL_BASE);
ffff8000008074c1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008074c4:	48 98                	cdqe   
ffff8000008074c6:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008074cd:	00 
ffff8000008074ce:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008074d2:	48 01 d0             	add    rax,rdx
ffff8000008074d5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008074d8:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff8000008074df:	7f 00 00 
ffff8000008074e2:	48 21 c2             	and    rdx,rax
ffff8000008074e5:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff8000008074ec:	80 ff ff 
ffff8000008074ef:	48 09 d0             	or     rax,rdx
ffff8000008074f2:	48 89 c7             	mov    rdi,rax
ffff8000008074f5:	49 89 df             	mov    r15,rbx
ffff8000008074f8:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff8000008074ff:	ff ff ff 
ffff800000807502:	48 01 d8             	add    rax,rbx
ffff800000807505:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:958
                        if(pde[k]&PAGE_PRESENT&&!(pde[k] & PDE_2MB)){
ffff800000807507:	eb 75                	jmp    ffff80000080757e <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:968
                        }else if((pde[k]&PAGE_PRESENT)&&(pde[k] & PDE_2MB)){
ffff800000807509:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080750c:	48 98                	cdqe   
ffff80000080750e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807515:	00 
ffff800000807516:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080751a:	48 01 d0             	add    rax,rdx
ffff80000080751d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807520:	83 e0 01             	and    eax,0x1
ffff800000807523:	48 85 c0             	test   rax,rax
ffff800000807526:	74 56                	je     ffff80000080757e <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:968 (discriminator 1)
ffff800000807528:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080752b:	48 98                	cdqe   
ffff80000080752d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807534:	00 
ffff800000807535:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807539:	48 01 d0             	add    rax,rdx
ffff80000080753c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080753f:	25 80 00 00 00       	and    eax,0x80
ffff800000807544:	48 85 c0             	test   rax,rax
ffff800000807547:	74 35                	je     ffff80000080757e <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:970
                            //释放2MB页
                            free_pages_at(pde[k]&PAGE_4K_MASK,512);
ffff800000807549:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080754c:	48 98                	cdqe   
ffff80000080754e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807555:	00 
ffff800000807556:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080755a:	48 01 d0             	add    rax,rdx
ffff80000080755d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807560:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000807565:	be 00 02 00 00       	mov    esi,0x200
ffff80000080756a:	89 c7                	mov    edi,eax
ffff80000080756c:	49 89 df             	mov    r15,rbx
ffff80000080756f:	48 b8 00 20 ee ff ff 	movabs rax,0xffffffffffee2000
ffff800000807576:	ff ff ff 
ffff800000807579:	48 01 d8             	add    rax,rbx
ffff80000080757c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:956 (discriminator 2)
                    for(int k=0;k<512;k++)
ffff80000080757e:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:956 (discriminator 1)
ffff800000807582:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
ffff800000807589:	0f 8e 4e fe ff ff    	jle    ffff8000008073dd <release_mmap+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:974
                        }
                    }
                    //这一页pde的内容释放完了，这一项指向的vmalloc可以释放了
                    kmfree(pdpte[j] & PAGE_4K_MASK|KNL_BASE);
ffff80000080758f:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807592:	48 98                	cdqe   
ffff800000807594:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080759b:	00 
ffff80000080759c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008075a0:	48 01 d0             	add    rax,rdx
ffff8000008075a3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008075a6:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff8000008075ad:	7f 00 00 
ffff8000008075b0:	48 21 c2             	and    rdx,rax
ffff8000008075b3:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff8000008075ba:	80 ff ff 
ffff8000008075bd:	48 09 d0             	or     rax,rdx
ffff8000008075c0:	48 89 c7             	mov    rdi,rax
ffff8000008075c3:	49 89 df             	mov    r15,rbx
ffff8000008075c6:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff8000008075cd:	ff ff ff 
ffff8000008075d0:	48 01 d8             	add    rax,rbx
ffff8000008075d3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:952 (discriminator 2)
            for(int j=0;j<512;j++)
ffff8000008075d5:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:952 (discriminator 1)
ffff8000008075d9:	81 7d e8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x18],0x1ff
ffff8000008075e0:	0f 8e 6e fd ff ff    	jle    ffff800000807354 <release_mmap+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:979
                }//1GB先不写，目前还没有初始化之后动态申请1GB页的

            }
            //这一页pdpte的内容释放完了，这一项指向的vmalloc可以释放了
            kmfree(pml4e[i] & PAGE_4K_MASK|KNL_BASE);
ffff8000008075e6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008075e9:	48 98                	cdqe   
ffff8000008075eb:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008075f2:	00 
ffff8000008075f3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008075f7:	48 01 d0             	add    rax,rdx
ffff8000008075fa:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008075fd:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000807604:	7f 00 00 
ffff800000807607:	48 21 c2             	and    rdx,rax
ffff80000080760a:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000807611:	80 ff ff 
ffff800000807614:	48 09 d0             	or     rax,rdx
ffff800000807617:	48 89 c7             	mov    rdi,rax
ffff80000080761a:	49 89 df             	mov    r15,rbx
ffff80000080761d:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff800000807624:	ff ff ff 
ffff800000807627:	48 01 d8             	add    rax,rbx
ffff80000080762a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:948 (discriminator 2)
    for(int i=0;i<256;i++)//高地址不释放（内核空间）
ffff80000080762c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:948 (discriminator 1)
ffff800000807630:	81 7d ec ff 00 00 00 	cmp    DWORD PTR [rbp-0x14],0xff
ffff800000807637:	0f 8e b3 fc ff ff    	jle    ffff8000008072f0 <release_mmap+0x4a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:982
        }
    }
}
ffff80000080763d:	90                   	nop
ffff80000080763e:	90                   	nop
ffff80000080763f:	48 83 c4 50          	add    rsp,0x50
ffff800000807643:	5b                   	pop    rbx
ffff800000807644:	41 5f                	pop    r15
ffff800000807646:	5d                   	pop    rbp
ffff800000807647:	c3                   	ret    

ffff800000807648 <copy_mmap>:
copy_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:983
void copy_mmap(struct process* from, struct process *to){
ffff800000807648:	f3 0f 1e fa          	endbr64 
ffff80000080764c:	55                   	push   rbp
ffff80000080764d:	48 89 e5             	mov    rbp,rsp
ffff800000807650:	41 57                	push   r15
ffff800000807652:	53                   	push   rbx
ffff800000807653:	48 83 ec 70          	sub    rsp,0x70
ffff800000807657:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807657 <copy_mmap+0xf>
ffff80000080765e:	49 bb f9 98 11 00 00 	movabs r11,0x1198f9
ffff800000807665:	00 00 00 
ffff800000807668:	4c 01 db             	add    rbx,r11
ffff80000080766b:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff80000080766f:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:984
    page_item * pml4p= kmalloc();
ffff800000807673:	49 89 df             	mov    r15,rbx
ffff800000807676:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080767b:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff800000807682:	ff ff ff 
ffff800000807685:	48 01 da             	add    rdx,rbx
ffff800000807688:	ff d2                	call   rdx
ffff80000080768a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:985
    memcpy(pml4p, (unsigned char *) from->pml4, PAGE_4K_SIZE);//复制pml4
ffff80000080768e:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000807692:	48 8b 88 e0 00 00 00 	mov    rcx,QWORD PTR [rax+0xe0]
ffff800000807699:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080769d:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008076a2:	48 89 ce             	mov    rsi,rcx
ffff8000008076a5:	48 89 c7             	mov    rdi,rax
ffff8000008076a8:	49 89 df             	mov    r15,rbx
ffff8000008076ab:	48 b8 53 21 ef ff ff 	movabs rax,0xffffffffffef2153
ffff8000008076b2:	ff ff ff 
ffff8000008076b5:	48 01 d8             	add    rax,rbx
ffff8000008076b8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:986
    to->regs.cr3=(unsigned long)pml4p&~KNL_BASE;
ffff8000008076ba:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008076be:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff8000008076c5:	7f 00 00 
ffff8000008076c8:	48 21 c2             	and    rdx,rax
ffff8000008076cb:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008076cf:	48 89 90 64 02 00 00 	mov    QWORD PTR [rax+0x264],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:987
    to->pml4=pml4p;
ffff8000008076d6:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008076da:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008076de:	48 89 90 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:990
    //复制pdpt

    page_item *pml4e= pml4p;
ffff8000008076e5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008076e9:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:991
    for(int i=0;i<512;i++)
ffff8000008076ed:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008076f4:	e9 0e 03 00 00       	jmp    ffff800000807a07 <copy_mmap+0x3bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:993
    {
        if((pml4e[i]&PAGE_PRESENT)==0)
ffff8000008076f9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008076fc:	48 98                	cdqe   
ffff8000008076fe:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807705:	00 
ffff800000807706:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080770a:	48 01 d0             	add    rax,rdx
ffff80000080770d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807710:	83 e0 01             	and    eax,0x1
ffff800000807713:	48 85 c0             	test   rax,rax
ffff800000807716:	0f 84 e6 02 00 00    	je     ffff800000807a02 <copy_mmap+0x3ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:995
            continue;
        addr_t old_data=pml4e[i];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff80000080771c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080771f:	48 98                	cdqe   
ffff800000807721:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807728:	00 
ffff800000807729:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080772d:	48 01 d0             	add    rax,rdx
ffff800000807730:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807733:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:996
        addr_t m4=kmalloc();
ffff800000807737:	49 89 df             	mov    r15,rbx
ffff80000080773a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080773f:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff800000807746:	ff ff ff 
ffff800000807749:	48 01 da             	add    rdx,rbx
ffff80000080774c:	ff d2                	call   rdx
ffff80000080774e:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:997
        pml4e[i]= (m4&~KNL_BASE) | (old_data & ~PAGE_4K_MASK);
ffff800000807752:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000807759:	7f 00 00 
ffff80000080775c:	48 23 45 c0          	and    rax,QWORD PTR [rbp-0x40]
ffff800000807760:	48 89 c2             	mov    rdx,rax
ffff800000807763:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000807767:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080776c:	48 89 c1             	mov    rcx,rax
ffff80000080776f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807772:	48 98                	cdqe   
ffff800000807774:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff80000080777b:	00 
ffff80000080777c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000807780:	48 01 f0             	add    rax,rsi
ffff800000807783:	48 09 ca             	or     rdx,rcx
ffff800000807786:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:998
        memcpy((unsigned char *) m4, old_data & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff800000807789:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff800000807790:	7f 00 00 
ffff800000807793:	48 23 45 c8          	and    rax,QWORD PTR [rbp-0x38]
ffff800000807797:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff80000080779e:	80 ff ff 
ffff8000008077a1:	48 09 d0             	or     rax,rdx
ffff8000008077a4:	48 89 c1             	mov    rcx,rax
ffff8000008077a7:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008077ab:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008077b0:	48 89 ce             	mov    rsi,rcx
ffff8000008077b3:	48 89 c7             	mov    rdi,rax
ffff8000008077b6:	49 89 df             	mov    r15,rbx
ffff8000008077b9:	48 b8 53 21 ef ff ff 	movabs rax,0xffffffffffef2153
ffff8000008077c0:	ff ff ff 
ffff8000008077c3:	48 01 d8             	add    rax,rbx
ffff8000008077c6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:999
        page_item *pdpte= (page_item *) m4;
ffff8000008077c8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008077cc:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1000
        for(int j=0;j<512;j++)
ffff8000008077d0:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff8000008077d7:	e9 17 02 00 00       	jmp    ffff8000008079f3 <copy_mmap+0x3ab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1002
        {
            if((pdpte[j]&PAGE_PRESENT)==0||(pdpte[j]&PDPTE_1GB)!=0)
ffff8000008077dc:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008077df:	48 98                	cdqe   
ffff8000008077e1:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008077e8:	00 
ffff8000008077e9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008077ed:	48 01 d0             	add    rax,rdx
ffff8000008077f0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008077f3:	83 e0 01             	and    eax,0x1
ffff8000008077f6:	48 85 c0             	test   rax,rax
ffff8000008077f9:	0f 84 ef 01 00 00    	je     ffff8000008079ee <copy_mmap+0x3a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1002 (discriminator 2)
ffff8000008077ff:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807802:	48 98                	cdqe   
ffff800000807804:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080780b:	00 
ffff80000080780c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807810:	48 01 d0             	add    rax,rdx
ffff800000807813:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807816:	25 80 00 00 00       	and    eax,0x80
ffff80000080781b:	48 85 c0             	test   rax,rax
ffff80000080781e:	0f 85 ca 01 00 00    	jne    ffff8000008079ee <copy_mmap+0x3a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1004
                continue;
            addr_t old_data2=pdpte[j];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff800000807824:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807827:	48 98                	cdqe   
ffff800000807829:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807830:	00 
ffff800000807831:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807835:	48 01 d0             	add    rax,rdx
ffff800000807838:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080783b:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1005
            addr_t m3=kmalloc();
ffff80000080783f:	49 89 df             	mov    r15,rbx
ffff800000807842:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807847:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff80000080784e:	ff ff ff 
ffff800000807851:	48 01 da             	add    rdx,rbx
ffff800000807854:	ff d2                	call   rdx
ffff800000807856:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1006
            pdpte[j]= (m3&~KNL_BASE) | (old_data2 & ~PAGE_4K_MASK);
ffff80000080785a:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000807861:	7f 00 00 
ffff800000807864:	48 23 45 a8          	and    rax,QWORD PTR [rbp-0x58]
ffff800000807868:	48 89 c2             	mov    rdx,rax
ffff80000080786b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080786f:	25 ff 0f 00 00       	and    eax,0xfff
ffff800000807874:	48 89 c1             	mov    rcx,rax
ffff800000807877:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080787a:	48 98                	cdqe   
ffff80000080787c:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000807883:	00 
ffff800000807884:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807888:	48 01 f0             	add    rax,rsi
ffff80000080788b:	48 09 ca             	or     rdx,rcx
ffff80000080788e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1007
            memcpy((unsigned char *) m3, old_data2 & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff800000807891:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff800000807898:	7f 00 00 
ffff80000080789b:	48 23 45 b0          	and    rax,QWORD PTR [rbp-0x50]
ffff80000080789f:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff8000008078a6:	80 ff ff 
ffff8000008078a9:	48 09 d0             	or     rax,rdx
ffff8000008078ac:	48 89 c1             	mov    rcx,rax
ffff8000008078af:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008078b3:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008078b8:	48 89 ce             	mov    rsi,rcx
ffff8000008078bb:	48 89 c7             	mov    rdi,rax
ffff8000008078be:	49 89 df             	mov    r15,rbx
ffff8000008078c1:	48 b8 53 21 ef ff ff 	movabs rax,0xffffffffffef2153
ffff8000008078c8:	ff ff ff 
ffff8000008078cb:	48 01 d8             	add    rax,rbx
ffff8000008078ce:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1008
            page_item *pde= (page_item *) m3;
ffff8000008078d0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008078d4:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1009
            for(int k=0;k<512;k++)
ffff8000008078d8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff8000008078df:	e9 fb 00 00 00       	jmp    ffff8000008079df <copy_mmap+0x397>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1011
            {
                if((pde[k]&PAGE_PRESENT)==0||(pde[k]&PDE_2MB)!=0)
ffff8000008078e4:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008078e7:	48 98                	cdqe   
ffff8000008078e9:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008078f0:	00 
ffff8000008078f1:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008078f5:	48 01 d0             	add    rax,rdx
ffff8000008078f8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008078fb:	83 e0 01             	and    eax,0x1
ffff8000008078fe:	48 85 c0             	test   rax,rax
ffff800000807901:	0f 84 d3 00 00 00    	je     ffff8000008079da <copy_mmap+0x392>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1011 (discriminator 2)
ffff800000807907:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080790a:	48 98                	cdqe   
ffff80000080790c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807913:	00 
ffff800000807914:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000807918:	48 01 d0             	add    rax,rdx
ffff80000080791b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080791e:	25 80 00 00 00       	and    eax,0x80
ffff800000807923:	48 85 c0             	test   rax,rax
ffff800000807926:	0f 85 ae 00 00 00    	jne    ffff8000008079da <copy_mmap+0x392>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1013
                    continue;
                addr_t old_data3=pde[k];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff80000080792c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080792f:	48 98                	cdqe   
ffff800000807931:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807938:	00 
ffff800000807939:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080793d:	48 01 d0             	add    rax,rdx
ffff800000807940:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807943:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1014
                addr_t m2=kmalloc();
ffff800000807947:	49 89 df             	mov    r15,rbx
ffff80000080794a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080794f:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff800000807956:	ff ff ff 
ffff800000807959:	48 01 da             	add    rdx,rbx
ffff80000080795c:	ff d2                	call   rdx
ffff80000080795e:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1015
                pde[k]= (m2&~KNL_BASE) | (old_data3 & ~PAGE_4K_MASK);
ffff800000807962:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000807969:	7f 00 00 
ffff80000080796c:	48 23 45 90          	and    rax,QWORD PTR [rbp-0x70]
ffff800000807970:	48 89 c2             	mov    rdx,rax
ffff800000807973:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000807977:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080797c:	48 89 c1             	mov    rcx,rax
ffff80000080797f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807982:	48 98                	cdqe   
ffff800000807984:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff80000080798b:	00 
ffff80000080798c:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000807990:	48 01 f0             	add    rax,rsi
ffff800000807993:	48 09 ca             	or     rdx,rcx
ffff800000807996:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1016
                memcpy((unsigned char *) m2, old_data3 & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff800000807999:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff8000008079a0:	7f 00 00 
ffff8000008079a3:	48 23 45 98          	and    rax,QWORD PTR [rbp-0x68]
ffff8000008079a7:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff8000008079ae:	80 ff ff 
ffff8000008079b1:	48 09 d0             	or     rax,rdx
ffff8000008079b4:	48 89 c1             	mov    rcx,rax
ffff8000008079b7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008079bb:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008079c0:	48 89 ce             	mov    rsi,rcx
ffff8000008079c3:	48 89 c7             	mov    rdi,rax
ffff8000008079c6:	49 89 df             	mov    r15,rbx
ffff8000008079c9:	48 b8 53 21 ef ff ff 	movabs rax,0xffffffffffef2153
ffff8000008079d0:	ff ff ff 
ffff8000008079d3:	48 01 d8             	add    rax,rbx
ffff8000008079d6:	ff d0                	call   rax
ffff8000008079d8:	eb 01                	jmp    ffff8000008079db <copy_mmap+0x393>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1012
                    continue;
ffff8000008079da:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1009 (discriminator 2)
            for(int k=0;k<512;k++)
ffff8000008079db:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1009 (discriminator 1)
ffff8000008079df:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
ffff8000008079e6:	0f 8e f8 fe ff ff    	jle    ffff8000008078e4 <copy_mmap+0x29c>
ffff8000008079ec:	eb 01                	jmp    ffff8000008079ef <copy_mmap+0x3a7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1003
                continue;
ffff8000008079ee:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1000 (discriminator 2)
        for(int j=0;j<512;j++)
ffff8000008079ef:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1000 (discriminator 1)
ffff8000008079f3:	81 7d e8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x18],0x1ff
ffff8000008079fa:	0f 8e dc fd ff ff    	jle    ffff8000008077dc <copy_mmap+0x194>
ffff800000807a00:	eb 01                	jmp    ffff800000807a03 <copy_mmap+0x3bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:994
            continue;
ffff800000807a02:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:991 (discriminator 2)
    for(int i=0;i<512;i++)
ffff800000807a03:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:991 (discriminator 1)
ffff800000807a07:	81 7d ec ff 01 00 00 	cmp    DWORD PTR [rbp-0x14],0x1ff
ffff800000807a0e:	0f 8e e5 fc ff ff    	jle    ffff8000008076f9 <copy_mmap+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1023
            }

        }

    }
}
ffff800000807a14:	90                   	nop
ffff800000807a15:	90                   	nop
ffff800000807a16:	48 83 c4 70          	add    rsp,0x70
ffff800000807a1a:	5b                   	pop    rbx
ffff800000807a1b:	41 5f                	pop    r15
ffff800000807a1d:	5d                   	pop    rbp
ffff800000807a1e:	c3                   	ret    

ffff800000807a1f <chk_mmap>:
chk_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1025

int chk_mmap(off_t base, size_t mem_size){
ffff800000807a1f:	f3 0f 1e fa          	endbr64 
ffff800000807a23:	55                   	push   rbp
ffff800000807a24:	48 89 e5             	mov    rbp,rsp
ffff800000807a27:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807a27 <chk_mmap+0x8>
ffff800000807a2e:	49 bb 29 95 11 00 00 	movabs r11,0x119529
ffff800000807a35:	00 00 00 
ffff800000807a38:	4c 01 d8             	add    rax,r11
ffff800000807a3b:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000807a3f:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1027
    size_t nr_pte;
    size_t ndx_pml4=0,ndx_pdpt=0,ndx_pd=0,ndx_pt=0;
ffff800000807a43:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff800000807a4a:	00 
ffff800000807a4b:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff800000807a52:	00 
ffff800000807a53:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000807a5a:	00 
ffff800000807a5b:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000807a62:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1028
    page_item *pml4e= current->pml4;
ffff800000807a63:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff800000807a6a:	ff ff ff 
ffff800000807a6d:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807a71:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807a74:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000807a7b:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1029
    nr_pte=  (mem_size-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff800000807a7f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807a83:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff800000807a89:	48 c1 e8 0c          	shr    rax,0xc
ffff800000807a8d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1030
    ndx_pt=  base/PAGE_4K_SIZE;
ffff800000807a91:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000807a95:	48 c1 e8 0c          	shr    rax,0xc
ffff800000807a99:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1031
    ndx_pd=  ndx_pt/512%512;
ffff800000807a9d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000807aa1:	48 c1 e8 09          	shr    rax,0x9
ffff800000807aa5:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000807aaa:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1032
    ndx_pdpt=ndx_pd/512%512;
ffff800000807aae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807ab2:	48 c1 e8 09          	shr    rax,0x9
ffff800000807ab6:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000807abb:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1033
    ndx_pml4=ndx_pdpt/512%512;
ffff800000807abf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807ac3:	48 c1 e8 09          	shr    rax,0x9
ffff800000807ac7:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000807acc:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1034
    while (nr_pte)
ffff800000807ad0:	eb 25                	jmp    ffff800000807af7 <chk_mmap+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1036
    {
        if(ndx_pdpt==512){
ffff800000807ad2:	48 81 7d f8 00 02 00 	cmp    QWORD PTR [rbp-0x8],0x200
ffff800000807ad9:	00 
ffff800000807ada:	75 0d                	jne    ffff800000807ae9 <chk_mmap+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1037
            ndx_pml4++;
ffff800000807adc:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1038
            ndx_pdpt=0;
ffff800000807ae1:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff800000807ae8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1041 (discriminator 1)
        }
        if(pml4e[ndx_pml4]%PAGE_PRESENT==0){
            ndx_pml4++;
ffff800000807ae9:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1042 (discriminator 1)
            ndx_pdpt=0;
ffff800000807aee:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff800000807af5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1043 (discriminator 1)
            continue;
ffff800000807af6:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1034
    while (nr_pte)
ffff800000807af7:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff800000807afc:	75 d4                	jne    ffff800000807ad2 <chk_mmap+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1073
        if(pt[ndx_pt]&PAGE_PRESENT)return 0;
        ndx_pt++;
        nr_pte--;
    }
    
    return 1;
ffff800000807afe:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1074
}
ffff800000807b03:	5d                   	pop    rbp
ffff800000807b04:	c3                   	ret    

ffff800000807b05 <sys_getpgrp>:
sys_getpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1075
pid_t sys_getpgrp(void){
ffff800000807b05:	f3 0f 1e fa          	endbr64 
ffff800000807b09:	55                   	push   rbp
ffff800000807b0a:	48 89 e5             	mov    rbp,rsp
ffff800000807b0d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807b0d <sys_getpgrp+0x8>
ffff800000807b14:	49 bb 43 94 11 00 00 	movabs r11,0x119443
ffff800000807b1b:	00 00 00 
ffff800000807b1e:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1076
    return current->gpid;
ffff800000807b21:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff800000807b28:	ff ff ff 
ffff800000807b2b:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807b2f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807b32:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1077
}
ffff800000807b35:	5d                   	pop    rbp
ffff800000807b36:	c3                   	ret    

ffff800000807b37 <sys_getpgid>:
sys_getpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1079

int sys_getpgid(pid_t pid,gid_t gid){
ffff800000807b37:	f3 0f 1e fa          	endbr64 
ffff800000807b3b:	55                   	push   rbp
ffff800000807b3c:	48 89 e5             	mov    rbp,rsp
ffff800000807b3f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807b3f <sys_getpgid+0x8>
ffff800000807b46:	49 bb 11 94 11 00 00 	movabs r11,0x119411
ffff800000807b4d:	00 00 00 
ffff800000807b50:	4c 01 d8             	add    rax,r11
ffff800000807b53:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000807b56:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1080
    if(pid==0)
ffff800000807b59:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff800000807b5d:	75 16                	jne    ffff800000807b75 <sys_getpgid+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1081
        return current->gpid;
ffff800000807b5f:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff800000807b66:	ff ff ff 
ffff800000807b69:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807b6d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807b70:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000807b73:	eb 67                	jmp    ffff800000807bdc <sys_getpgid+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1082
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807b75:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000807b7c:	eb 53                	jmp    ffff800000807bd1 <sys_getpgid+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1083
        if(task[i].pid==pid)
ffff800000807b7e:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000807b85:	ff ff ff 
ffff800000807b88:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807b8c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807b8f:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807b92:	48 63 d2             	movsxd rdx,edx
ffff800000807b95:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000807b9c:	48 01 ca             	add    rdx,rcx
ffff800000807b9f:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000807ba1:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807ba4:	39 d1                	cmp    ecx,edx
ffff800000807ba6:	75 25                	jne    ffff800000807bcd <sys_getpgid+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1084
            return task[i].gpid;
ffff800000807ba8:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000807baf:	ff ff ff 
ffff800000807bb2:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807bb6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807bb9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000807bbc:	48 98                	cdqe   
ffff800000807bbe:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807bc5:	48 01 d0             	add    rax,rdx
ffff800000807bc8:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000807bcb:	eb 0f                	jmp    ffff800000807bdc <sys_getpgid+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1082 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807bcd:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1082 (discriminator 1)
ffff800000807bd1:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000807bd5:	7e a7                	jle    ffff800000807b7e <sys_getpgid+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1086
    }
    return -1;
ffff800000807bd7:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1087
}
ffff800000807bdc:	5d                   	pop    rbp
ffff800000807bdd:	c3                   	ret    

ffff800000807bde <sys_setpgid>:
sys_setpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1088
int sys_setpgid(pid_t pid,gid_t gid){
ffff800000807bde:	f3 0f 1e fa          	endbr64 
ffff800000807be2:	55                   	push   rbp
ffff800000807be3:	48 89 e5             	mov    rbp,rsp
ffff800000807be6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807be6 <sys_setpgid+0x8>
ffff800000807bed:	49 bb 6a 93 11 00 00 	movabs r11,0x11936a
ffff800000807bf4:	00 00 00 
ffff800000807bf7:	4c 01 d8             	add    rax,r11
ffff800000807bfa:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000807bfd:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1089
    if(pid==0)
ffff800000807c00:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff800000807c04:	75 56                	jne    ffff800000807c5c <sys_setpgid+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1091
    {
        if(current->sid==current->pid)
ffff800000807c06:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff800000807c0d:	ff ff ff 
ffff800000807c10:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807c14:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807c17:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000807c1a:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff800000807c21:	ff ff ff 
ffff800000807c24:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807c28:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807c2b:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807c2d:	39 d1                	cmp    ecx,edx
ffff800000807c2f:	75 0a                	jne    ffff800000807c3b <sys_setpgid+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1092
            return -1;
ffff800000807c31:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000807c36:	e9 e9 00 00 00       	jmp    ffff800000807d24 <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1093
        current->gpid=gid;
ffff800000807c3b:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff800000807c42:	ff ff ff 
ffff800000807c45:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807c49:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807c4c:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807c4f:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1094
        return 0;
ffff800000807c52:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807c57:	e9 c8 00 00 00       	jmp    ffff800000807d24 <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1096
    }
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807c5c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000807c63:	e9 ad 00 00 00       	jmp    ffff800000807d15 <sys_setpgid+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1097
        if(task[i].pid==pid)
ffff800000807c68:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000807c6f:	ff ff ff 
ffff800000807c72:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807c76:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807c79:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807c7c:	48 63 d2             	movsxd rdx,edx
ffff800000807c7f:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000807c86:	48 01 ca             	add    rdx,rcx
ffff800000807c89:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000807c8b:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807c8e:	39 d1                	cmp    ecx,edx
ffff800000807c90:	75 7f                	jne    ffff800000807d11 <sys_setpgid+0x133>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1099
        {
            if(task[i].sid==task[i].pid)
ffff800000807c92:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000807c99:	ff ff ff 
ffff800000807c9c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807ca0:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807ca3:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807ca6:	48 63 d2             	movsxd rdx,edx
ffff800000807ca9:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000807cb0:	48 01 ca             	add    rdx,rcx
ffff800000807cb3:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000807cb6:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000807cbd:	ff ff ff 
ffff800000807cc0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807cc4:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000807cc7:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807cca:	48 63 d2             	movsxd rdx,edx
ffff800000807ccd:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000807cd4:	48 01 f2             	add    rdx,rsi
ffff800000807cd7:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807cd9:	39 d1                	cmp    ecx,edx
ffff800000807cdb:	75 07                	jne    ffff800000807ce4 <sys_setpgid+0x106>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1100
                return -1;
ffff800000807cdd:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000807ce2:	eb 40                	jmp    ffff800000807d24 <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1101
            task[i].gpid=gid;
ffff800000807ce4:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000807ceb:	ff ff ff 
ffff800000807cee:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807cf2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807cf5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000807cf8:	48 98                	cdqe   
ffff800000807cfa:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807d01:	48 01 c2             	add    rdx,rax
ffff800000807d04:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807d07:	89 42 04             	mov    DWORD PTR [rdx+0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1102
            return 0;
ffff800000807d0a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807d0f:	eb 13                	jmp    ffff800000807d24 <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1096 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807d11:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1096 (discriminator 1)
ffff800000807d15:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000807d19:	0f 8e 49 ff ff ff    	jle    ffff800000807c68 <sys_setpgid+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1105
        }
    }
    return -1;
ffff800000807d1f:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1106
}
ffff800000807d24:	5d                   	pop    rbp
ffff800000807d25:	c3                   	ret    

ffff800000807d26 <sys_setsid>:
sys_setsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1108

pid_t sys_setsid(void){
ffff800000807d26:	f3 0f 1e fa          	endbr64 
ffff800000807d2a:	55                   	push   rbp
ffff800000807d2b:	48 89 e5             	mov    rbp,rsp
ffff800000807d2e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807d2e <sys_setsid+0x8>
ffff800000807d35:	49 bb 22 92 11 00 00 	movabs r11,0x119222
ffff800000807d3c:	00 00 00 
ffff800000807d3f:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1109
    current->sid=current->pid;
ffff800000807d42:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff800000807d49:	ff ff ff 
ffff800000807d4c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807d50:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807d53:	48 b9 80 fe ff ff ff 	movabs rcx,0xfffffffffffffe80
ffff800000807d5a:	ff ff ff 
ffff800000807d5d:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000807d61:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807d64:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807d66:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1110
}
ffff800000807d69:	90                   	nop
ffff800000807d6a:	5d                   	pop    rbp
ffff800000807d6b:	c3                   	ret    

ffff800000807d6c <sys_getsid>:
sys_getsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1111
pid_t sys_getsid(pid_t pid){
ffff800000807d6c:	f3 0f 1e fa          	endbr64 
ffff800000807d70:	55                   	push   rbp
ffff800000807d71:	48 89 e5             	mov    rbp,rsp
ffff800000807d74:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807d74 <sys_getsid+0x8>
ffff800000807d7b:	49 bb dc 91 11 00 00 	movabs r11,0x1191dc
ffff800000807d82:	00 00 00 
ffff800000807d85:	4c 01 d8             	add    rax,r11
ffff800000807d88:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1112
    if(pid==0)
ffff800000807d8b:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff800000807d8f:	75 16                	jne    ffff800000807da7 <sys_getsid+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1113
        return current->sid;
ffff800000807d91:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff800000807d98:	ff ff ff 
ffff800000807d9b:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807d9f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807da2:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000807da5:	eb 67                	jmp    ffff800000807e0e <sys_getsid+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1114
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807da7:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000807dae:	eb 53                	jmp    ffff800000807e03 <sys_getsid+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1115
        if(task[i].pid==pid)
ffff800000807db0:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000807db7:	ff ff ff 
ffff800000807dba:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807dbe:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807dc1:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807dc4:	48 63 d2             	movsxd rdx,edx
ffff800000807dc7:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000807dce:	48 01 ca             	add    rdx,rcx
ffff800000807dd1:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000807dd3:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807dd6:	39 d1                	cmp    ecx,edx
ffff800000807dd8:	75 25                	jne    ffff800000807dff <sys_getsid+0x93>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1116
            return task[i].sid;
ffff800000807dda:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000807de1:	ff ff ff 
ffff800000807de4:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807de8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807deb:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000807dee:	48 98                	cdqe   
ffff800000807df0:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807df7:	48 01 d0             	add    rax,rdx
ffff800000807dfa:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000807dfd:	eb 0f                	jmp    ffff800000807e0e <sys_getsid+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1114 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807dff:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1114 (discriminator 1)
ffff800000807e03:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000807e07:	7e a7                	jle    ffff800000807db0 <sys_getsid+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1118
    }
    return -1;
ffff800000807e09:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1119
}
ffff800000807e0e:	5d                   	pop    rbp
ffff800000807e0f:	c3                   	ret    

ffff800000807e10 <sys_tcsetpgrp>:
sys_tcsetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1120
int sys_tcsetpgrp(int fildes,pid_t pgid_id){
ffff800000807e10:	f3 0f 1e fa          	endbr64 
ffff800000807e14:	55                   	push   rbp
ffff800000807e15:	48 89 e5             	mov    rbp,rsp
ffff800000807e18:	41 57                	push   r15
ffff800000807e1a:	53                   	push   rbx
ffff800000807e1b:	48 83 ec 20          	sub    rsp,0x20
ffff800000807e1f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807e1f <sys_tcsetpgrp+0xf>
ffff800000807e26:	49 bb 31 91 11 00 00 	movabs r11,0x119131
ffff800000807e2d:	00 00 00 
ffff800000807e30:	4c 01 db             	add    rbx,r11
ffff800000807e33:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000807e36:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1122
    //当前controlling terminal断联
    sys_ioctl(fildes,TTY_DISCONNECT,0);
ffff800000807e39:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807e3c:	ba 00 00 00 00       	mov    edx,0x0
ffff800000807e41:	be 02 00 00 00       	mov    esi,0x2
ffff800000807e46:	89 c7                	mov    edi,eax
ffff800000807e48:	49 89 df             	mov    r15,rbx
ffff800000807e4b:	48 b8 d9 70 ee ff ff 	movabs rax,0xffffffffffee70d9
ffff800000807e52:	ff ff ff 
ffff800000807e55:	48 01 d8             	add    rax,rbx
ffff800000807e58:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1123
    int sid= sys_getsid(0);//获取session id
ffff800000807e5a:	bf 00 00 00 00       	mov    edi,0x0
ffff800000807e5f:	49 89 df             	mov    r15,rbx
ffff800000807e62:	48 b8 1c 6e ee ff ff 	movabs rax,0xffffffffffee6e1c
ffff800000807e69:	ff ff ff 
ffff800000807e6c:	48 01 d8             	add    rax,rbx
ffff800000807e6f:	ff d0                	call   rax
ffff800000807e71:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1124
    struct process* new_fgl=NULL;
ffff800000807e74:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000807e7b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1125
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807e7c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000807e83:	e9 fb 00 00 00       	jmp    ffff800000807f83 <sys_tcsetpgrp+0x173>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1126
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
ffff800000807e88:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000807e8f:	ff ff ff 
ffff800000807e92:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807e96:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807e99:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807e9c:	48 98                	cdqe   
ffff800000807e9e:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807ea5:	48 01 d0             	add    rax,rdx
ffff800000807ea8:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000807eab:	83 f8 04             	cmp    eax,0x4
ffff800000807eae:	0f 84 ca 00 00 00    	je     ffff800000807f7e <sys_tcsetpgrp+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1126 (discriminator 2)
ffff800000807eb4:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000807ebb:	ff ff ff 
ffff800000807ebe:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807ec2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807ec5:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807ec8:	48 98                	cdqe   
ffff800000807eca:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807ed1:	48 01 d0             	add    rax,rdx
ffff800000807ed4:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000807ed7:	85 c0                	test   eax,eax
ffff800000807ed9:	0f 84 9f 00 00 00    	je     ffff800000807f7e <sys_tcsetpgrp+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1127
        if(task[i].sid==sid){
ffff800000807edf:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000807ee6:	ff ff ff 
ffff800000807ee9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807eed:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807ef0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807ef3:	48 98                	cdqe   
ffff800000807ef5:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807efc:	48 01 d0             	add    rax,rdx
ffff800000807eff:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000807f02:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000807f05:	39 c2                	cmp    edx,eax
ffff800000807f07:	75 76                	jne    ffff800000807f7f <sys_tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1128
            task[i].fg_pgid=pgid_id;
ffff800000807f09:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000807f10:	ff ff ff 
ffff800000807f13:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807f17:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807f1a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807f1d:	48 98                	cdqe   
ffff800000807f1f:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807f26:	48 01 c2             	add    rdx,rax
ffff800000807f29:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000807f2c:	89 42 0c             	mov    DWORD PTR [rdx+0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1129
            if(task[i].pid==pgid_id){
ffff800000807f2f:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000807f36:	ff ff ff 
ffff800000807f39:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807f3d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807f40:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807f43:	48 98                	cdqe   
ffff800000807f45:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807f4c:	48 01 d0             	add    rax,rdx
ffff800000807f4f:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000807f51:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000807f54:	39 c2                	cmp    edx,eax
ffff800000807f56:	75 27                	jne    ffff800000807f7f <sys_tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1131
                //这是新前台进程组的leader
                new_fgl=&task[i];
ffff800000807f58:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000807f5f:	ff ff ff 
ffff800000807f62:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807f66:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807f69:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807f6c:	48 98                	cdqe   
ffff800000807f6e:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807f75:	48 01 d0             	add    rax,rdx
ffff800000807f78:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff800000807f7c:	eb 01                	jmp    ffff800000807f7f <sys_tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1126
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
ffff800000807f7e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1125 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807f7f:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1125 (discriminator 1)
ffff800000807f83:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
ffff800000807f87:	0f 8e fb fe ff ff    	jle    ffff800000807e88 <sys_tcsetpgrp+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1136
            }
        }
    }
    //新leader把tty连接
    new_fgl->openf[new_fgl->tty_fd]->f_ops->ioctl(new_fgl->openf[fildes]->dentry->dir_inode,new_fgl->openf[fildes]\
ffff800000807f8d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807f91:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
ffff800000807f94:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807f98:	48 63 d2             	movsxd rdx,edx
ffff800000807f9b:	48 83 c2 1e          	add    rdx,0x1e
ffff800000807f9f:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000807fa4:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000807fa8:	4c 8b 40 28          	mov    r8,QWORD PTR [rax+0x28]
ffff800000807fac:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807fb0:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000807fb3:	48 63 d2             	movsxd rdx,edx
ffff800000807fb6:	48 83 c2 1e          	add    rdx,0x1e
ffff800000807fba:	48 8b 74 d0 08       	mov    rsi,QWORD PTR [rax+rdx*8+0x8]
ffff800000807fbf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807fc3:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000807fc6:	48 63 d2             	movsxd rdx,edx
ffff800000807fc9:	48 83 c2 1e          	add    rdx,0x1e
ffff800000807fcd:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000807fd2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000807fd6:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000807fda:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000807fdf:	ba 01 00 00 00       	mov    edx,0x1
ffff800000807fe4:	48 89 c7             	mov    rdi,rax
ffff800000807fe7:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1138
    ,TTY_CONNECT,0);
}
ffff800000807fea:	90                   	nop
ffff800000807feb:	48 83 c4 20          	add    rsp,0x20
ffff800000807fef:	5b                   	pop    rbx
ffff800000807ff0:	41 5f                	pop    r15
ffff800000807ff2:	5d                   	pop    rbp
ffff800000807ff3:	c3                   	ret    

ffff800000807ff4 <sys_tcgetpgrp>:
sys_tcgetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1139
pid_t sys_tcgetpgrp(int fildes){
ffff800000807ff4:	f3 0f 1e fa          	endbr64 
ffff800000807ff8:	55                   	push   rbp
ffff800000807ff9:	48 89 e5             	mov    rbp,rsp
ffff800000807ffc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807ffc <sys_tcgetpgrp+0x8>
ffff800000808003:	49 bb 54 8f 11 00 00 	movabs r11,0x118f54
ffff80000080800a:	00 00 00 
ffff80000080800d:	4c 01 d8             	add    rax,r11
ffff800000808010:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1140
    return current->fg_pgid;
ffff800000808013:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff80000080801a:	ff ff ff 
ffff80000080801d:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000808021:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808024:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1141
}
ffff800000808027:	5d                   	pop    rbp
ffff800000808028:	c3                   	ret    

ffff800000808029 <sys_ioctl>:
sys_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1144
//===============

int sys_ioctl(int fildes, int request, unsigned long args){
ffff800000808029:	f3 0f 1e fa          	endbr64 
ffff80000080802d:	55                   	push   rbp
ffff80000080802e:	48 89 e5             	mov    rbp,rsp
ffff800000808031:	48 83 ec 10          	sub    rsp,0x10
ffff800000808035:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808035 <sys_ioctl+0xc>
ffff80000080803c:	49 bb 1b 8f 11 00 00 	movabs r11,0x118f1b
ffff800000808043:	00 00 00 
ffff800000808046:	4c 01 d8             	add    rax,r11
ffff800000808049:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff80000080804c:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff80000080804f:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1145
    current->openf[fildes]->f_ops->ioctl(current->openf[fildes]->dentry->dir_inode,current->openf[fildes]\
ffff800000808053:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff80000080805a:	ff ff ff 
ffff80000080805d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808061:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000808064:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000808067:	48 63 c9             	movsxd rcx,ecx
ffff80000080806a:	48 83 c1 1e          	add    rcx,0x1e
ffff80000080806e:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff800000808073:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff800000808077:	4c 8b 42 28          	mov    r8,QWORD PTR [rdx+0x28]
ffff80000080807b:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080807e:	48 63 d2             	movsxd rdx,edx
ffff800000808081:	48 b9 80 fe ff ff ff 	movabs rcx,0xfffffffffffffe80
ffff800000808088:	ff ff ff 
ffff80000080808b:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080808f:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
ffff800000808092:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
ffff800000808095:	48 63 f6             	movsxd rsi,esi
ffff800000808098:	48 83 c6 1e          	add    rsi,0x1e
ffff80000080809c:	48 8b 74 f1 08       	mov    rsi,QWORD PTR [rcx+rsi*8+0x8]
ffff8000008080a1:	48 b9 80 fe ff ff ff 	movabs rcx,0xfffffffffffffe80
ffff8000008080a8:	ff ff ff 
ffff8000008080ab:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff8000008080af:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008080b2:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff8000008080b5:	48 63 c9             	movsxd rcx,ecx
ffff8000008080b8:	48 83 c1 1e          	add    rcx,0x1e
ffff8000008080bc:	48 8b 44 c8 08       	mov    rax,QWORD PTR [rax+rcx*8+0x8]
ffff8000008080c1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008080c5:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008080c9:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff8000008080cd:	48 89 c7             	mov    rdi,rax
ffff8000008080d0:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1147
    ,request,args);
}
ffff8000008080d3:	90                   	nop
ffff8000008080d4:	c9                   	leave  
ffff8000008080d5:	c3                   	ret    

ffff8000008080d6 <set_errno>:
set_errno():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1148
void set_errno(int errno){
ffff8000008080d6:	f3 0f 1e fa          	endbr64 
ffff8000008080da:	55                   	push   rbp
ffff8000008080db:	48 89 e5             	mov    rbp,rsp
ffff8000008080de:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008080de <set_errno+0x8>
ffff8000008080e5:	49 bb 72 8e 11 00 00 	movabs r11,0x118e72
ffff8000008080ec:	00 00 00 
ffff8000008080ef:	4c 01 d8             	add    rax,r11
ffff8000008080f2:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1149
    current->regs.errcode=errno;
ffff8000008080f5:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff8000008080fc:	ff ff ff 
ffff8000008080ff:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000808103:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808106:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000808109:	48 63 d2             	movsxd rdx,edx
ffff80000080810c:	48 89 90 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1150
ffff800000808113:	90                   	nop
ffff800000808114:	5d                   	pop    rbp
ffff800000808115:	c3                   	ret    
ffff800000808116:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff80000080811d:	00 00 00 

ffff800000808120 <outb>:
outb():
ffff800000808120:	66 89 fa             	mov    dx,di
ffff800000808123:	66 89 f0             	mov    ax,si
ffff800000808126:	ee                   	out    dx,al
ffff800000808127:	e8 29 00 00 00       	call   ffff800000808155 <io_delay>
ffff80000080812c:	c3                   	ret    

ffff80000080812d <outw>:
outw():
ffff80000080812d:	66 89 fa             	mov    dx,di
ffff800000808130:	66 89 f0             	mov    ax,si
ffff800000808133:	66 ef                	out    dx,ax
ffff800000808135:	90                   	nop
ffff800000808136:	90                   	nop
ffff800000808137:	90                   	nop
ffff800000808138:	c3                   	ret    

ffff800000808139 <inb>:
inb():
ffff800000808139:	31 c0                	xor    eax,eax
ffff80000080813b:	66 89 fa             	mov    dx,di
ffff80000080813e:	ec                   	in     al,dx
ffff80000080813f:	90                   	nop
ffff800000808140:	90                   	nop
ffff800000808141:	90                   	nop
ffff800000808142:	c3                   	ret    

ffff800000808143 <inw>:
inw():
ffff800000808143:	31 c0                	xor    eax,eax
ffff800000808145:	66 89 fa             	mov    dx,di
ffff800000808148:	66 ed                	in     ax,dx
ffff80000080814a:	90                   	nop
ffff80000080814b:	90                   	nop
ffff80000080814c:	90                   	nop
ffff80000080814d:	c3                   	ret    

ffff80000080814e <eoi>:
eoi():
ffff80000080814e:	b0 20                	mov    al,0x20
ffff800000808150:	e6 a0                	out    0xa0,al
ffff800000808152:	e6 20                	out    0x20,al
ffff800000808154:	c3                   	ret    

ffff800000808155 <io_delay>:
io_delay():
ffff800000808155:	90                   	nop
ffff800000808156:	90                   	nop
ffff800000808157:	90                   	nop
ffff800000808158:	90                   	nop
ffff800000808159:	c3                   	ret    

ffff80000080815a <turn_on_int>:
turn_on_int():
ffff80000080815a:	b0 f8                	mov    al,0xf8
ffff80000080815c:	e6 21                	out    0x21,al
ffff80000080815e:	e8 f2 ff ff ff       	call   ffff800000808155 <io_delay>
ffff800000808163:	b0 af                	mov    al,0xaf
ffff800000808165:	e6 a1                	out    0xa1,al
ffff800000808167:	e8 e9 ff ff ff       	call   ffff800000808155 <io_delay>
ffff80000080816c:	48 b8 00 70 10 00 00 	movabs rax,0xffff800000107000
ffff800000808173:	80 ff ff 
ffff800000808176:	0f 01 18             	lidt   [rax]
ffff800000808179:	90                   	nop
ffff80000080817a:	90                   	nop
ffff80000080817b:	90                   	nop
ffff80000080817c:	90                   	nop
ffff80000080817d:	c3                   	ret    

ffff80000080817e <_report_back_trace_of_err>:
_report_back_trace_of_err():
ffff80000080817e:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff800000808183:	50                   	push   rax
ffff800000808184:	83 c4 08             	add    esp,0x8
ffff800000808187:	c3                   	ret    

ffff800000808188 <bt_msg>:
bt_msg():
ffff800000808188:	65 72 72             	gs jb  ffff8000008081fd <fill_desc+0x3a>
ffff80000080818b:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffff80000080818c:	72 20                	jb     ffff8000008081ae <init_gdt+0x11>
ffff80000080818e:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffff80000080818f:	63 63 75             	movsxd esp,DWORD PTR [rbx+0x75]
ffff800000808192:	72 73                	jb     ffff800000808207 <fill_desc+0x44>
ffff800000808194:	20 61 74             	and    BYTE PTR [rcx+0x74],ah
ffff800000808197:	3a 25 78 5c 6e 00    	cmp    ah,BYTE PTR [rip+0x6e5c78]        # ffff800000eede15 <_knl_end+0x2ede15>

ffff80000080819d <init_gdt>:
init_gdt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:9
#include "proc.h"

descriptor *gdt=GDT_ADDR+KNL_BASE;
extern char *gdtptr;
int init_gdt()
{
ffff80000080819d:	f3 0f 1e fa          	endbr64 
ffff8000008081a1:	55                   	push   rbp
ffff8000008081a2:	48 89 e5             	mov    rbp,rsp
ffff8000008081a5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008081a5 <init_gdt+0x8>
ffff8000008081ac:	49 bb ab 8d 11 00 00 	movabs r11,0x118dab
ffff8000008081b3:	00 00 00 
ffff8000008081b6:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:11
//    fill_desc(0x108000,108,SEG_SYS_TSS|SEG_PRESENT,4);
    asm volatile("mov $0x48,%ax\r\n"
ffff8000008081b9:	66 b8 48 00          	mov    ax,0x48
ffff8000008081bd:	0f 00 d8             	ltr    ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:13
                 "ltr %ax");  
}
ffff8000008081c0:	90                   	nop
ffff8000008081c1:	5d                   	pop    rbp
ffff8000008081c2:	c3                   	ret    

ffff8000008081c3 <fill_desc>:
fill_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:15
void fill_desc(u64 base, u64 limit, u16 attr, u32 index)
{
ffff8000008081c3:	f3 0f 1e fa          	endbr64 
ffff8000008081c7:	55                   	push   rbp
ffff8000008081c8:	48 89 e5             	mov    rbp,rsp
ffff8000008081cb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008081cb <fill_desc+0x8>
ffff8000008081d2:	49 bb 85 8d 11 00 00 	movabs r11,0x118d85
ffff8000008081d9:	00 00 00 
ffff8000008081dc:	4c 01 d8             	add    rax,r11
ffff8000008081df:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008081e3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008081e7:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
ffff8000008081ea:	66 89 55 ec          	mov    WORD PTR [rbp-0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:16
    gdt[index].base_12=base&0xffff;
ffff8000008081ee:	48 ba 88 fd ff ff ff 	movabs rdx,0xfffffffffffffd88
ffff8000008081f5:	ff ff ff 
ffff8000008081f8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008081fc:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008081ff:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000808202:	48 c1 e2 04          	shl    rdx,0x4
ffff800000808206:	48 01 ca             	add    rdx,rcx
ffff800000808209:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff80000080820d:	66 89 4a 02          	mov    WORD PTR [rdx+0x2],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:17
    gdt[index].base_3=(base>>16)&0xff;
ffff800000808211:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000808215:	48 89 d6             	mov    rsi,rdx
ffff800000808218:	48 c1 ee 10          	shr    rsi,0x10
ffff80000080821c:	48 ba 88 fd ff ff ff 	movabs rdx,0xfffffffffffffd88
ffff800000808223:	ff ff ff 
ffff800000808226:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080822a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080822d:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000808230:	48 c1 e2 04          	shl    rdx,0x4
ffff800000808234:	48 01 ca             	add    rdx,rcx
ffff800000808237:	89 f1                	mov    ecx,esi
ffff800000808239:	88 4a 04             	mov    BYTE PTR [rdx+0x4],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:18
    gdt[index].base_4=(base>>24)&0xff;
ffff80000080823c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000808240:	48 89 d6             	mov    rsi,rdx
ffff800000808243:	48 c1 ee 18          	shr    rsi,0x18
ffff800000808247:	48 ba 88 fd ff ff ff 	movabs rdx,0xfffffffffffffd88
ffff80000080824e:	ff ff ff 
ffff800000808251:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808255:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000808258:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080825b:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080825f:	48 01 ca             	add    rdx,rcx
ffff800000808262:	89 f1                	mov    ecx,esi
ffff800000808264:	88 4a 07             	mov    BYTE PTR [rdx+0x7],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:19
    gdt[index].base_5678=(base>>32)&0xffffffff;
ffff800000808267:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080826b:	48 89 d1             	mov    rcx,rdx
ffff80000080826e:	48 c1 e9 20          	shr    rcx,0x20
ffff800000808272:	48 ba 88 fd ff ff ff 	movabs rdx,0xfffffffffffffd88
ffff800000808279:	ff ff ff 
ffff80000080827c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808280:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000808283:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000808286:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080828a:	48 01 f2             	add    rdx,rsi
ffff80000080828d:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:20
    gdt[index].limit_lo16=limit&0xffff;
ffff800000808290:	48 ba 88 fd ff ff ff 	movabs rdx,0xfffffffffffffd88
ffff800000808297:	ff ff ff 
ffff80000080829a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080829e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008082a1:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008082a4:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008082a8:	48 01 ca             	add    rdx,rcx
ffff8000008082ab:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff8000008082af:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:21
    gdt[index].attr=attr|((limit>>8)&0xf0);
ffff8000008082b2:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff8000008082b6:	48 c1 ea 08          	shr    rdx,0x8
ffff8000008082ba:	89 d1                	mov    ecx,edx
ffff8000008082bc:	66 81 e1 f0 00       	and    cx,0xf0
ffff8000008082c1:	48 ba 88 fd ff ff ff 	movabs rdx,0xfffffffffffffd88
ffff8000008082c8:	ff ff ff 
ffff8000008082cb:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008082cf:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008082d2:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008082d5:	48 c1 e0 04          	shl    rax,0x4
ffff8000008082d9:	48 01 c2             	add    rdx,rax
ffff8000008082dc:	89 c8                	mov    eax,ecx
ffff8000008082de:	66 0b 45 ec          	or     ax,WORD PTR [rbp-0x14]
ffff8000008082e2:	66 89 42 05          	mov    WORD PTR [rdx+0x5],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:23

}
ffff8000008082e6:	90                   	nop
ffff8000008082e7:	5d                   	pop    rbp
ffff8000008082e8:	c3                   	ret    

ffff8000008082e9 <fill_gate>:
fill_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:26

void fill_gate(u32 index,u32 offset,u16 selector,u16 attr)
{
ffff8000008082e9:	f3 0f 1e fa          	endbr64 
ffff8000008082ed:	55                   	push   rbp
ffff8000008082ee:	48 89 e5             	mov    rbp,rsp
ffff8000008082f1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008082f1 <fill_gate+0x8>
ffff8000008082f8:	49 bb 5f 8c 11 00 00 	movabs r11,0x118c5f
ffff8000008082ff:	00 00 00 
ffff800000808302:	4c 01 d8             	add    rax,r11
ffff800000808305:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000808308:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffff80000080830b:	89 d6                	mov    esi,edx
ffff80000080830d:	89 ca                	mov    edx,ecx
ffff80000080830f:	89 f1                	mov    ecx,esi
ffff800000808311:	66 89 4d e4          	mov    WORD PTR [rbp-0x1c],cx
ffff800000808315:	66 89 55 e0          	mov    WORD PTR [rbp-0x20],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:27
    gate* ptr=gdt;
ffff800000808319:	48 ba 88 fd ff ff ff 	movabs rdx,0xfffffffffffffd88
ffff800000808320:	ff ff ff 
ffff800000808323:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000808327:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080832a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:28
    ptr[index].offset_low=offset&0xffff;
ffff80000080832e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808331:	48 c1 e0 04          	shl    rax,0x4
ffff800000808335:	48 89 c2             	mov    rdx,rax
ffff800000808338:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080833c:	48 01 d0             	add    rax,rdx
ffff80000080833f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000808342:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:29
    ptr[index].offset_high=(offset>>16)&0xffff;
ffff800000808345:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808348:	48 c1 e0 04          	shl    rax,0x4
ffff80000080834c:	48 89 c2             	mov    rdx,rax
ffff80000080834f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808353:	48 01 d0             	add    rax,rdx
ffff800000808356:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000808359:	c1 ea 10             	shr    edx,0x10
ffff80000080835c:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:30
    ptr[index].selector=selector;
ffff80000080835f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808362:	48 c1 e0 04          	shl    rax,0x4
ffff800000808366:	48 89 c2             	mov    rdx,rax
ffff800000808369:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080836d:	48 01 c2             	add    rdx,rax
ffff800000808370:	0f b7 45 e4          	movzx  eax,WORD PTR [rbp-0x1c]
ffff800000808374:	66 89 42 02          	mov    WORD PTR [rdx+0x2],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:31
    ptr[index].attr=attr;
ffff800000808378:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080837b:	48 c1 e0 04          	shl    rax,0x4
ffff80000080837f:	48 89 c2             	mov    rdx,rax
ffff800000808382:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808386:	48 01 c2             	add    rdx,rax
ffff800000808389:	0f b7 45 e0          	movzx  eax,WORD PTR [rbp-0x20]
ffff80000080838d:	66 89 42 04          	mov    WORD PTR [rdx+0x4],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:32
}
ffff800000808391:	90                   	nop
ffff800000808392:	5d                   	pop    rbp
ffff800000808393:	c3                   	ret    

ffff800000808394 <fill_ldt_desc>:
fill_ldt_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:35

void fill_ldt_desc(u32 base, u32 limit,u16 attr,descriptor *desc)
{
ffff800000808394:	f3 0f 1e fa          	endbr64 
ffff800000808398:	55                   	push   rbp
ffff800000808399:	48 89 e5             	mov    rbp,rsp
ffff80000080839c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080839c <fill_ldt_desc+0x8>
ffff8000008083a3:	49 bb b4 8b 11 00 00 	movabs r11,0x118bb4
ffff8000008083aa:	00 00 00 
ffff8000008083ad:	4c 01 d8             	add    rax,r11
ffff8000008083b0:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff8000008083b3:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff8000008083b6:	89 d0                	mov    eax,edx
ffff8000008083b8:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffff8000008083bc:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:41
//    desc->base_lo16=base&0xffff;
//    desc->base_mid8=(base>>16)&0xff;
//    desc->base_hi8=(base>>24)&0xff;
//    desc->limit_lo16=limit&0xffff;
//    desc->attr=attr|(limit>>16&0xf)<<8;
ffff8000008083c0:	90                   	nop
ffff8000008083c1:	5d                   	pop    rbp
ffff8000008083c2:	c3                   	ret    
ffff8000008083c3:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff8000008083ca:	00 00 00 
ffff8000008083cd:	0f 1f 00             	nop    DWORD PTR [rax]

ffff8000008083d0 <fill_desc>:
fill_desc():
ffff8000008083d0:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff8000008083d5:	67 8b 5c 24 08       	mov    ebx,DWORD PTR [esp+0x8]
ffff8000008083da:	67 8b 4c 24 0c       	mov    ecx,DWORD PTR [esp+0xc]
ffff8000008083df:	67 8b 54 24 10       	mov    edx,DWORD PTR [esp+0x10]
ffff8000008083e4:	be 00 60 00 00       	mov    esi,0x6000
ffff8000008083e9:	c1 e2 03             	shl    edx,0x3
ffff8000008083ec:	01 d6                	add    esi,edx
ffff8000008083ee:	66 67 89 1e          	mov    WORD PTR [esi],bx
ffff8000008083f2:	66 67 89 46 02       	mov    WORD PTR [esi+0x2],ax
ffff8000008083f7:	c1 e8 10             	shr    eax,0x10
ffff8000008083fa:	67 88 46 04          	mov    BYTE PTR [esi+0x4],al
ffff8000008083fe:	c1 eb 10             	shr    ebx,0x10
ffff800000808401:	67 88 5e 06          	mov    BYTE PTR [esi+0x6],bl
ffff800000808405:	67 88 66 07          	mov    BYTE PTR [esi+0x7],ah
ffff800000808409:	67 09 4e 05          	or     DWORD PTR [esi+0x5],ecx
ffff80000080840d:	c3                   	ret    

ffff80000080840e <clock_c>:
clock_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:9
#include <devman.h>
#include <disk.h>
extern int manage_proc_lock;
extern int cur_proc;
extern struct process *task;
void clock_c(){
ffff80000080840e:	f3 0f 1e fa          	endbr64 
ffff800000808412:	55                   	push   rbp
ffff800000808413:	48 89 e5             	mov    rbp,rsp
ffff800000808416:	41 57                	push   r15
ffff800000808418:	48 83 ec 08          	sub    rsp,0x8
ffff80000080841c:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080841c <clock_c+0xe>
ffff800000808423:	49 bb 34 8b 11 00 00 	movabs r11,0x118b34
ffff80000080842a:	00 00 00 
ffff80000080842d:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:11
    //refresh_wnds();
    if(!manage_proc_lock)
ffff800000808430:	48 b8 00 fd ff ff ff 	movabs rax,0xfffffffffffffd00
ffff800000808437:	ff ff ff 
ffff80000080843a:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080843e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808440:	85 c0                	test   eax,eax
ffff800000808442:	75 17                	jne    ffff80000080845b <clock_c+0x4d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:13
    {
        manage_proc();
ffff800000808444:	49 89 d7             	mov    r15,rdx
ffff800000808447:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080844c:	48 b9 f9 42 ee ff ff 	movabs rcx,0xffffffffffee42f9
ffff800000808453:	ff ff ff 
ffff800000808456:	48 01 d1             	add    rcx,rdx
ffff800000808459:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:16
    }
    //puts("1 disk req executed.");
ffff80000080845b:	90                   	nop
ffff80000080845c:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000808460:	c9                   	leave  
ffff800000808461:	c3                   	ret    
ffff800000808462:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff800000808469:	00 00 00 
ffff80000080846c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffff800000808470 <clock>:
clock():
ffff800000808470:	50                   	push   rax
ffff800000808471:	53                   	push   rbx
ffff800000808472:	51                   	push   rcx
ffff800000808473:	52                   	push   rdx
ffff800000808474:	57                   	push   rdi
ffff800000808475:	56                   	push   rsi
ffff800000808476:	41 50                	push   r8
ffff800000808478:	41 51                	push   r9
ffff80000080847a:	41 52                	push   r10
ffff80000080847c:	41 53                	push   r11
ffff80000080847e:	41 54                	push   r12
ffff800000808480:	41 55                	push   r13
ffff800000808482:	41 56                	push   r14
ffff800000808484:	41 57                	push   r15
ffff800000808486:	e8 72 cd ff ff       	call   ffff8000008051fd <save_rsp>
ffff80000080848b:	66 8c c0             	mov    ax,es
ffff80000080848e:	50                   	push   rax
ffff80000080848f:	66 8c d8             	mov    ax,ds
ffff800000808492:	50                   	push   rax
ffff800000808493:	66 b8 10 00          	mov    ax,0x10
ffff800000808497:	8e c0                	mov    es,eax
ffff800000808499:	8e d8                	mov    ds,eax

ffff80000080849b <clock.normal_part>:
clock.normal_part():
ffff80000080849b:	b0 20                	mov    al,0x20
ffff80000080849d:	e6 a0                	out    0xa0,al
ffff80000080849f:	e6 20                	out    0x20,al
ffff8000008084a1:	e8 68 ff ff ff       	call   ffff80000080840e <clock_c>

ffff8000008084a6 <clock_ret>:
clock_ret():
ffff8000008084a6:	58                   	pop    rax
ffff8000008084a7:	8e d8                	mov    ds,eax
ffff8000008084a9:	58                   	pop    rax
ffff8000008084aa:	8e c0                	mov    es,eax
ffff8000008084ac:	41 5f                	pop    r15
ffff8000008084ae:	41 5e                	pop    r14
ffff8000008084b0:	41 5d                	pop    r13
ffff8000008084b2:	41 5c                	pop    r12
ffff8000008084b4:	41 5b                	pop    r11
ffff8000008084b6:	41 5a                	pop    r10
ffff8000008084b8:	41 59                	pop    r9
ffff8000008084ba:	41 58                	pop    r8
ffff8000008084bc:	5e                   	pop    rsi
ffff8000008084bd:	5f                   	pop    rdi
ffff8000008084be:	5a                   	pop    rdx
ffff8000008084bf:	59                   	pop    rcx
ffff8000008084c0:	5b                   	pop    rbx
ffff8000008084c1:	58                   	pop    rax
ffff8000008084c2:	48 cf                	iretq  

ffff8000008084c4 <execute>:
execute():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:118
    return ind;
}
*/

int execute(char *path, char **argv)
{
ffff8000008084c4:	f3 0f 1e fa          	endbr64 
ffff8000008084c8:	55                   	push   rbp
ffff8000008084c9:	48 89 e5             	mov    rbp,rsp
ffff8000008084cc:	41 57                	push   r15
ffff8000008084ce:	53                   	push   rbx
ffff8000008084cf:	48 83 ec 20          	sub    rsp,0x20
ffff8000008084d3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008084d3 <execute+0xf>
ffff8000008084da:	49 bb 7d 8a 11 00 00 	movabs r11,0x118a7d
ffff8000008084e1:	00 00 00 
ffff8000008084e4:	4c 01 db             	add    rbx,r11
ffff8000008084e7:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008084eb:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:121
    //尚未切换到目标进程
    //syscall(SYSCALL_REG_PROC, load_pe,0,0,0,0);
    int fno=-1,cwd_fno=-1;
ffff8000008084ef:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [rbp-0x1c],0xffffffff
ffff8000008084f6:	c7 45 e0 ff ff ff ff 	mov    DWORD PTR [rbp-0x20],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:122
    if((fno=sys_open(path, O_EXEC)) <0)return -1;
ffff8000008084fd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808501:	be 00 10 00 00       	mov    esi,0x1000
ffff800000808506:	48 89 c7             	mov    rdi,rax
ffff800000808509:	49 89 df             	mov    r15,rbx
ffff80000080850c:	48 b8 f0 ad ee ff ff 	movabs rax,0xffffffffffeeadf0
ffff800000808513:	ff ff ff 
ffff800000808516:	48 01 d8             	add    rax,rbx
ffff800000808519:	ff d0                	call   rax
ffff80000080851b:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffff80000080851e:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff800000808522:	79 0a                	jns    ffff80000080852e <execute+0x6a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:122 (discriminator 1)
ffff800000808524:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000808529:	e9 81 00 00 00       	jmp    ffff8000008085af <execute+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:124
    //
    char *p=path;
ffff80000080852e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808532:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125
    for(;*p!='\0';p++);
ffff800000808536:	eb 05                	jmp    ffff80000080853d <execute+0x79>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125 (discriminator 2)
ffff800000808538:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125 (discriminator 1)
ffff80000080853d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808541:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000808544:	84 c0                	test   al,al
ffff800000808546:	75 f0                	jne    ffff800000808538 <execute+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126
    for(;*p!='/'&&p>path;p--);
ffff800000808548:	eb 05                	jmp    ffff80000080854f <execute+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 3)
ffff80000080854a:	48 83 6d e8 01       	sub    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 1)
ffff80000080854f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808553:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000808556:	3c 2f                	cmp    al,0x2f
ffff800000808558:	74 0a                	je     ffff800000808564 <execute+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 2)
ffff80000080855a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080855e:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
ffff800000808562:	77 e6                	ja     ffff80000080854a <execute+0x86>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:127
    if(p>path)
ffff800000808564:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808568:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
ffff80000080856c:	76 3c                	jbe    ffff8000008085aa <execute+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:129
    {
        *p='\0';
ffff80000080856e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808572:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:130
        if((cwd_fno=sys_open(path, O_DIRECTORY)) <0)return -1;
ffff800000808575:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808579:	be 00 40 00 00       	mov    esi,0x4000
ffff80000080857e:	48 89 c7             	mov    rdi,rax
ffff800000808581:	49 89 df             	mov    r15,rbx
ffff800000808584:	48 b8 f0 ad ee ff ff 	movabs rax,0xffffffffffeeadf0
ffff80000080858b:	ff ff ff 
ffff80000080858e:	48 01 d8             	add    rax,rbx
ffff800000808591:	ff d0                	call   rax
ffff800000808593:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffff800000808596:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
ffff80000080859a:	79 07                	jns    ffff8000008085a3 <execute+0xdf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:130 (discriminator 1)
ffff80000080859c:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008085a1:	eb 0c                	jmp    ffff8000008085af <execute+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:131
        *p='/';
ffff8000008085a3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008085a7:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:136
    }
    // extern struct file opened[];
    extern struct process task[];
    // int pi= reg_proc(proc_start, &opened[cwd_fno], &opened[fno]);
    return 0;
ffff8000008085aa:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:137
}
ffff8000008085af:	48 83 c4 20          	add    rsp,0x20
ffff8000008085b3:	5b                   	pop    rbx
ffff8000008085b4:	41 5f                	pop    r15
ffff8000008085b6:	5d                   	pop    rbp
ffff8000008085b7:	c3                   	ret    

ffff8000008085b8 <sys_execve>:
sys_execve():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:139

int sys_execve(char *path, int argc, char **argv) {
ffff8000008085b8:	f3 0f 1e fa          	endbr64 
ffff8000008085bc:	55                   	push   rbp
ffff8000008085bd:	48 89 e5             	mov    rbp,rsp
ffff8000008085c0:	41 57                	push   r15
ffff8000008085c2:	53                   	push   rbx
ffff8000008085c3:	48 83 ec 70          	sub    rsp,0x70
ffff8000008085c7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008085c7 <sys_execve+0xf>
ffff8000008085ce:	49 bb 89 89 11 00 00 	movabs r11,0x118989
ffff8000008085d5:	00 00 00 
ffff8000008085d8:	4c 01 db             	add    rbx,r11
ffff8000008085db:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff8000008085df:	89 75 94             	mov    DWORD PTR [rbp-0x6c],esi
ffff8000008085e2:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:140
    int fno=-1,cwd_fno=-1;
ffff8000008085e6:	c7 45 d0 ff ff ff ff 	mov    DWORD PTR [rbp-0x30],0xffffffff
ffff8000008085ed:	c7 45 cc ff ff ff ff 	mov    DWORD PTR [rbp-0x34],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:141
    if((fno=sys_open(path, O_EXEC)) <0)return -ENOENT;
ffff8000008085f4:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008085f8:	be 00 10 00 00       	mov    esi,0x1000
ffff8000008085fd:	48 89 c7             	mov    rdi,rax
ffff800000808600:	49 89 df             	mov    r15,rbx
ffff800000808603:	48 b8 f0 ad ee ff ff 	movabs rax,0xffffffffffeeadf0
ffff80000080860a:	ff ff ff 
ffff80000080860d:	48 01 d8             	add    rax,rbx
ffff800000808610:	ff d0                	call   rax
ffff800000808612:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
ffff800000808615:	83 7d d0 00          	cmp    DWORD PTR [rbp-0x30],0x0
ffff800000808619:	79 0a                	jns    ffff800000808625 <sys_execve+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:141 (discriminator 1)
ffff80000080861b:	b8 d3 ff ff ff       	mov    eax,0xffffffd3
ffff800000808620:	e9 9a 02 00 00       	jmp    ffff8000008088bf <sys_execve+0x307>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:145

    //重新设置进程数据
    //清空原来的页表
    release_mmap(current);
ffff800000808625:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff80000080862c:	ff ff ff 
ffff80000080862f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808633:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808636:	48 89 c7             	mov    rdi,rax
ffff800000808639:	49 89 df             	mov    r15,rbx
ffff80000080863c:	48 b8 56 63 ee ff ff 	movabs rax,0xffffffffffee6356
ffff800000808643:	ff ff ff 
ffff800000808646:	48 01 d8             	add    rax,rbx
ffff800000808649:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:149
    // current->regs.rsp=STACK_TOP;//清空栈
    extern TSS* tss;

    current->exef=current->openf[fno];//改变执行文件
ffff80000080864b:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000808652:	ff ff ff 
ffff800000808655:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808659:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080865c:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000808663:	ff ff ff 
ffff800000808666:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080866a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080866d:	8b 4d d0             	mov    ecx,DWORD PTR [rbp-0x30]
ffff800000808670:	48 63 c9             	movsxd rcx,ecx
ffff800000808673:	48 83 c1 1e          	add    rcx,0x1e
ffff800000808677:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff80000080867c:	48 89 90 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:150
    off_t entry= load_elf(current->exef);
ffff800000808683:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff80000080868a:	ff ff ff 
ffff80000080868d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808691:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808694:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
ffff80000080869b:	48 89 c7             	mov    rdi,rax
ffff80000080869e:	49 89 df             	mov    r15,rbx
ffff8000008086a1:	48 b8 d9 84 ee ff ff 	movabs rax,0xffffffffffee84d9
ffff8000008086a8:	ff ff ff 
ffff8000008086ab:	48 01 d8             	add    rax,rbx
ffff8000008086ae:	ff d0                	call   rax
ffff8000008086b0:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:151
    if(entry==-1)
ffff8000008086b4:	48 83 7d c0 ff       	cmp    QWORD PTR [rbp-0x40],0xffffffffffffffff
ffff8000008086b9:	75 4d                	jne    ffff800000808708 <sys_execve+0x150>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:153
    {
        comprintf("failed execve, errcode:%d\n",current->regs.errcode);
ffff8000008086bb:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff8000008086c2:	ff ff ff 
ffff8000008086c5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008086c9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008086cc:	48 8b 80 2c 03 00 00 	mov    rax,QWORD PTR [rax+0x32c]
ffff8000008086d3:	48 89 c6             	mov    rsi,rax
ffff8000008086d6:	48 b8 b0 d5 ff ff ff 	movabs rax,0xffffffffffffd5b0
ffff8000008086dd:	ff ff ff 
ffff8000008086e0:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008086e4:	48 89 c7             	mov    rdi,rax
ffff8000008086e7:	49 89 df             	mov    r15,rbx
ffff8000008086ea:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008086ef:	48 ba b3 1c ef ff ff 	movabs rdx,0xffffffffffef1cb3
ffff8000008086f6:	ff ff ff 
ffff8000008086f9:	48 01 da             	add    rdx,rbx
ffff8000008086fc:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:154
        return -1;
ffff8000008086fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000808703:	e9 b7 01 00 00       	jmp    ffff8000008088bf <sys_execve+0x307>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:156
    }
    if(sys_close(fno)<0)return -1;
ffff800000808708:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000080870b:	89 c7                	mov    edi,eax
ffff80000080870d:	49 89 df             	mov    r15,rbx
ffff800000808710:	48 b8 1a b4 ee ff ff 	movabs rax,0xffffffffffeeb41a
ffff800000808717:	ff ff ff 
ffff80000080871a:	48 01 d8             	add    rax,rbx
ffff80000080871d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:159

    //sysret直接返回到新程序的main
    void *retp= (void *) entry;
ffff80000080871f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808723:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:160
    stack_store_regs *rs= (stack_store_regs *) (tss->ists[0] - sizeof(stack_store_regs));
ffff800000808727:	48 b8 f8 fd ff ff ff 	movabs rax,0xfffffffffffffdf8
ffff80000080872e:	ff ff ff 
ffff800000808731:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808735:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808738:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
ffff80000080873c:	48 2d a8 00 00 00    	sub    rax,0xa8
ffff800000808742:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:161
    rs->r10= (unsigned long) retp;//返回地址已经xchg到r10
ffff800000808746:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080874a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080874e:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:163
    //第二个参数argv需要把内容从内核空间拷贝到用户堆里面
    size_t arglen=0;
ffff800000808752:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000808759:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:164
    for(int i=0;i<argc;i++){
ffff80000080875a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000808761:	eb 39                	jmp    ffff80000080879c <sys_execve+0x1e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:165 (discriminator 3)
        arglen+= strlen(argv[i])+1;
ffff800000808763:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000808766:	48 98                	cdqe   
ffff800000808768:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080876f:	00 
ffff800000808770:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000808774:	48 01 d0             	add    rax,rdx
ffff800000808777:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080877a:	48 89 c7             	mov    rdi,rax
ffff80000080877d:	49 89 df             	mov    r15,rbx
ffff800000808780:	48 b8 24 25 ef ff ff 	movabs rax,0xffffffffffef2524
ffff800000808787:	ff ff ff 
ffff80000080878a:	48 01 d8             	add    rax,rbx
ffff80000080878d:	ff d0                	call   rax
ffff80000080878f:	83 c0 01             	add    eax,0x1
ffff800000808792:	48 98                	cdqe   
ffff800000808794:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:164 (discriminator 3)
    for(int i=0;i<argc;i++){
ffff800000808798:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:164 (discriminator 1)
ffff80000080879c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080879f:	3b 45 94             	cmp    eax,DWORD PTR [rbp-0x6c]
ffff8000008087a2:	7c bf                	jl     ffff800000808763 <sys_execve+0x1ab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:167
    }
    char* p= sys_malloc(arglen),pp=p;
ffff8000008087a4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008087a8:	48 89 c7             	mov    rdi,rax
ffff8000008087ab:	49 89 df             	mov    r15,rbx
ffff8000008087ae:	48 b8 22 53 ee ff ff 	movabs rax,0xffffffffffee5322
ffff8000008087b5:	ff ff ff 
ffff8000008087b8:	48 01 d8             	add    rax,rbx
ffff8000008087bb:	ff d0                	call   rax
ffff8000008087bd:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffff8000008087c1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008087c5:	88 45 af             	mov    BYTE PTR [rbp-0x51],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:168
    for(int i=0;i<argc;i++){
ffff8000008087c8:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff8000008087cf:	eb 6c                	jmp    ffff80000080883d <sys_execve+0x285>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:169 (discriminator 3)
        strcpy(p,argv[i]);
ffff8000008087d1:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008087d4:	48 98                	cdqe   
ffff8000008087d6:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008087dd:	00 
ffff8000008087de:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008087e2:	48 01 d0             	add    rax,rdx
ffff8000008087e5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008087e8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008087ec:	48 89 d6             	mov    rsi,rdx
ffff8000008087ef:	48 89 c7             	mov    rdi,rax
ffff8000008087f2:	49 89 df             	mov    r15,rbx
ffff8000008087f5:	48 b8 57 22 ef ff ff 	movabs rax,0xffffffffffef2257
ffff8000008087fc:	ff ff ff 
ffff8000008087ff:	48 01 d8             	add    rax,rbx
ffff800000808802:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:170 (discriminator 3)
        p+=strlen(argv[i])+1;
ffff800000808804:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000808807:	48 98                	cdqe   
ffff800000808809:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808810:	00 
ffff800000808811:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000808815:	48 01 d0             	add    rax,rdx
ffff800000808818:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080881b:	48 89 c7             	mov    rdi,rax
ffff80000080881e:	49 89 df             	mov    r15,rbx
ffff800000808821:	48 b8 24 25 ef ff ff 	movabs rax,0xffffffffffef2524
ffff800000808828:	ff ff ff 
ffff80000080882b:	48 01 d8             	add    rax,rbx
ffff80000080882e:	ff d0                	call   rax
ffff800000808830:	83 c0 01             	add    eax,0x1
ffff800000808833:	48 98                	cdqe   
ffff800000808835:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:168 (discriminator 3)
    for(int i=0;i<argc;i++){
ffff800000808839:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:168 (discriminator 1)
ffff80000080883d:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000808840:	3b 45 94             	cmp    eax,DWORD PTR [rbp-0x6c]
ffff800000808843:	7c 8c                	jl     ffff8000008087d1 <sys_execve+0x219>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:174
    }
    
    //第一个参数argc
    if(current->dl){
ffff800000808845:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff80000080884c:	ff ff ff 
ffff80000080884f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808853:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808856:	8b 80 54 03 00 00    	mov    eax,DWORD PTR [rax+0x354]
ffff80000080885c:	85 c0                	test   eax,eax
ffff80000080885e:	74 3f                	je     ffff80000080889f <sys_execve+0x2e7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:175
        rs->rsi=current->dl;
ffff800000808860:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000808867:	ff ff ff 
ffff80000080886a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080886e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808871:	8b 80 54 03 00 00    	mov    eax,DWORD PTR [rax+0x354]
ffff800000808877:	48 63 d0             	movsxd rdx,eax
ffff80000080887a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080887e:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:176
        rs->rdi=argc;
ffff800000808882:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff800000808885:	48 63 d0             	movsxd rdx,eax
ffff800000808888:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080888c:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:177
        rs->rdx=pp;
ffff800000808890:	48 0f be 55 af       	movsx  rdx,BYTE PTR [rbp-0x51]
ffff800000808895:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000808899:	48 89 50 60          	mov    QWORD PTR [rax+0x60],rdx
ffff80000080889d:	eb 1b                	jmp    ffff8000008088ba <sys_execve+0x302>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:179
    }else{
        rs->rsi=argc;
ffff80000080889f:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff8000008088a2:	48 63 d0             	movsxd rdx,eax
ffff8000008088a5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008088a9:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:180
        rs->rdi=pp;
ffff8000008088ad:	48 0f be 55 af       	movsx  rdx,BYTE PTR [rbp-0x51]
ffff8000008088b2:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008088b6:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:186
    }
    
    //以下部分是临时测试代码
//    int (*pmain)(int argc,char **argv)=(int (*)(int, char **)) entry;
//    pmain(argc, (char **) rs->rdi);
    return 0;
ffff8000008088ba:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:187
}
ffff8000008088bf:	48 83 c4 70          	add    rsp,0x70
ffff8000008088c3:	5b                   	pop    rbx
ffff8000008088c4:	41 5f                	pop    r15
ffff8000008088c6:	5d                   	pop    rbp
ffff8000008088c7:	c3                   	ret    

ffff8000008088c8 <exec_call>:
exec_call():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:189
int exec_call(char *path)
{
ffff8000008088c8:	f3 0f 1e fa          	endbr64 
ffff8000008088cc:	55                   	push   rbp
ffff8000008088cd:	48 89 e5             	mov    rbp,rsp
ffff8000008088d0:	41 57                	push   r15
ffff8000008088d2:	53                   	push   rbx
ffff8000008088d3:	48 83 ec 20          	sub    rsp,0x20
ffff8000008088d7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008088d7 <exec_call+0xf>
ffff8000008088de:	49 bb 79 86 11 00 00 	movabs r11,0x118679
ffff8000008088e5:	00 00 00 
ffff8000008088e8:	4c 01 db             	add    rbx,r11
ffff8000008088eb:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:190
    int pi= execute(path, NULL);
ffff8000008088ef:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008088f3:	be 00 00 00 00       	mov    esi,0x0
ffff8000008088f8:	48 89 c7             	mov    rdi,rax
ffff8000008088fb:	49 89 df             	mov    r15,rbx
ffff8000008088fe:	48 b8 74 75 ee ff ff 	movabs rax,0xffffffffffee7574
ffff800000808905:	ff ff ff 
ffff800000808908:	48 01 d8             	add    rax,rbx
ffff80000080890b:	ff d0                	call   rax
ffff80000080890d:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:191
    int tss= _TSS_IND(pi)*8;
ffff800000808910:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808913:	01 c0                	add    eax,eax
ffff800000808915:	83 c0 05             	add    eax,0x5
ffff800000808918:	c1 e0 03             	shl    eax,0x3
ffff80000080891b:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:194
    extern struct process task[];
    extern int cur_proc;
    switch_proc_tss(pi);
ffff80000080891e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808921:	89 c7                	mov    edi,eax
ffff800000808923:	49 89 df             	mov    r15,rbx
ffff800000808926:	48 b8 b5 45 ee ff ff 	movabs rax,0xffffffffffee45b5
ffff80000080892d:	ff ff ff 
ffff800000808930:	48 01 d8             	add    rax,rbx
ffff800000808933:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:195
    while(task[pi].stat != TASK_ZOMBIE);
ffff800000808935:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:195 (discriminator 1)
ffff800000808936:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff80000080893d:	ff ff ff 
ffff800000808940:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000808944:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808947:	48 98                	cdqe   
ffff800000808949:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000808950:	48 01 d0             	add    rax,rdx
ffff800000808953:	48 83 c0 10          	add    rax,0x10
ffff800000808957:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080895a:	83 f8 04             	cmp    eax,0x4
ffff80000080895d:	75 d7                	jne    ffff800000808936 <exec_call+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:196
    return task[pi].exit_code;
ffff80000080895f:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000808966:	ff ff ff 
ffff800000808969:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080896d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808970:	48 98                	cdqe   
ffff800000808972:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000808979:	48 01 d0             	add    rax,rdx
ffff80000080897c:	48 83 c0 20          	add    rax,0x20
ffff800000808980:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:197
}
ffff800000808983:	48 83 c4 20          	add    rsp,0x20
ffff800000808987:	5b                   	pop    rbx
ffff800000808988:	41 5f                	pop    r15
ffff80000080898a:	5d                   	pop    rbp
ffff80000080898b:	c3                   	ret    

ffff80000080898c <proc_start>:
proc_start():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:199
int proc_start()
{
ffff80000080898c:	f3 0f 1e fa          	endbr64 
ffff800000808990:	55                   	push   rbp
ffff800000808991:	48 89 e5             	mov    rbp,rsp
ffff800000808994:	41 57                	push   r15
ffff800000808996:	53                   	push   rbx
ffff800000808997:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808997 <proc_start+0xb>
ffff80000080899e:	49 bb b9 85 11 00 00 	movabs r11,0x1185b9
ffff8000008089a5:	00 00 00 
ffff8000008089a8:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:202
    extern struct process task[];
    extern int cur_proc;
    load_pe(&task[cur_proc]);
ffff8000008089ab:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff8000008089b2:	ff ff ff 
ffff8000008089b5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008089b9:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008089bb:	48 98                	cdqe   
ffff8000008089bd:	48 69 d0 58 03 00 00 	imul   rdx,rax,0x358
ffff8000008089c4:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff8000008089cb:	ff ff ff 
ffff8000008089ce:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008089d2:	48 01 d0             	add    rax,rdx
ffff8000008089d5:	48 89 c7             	mov    rdi,rax
ffff8000008089d8:	49 89 df             	mov    r15,rbx
ffff8000008089db:	48 b8 b7 7a ee ff ff 	movabs rax,0xffffffffffee7ab7
ffff8000008089e2:	ff ff ff 
ffff8000008089e5:	48 01 d8             	add    rax,rbx
ffff8000008089e8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:204
    //释放进程资源
    sys_exit(0);
ffff8000008089ea:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008089ef:	49 89 df             	mov    r15,rbx
ffff8000008089f2:	48 b8 c4 4f ee ff ff 	movabs rax,0xffffffffffee4fc4
ffff8000008089f9:	ff ff ff 
ffff8000008089fc:	48 01 d8             	add    rax,rbx
ffff8000008089ff:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:205
}
ffff800000808a01:	90                   	nop
ffff800000808a02:	5b                   	pop    rbx
ffff800000808a03:	41 5f                	pop    r15
ffff800000808a05:	5d                   	pop    rbp
ffff800000808a06:	c3                   	ret    

ffff800000808a07 <load_pe>:
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:208
//在cr3切换到目标进程下的加载程序
int load_pe(struct process *proc)
{
ffff800000808a07:	f3 0f 1e fa          	endbr64 
ffff800000808a0b:	55                   	push   rbp
ffff800000808a0c:	48 89 e5             	mov    rbp,rsp
ffff800000808a0f:	41 57                	push   r15
ffff800000808a11:	53                   	push   rbx
ffff800000808a12:	48 81 ec 10 03 00 00 	sub    rsp,0x310
ffff800000808a19:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808a19 <load_pe+0x12>
ffff800000808a20:	49 bb 37 85 11 00 00 	movabs r11,0x118537
ffff800000808a27:	00 00 00 
ffff800000808a2a:	4c 01 db             	add    rbx,r11
ffff800000808a2d:	48 89 bd e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:210
    // 读取文件头
    struct file *f=proc->exef;
ffff800000808a34:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
ffff800000808a3b:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
ffff800000808a42:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:211
    int exefno=-1;
ffff800000808a46:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [rbp-0x14],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:212
    for(int i=0;i<MAX_PROC_OPENF;i++)
ffff800000808a4d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000808a54:	eb 32                	jmp    ffff800000808a88 <load_pe+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:213
        if(current->openf[i]==f)
ffff800000808a56:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000808a5d:	ff ff ff 
ffff800000808a60:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808a64:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808a67:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000808a6a:	48 63 d2             	movsxd rdx,edx
ffff800000808a6d:	48 83 c2 1e          	add    rdx,0x1e
ffff800000808a71:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000808a76:	48 39 45 88          	cmp    QWORD PTR [rbp-0x78],rax
ffff800000808a7a:	75 08                	jne    ffff800000808a84 <load_pe+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:215
        {
            exefno=i;
ffff800000808a7c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000808a7f:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:216
            break;
ffff800000808a82:	eb 0a                	jmp    ffff800000808a8e <load_pe+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:212 (discriminator 2)
    for(int i=0;i<MAX_PROC_OPENF;i++)
ffff800000808a84:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:212 (discriminator 1)
ffff800000808a88:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff800000808a8c:	7e c8                	jle    ffff800000808a56 <load_pe+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:218
        }
    if(exefno==-1)return ERR;
ffff800000808a8e:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff800000808a92:	75 0a                	jne    ffff800000808a9e <load_pe+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:218 (discriminator 1)
ffff800000808a94:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000808a99:	e9 6a 08 00 00       	jmp    ffff800000809308 <load_pe+0x901>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:222

    IMAGE_DOS_HEADER tdh;
    IMAGE_NT_HEADERS32 tnth;
    sys_read(exefno, &tdh, sizeof(tdh));
ffff800000808a9e:	48 8d 8d 30 fe ff ff 	lea    rcx,[rbp-0x1d0]
ffff800000808aa5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808aa8:	ba 44 00 00 00       	mov    edx,0x44
ffff800000808aad:	48 89 ce             	mov    rsi,rcx
ffff800000808ab0:	89 c7                	mov    edi,eax
ffff800000808ab2:	49 89 df             	mov    r15,rbx
ffff800000808ab5:	48 b8 11 b5 ee ff ff 	movabs rax,0xffffffffffeeb511
ffff800000808abc:	ff ff ff 
ffff800000808abf:	48 01 d8             	add    rax,rbx
ffff800000808ac2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:223
    sys_lseek(exefno,tdh.e_lfanew,SEEK_SET);
ffff800000808ac4:	48 8b 85 6c fe ff ff 	mov    rax,QWORD PTR [rbp-0x194]
ffff800000808acb:	48 89 c1             	mov    rcx,rax
ffff800000808ace:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808ad1:	ba 00 00 00 00       	mov    edx,0x0
ffff800000808ad6:	48 89 ce             	mov    rsi,rcx
ffff800000808ad9:	89 c7                	mov    edi,eax
ffff800000808adb:	49 89 df             	mov    r15,rbx
ffff800000808ade:	48 b8 ad b6 ee ff ff 	movabs rax,0xffffffffffeeb6ad
ffff800000808ae5:	ff ff ff 
ffff800000808ae8:	48 01 d8             	add    rax,rbx
ffff800000808aeb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:224
    sys_read(exefno, &tnth, sizeof(tnth));
ffff800000808aed:	48 8d 8d 20 fd ff ff 	lea    rcx,[rbp-0x2e0]
ffff800000808af4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808af7:	ba 0c 01 00 00       	mov    edx,0x10c
ffff800000808afc:	48 89 ce             	mov    rsi,rcx
ffff800000808aff:	89 c7                	mov    edi,eax
ffff800000808b01:	49 89 df             	mov    r15,rbx
ffff800000808b04:	48 b8 11 b5 ee ff ff 	movabs rax,0xffffffffffeeb511
ffff800000808b0b:	ff ff ff 
ffff800000808b0e:	48 01 d8             	add    rax,rbx
ffff800000808b11:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:227

    //是否需要移动base(先不检查)
    off_t nbase=tnth.OptionalHeader.ImageBase;
ffff800000808b13:	48 8b 85 54 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2ac]
ffff800000808b1a:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:228
    int pgn=tnth.OptionalHeader.SizeOfImage/PAGE_SIZE;
ffff800000808b1e:	8b 85 74 fd ff ff    	mov    eax,DWORD PTR [rbp-0x28c]
ffff800000808b24:	c1 e8 0c             	shr    eax,0xc
ffff800000808b27:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:253
//        break;
//    }

    //proc->tss.eip=tnth.OptionalHeader.AddressOfEntryPoint+nbase;
    //存放文件头
    sys_lseek(exefno,0,SEEK_SET);
ffff800000808b2d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808b30:	ba 00 00 00 00       	mov    edx,0x0
ffff800000808b35:	be 00 00 00 00       	mov    esi,0x0
ffff800000808b3a:	89 c7                	mov    edi,eax
ffff800000808b3c:	49 89 df             	mov    r15,rbx
ffff800000808b3f:	48 b8 ad b6 ee ff ff 	movabs rax,0xffffffffffeeb6ad
ffff800000808b46:	ff ff ff 
ffff800000808b49:	48 01 d8             	add    rax,rbx
ffff800000808b4c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:254
    sys_read(exefno, nbase, PAGE_SIZE);
ffff800000808b4e:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
ffff800000808b52:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808b55:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000808b5a:	48 89 ce             	mov    rsi,rcx
ffff800000808b5d:	89 c7                	mov    edi,eax
ffff800000808b5f:	49 89 df             	mov    r15,rbx
ffff800000808b62:	48 b8 11 b5 ee ff ff 	movabs rax,0xffffffffffeeb511
ffff800000808b69:	ff ff ff 
ffff800000808b6c:	48 01 d8             	add    rax,rbx
ffff800000808b6f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:256
    //dos头
    PIMAGE_DOS_HEADER dosh=nbase;
ffff800000808b71:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808b75:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:257
    PIMAGE_NT_HEADERS64 nth=nbase+dosh->e_lfanew;
ffff800000808b7c:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808b83:	48 8b 50 3c          	mov    rdx,QWORD PTR [rax+0x3c]
ffff800000808b87:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808b8b:	48 01 d0             	add    rax,rdx
ffff800000808b8e:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:258
    PIMAGE_FILE_HEADER fh=&nth->FileHeader;
ffff800000808b95:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808b9c:	48 83 c0 04          	add    rax,0x4
ffff800000808ba0:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:261
    //为新进程分配内存页
    //计算所需的页
    int prog_size=nth->OptionalHeader.SizeOfImage;
ffff800000808ba7:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808bae:	8b 40 50             	mov    eax,DWORD PTR [rax+0x50]
ffff800000808bb1:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:262
    int page_count=prog_size/4096;
ffff800000808bb7:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
ffff800000808bbd:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff800000808bc3:	85 c0                	test   eax,eax
ffff800000808bc5:	0f 48 c2             	cmovs  eax,edx
ffff800000808bc8:	c1 f8 0c             	sar    eax,0xc
ffff800000808bcb:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:264

    off_t shell_addr=nth->OptionalHeader.AddressOfEntryPoint+nbase;
ffff800000808bd1:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808bd8:	8b 40 28             	mov    eax,DWORD PTR [rax+0x28]
ffff800000808bdb:	89 c2                	mov    edx,eax
ffff800000808bdd:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808be1:	48 01 d0             	add    rax,rdx
ffff800000808be4:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:265
    int page_index_item_count=page_count/1024+page_count%1024==0?0:1;
ffff800000808beb:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
ffff800000808bf1:	8d 90 ff 03 00 00    	lea    edx,[rax+0x3ff]
ffff800000808bf7:	85 c0                	test   eax,eax
ffff800000808bf9:	0f 48 c2             	cmovs  eax,edx
ffff800000808bfc:	c1 f8 0a             	sar    eax,0xa
ffff800000808bff:	89 c1                	mov    ecx,eax
ffff800000808c01:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
ffff800000808c07:	99                   	cdq    
ffff800000808c08:	c1 ea 16             	shr    edx,0x16
ffff800000808c0b:	01 d0                	add    eax,edx
ffff800000808c0d:	25 ff 03 00 00       	and    eax,0x3ff
ffff800000808c12:	29 d0                	sub    eax,edx
ffff800000808c14:	01 c8                	add    eax,ecx
ffff800000808c16:	85 c0                	test   eax,eax
ffff800000808c18:	0f 95 c0             	setne  al
ffff800000808c1b:	0f b6 c0             	movzx  eax,al
ffff800000808c1e:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:266
    int start_pgind_item=shell_addr/PAGE_INDEX_SIZE;
ffff800000808c24:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffff800000808c2b:	48 c1 e8 15          	shr    rax,0x15
ffff800000808c2f:	89 85 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:269

    //sys_read sections
    PIMAGE_SECTION_HEADER psec=(u32)nth+sizeof(IMAGE_NT_HEADERS32);
ffff800000808c35:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808c3c:	89 c0                	mov    eax,eax
ffff800000808c3e:	48 05 0c 01 00 00    	add    rax,0x10c
ffff800000808c44:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:271
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
    nth->FileHeader.NumberOfSections*sizeof(IMAGE_SECTION_HEADER);
ffff800000808c48:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808c4f:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
ffff800000808c53:	0f b7 d0             	movzx  edx,ax
ffff800000808c56:	89 d0                	mov    eax,edx
ffff800000808c58:	c1 e0 02             	shl    eax,0x2
ffff800000808c5b:	01 d0                	add    eax,edx
ffff800000808c5d:	c1 e0 03             	shl    eax,0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:270
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
ffff800000808c60:	05 50 01 00 00       	add    eax,0x150
ffff800000808c65:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:272
    int align=nth->OptionalHeader.FileAlignment;
ffff800000808c6b:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808c72:	8b 40 3c             	mov    eax,DWORD PTR [rax+0x3c]
ffff800000808c75:	89 85 40 ff ff ff    	mov    DWORD PTR [rbp-0xc0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:273
    data_start=data_start%align?data_start-data_start%align+align:data_start;
ffff800000808c7b:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
ffff800000808c81:	99                   	cdq    
ffff800000808c82:	f7 bd 40 ff ff ff    	idiv   DWORD PTR [rbp-0xc0]
ffff800000808c88:	89 d0                	mov    eax,edx
ffff800000808c8a:	85 c0                	test   eax,eax
ffff800000808c8c:	74 23                	je     ffff800000808cb1 <load_pe+0x2aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:273 (discriminator 1)
ffff800000808c8e:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
ffff800000808c94:	99                   	cdq    
ffff800000808c95:	f7 bd 40 ff ff ff    	idiv   DWORD PTR [rbp-0xc0]
ffff800000808c9b:	89 d1                	mov    ecx,edx
ffff800000808c9d:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
ffff800000808ca3:	29 c8                	sub    eax,ecx
ffff800000808ca5:	89 c2                	mov    edx,eax
ffff800000808ca7:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
ffff800000808cad:	01 d0                	add    eax,edx
ffff800000808caf:	eb 06                	jmp    ffff800000808cb7 <load_pe+0x2b0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:273 (discriminator 2)
ffff800000808cb1:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:273 (discriminator 4)
ffff800000808cb7:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:274 (discriminator 4)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
ffff800000808cbd:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff800000808cc4:	e9 85 00 00 00       	jmp    ffff800000808d4e <load_pe+0x347>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:276
    {
        int disca=psec->Characteristics&IMAGE_SCN_MEM_DISCARDABLE;
ffff800000808cc9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000808ccd:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff800000808cd0:	25 00 00 00 02       	and    eax,0x2000000
ffff800000808cd5:	89 85 b0 fe ff ff    	mov    DWORD PTR [rbp-0x150],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:277
        if(disca)
ffff800000808cdb:	83 bd b0 fe ff ff 00 	cmp    DWORD PTR [rbp-0x150],0x0
ffff800000808ce2:	75 60                	jne    ffff800000808d44 <load_pe+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:280
            continue;
        //直接读，缺页内核解决
        sys_lseek(exefno,psec->PointerToRawData,SEEK_SET);
ffff800000808ce4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000808ce8:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff800000808ceb:	89 c1                	mov    ecx,eax
ffff800000808ced:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808cf0:	ba 00 00 00 00       	mov    edx,0x0
ffff800000808cf5:	48 89 ce             	mov    rsi,rcx
ffff800000808cf8:	89 c7                	mov    edi,eax
ffff800000808cfa:	49 89 df             	mov    r15,rbx
ffff800000808cfd:	48 b8 ad b6 ee ff ff 	movabs rax,0xffffffffffeeb6ad
ffff800000808d04:	ff ff ff 
ffff800000808d07:	48 01 d8             	add    rax,rbx
ffff800000808d0a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:281
        sys_read(exefno, psec->VirtualAddress + nbase,  psec->SizeOfRawData);
ffff800000808d0c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000808d10:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000808d13:	89 c2                	mov    edx,eax
ffff800000808d15:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000808d19:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000808d1c:	89 c1                	mov    ecx,eax
ffff800000808d1e:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808d22:	48 01 c8             	add    rax,rcx
ffff800000808d25:	48 89 c1             	mov    rcx,rax
ffff800000808d28:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808d2b:	48 89 ce             	mov    rsi,rcx
ffff800000808d2e:	89 c7                	mov    edi,eax
ffff800000808d30:	49 89 df             	mov    r15,rbx
ffff800000808d33:	48 b8 11 b5 ee ff ff 	movabs rax,0xffffffffffeeb511
ffff800000808d3a:	ff ff ff 
ffff800000808d3d:	48 01 d8             	add    rax,rbx
ffff800000808d40:	ff d0                	call   rax
ffff800000808d42:	eb 01                	jmp    ffff800000808d45 <load_pe+0x33e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:278
            continue;
ffff800000808d44:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:274 (discriminator 2)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
ffff800000808d45:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
ffff800000808d49:	48 83 45 e0 28       	add    QWORD PTR [rbp-0x20],0x28
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:274 (discriminator 1)
ffff800000808d4e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808d55:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
ffff800000808d59:	0f b7 c0             	movzx  eax,ax
ffff800000808d5c:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000808d5f:	0f 8c 64 ff ff ff    	jl     ffff800000808cc9 <load_pe+0x2c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:286

    }

    //通过导入表加载需要的dll
    PIMAGE_DATA_DIRECTORY impd=&nth->OptionalHeader.DataDirectory[1];
ffff800000808d65:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808d6c:	48 05 90 00 00 00    	add    rax,0x90
ffff800000808d72:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:287
    if(impd->Size>0)
ffff800000808d79:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000808d80:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000808d83:	85 c0                	test   eax,eax
ffff800000808d85:	0f 84 bc 02 00 00    	je     ffff800000809047 <load_pe+0x640>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:289
    {
        int tmpi=impd->VirtualAddress+nbase;
ffff800000808d8b:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000808d92:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808d94:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808d98:	01 d0                	add    eax,edx
ffff800000808d9a:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:290
        PIMAGE_IMPORT_DESCRIPTOR impdes=tmpi;
ffff800000808da0:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
ffff800000808da6:	48 98                	cdqe   
ffff800000808da8:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:292
        int dllp;
        while (impdes->Characteristics)
ffff800000808dac:	e9 88 02 00 00       	jmp    ffff800000809039 <load_pe+0x632>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:295
        {
            //加载dll
            char *dllname=impdes->Name+nbase;
ffff800000808db1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808db5:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000808db8:	89 c2                	mov    edx,eax
ffff800000808dba:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808dbe:	48 01 d0             	add    rax,rdx
ffff800000808dc1:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:298
            //此处应有加载dll代码
            int dlli;
            if(strcmp(dllname,"sys.dll")==0)//加载系统dll的部分由内核已经完成
ffff800000808dc8:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff800000808dcf:	48 ba cb d5 ff ff ff 	movabs rdx,0xffffffffffffd5cb
ffff800000808dd6:	ff ff ff 
ffff800000808dd9:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000808ddd:	48 89 d6             	mov    rsi,rdx
ffff800000808de0:	48 89 c7             	mov    rdi,rax
ffff800000808de3:	49 89 df             	mov    r15,rbx
ffff800000808de6:	48 b8 a5 24 ef ff ff 	movabs rax,0xffffffffffef24a5
ffff800000808ded:	ff ff ff 
ffff800000808df0:	48 01 d8             	add    rax,rbx
ffff800000808df3:	ff d0                	call   rax
ffff800000808df5:	85 c0                	test   eax,eax
ffff800000808df7:	75 09                	jne    ffff800000808e02 <load_pe+0x3fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:300
            {
                dllp=0x1c00000;
ffff800000808df9:	c7 45 cc 00 00 c0 01 	mov    DWORD PTR [rbp-0x34],0x1c00000
ffff800000808e00:	eb 3d                	jmp    ffff800000808e3f <load_pe+0x438>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:303
            }else{
                //load_pe要记录module的加载
                dlli= load_pe(proc);
ffff800000808e02:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
ffff800000808e09:	48 89 c7             	mov    rdi,rax
ffff800000808e0c:	48 b8 b7 7a ee ff ff 	movabs rax,0xffffffffffee7ab7
ffff800000808e13:	ff ff ff 
ffff800000808e16:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000808e1a:	ff d0                	call   rax
ffff800000808e1c:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:306
                //dlli=load_library(dllname);
                //这个是线性地址
                dllp=get_module_addr(dlli);
ffff800000808e22:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff800000808e28:	89 c7                	mov    edi,eax
ffff800000808e2a:	49 89 df             	mov    r15,rbx
ffff800000808e2d:	48 b8 c4 83 ee ff ff 	movabs rax,0xffffffffffee83c4
ffff800000808e34:	ff ff ff 
ffff800000808e37:	48 01 d8             	add    rax,rbx
ffff800000808e3a:	ff d0                	call   rax
ffff800000808e3c:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:309
            }
            //从线性地址查页表找到物理地址
            PIMAGE_DOS_HEADER dlldos=dllp;
ffff800000808e3f:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808e42:	48 98                	cdqe   
ffff800000808e44:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:310
            PIMAGE_NT_HEADERS32 dllnth=dllp+dlldos->e_lfanew;
ffff800000808e4b:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808e4e:	48 63 d0             	movsxd rdx,eax
ffff800000808e51:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000808e58:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000808e5c:	48 01 d0             	add    rax,rdx
ffff800000808e5f:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:311
            PIMAGE_EXPORT_DIRECTORY dllexp=(dllnth->OptionalHeader.DataDirectory[0].VirtualAddress+dllp);
ffff800000808e66:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000808e6d:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [rax+0x8c]
ffff800000808e73:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808e76:	01 d0                	add    eax,edx
ffff800000808e78:	89 c0                	mov    eax,eax
ffff800000808e7a:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:312
            int funcn=dllexp->NumberOfNames;
ffff800000808e81:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000808e88:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000808e8b:	89 85 04 ff ff ff    	mov    DWORD PTR [rbp-0xfc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:313
            char **fnames=dllexp->AddressOfNames+dllp;
ffff800000808e91:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000808e98:	8b 50 20             	mov    edx,DWORD PTR [rax+0x20]
ffff800000808e9b:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808e9e:	01 d0                	add    eax,edx
ffff800000808ea0:	89 c0                	mov    eax,eax
ffff800000808ea2:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:314
            int *funcaddrs=dllexp->AddressOfFunctions+dllp;
ffff800000808ea9:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000808eb0:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
ffff800000808eb3:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808eb6:	01 d0                	add    eax,edx
ffff800000808eb8:	89 c0                	mov    eax,eax
ffff800000808eba:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:315
            short *funcords=dllexp->AddressOfNameOrdinals+dllp;
ffff800000808ec1:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000808ec8:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff800000808ecb:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808ece:	01 d0                	add    eax,edx
ffff800000808ed0:	89 c0                	mov    eax,eax
ffff800000808ed2:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:317
            //寻找nameordinal的base（最小值），里面的数据加上base才是真正的序号
            unsigned int ord_base=dllexp->Base;
ffff800000808ed9:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000808ee0:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000808ee3:	89 85 e4 fe ff ff    	mov    DWORD PTR [rbp-0x11c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:319
            //开始将导入表IAT的内容更新为函数地址
            unsigned int *iataddrs=impdes->FirstThunk+nbase;//IAT和INT内容一样，只用IAT
ffff800000808ee9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808eed:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000808ef0:	89 c2                	mov    edx,eax
ffff800000808ef2:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808ef6:	48 01 d0             	add    rax,rdx
ffff800000808ef9:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:320
            char **siataddrs=impdes->FirstThunk+nbase;
ffff800000808efd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808f01:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000808f04:	89 c2                	mov    edx,eax
ffff800000808f06:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808f0a:	48 01 d0             	add    rax,rdx
ffff800000808f0d:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:321
            while (*iataddrs)
ffff800000808f11:	e9 10 01 00 00       	jmp    ffff800000809026 <load_pe+0x61f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:324
            {
                //判断是序号导入还是名称导入
                if(((unsigned)*iataddrs)&0x80000000)
ffff800000808f16:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808f1a:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808f1c:	85 c0                	test   eax,eax
ffff800000808f1e:	79 43                	jns    ffff800000808f63 <load_pe+0x55c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:327
                {
                    //序号导入
                    unsigned int ord=((*iataddrs)&0x7fffffff)-ord_base;
ffff800000808f20:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808f24:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808f26:	25 ff ff ff 7f       	and    eax,0x7fffffff
ffff800000808f2b:	2b 85 e4 fe ff ff    	sub    eax,DWORD PTR [rbp-0x11c]
ffff800000808f31:	89 85 d0 fe ff ff    	mov    DWORD PTR [rbp-0x130],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:328
                    *iataddrs=funcaddrs[ord]+dllp;
ffff800000808f37:	8b 85 d0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x130]
ffff800000808f3d:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000808f44:	00 
ffff800000808f45:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000808f4c:	48 01 d0             	add    rax,rdx
ffff800000808f4f:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808f51:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808f54:	01 d0                	add    eax,edx
ffff800000808f56:	89 c2                	mov    edx,eax
ffff800000808f58:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808f5c:	89 10                	mov    DWORD PTR [rax],edx
ffff800000808f5e:	e9 b9 00 00 00       	jmp    ffff80000080901c <load_pe+0x615>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:332
                }else
                {
                    //名称导入
                    char *import_by_name_p=*iataddrs;//指向IMPORT_BY_NAME
ffff800000808f63:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808f67:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808f69:	89 c0                	mov    eax,eax
ffff800000808f6b:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:333
                    import_by_name_p+=2;//跳过开头两字节序号
ffff800000808f72:	48 83 85 d8 fe ff ff 	add    QWORD PTR [rbp-0x128],0x2
ffff800000808f79:	02 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:334
                    int i=0;
ffff800000808f7a:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335
                    for(;i<funcn;i++)
ffff800000808f81:	e9 87 00 00 00       	jmp    ffff80000080900d <load_pe+0x606>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:337
                    {
                        if(strcmp(import_by_name_p,fnames[i])==0)
ffff800000808f86:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000808f89:	48 98                	cdqe   
ffff800000808f8b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808f92:	00 
ffff800000808f93:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000808f9a:	48 01 d0             	add    rax,rdx
ffff800000808f9d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808fa0:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
ffff800000808fa7:	48 89 d6             	mov    rsi,rdx
ffff800000808faa:	48 89 c7             	mov    rdi,rax
ffff800000808fad:	49 89 df             	mov    r15,rbx
ffff800000808fb0:	48 b8 a5 24 ef ff ff 	movabs rax,0xffffffffffef24a5
ffff800000808fb7:	ff ff ff 
ffff800000808fba:	48 01 d8             	add    rax,rbx
ffff800000808fbd:	ff d0                	call   rax
ffff800000808fbf:	85 c0                	test   eax,eax
ffff800000808fc1:	75 46                	jne    ffff800000809009 <load_pe+0x602>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:339
                        {
                            int ordi=funcords[i];
ffff800000808fc3:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000808fc6:	48 98                	cdqe   
ffff800000808fc8:	48 8d 14 00          	lea    rdx,[rax+rax*1]
ffff800000808fcc:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000808fd3:	48 01 d0             	add    rax,rdx
ffff800000808fd6:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000808fd9:	98                   	cwde   
ffff800000808fda:	89 85 d4 fe ff ff    	mov    DWORD PTR [rbp-0x12c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:340
                            *iataddrs=funcaddrs[ordi]+dllp;//导入表中的IAT内容修改成地址
ffff800000808fe0:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
ffff800000808fe6:	48 98                	cdqe   
ffff800000808fe8:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000808fef:	00 
ffff800000808ff0:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000808ff7:	48 01 d0             	add    rax,rdx
ffff800000808ffa:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808ffc:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808fff:	01 d0                	add    eax,edx
ffff800000809001:	89 c2                	mov    edx,eax
ffff800000809003:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809007:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335
                    for(;i<funcn;i++)
ffff800000809009:	83 45 b4 01          	add    DWORD PTR [rbp-0x4c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335 (discriminator 1)
ffff80000080900d:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000809010:	3b 85 04 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xfc]
ffff800000809016:	0f 8c 6a ff ff ff    	jl     ffff800000808f86 <load_pe+0x57f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:344
                        }
                    }
                }
                iataddrs++;
ffff80000080901c:	48 83 45 c0 04       	add    QWORD PTR [rbp-0x40],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:345
                siataddrs++;
ffff800000809021:	48 83 45 b8 08       	add    QWORD PTR [rbp-0x48],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:321
            while (*iataddrs)
ffff800000809026:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080902a:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080902c:	85 c0                	test   eax,eax
ffff80000080902e:	0f 85 e2 fe ff ff    	jne    ffff800000808f16 <load_pe+0x50f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:347
            }
            impdes++;
ffff800000809034:	48 83 45 d0 14       	add    QWORD PTR [rbp-0x30],0x14
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:292
        while (impdes->Characteristics)
ffff800000809039:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080903d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080903f:	85 c0                	test   eax,eax
ffff800000809041:	0f 85 6a fd ff ff    	jne    ffff800000808db1 <load_pe+0x3aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:354
        }
    }


    //开始重定位
    PIMAGE_BASE_RELOCATION relp=0;
ffff800000809047:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff80000080904e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:355
    if(nth->OptionalHeader.DataDirectory[5].Size>0)
ffff80000080904f:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000809056:	8b 80 b4 00 00 00    	mov    eax,DWORD PTR [rax+0xb4]
ffff80000080905c:	85 c0                	test   eax,eax
ffff80000080905e:	0f 84 ec 00 00 00    	je     ffff800000809150 <load_pe+0x749>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:357
    {
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
ffff800000809064:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080906b:	8b 90 b0 00 00 00    	mov    edx,DWORD PTR [rax+0xb0]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:358
                                +(u32)nbase);
ffff800000809071:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:357
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
ffff800000809075:	01 d0                	add    eax,edx
ffff800000809077:	89 c0                	mov    eax,eax
ffff800000809079:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:359
        u16 *reloc=relp+sizeof(IMAGE_BASE_RELOCATION);
ffff80000080907d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000809081:	48 83 c0 40          	add    rax,0x40
ffff800000809085:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:360
        u16 *rtype=reloc+1;
ffff800000809089:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080908d:	48 83 c0 02          	add    rax,0x2
ffff800000809091:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:361
        int old_base=nth->OptionalHeader.ImageBase;
ffff800000809095:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080909c:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff8000008090a0:	89 85 cc fe ff ff    	mov    DWORD PTR [rbp-0x134],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:362
        while(relp->VirtualAddress){
ffff8000008090a6:	e9 97 00 00 00       	jmp    ffff800000809142 <load_pe+0x73b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:363
            int pgva=relp->VirtualAddress+nbase;
ffff8000008090ab:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008090af:	8b 10                	mov    edx,DWORD PTR [rax]
ffff8000008090b1:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008090b5:	01 d0                	add    eax,edx
ffff8000008090b7:	89 85 c8 fe ff ff    	mov    DWORD PTR [rbp-0x138],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:364
            for(int i=0;i<relp->SizeOfBlock/4;i++)
ffff8000008090bd:	c7 45 94 00 00 00 00 	mov    DWORD PTR [rbp-0x6c],0x0
ffff8000008090c4:	eb 5a                	jmp    ffff800000809120 <load_pe+0x719>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:366
            {
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
ffff8000008090c6:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008090ca:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff8000008090cd:	66 85 c0             	test   ax,ax
ffff8000008090d0:	74 49                	je     ffff80000080911b <load_pe+0x714>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:367
                int *at=*reloc+pgva;//要重定位的数据的地址
ffff8000008090d2:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008090d6:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff8000008090d9:	0f b7 d0             	movzx  edx,ax
ffff8000008090dc:	8b 85 c8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x138]
ffff8000008090e2:	01 d0                	add    eax,edx
ffff8000008090e4:	48 98                	cdqe   
ffff8000008090e6:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:368
                *at=*at-old_base+nbase;
ffff8000008090ed:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
ffff8000008090f4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008090f6:	2b 85 cc fe ff ff    	sub    eax,DWORD PTR [rbp-0x134]
ffff8000008090fc:	89 c2                	mov    edx,eax
ffff8000008090fe:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000809102:	01 d0                	add    eax,edx
ffff800000809104:	89 c2                	mov    edx,eax
ffff800000809106:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
ffff80000080910d:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:370
                //下一个
                reloc+=2;
ffff80000080910f:	48 83 45 a0 04       	add    QWORD PTR [rbp-0x60],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:371
                rtype+=2;
ffff800000809114:	48 83 45 98 04       	add    QWORD PTR [rbp-0x68],0x4
ffff800000809119:	eb 01                	jmp    ffff80000080911c <load_pe+0x715>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:366
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
ffff80000080911b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:364 (discriminator 2)
            for(int i=0;i<relp->SizeOfBlock/4;i++)
ffff80000080911c:	83 45 94 01          	add    DWORD PTR [rbp-0x6c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:364 (discriminator 1)
ffff800000809120:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000809124:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000809127:	c1 e8 02             	shr    eax,0x2
ffff80000080912a:	89 c2                	mov    edx,eax
ffff80000080912c:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff80000080912f:	39 c2                	cmp    edx,eax
ffff800000809131:	77 93                	ja     ffff8000008090c6 <load_pe+0x6bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:373
            }
            relp=(int)relp+0x1000;
ffff800000809133:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000809137:	05 00 10 00 00       	add    eax,0x1000
ffff80000080913c:	48 98                	cdqe   
ffff80000080913e:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:362
        while(relp->VirtualAddress){
ffff800000809142:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000809146:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809148:	85 c0                	test   eax,eax
ffff80000080914a:	0f 85 5b ff ff ff    	jne    ffff8000008090ab <load_pe+0x6a4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:379
        }
    }
    extern struct process task[];
    extern int cur_proc;
    //初始化堆
    chunk_header hdrtmp={
ffff800000809150:	c7 85 00 fd ff ff 00 	mov    DWORD PTR [rbp-0x300],0x0
ffff800000809157:	00 00 00 
ffff80000080915a:	c7 85 04 fd ff ff 00 	mov    DWORD PTR [rbp-0x2fc],0x0
ffff800000809161:	00 00 00 
ffff800000809164:	48 c7 85 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],0x0
ffff80000080916b:	00 00 00 00 
ffff80000080916f:	48 c7 85 10 fd ff ff 	mov    QWORD PTR [rbp-0x2f0],0x0
ffff800000809176:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:386
            .next=NULL,
            .pgn=0,
            .prev=NULL
    };//空堆
    //拷贝触发页中断然后分配
    memcpy((chunk_header*)HEAP_BASE,&hdrtmp,sizeof(hdrtmp));
ffff80000080917a:	48 8d 85 00 fd ff ff 	lea    rax,[rbp-0x300]
ffff800000809181:	ba 18 00 00 00       	mov    edx,0x18
ffff800000809186:	48 89 c6             	mov    rsi,rax
ffff800000809189:	bf 00 00 00 01       	mov    edi,0x1000000
ffff80000080918e:	49 89 df             	mov    r15,rbx
ffff800000809191:	48 b8 53 21 ef ff ff 	movabs rax,0xffffffffffef2153
ffff800000809198:	ff ff ff 
ffff80000080919b:	48 01 d8             	add    rax,rbx
ffff80000080919e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:387
    task[cur_proc].mem_struct.heap_base=HEAP_BASE;
ffff8000008091a0:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff8000008091a7:	ff ff ff 
ffff8000008091aa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008091ae:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008091b0:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff8000008091b7:	ff ff ff 
ffff8000008091ba:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008091be:	48 98                	cdqe   
ffff8000008091c0:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008091c7:	48 01 d0             	add    rax,rdx
ffff8000008091ca:	48 83 c0 20          	add    rax,0x20
ffff8000008091ce:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x1000000
ffff8000008091d5:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:388
    task[cur_proc].mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
ffff8000008091d6:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff8000008091dd:	ff ff ff 
ffff8000008091e0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008091e4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008091e6:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff8000008091ed:	ff ff ff 
ffff8000008091f0:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008091f4:	48 98                	cdqe   
ffff8000008091f6:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008091fd:	48 01 d0             	add    rax,rdx
ffff800000809200:	48 83 c0 20          	add    rax,0x20
ffff800000809204:	48 c7 40 10 00 10 00 	mov    QWORD PTR [rax+0x10],0x1001000
ffff80000080920b:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:390
    //设置栈
    task[cur_proc].mem_struct.stack_top=STACK_TOP;
ffff80000080920c:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000809213:	ff ff ff 
ffff800000809216:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080921a:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080921c:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000809223:	ff ff ff 
ffff800000809226:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080922a:	48 98                	cdqe   
ffff80000080922c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000809233:	48 01 d0             	add    rax,rdx
ffff800000809236:	48 83 c0 30          	add    rax,0x30
ffff80000080923a:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff800000809241:	7f 00 00 
ffff800000809244:	48 89 70 10          	mov    QWORD PTR [rax+0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:397


    //完毕,调用入口函数
    //重定位完毕，准备调用DllMain
    typedef int (*Main)(int,void*);
    Main main=shell_addr;
ffff800000809248:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffff80000080924f:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:398
    int ecode=main(0,NULL);
ffff800000809256:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
ffff80000080925d:	be 00 00 00 00       	mov    esi,0x0
ffff800000809262:	bf 00 00 00 00       	mov    edi,0x0
ffff800000809267:	ff d0                	call   rax
ffff800000809269:	89 85 b4 fe ff ff    	mov    DWORD PTR [rbp-0x14c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:399
    do_syscall(SYSCALL_EXIT,ecode,0,0,0,0,0);
ffff80000080926f:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x14c]
ffff800000809275:	48 98                	cdqe   
ffff800000809277:	48 c7 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],0x14
ffff80000080927e:	14 00 00 00 
ffff800000809282:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
ffff800000809289:	48 c7 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],0x0
ffff800000809290:	00 00 00 00 
ffff800000809294:	48 c7 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],0x0
ffff80000080929b:	00 00 00 00 
ffff80000080929f:	48 c7 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],0x0
ffff8000008092a6:	00 00 00 00 
ffff8000008092aa:	48 c7 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],0x0
ffff8000008092b1:	00 00 00 00 
ffff8000008092b5:	48 c7 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],0x0
ffff8000008092bc:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:63
        asm volatile(".byte 0x48\n"
ffff8000008092c0:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff8000008092c7:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
ffff8000008092ce:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
ffff8000008092d5:	48 8b 95 90 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x170]
ffff8000008092dc:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
ffff8000008092e3:	4c 8b 85 80 fe ff ff 	mov    r8,QWORD PTR [rbp-0x180]
ffff8000008092ea:	4c 8b 8d 78 fe ff ff 	mov    r9,QWORD PTR [rbp-0x188]
ffff8000008092f1:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:65
        long ret=0;
ffff8000008092f4:	48 c7 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],0x0
ffff8000008092fb:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:66
        asm volatile("mov %%rax,%0"::"m"(ret));
ffff8000008092ff:	48 89 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],rax
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:402 (discriminator 1)
    //
    //不应该执行到这
    while(1);
ffff800000809306:	eb fe                	jmp    ffff800000809306 <load_pe+0x8ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:404 (discriminator 2)
    return task[cur_proc].exit_code;
}
ffff800000809308:	48 81 c4 10 03 00 00 	add    rsp,0x310
ffff80000080930f:	5b                   	pop    rbx
ffff800000809310:	41 5f                	pop    r15
ffff800000809312:	5d                   	pop    rbp
ffff800000809313:	c3                   	ret    

ffff800000809314 <get_module_addr>:
get_module_addr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:407

int get_module_addr(int mi)
{
ffff800000809314:	f3 0f 1e fa          	endbr64 
ffff800000809318:	55                   	push   rbp
ffff800000809319:	48 89 e5             	mov    rbp,rsp
ffff80000080931c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080931c <get_module_addr+0x8>
ffff800000809323:	49 bb 34 7c 11 00 00 	movabs r11,0x117c34
ffff80000080932a:	00 00 00 
ffff80000080932d:	4c 01 d8             	add    rax,r11
ffff800000809330:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:408
    return modules[mi].base;
ffff800000809333:	48 ba e0 fd ff ff ff 	movabs rdx,0xfffffffffffffde0
ffff80000080933a:	ff ff ff 
ffff80000080933d:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000809341:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000809344:	48 63 d0             	movsxd rdx,eax
ffff800000809347:	48 89 d0             	mov    rax,rdx
ffff80000080934a:	48 c1 e0 03          	shl    rax,0x3
ffff80000080934e:	48 29 d0             	sub    rax,rdx
ffff800000809351:	48 c1 e0 03          	shl    rax,0x3
ffff800000809355:	48 01 c8             	add    rax,rcx
ffff800000809358:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:409
}
ffff80000080935b:	5d                   	pop    rbp
ffff80000080935c:	c3                   	ret    

ffff80000080935d <dispose_library>:
dispose_library():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:411
int dispose_library(int dlln)
{
ffff80000080935d:	f3 0f 1e fa          	endbr64 
ffff800000809361:	55                   	push   rbp
ffff800000809362:	48 89 e5             	mov    rbp,rsp
ffff800000809365:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809365 <dispose_library+0x8>
ffff80000080936c:	49 bb eb 7b 11 00 00 	movabs r11,0x117beb
ffff800000809373:	00 00 00 
ffff800000809376:	4c 01 d8             	add    rax,r11
ffff800000809379:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:412
    if(dlln<0||dlln>=MAX_DLLS)return -1;
ffff80000080937c:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000809380:	78 09                	js     ffff80000080938b <dispose_library+0x2e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:412 (discriminator 2)
ffff800000809382:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
ffff800000809389:	7e 07                	jle    ffff800000809392 <dispose_library+0x35>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:412 (discriminator 3)
ffff80000080938b:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000809390:	eb 2c                	jmp    ffff8000008093be <dispose_library+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:417
    //空间不够，释放之前申请的
    // for(int j=0;j<dlls[dlln].page_used;j++)
    //     dispose_page(get_phyaddr(dlls[dlln].page_num[j]));
    //释放dll
    dlls[dlln].flag=DLL_STAT_EMPTY;
ffff800000809392:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff800000809399:	ff ff ff 
ffff80000080939c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008093a0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008093a3:	48 98                	cdqe   
ffff8000008093a5:	48 69 c0 2c 01 00 00 	imul   rax,rax,0x12c
ffff8000008093ac:	48 01 d0             	add    rax,rdx
ffff8000008093af:	48 83 c0 08          	add    rax,0x8
ffff8000008093b3:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:418
    return 0;
ffff8000008093b9:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:419
}
ffff8000008093be:	5d                   	pop    rbp
ffff8000008093bf:	c3                   	ret    

ffff8000008093c0 <sys_insmod>:
sys_insmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:467

    return 0;
} */

int sys_insmod(char *path)
{
ffff8000008093c0:	f3 0f 1e fa          	endbr64 
ffff8000008093c4:	55                   	push   rbp
ffff8000008093c5:	48 89 e5             	mov    rbp,rsp
ffff8000008093c8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008093c8 <sys_insmod+0x8>
ffff8000008093cf:	49 bb 88 7b 11 00 00 	movabs r11,0x117b88
ffff8000008093d6:	00 00 00 
ffff8000008093d9:	4c 01 d8             	add    rax,r11
ffff8000008093dc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:469

}
ffff8000008093e0:	90                   	nop
ffff8000008093e1:	5d                   	pop    rbp
ffff8000008093e2:	c3                   	ret    

ffff8000008093e3 <sys_rmmod>:
sys_rmmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:471
int sys_rmmod(char *name)
{
ffff8000008093e3:	f3 0f 1e fa          	endbr64 
ffff8000008093e7:	55                   	push   rbp
ffff8000008093e8:	48 89 e5             	mov    rbp,rsp
ffff8000008093eb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008093eb <sys_rmmod+0x8>
ffff8000008093f2:	49 bb 65 7b 11 00 00 	movabs r11,0x117b65
ffff8000008093f9:	00 00 00 
ffff8000008093fc:	4c 01 d8             	add    rax,r11
ffff8000008093ff:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:473

}
ffff800000809403:	90                   	nop
ffff800000809404:	5d                   	pop    rbp
ffff800000809405:	c3                   	ret    

ffff800000809406 <new_load_elf>:
new_load_elf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:474
off_t new_load_elf(struct file* elf){
ffff800000809406:	f3 0f 1e fa          	endbr64 
ffff80000080940a:	55                   	push   rbp
ffff80000080940b:	48 89 e5             	mov    rbp,rsp
ffff80000080940e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080940e <new_load_elf+0x8>
ffff800000809415:	49 bb 42 7b 11 00 00 	movabs r11,0x117b42
ffff80000080941c:	00 00 00 
ffff80000080941f:	4c 01 d8             	add    rax,r11
ffff800000809422:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:480
    //读取文件头
    //if ET_DYN
    //load dl
    //else
    // load elf
}
ffff800000809426:	90                   	nop
ffff800000809427:	5d                   	pop    rbp
ffff800000809428:	c3                   	ret    

ffff800000809429 <load_elf>:
load_elf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:482
//切换进程前,在execve系统调用中
off_t load_elf(struct file *elf) {
ffff800000809429:	f3 0f 1e fa          	endbr64 
ffff80000080942d:	55                   	push   rbp
ffff80000080942e:	48 89 e5             	mov    rbp,rsp
ffff800000809431:	41 57                	push   r15
ffff800000809433:	53                   	push   rbx
ffff800000809434:	48 81 ec 50 01 00 00 	sub    rsp,0x150
ffff80000080943b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080943b <load_elf+0x12>
ffff800000809442:	49 bb 15 7b 11 00 00 	movabs r11,0x117b15
ffff800000809449:	00 00 00 
ffff80000080944c:	4c 01 db             	add    rbx,r11
ffff80000080944f:	48 89 bd a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:484
    // 读取文件头
    struct file* elf_storage=elf;
ffff800000809456:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff80000080945d:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:485
    off_t tmpla=kmalloc();
ffff800000809461:	49 89 df             	mov    r15,rbx
ffff800000809464:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809469:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff800000809470:	ff ff ff 
ffff800000809473:	48 01 da             	add    rdx,rbx
ffff800000809476:	ff d2                	call   rdx
ffff800000809478:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:486
    off_t shla=kmalloc();
ffff80000080947f:	49 89 df             	mov    r15,rbx
ffff800000809482:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809487:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff80000080948e:	ff ff ff 
ffff800000809491:	48 01 da             	add    rdx,rbx
ffff800000809494:	ff d2                	call   rdx
ffff800000809496:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:487
    if(tmpla==-1)
ffff80000080949d:	48 83 bd 78 ff ff ff 	cmp    QWORD PTR [rbp-0x88],0xffffffffffffffff
ffff8000008094a4:	ff 
ffff8000008094a5:	75 28                	jne    ffff8000008094cf <load_elf+0xa6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:489
    {
        current->regs.errcode=-ENOMEM;
ffff8000008094a7:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff8000008094ae:	ff ff ff 
ffff8000008094b1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008094b5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008094b8:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff8000008094bf:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:490
        return -1;
ffff8000008094c3:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff8000008094ca:	e9 b7 0a 00 00       	jmp    ffff800000809f86 <load_elf+0xb5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:492
    }
ready:
ffff8000008094cf:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:493
    elf->position=0;
ffff8000008094d0:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff8000008094d7:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:495
    //读取文件头
    elf->f_ops->read(elf, (char *) tmpla, PAGE_4K_SIZE, &elf->position);
ffff8000008094de:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff8000008094e5:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008094e9:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff8000008094ed:	48 8b 95 a8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x158]
ffff8000008094f4:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
ffff8000008094fb:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff800000809502:	48 89 d1             	mov    rcx,rdx
ffff800000809505:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080950a:	48 89 c7             	mov    rdi,rax
ffff80000080950d:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:497

    Elf64_Ehdr *ehdr=(Elf64_Phdr*)tmpla;
ffff800000809510:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000809517:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:498
    u16 entn=ehdr->e_phnum;
ffff80000080951e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000809525:	0f b7 40 38          	movzx  eax,WORD PTR [rax+0x38]
ffff800000809529:	66 89 85 66 ff ff ff 	mov    WORD PTR [rbp-0x9a],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:499
    u16 ents=ehdr->e_phentsize;
ffff800000809530:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000809537:	0f b7 40 36          	movzx  eax,WORD PTR [rax+0x36]
ffff80000080953b:	66 89 85 64 ff ff ff 	mov    WORD PTR [rbp-0x9c],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:500
    elf->position=ehdr->e_shoff;
ffff800000809542:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000809549:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080954d:	48 89 c2             	mov    rdx,rax
ffff800000809550:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff800000809557:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:501
    elf->f_ops->read(elf,(char*)shla,ehdr->e_shnum*ehdr->e_shentsize,&elf->position);
ffff80000080955a:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff800000809561:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000809565:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff800000809569:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
ffff800000809570:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000809577:	0f b7 40 3c          	movzx  eax,WORD PTR [rax+0x3c]
ffff80000080957b:	0f b7 d0             	movzx  edx,ax
ffff80000080957e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000809585:	0f b7 40 3a          	movzx  eax,WORD PTR [rax+0x3a]
ffff800000809589:	0f b7 c0             	movzx  eax,ax
ffff80000080958c:	0f af c2             	imul   eax,edx
ffff80000080958f:	48 63 d0             	movsxd rdx,eax
ffff800000809592:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
ffff800000809599:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff8000008095a0:	48 89 c7             	mov    rdi,rax
ffff8000008095a3:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:502
    struct Elf64_Shdr* sh= (struct Elf64_Shdr *) (shla);
ffff8000008095a6:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008095ad:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:503
    Elf64_Phdr *ph= (Elf64_Phdr *) (tmpla + ehdr->e_phoff);
ffff8000008095b4:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff8000008095bb:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff8000008095bf:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008095c6:	48 01 d0             	add    rax,rdx
ffff8000008095c9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:504
    size_t tot_sz=0;
ffff8000008095cd:	48 c7 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],0x0
ffff8000008095d4:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:505
    off_t base=ph->p_vaddr,offset=0;
ffff8000008095d8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008095dc:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008095e0:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
ffff8000008095e7:	48 c7 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],0x0
ffff8000008095ee:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:506
    int reloc_flag=0;
ffff8000008095f2:	c7 85 3c ff ff ff 00 	mov    DWORD PTR [rbp-0xc4],0x0
ffff8000008095f9:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:530
            offset=new_base-base;
        }
    } */
    

    module* mod=0;
ffff8000008095fc:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000809603:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:532
    //module项设置
    for(int i=0;i<MAX_MODULES;i++){
ffff800000809604:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080960b:	e9 04 01 00 00       	jmp    ffff800000809714 <load_elf+0x2eb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:533
        if(modules[i].type==ET_NONE){
ffff800000809610:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000809617:	ff ff ff 
ffff80000080961a:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080961e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809621:	48 63 d0             	movsxd rdx,eax
ffff800000809624:	48 89 d0             	mov    rax,rdx
ffff800000809627:	48 c1 e0 03          	shl    rax,0x3
ffff80000080962b:	48 29 d0             	sub    rax,rdx
ffff80000080962e:	48 c1 e0 03          	shl    rax,0x3
ffff800000809632:	48 01 c8             	add    rax,rcx
ffff800000809635:	48 83 c0 18          	add    rax,0x18
ffff800000809639:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080963c:	48 85 c0             	test   rax,rax
ffff80000080963f:	0f 85 cb 00 00 00    	jne    ffff800000809710 <load_elf+0x2e7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:534
            modules[i].type=ehdr->e_type;
ffff800000809645:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080964c:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000809650:	0f b7 d0             	movzx  edx,ax
ffff800000809653:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff80000080965a:	ff ff ff 
ffff80000080965d:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff800000809661:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809664:	48 63 c8             	movsxd rcx,eax
ffff800000809667:	48 89 c8             	mov    rax,rcx
ffff80000080966a:	48 c1 e0 03          	shl    rax,0x3
ffff80000080966e:	48 29 c8             	sub    rax,rcx
ffff800000809671:	48 c1 e0 03          	shl    rax,0x3
ffff800000809675:	48 01 f0             	add    rax,rsi
ffff800000809678:	48 83 c0 18          	add    rax,0x18
ffff80000080967c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:535
            modules[i].load_offset=offset;
ffff80000080967f:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000809686:	ff ff ff 
ffff800000809689:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080968d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809690:	48 63 d0             	movsxd rdx,eax
ffff800000809693:	48 89 d0             	mov    rax,rdx
ffff800000809696:	48 c1 e0 03          	shl    rax,0x3
ffff80000080969a:	48 29 d0             	sub    rax,rdx
ffff80000080969d:	48 c1 e0 03          	shl    rax,0x3
ffff8000008096a1:	48 01 c8             	add    rax,rcx
ffff8000008096a4:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008096a8:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff8000008096af:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:536
            modules[i].base=base;
ffff8000008096b2:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff8000008096b9:	ff ff ff 
ffff8000008096bc:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008096c0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008096c3:	48 63 d0             	movsxd rdx,eax
ffff8000008096c6:	48 89 d0             	mov    rax,rdx
ffff8000008096c9:	48 c1 e0 03          	shl    rax,0x3
ffff8000008096cd:	48 29 d0             	sub    rax,rdx
ffff8000008096d0:	48 c1 e0 03          	shl    rax,0x3
ffff8000008096d4:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff8000008096d8:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008096df:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:537
            mod=modules+i;
ffff8000008096e2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008096e5:	48 63 d0             	movsxd rdx,eax
ffff8000008096e8:	48 89 d0             	mov    rax,rdx
ffff8000008096eb:	48 c1 e0 03          	shl    rax,0x3
ffff8000008096ef:	48 29 d0             	sub    rax,rdx
ffff8000008096f2:	48 c1 e0 03          	shl    rax,0x3
ffff8000008096f6:	48 89 c2             	mov    rdx,rax
ffff8000008096f9:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000809700:	ff ff ff 
ffff800000809703:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809707:	48 01 d0             	add    rax,rdx
ffff80000080970a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:538
            break;
ffff80000080970e:	eb 0e                	jmp    ffff80000080971e <load_elf+0x2f5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:532 (discriminator 2)
    for(int i=0;i<MAX_MODULES;i++){
ffff800000809710:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:532 (discriminator 1)
ffff800000809714:	83 7d dc 7f          	cmp    DWORD PTR [rbp-0x24],0x7f
ffff800000809718:	0f 8e f2 fe ff ff    	jle    ffff800000809610 <load_elf+0x1e7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:541
        }
    }
    for(int i=0;i<entn;i++){
ffff80000080971e:	c7 85 38 ff ff ff 00 	mov    DWORD PTR [rbp-0xc8],0x0
ffff800000809725:	00 00 00 
ffff800000809728:	90                   	nop
ffff800000809729:	0f b7 85 66 ff ff ff 	movzx  eax,WORD PTR [rbp-0x9a]
ffff800000809730:	39 85 38 ff ff ff    	cmp    DWORD PTR [rbp-0xc8],eax
ffff800000809736:	0f 8d d2 00 00 00    	jge    ffff80000080980e <load_elf+0x3e5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:546
        
        if((ph[i].p_type|PT_INTERP)!=0){
            //load dl
            //
            if(current->dl)break;
ffff80000080973c:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000809743:	ff ff ff 
ffff800000809746:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080974a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080974d:	8b 80 54 03 00 00    	mov    eax,DWORD PTR [rax+0x354]
ffff800000809753:	85 c0                	test   eax,eax
ffff800000809755:	0f 85 b2 00 00 00    	jne    ffff80000080980d <load_elf+0x3e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:547
            int fd=sys_open("/mnt/dl.so",O_EXEC);
ffff80000080975b:	be 00 10 00 00       	mov    esi,0x1000
ffff800000809760:	48 b8 d3 d5 ff ff ff 	movabs rax,0xffffffffffffd5d3
ffff800000809767:	ff ff ff 
ffff80000080976a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080976e:	48 89 c7             	mov    rdi,rax
ffff800000809771:	49 89 df             	mov    r15,rbx
ffff800000809774:	48 b8 f0 ad ee ff ff 	movabs rax,0xffffffffffeeadf0
ffff80000080977b:	ff ff ff 
ffff80000080977e:	48 01 d8             	add    rax,rbx
ffff800000809781:	ff d0                	call   rax
ffff800000809783:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:548
            kmfree(tmpla);
ffff800000809789:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000809790:	48 89 c7             	mov    rdi,rax
ffff800000809793:	49 89 df             	mov    r15,rbx
ffff800000809796:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff80000080979d:	ff ff ff 
ffff8000008097a0:	48 01 d8             	add    rax,rbx
ffff8000008097a3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:549
            kmfree(shla);
ffff8000008097a5:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008097ac:	48 89 c7             	mov    rdi,rax
ffff8000008097af:	49 89 df             	mov    r15,rbx
ffff8000008097b2:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff8000008097b9:	ff ff ff 
ffff8000008097bc:	48 01 d8             	add    rax,rbx
ffff8000008097bf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:550
            current->dl=fd;
ffff8000008097c1:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff8000008097c8:	ff ff ff 
ffff8000008097cb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008097cf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008097d2:	8b 95 34 ff ff ff    	mov    edx,DWORD PTR [rbp-0xcc]
ffff8000008097d8:	89 90 54 03 00 00    	mov    DWORD PTR [rax+0x354],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:551
            elf=current->openf[fd];
ffff8000008097de:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff8000008097e5:	ff ff ff 
ffff8000008097e8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008097ec:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008097ef:	8b 95 34 ff ff ff    	mov    edx,DWORD PTR [rbp-0xcc]
ffff8000008097f5:	48 63 d2             	movsxd rdx,edx
ffff8000008097f8:	48 83 c2 1e          	add    rdx,0x1e
ffff8000008097fc:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000809801:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:552
            goto ready;
ffff800000809808:	e9 c3 fc ff ff       	jmp    ffff8000008094d0 <load_elf+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:546
            if(current->dl)break;
ffff80000080980d:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:555
        }
    }
    for(int i=0;i<entn;i++){
ffff80000080980e:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff800000809815:	e9 9c 01 00 00       	jmp    ffff8000008099b6 <load_elf+0x58d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:558
        //加载段
        if((ph->p_type|PT_LOAD)!=0){
            unsigned long off=ph->p_offset;
ffff80000080981a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080981e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000809822:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:559
            unsigned long fs=ph->p_filesz;
ffff800000809829:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080982d:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000809831:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:560
            size_t ms=ph->p_memsz;
ffff800000809838:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080983c:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff800000809840:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:561
            char* vptr= (char *) ph->p_vaddr+offset;
ffff800000809847:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080984b:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080984f:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff800000809856:	48 01 d0             	add    rax,rdx
ffff800000809859:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:562
            elf->position=off;
ffff800000809860:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
ffff800000809867:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff80000080986e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:563
            if(off==0){
ffff800000809871:	48 83 bd f8 fe ff ff 	cmp    QWORD PTR [rbp-0x108],0x0
ffff800000809878:	00 
ffff800000809879:	75 0f                	jne    ffff80000080988a <load_elf+0x461>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:564
                mod->header=vptr;
ffff80000080987b:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
ffff800000809882:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809886:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:567
            }
            //先映射好内存
            int attr=PAGE_PRESENT|PAGE_FOR_ALL;
ffff80000080988a:	c7 85 dc fe ff ff 05 	mov    DWORD PTR [rbp-0x124],0x5
ffff800000809891:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:569
            if((ph->p_flags|PF_X)!=0||(ph->p_flags|PF_W)!=0)
                attr|=PAGE_RWX;
ffff800000809894:	83 8d dc fe ff ff 02 	or     DWORD PTR [rbp-0x124],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:570
            int pgc=(ms-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff80000080989b:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff8000008098a2:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff8000008098a8:	48 c1 e8 0c          	shr    rax,0xc
ffff8000008098ac:	89 85 d8 fe ff ff    	mov    DWORD PTR [rbp-0x128],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:571
            for(int j=0;j<pgc;j++){
ffff8000008098b2:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff8000008098b9:	e9 af 00 00 00       	jmp    ffff80000080996d <load_elf+0x544>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:572
                off_t dest=(off_t) (vptr + j * PAGE_4K_SIZE);
ffff8000008098be:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008098c1:	c1 e0 0c             	shl    eax,0xc
ffff8000008098c4:	48 63 d0             	movsxd rdx,eax
ffff8000008098c7:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
ffff8000008098ce:	48 01 d0             	add    rax,rdx
ffff8000008098d1:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:573
                off_t lma=pmalloc();
ffff8000008098d8:	49 89 df             	mov    r15,rbx
ffff8000008098db:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008098e0:	48 ba ed 1e ee ff ff 	movabs rdx,0xffffffffffee1eed
ffff8000008098e7:	ff ff ff 
ffff8000008098ea:	48 01 da             	add    rdx,rbx
ffff8000008098ed:	ff d2                	call   rdx
ffff8000008098ef:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:574
                if(lma==-1)
ffff8000008098f6:	48 83 bd c8 fe ff ff 	cmp    QWORD PTR [rbp-0x138],0xffffffffffffffff
ffff8000008098fd:	ff 
ffff8000008098fe:	75 28                	jne    ffff800000809928 <load_elf+0x4ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:576
                {
                    current->regs.errcode=-ENOMEM;
ffff800000809900:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000809907:	ff ff ff 
ffff80000080990a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080990e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809911:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff800000809918:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:577
                    return -1;
ffff80000080991c:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000809923:	e9 5e 06 00 00       	jmp    ffff800000809f86 <load_elf+0xb5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:579 (discriminator 2)
                }
                smmap(lma , dest, attr, current->pml4);
ffff800000809928:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff80000080992f:	ff ff ff 
ffff800000809932:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809936:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809939:	48 8b 88 e0 00 00 00 	mov    rcx,QWORD PTR [rax+0xe0]
ffff800000809940:	8b 95 dc fe ff ff    	mov    edx,DWORD PTR [rbp-0x124]
ffff800000809946:	48 8b b5 d0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x130]
ffff80000080994d:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000809954:	48 89 c7             	mov    rdi,rax
ffff800000809957:	49 89 df             	mov    r15,rbx
ffff80000080995a:	48 b8 77 0e ee ff ff 	movabs rax,0xffffffffffee0e77
ffff800000809961:	ff ff ff 
ffff800000809964:	48 01 d8             	add    rax,rbx
ffff800000809967:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:571 (discriminator 2)
            for(int j=0;j<pgc;j++){
ffff800000809969:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:571 (discriminator 1)
ffff80000080996d:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000809970:	3b 85 d8 fe ff ff    	cmp    eax,DWORD PTR [rbp-0x128]
ffff800000809976:	0f 8c 42 ff ff ff    	jl     ffff8000008098be <load_elf+0x495>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:582
            }
            //读取
            elf->f_ops->read(elf,vptr,fs,&elf->position);
ffff80000080997c:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff800000809983:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000809987:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff80000080998b:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
ffff800000809992:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
ffff800000809999:	48 8b b5 e0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x120]
ffff8000008099a0:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff8000008099a7:	48 89 c7             	mov    rdi,rax
ffff8000008099aa:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:585

        }
        ph++;
ffff8000008099ad:	48 83 45 e8 38       	add    QWORD PTR [rbp-0x18],0x38
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:555
    for(int i=0;i<entn;i++){
ffff8000008099b2:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:555 (discriminator 1)
ffff8000008099b6:	0f b7 85 66 ff ff ff 	movzx  eax,WORD PTR [rbp-0x9a]
ffff8000008099bd:	39 45 d8             	cmp    DWORD PTR [rbp-0x28],eax
ffff8000008099c0:	0f 8c 54 fe ff ff    	jl     ffff80000080981a <load_elf+0x3f1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:588
    }
    //找dynamic段
    struct Elf64_Shdr *dynamic=NULL;
ffff8000008099c6:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff8000008099cd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:589
    off_t* got=NULL;
ffff8000008099ce:	48 c7 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],0x0
ffff8000008099d5:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:590
    for(int i=0;i<ehdr->e_shnum;i++){
ffff8000008099d9:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
ffff8000008099e0:	eb 50                	jmp    ffff800000809a32 <load_elf+0x609>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:591
        if(sh[i].sh_type==SHT_DYNAMIC)
ffff8000008099e2:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff8000008099e5:	48 63 d0             	movsxd rdx,eax
ffff8000008099e8:	48 89 d0             	mov    rax,rdx
ffff8000008099eb:	48 01 c0             	add    rax,rax
ffff8000008099ee:	48 01 d0             	add    rax,rdx
ffff8000008099f1:	48 c1 e0 04          	shl    rax,0x4
ffff8000008099f5:	48 89 c2             	mov    rdx,rax
ffff8000008099f8:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff8000008099ff:	48 01 d0             	add    rax,rdx
ffff800000809a02:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000809a05:	83 f8 06             	cmp    eax,0x6
ffff800000809a08:	75 24                	jne    ffff800000809a2e <load_elf+0x605>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:592
            dynamic=sh+i;
ffff800000809a0a:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000809a0d:	48 63 d0             	movsxd rdx,eax
ffff800000809a10:	48 89 d0             	mov    rax,rdx
ffff800000809a13:	48 01 c0             	add    rax,rax
ffff800000809a16:	48 01 d0             	add    rax,rdx
ffff800000809a19:	48 c1 e0 04          	shl    rax,0x4
ffff800000809a1d:	48 89 c2             	mov    rdx,rax
ffff800000809a20:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff800000809a27:	48 01 d0             	add    rax,rdx
ffff800000809a2a:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:590 (discriminator 2)
    for(int i=0;i<ehdr->e_shnum;i++){
ffff800000809a2e:	83 45 c4 01          	add    DWORD PTR [rbp-0x3c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:590 (discriminator 1)
ffff800000809a32:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000809a39:	0f b7 40 3c          	movzx  eax,WORD PTR [rax+0x3c]
ffff800000809a3d:	0f b7 c0             	movzx  eax,ax
ffff800000809a40:	39 45 c4             	cmp    DWORD PTR [rbp-0x3c],eax
ffff800000809a43:	7c 9d                	jl     ffff8000008099e2 <load_elf+0x5b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:594
    }
    if(dynamic){
ffff800000809a45:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff800000809a4a:	0f 84 87 03 00 00    	je     ffff800000809dd7 <load_elf+0x9ae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:595
        char* dynstr=0;
ffff800000809a50:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff800000809a57:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:596
        Elf64_Dyn *dyn=dynamic->sh_addr+offset;
ffff800000809a58:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809a5c:	48 8b 50 0c          	mov    rdx,QWORD PTR [rax+0xc]
ffff800000809a60:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff800000809a67:	48 01 d0             	add    rax,rdx
ffff800000809a6a:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:598

        mod->p_dynamic=dynamic;
ffff800000809a71:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000809a75:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809a79:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:602
        //这里一堆获取函数之后实现细节
        // dynstr=so_get_dynstr(dyn);
        //so_get_dynstr从so中获取.dynstr节
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff800000809a7d:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
ffff800000809a84:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffff800000809a88:	eb 2a                	jmp    ffff800000809ab4 <load_elf+0x68b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:603
            if(p->d_tag==DT_STRTAB){
ffff800000809a8a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000809a8e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809a91:	48 83 f8 05          	cmp    rax,0x5
ffff800000809a95:	75 18                	jne    ffff800000809aaf <load_elf+0x686>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:604
                dynstr=p->d_un.d_ptr+offset;
ffff800000809a97:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000809a9b:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000809a9f:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff800000809aa6:	48 01 d0             	add    rax,rdx
ffff800000809aa9:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:605
                break;
ffff800000809aad:	eb 11                	jmp    ffff800000809ac0 <load_elf+0x697>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:602 (discriminator 2)
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff800000809aaf:	48 83 45 b0 10       	add    QWORD PTR [rbp-0x50],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:602 (discriminator 1)
ffff800000809ab4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000809ab8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809abb:	48 85 c0             	test   rax,rax
ffff800000809abe:	75 ca                	jne    ffff800000809a8a <load_elf+0x661>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:608
            }
        }
        if(!dynstr){
ffff800000809ac0:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
ffff800000809ac5:	75 28                	jne    ffff800000809aef <load_elf+0x6c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:609
            comprintf("cannot find dynstr in .dynamic!\n");
ffff800000809ac7:	48 b8 e0 d5 ff ff ff 	movabs rax,0xffffffffffffd5e0
ffff800000809ace:	ff ff ff 
ffff800000809ad1:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000809ad5:	48 89 c7             	mov    rdi,rax
ffff800000809ad8:	49 89 df             	mov    r15,rbx
ffff800000809adb:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809ae0:	48 ba b3 1c ef ff ff 	movabs rdx,0xffffffffffef1cb3
ffff800000809ae7:	ff ff ff 
ffff800000809aea:	48 01 da             	add    rdx,rbx
ffff800000809aed:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:618
        // so_load_sos(so_paths);
        //so_get_needed&so_load_sos
        //so_get_got
        // got=so_get_got(dyn);
        //intel架构上DT_PLTGOT存放的是got地址
        size_t relsz=0,relentsz=0;
ffff800000809aef:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff800000809af6:	00 
ffff800000809af7:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff800000809afe:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:619
        off_t relptr=0;
ffff800000809aff:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff800000809b06:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:620
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff800000809b07:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
ffff800000809b0e:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffff800000809b12:	e9 b0 02 00 00       	jmp    ffff800000809dc7 <load_elf+0x99e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:621
            switch (p->d_tag)
ffff800000809b17:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809b1b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809b1e:	48 83 f8 13          	cmp    rax,0x13
ffff800000809b22:	0f 87 d2 01 00 00    	ja     ffff800000809cfa <load_elf+0x8d1>
ffff800000809b28:	48 83 f8 07          	cmp    rax,0x7
ffff800000809b2c:	73 29                	jae    ffff800000809b57 <load_elf+0x72e>
ffff800000809b2e:	48 83 f8 06          	cmp    rax,0x6
ffff800000809b32:	0f 84 86 01 00 00    	je     ffff800000809cbe <load_elf+0x895>
ffff800000809b38:	48 83 f8 06          	cmp    rax,0x6
ffff800000809b3c:	0f 87 b8 01 00 00    	ja     ffff800000809cfa <load_elf+0x8d1>
ffff800000809b42:	48 83 f8 01          	cmp    rax,0x1
ffff800000809b46:	74 62                	je     ffff800000809baa <load_elf+0x781>
ffff800000809b48:	48 83 f8 03          	cmp    rax,0x3
ffff800000809b4c:	0f 84 ea 00 00 00    	je     ffff800000809c3c <load_elf+0x813>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:656
                relentsz=p->d_un.d_val;
                goto is_rel_prepared;

            
            default:
                break;
ffff800000809b52:	e9 a3 01 00 00       	jmp    ffff800000809cfa <load_elf+0x8d1>
ffff800000809b57:	ba 01 00 00 00       	mov    edx,0x1
ffff800000809b5c:	89 c1                	mov    ecx,eax
ffff800000809b5e:	48 d3 e2             	shl    rdx,cl
ffff800000809b61:	48 89 d0             	mov    rax,rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:621
            switch (p->d_tag)
ffff800000809b64:	48 89 c2             	mov    rdx,rax
ffff800000809b67:	81 e2 00 02 08 00    	and    edx,0x80200
ffff800000809b6d:	48 85 d2             	test   rdx,rdx
ffff800000809b70:	0f 95 c2             	setne  dl
ffff800000809b73:	84 d2                	test   dl,dl
ffff800000809b75:	0f 85 71 01 00 00    	jne    ffff800000809cec <load_elf+0x8c3>
ffff800000809b7b:	48 89 c2             	mov    rdx,rax
ffff800000809b7e:	81 e2 80 00 02 00    	and    edx,0x20080
ffff800000809b84:	48 85 d2             	test   rdx,rdx
ffff800000809b87:	0f 95 c2             	setne  dl
ffff800000809b8a:	84 d2                	test   dl,dl
ffff800000809b8c:	0f 85 4c 01 00 00    	jne    ffff800000809cde <load_elf+0x8b5>
ffff800000809b92:	25 00 01 04 00       	and    eax,0x40100
ffff800000809b97:	48 85 c0             	test   rax,rax
ffff800000809b9a:	0f 95 c0             	setne  al
ffff800000809b9d:	84 c0                	test   al,al
ffff800000809b9f:	0f 85 2b 01 00 00    	jne    ffff800000809cd0 <load_elf+0x8a7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:656
                break;
ffff800000809ba5:	e9 50 01 00 00       	jmp    ffff800000809cfa <load_elf+0x8d1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:624
                char* pathname=p->d_un.d_val+dynstr;
ffff800000809baa:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809bae:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000809bb2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000809bb6:	48 01 d0             	add    rax,rdx
ffff800000809bb9:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:625
                int so_fno=sys_open(pathname,O_EXEC);
ffff800000809bc0:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000809bc7:	be 00 10 00 00       	mov    esi,0x1000
ffff800000809bcc:	48 89 c7             	mov    rdi,rax
ffff800000809bcf:	49 89 df             	mov    r15,rbx
ffff800000809bd2:	48 b8 f0 ad ee ff ff 	movabs rax,0xffffffffffeeadf0
ffff800000809bd9:	ff ff ff 
ffff800000809bdc:	48 01 d8             	add    rax,rbx
ffff800000809bdf:	ff d0                	call   rax
ffff800000809be1:	89 85 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:627
                load_elf(current->openf[so_fno]);
ffff800000809be7:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000809bee:	ff ff ff 
ffff800000809bf1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809bf5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809bf8:	8b 95 14 ff ff ff    	mov    edx,DWORD PTR [rbp-0xec]
ffff800000809bfe:	48 63 d2             	movsxd rdx,edx
ffff800000809c01:	48 83 c2 1e          	add    rdx,0x1e
ffff800000809c05:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000809c0a:	48 89 c7             	mov    rdi,rax
ffff800000809c0d:	48 b8 d9 84 ee ff ff 	movabs rax,0xffffffffffee84d9
ffff800000809c14:	ff ff ff 
ffff800000809c17:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000809c1b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:628
                sys_close(so_fno);
ffff800000809c1d:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
ffff800000809c23:	89 c7                	mov    edi,eax
ffff800000809c25:	49 89 df             	mov    r15,rbx
ffff800000809c28:	48 b8 1a b4 ee ff ff 	movabs rax,0xffffffffffeeb41a
ffff800000809c2f:	ff ff ff 
ffff800000809c32:	48 01 d8             	add    rax,rbx
ffff800000809c35:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:629
                break;
ffff800000809c37:	e9 bf 00 00 00       	jmp    ffff800000809cfb <load_elf+0x8d2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:631
                got=p->d_un.d_ptr+offset;
ffff800000809c3c:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809c40:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000809c44:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff800000809c4b:	48 01 d0             	add    rax,rdx
ffff800000809c4e:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:634
                got[2]=dl_runtime_resolve;
ffff800000809c55:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff800000809c5c:	48 83 c0 10          	add    rax,0x10
ffff800000809c60:	48 ba 00 ff ff ff ff 	movabs rdx,0xffffffffffffff00
ffff800000809c67:	ff ff ff 
ffff800000809c6a:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000809c6e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:636
                got[1]=mod-modules;
ffff800000809c71:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000809c78:	ff ff ff 
ffff800000809c7b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809c7f:	48 89 c2             	mov    rdx,rax
ffff800000809c82:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809c86:	48 29 d0             	sub    rax,rdx
ffff800000809c89:	48 c1 f8 03          	sar    rax,0x3
ffff800000809c8d:	48 89 c2             	mov    rdx,rax
ffff800000809c90:	48 b8 b7 6d db b6 6d 	movabs rax,0x6db6db6db6db6db7
ffff800000809c97:	db b6 6d 
ffff800000809c9a:	48 0f af c2          	imul   rax,rdx
ffff800000809c9e:	48 89 c2             	mov    rdx,rax
ffff800000809ca1:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff800000809ca8:	48 83 c0 08          	add    rax,0x8
ffff800000809cac:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:637
                mod->p_got=got;
ffff800000809caf:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
ffff800000809cb6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809cba:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:639
                mod->p_symbol=p->d_un.d_ptr;
ffff800000809cbe:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809cc2:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000809cc6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809cca:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:640
                break;
ffff800000809cce:	eb 2b                	jmp    ffff800000809cfb <load_elf+0x8d2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:643
                relsz=p->d_un.d_val;
ffff800000809cd0:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809cd4:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000809cd8:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:644
                goto is_rel_prepared;
ffff800000809cdc:	eb 22                	jmp    ffff800000809d00 <load_elf+0x8d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:647
                relptr=p->d_un.d_ptr;
ffff800000809cde:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809ce2:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000809ce6:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:648
                goto is_rel_prepared;
ffff800000809cea:	eb 14                	jmp    ffff800000809d00 <load_elf+0x8d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:651
                relentsz=p->d_un.d_val;
ffff800000809cec:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809cf0:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000809cf4:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:652
                goto is_rel_prepared;
ffff800000809cf8:	eb 06                	jmp    ffff800000809d00 <load_elf+0x8d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:656
                break;
ffff800000809cfa:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:658
            }
            continue;
ffff800000809cfb:	e9 c2 00 00 00       	jmp    ffff800000809dc2 <load_elf+0x999>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:660
is_rel_prepared:
            if(!(relsz&&relentsz&&relptr))continue;
ffff800000809d00:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff800000809d05:	0f 84 b6 00 00 00    	je     ffff800000809dc1 <load_elf+0x998>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:660 (discriminator 2)
ffff800000809d0b:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
ffff800000809d10:	0f 84 ab 00 00 00    	je     ffff800000809dc1 <load_elf+0x998>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:660 (discriminator 4)
ffff800000809d16:	48 83 7d 98 00       	cmp    QWORD PTR [rbp-0x68],0x0
ffff800000809d1b:	0f 84 a0 00 00 00    	je     ffff800000809dc1 <load_elf+0x998>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:661
            for(int j=0;j<relsz/relentsz;j++){
ffff800000809d21:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
ffff800000809d28:	eb 65                	jmp    ffff800000809d8f <load_elf+0x966>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:662 (discriminator 3)
                fill_reloc(relptr+j*relentsz,mod-modules);
ffff800000809d2a:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000809d31:	ff ff ff 
ffff800000809d34:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809d38:	48 89 c2             	mov    rdx,rax
ffff800000809d3b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809d3f:	48 29 d0             	sub    rax,rdx
ffff800000809d42:	48 c1 f8 03          	sar    rax,0x3
ffff800000809d46:	48 89 c2             	mov    rdx,rax
ffff800000809d49:	48 b8 b7 6d db b6 6d 	movabs rax,0x6db6db6db6db6db7
ffff800000809d50:	db b6 6d 
ffff800000809d53:	48 0f af c2          	imul   rax,rdx
ffff800000809d57:	48 89 c2             	mov    rdx,rax
ffff800000809d5a:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
ffff800000809d5d:	48 98                	cdqe   
ffff800000809d5f:	48 0f af 45 a0       	imul   rax,QWORD PTR [rbp-0x60]
ffff800000809d64:	48 89 c1             	mov    rcx,rax
ffff800000809d67:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000809d6b:	48 01 c8             	add    rax,rcx
ffff800000809d6e:	48 89 d6             	mov    rsi,rdx
ffff800000809d71:	48 89 c7             	mov    rdi,rax
ffff800000809d74:	49 89 df             	mov    r15,rbx
ffff800000809d77:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809d7c:	48 ba 3f 94 ee ff ff 	movabs rdx,0xffffffffffee943f
ffff800000809d83:	ff ff ff 
ffff800000809d86:	48 01 da             	add    rdx,rbx
ffff800000809d89:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:661 (discriminator 3)
            for(int j=0;j<relsz/relentsz;j++){
ffff800000809d8b:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:661 (discriminator 1)
ffff800000809d8f:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
ffff800000809d92:	48 63 c8             	movsxd rcx,eax
ffff800000809d95:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000809d99:	ba 00 00 00 00       	mov    edx,0x0
ffff800000809d9e:	48 f7 75 a0          	div    QWORD PTR [rbp-0x60]
ffff800000809da2:	48 39 c1             	cmp    rcx,rax
ffff800000809da5:	72 83                	jb     ffff800000809d2a <load_elf+0x901>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:664
            }
            relsz=relentsz=relptr=0;
ffff800000809da7:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff800000809dae:	00 
ffff800000809daf:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff800000809db6:	00 
ffff800000809db7:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000809dbb:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffff800000809dbf:	eb 01                	jmp    ffff800000809dc2 <load_elf+0x999>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:660
            if(!(relsz&&relentsz&&relptr))continue;
ffff800000809dc1:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:620 (discriminator 2)
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff800000809dc2:	48 83 45 90 10       	add    QWORD PTR [rbp-0x70],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:620 (discriminator 3)
ffff800000809dc7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809dcb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809dce:	48 85 c0             	test   rax,rax
ffff800000809dd1:	0f 85 40 fd ff ff    	jne    ffff800000809b17 <load_elf+0x6ee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:671
        }
        
    }
    
    //初始化堆
    chunk_header hdrtmp={
ffff800000809dd7:	c7 85 b0 fe ff ff 00 	mov    DWORD PTR [rbp-0x150],0x0
ffff800000809dde:	00 00 00 
ffff800000809de1:	c7 85 b4 fe ff ff 00 	mov    DWORD PTR [rbp-0x14c],0x0
ffff800000809de8:	00 00 00 
ffff800000809deb:	48 c7 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],0x0
ffff800000809df2:	00 00 00 00 
ffff800000809df6:	48 c7 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],0x0
ffff800000809dfd:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:679
            .pgn=0,
            .prev=NULL
    };
    //空堆
    //分配堆
    off_t lma=pmalloc();
ffff800000809e01:	49 89 df             	mov    r15,rbx
ffff800000809e04:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809e09:	48 ba ed 1e ee ff ff 	movabs rdx,0xffffffffffee1eed
ffff800000809e10:	ff ff ff 
ffff800000809e13:	48 01 da             	add    rdx,rbx
ffff800000809e16:	ff d2                	call   rdx
ffff800000809e18:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:680
    if(lma==-1)
ffff800000809e1f:	48 83 bd 08 ff ff ff 	cmp    QWORD PTR [rbp-0xf8],0xffffffffffffffff
ffff800000809e26:	ff 
ffff800000809e27:	75 28                	jne    ffff800000809e51 <load_elf+0xa28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:682
    {
        current->regs.errcode=-ENOMEM;
ffff800000809e29:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000809e30:	ff ff ff 
ffff800000809e33:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809e37:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809e3a:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff800000809e41:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:683
        return -1;
ffff800000809e45:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000809e4c:	e9 35 01 00 00       	jmp    ffff800000809f86 <load_elf+0xb5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:685
    }
    smmap(lma, HEAP_BASE, PAGE_PRESENT | PAGE_FOR_ALL | PAGE_RWX, current->pml4);
ffff800000809e51:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000809e58:	ff ff ff 
ffff800000809e5b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809e5f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809e62:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000809e69:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000809e70:	48 89 d1             	mov    rcx,rdx
ffff800000809e73:	ba 07 00 00 00       	mov    edx,0x7
ffff800000809e78:	be 00 00 00 01       	mov    esi,0x1000000
ffff800000809e7d:	48 89 c7             	mov    rdi,rax
ffff800000809e80:	49 89 df             	mov    r15,rbx
ffff800000809e83:	48 b8 77 0e ee ff ff 	movabs rax,0xffffffffffee0e77
ffff800000809e8a:	ff ff ff 
ffff800000809e8d:	48 01 d8             	add    rax,rbx
ffff800000809e90:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:686
    memset((unsigned char *) HEAP_BASE, 0, CHUNK_SIZE);
ffff800000809e92:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000809e97:	be 00 00 00 00       	mov    esi,0x0
ffff800000809e9c:	bf 00 00 00 01       	mov    edi,0x1000000
ffff800000809ea1:	49 89 df             	mov    r15,rbx
ffff800000809ea4:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff800000809eab:	ff ff ff 
ffff800000809eae:	48 01 d8             	add    rax,rbx
ffff800000809eb1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:687
    current->mem_struct.heap_base=HEAP_BASE;
ffff800000809eb3:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000809eba:	ff ff ff 
ffff800000809ebd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809ec1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809ec4:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x1000000
ffff800000809ecb:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:688
    current->mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
ffff800000809ecc:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000809ed3:	ff ff ff 
ffff800000809ed6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809eda:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809edd:	48 c7 40 30 00 10 00 	mov    QWORD PTR [rax+0x30],0x1001000
ffff800000809ee4:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:689
    memcpy((chunk_header*)HEAP_BASE,&hdrtmp,sizeof(hdrtmp));
ffff800000809ee5:	48 8d 85 b0 fe ff ff 	lea    rax,[rbp-0x150]
ffff800000809eec:	ba 18 00 00 00       	mov    edx,0x18
ffff800000809ef1:	48 89 c6             	mov    rsi,rax
ffff800000809ef4:	bf 00 00 00 01       	mov    edi,0x1000000
ffff800000809ef9:	49 89 df             	mov    r15,rbx
ffff800000809efc:	48 b8 53 21 ef ff ff 	movabs rax,0xffffffffffef2153
ffff800000809f03:	ff ff ff 
ffff800000809f06:	48 01 d8             	add    rax,rbx
ffff800000809f09:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:691
    //设置栈
    current->mem_struct.stack_top=STACK_TOP;
ffff800000809f0b:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000809f12:	ff ff ff 
ffff800000809f15:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809f19:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809f1c:	48 bf 00 f0 ff ff ff 	movabs rdi,0x7ffffffff000
ffff800000809f23:	7f 00 00 
ffff800000809f26:	48 89 78 40          	mov    QWORD PTR [rax+0x40],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:692
    off_t entry=0;
ffff800000809f2a:	48 c7 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],0x0
ffff800000809f31:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:693
    entry=ehdr->e_entry;
ffff800000809f35:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000809f3c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000809f40:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:694
    kmfree(tmpla);
ffff800000809f47:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000809f4e:	48 89 c7             	mov    rdi,rax
ffff800000809f51:	49 89 df             	mov    r15,rbx
ffff800000809f54:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff800000809f5b:	ff ff ff 
ffff800000809f5e:	48 01 d8             	add    rax,rbx
ffff800000809f61:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:695
    kmfree(shla);
ffff800000809f63:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000809f6a:	48 89 c7             	mov    rdi,rax
ffff800000809f6d:	49 89 df             	mov    r15,rbx
ffff800000809f70:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff800000809f77:	ff ff ff 
ffff800000809f7a:	48 01 d8             	add    rax,rbx
ffff800000809f7d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:697
    //从系统调用返回
    return entry;
ffff800000809f7f:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:698 (discriminator 1)
}
ffff800000809f86:	48 81 c4 50 01 00 00 	add    rsp,0x150
ffff800000809f8d:	5b                   	pop    rbx
ffff800000809f8e:	41 5f                	pop    r15
ffff800000809f90:	5d                   	pop    rbp
ffff800000809f91:	c3                   	ret    

ffff800000809f92 <get_modid>:
get_modid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:699
id_t get_modid(void){
ffff800000809f92:	f3 0f 1e fa          	endbr64 
ffff800000809f96:	55                   	push   rbp
ffff800000809f97:	48 89 e5             	mov    rbp,rsp
ffff800000809f9a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809f9a <get_modid+0x8>
ffff800000809fa1:	49 bb b6 6f 11 00 00 	movabs r11,0x116fb6
ffff800000809fa8:	00 00 00 
ffff800000809fab:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:701
    static id_t modid_d=0;
    return modid_d++;
ffff800000809fae:	48 ba 70 3c af ff ff 	movabs rdx,0xffffffffffaf3c70
ffff800000809fb5:	ff ff ff 
ffff800000809fb8:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff800000809fbb:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff800000809fbe:	48 be 70 3c af ff ff 	movabs rsi,0xffffffffffaf3c70
ffff800000809fc5:	ff ff ff 
ffff800000809fc8:	89 0c 30             	mov    DWORD PTR [rax+rsi*1],ecx
ffff800000809fcb:	89 d0                	mov    eax,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:702
}
ffff800000809fcd:	5d                   	pop    rbp
ffff800000809fce:	c3                   	ret    

ffff800000809fcf <dl_runtime_resolve>:
dl_runtime_resolve():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:703
void dl_runtime_resolve(){
ffff800000809fcf:	f3 0f 1e fa          	endbr64 
ffff800000809fd3:	55                   	push   rbp
ffff800000809fd4:	48 89 e5             	mov    rbp,rsp
ffff800000809fd7:	41 57                	push   r15
ffff800000809fd9:	53                   	push   rbx
ffff800000809fda:	48 83 ec 30          	sub    rsp,0x30
ffff800000809fde:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809fde <dl_runtime_resolve+0xf>
ffff800000809fe5:	49 bb 72 6f 11 00 00 	movabs r11,0x116f72
ffff800000809fec:	00 00 00 
ffff800000809fef:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:706
    //获取modid
    unsigned long modid,rel_offset;
    asm volatile("push %%rax\n mov 8(%%rsp),%%rax\n mov %%rax,%0":"=m"(modid));
ffff800000809ff2:	50                   	push   rax
ffff800000809ff3:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
ffff800000809ff8:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:707
    asm volatile("push %%rax\n mov 16(%%rsp),%%rax\n mov %%rax,%0":"=m"(rel_offset));
ffff800000809ffc:	50                   	push   rax
ffff800000809ffd:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
ffff80000080a002:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:708
    Elf64_Rel* rel=rel_offset;
ffff80000080a006:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a00a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:709
    int symi=ELF64_R_SYM(rel->r_info),type=ELF64_R_TYPE(rel->r_info);
ffff80000080a00e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a012:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080a015:	ba 20 00 00 00       	mov    edx,0x20
ffff80000080a01a:	89 d1                	mov    ecx,edx
ffff80000080a01c:	d3 e8                	shr    eax,cl
ffff80000080a01e:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffff80000080a021:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a025:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080a028:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:710
    off_t sym_off=get_sym_addr(modid,symi);
ffff80000080a02b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080a02e:	48 63 d0             	movsxd rdx,eax
ffff80000080a031:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a035:	48 89 d6             	mov    rsi,rdx
ffff80000080a038:	48 89 c7             	mov    rdi,rax
ffff80000080a03b:	49 89 df             	mov    r15,rbx
ffff80000080a03e:	48 b8 49 92 ee ff ff 	movabs rax,0xffffffffffee9249
ffff80000080a045:	ff ff ff 
ffff80000080a048:	48 01 d8             	add    rax,rbx
ffff80000080a04b:	ff d0                	call   rax
ffff80000080a04d:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:713
    //这里假定获取符号的地址是正确的，可以不修改符号表，而是通过记录模块整体加载地址，
    //来加上偏移量获取正确的符号地址
    off_t* v_rel=rel->r_offset;
ffff80000080a051:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a055:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a058:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:714
    switch (type)
ffff80000080a05c:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080a05f:	83 e8 03             	sub    eax,0x3
ffff80000080a062:	83 f8 07             	cmp    eax,0x7
ffff80000080a065:	0f 87 18 01 00 00    	ja     ffff80000080a183 <dl_runtime_resolve+0x1b4>
ffff80000080a06b:	89 c0                	mov    eax,eax
ffff80000080a06d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080a074:	00 
ffff80000080a075:	48 8d 05 dc 44 11 00 	lea    rax,[rip+0x1144dc]        # ffff80000091e558 <.LC3+0x28>
ffff80000080a07c:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080a080:	48 8d 15 d1 44 11 00 	lea    rdx,[rip+0x1144d1]        # ffff80000091e558 <.LC3+0x28>
ffff80000080a087:	48 01 d0             	add    rax,rdx
ffff80000080a08a:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:718
    {
    case R_X86_64_GLOB_DAT:
    case R_X86_64_JUMP_SLOT:
        *v_rel=sym_off;
ffff80000080a08d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a091:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080a095:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:719
        break;
ffff80000080a098:	e9 e7 00 00 00       	jmp    ffff80000080a184 <dl_runtime_resolve+0x1b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:721
    case R_X86_64_PLT32:
        *v_rel=get_sym_plt(modid,symi);
ffff80000080a09d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080a0a0:	48 63 d0             	movsxd rdx,eax
ffff80000080a0a3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a0a7:	48 89 d6             	mov    rsi,rdx
ffff80000080a0aa:	48 89 c7             	mov    rdi,rax
ffff80000080a0ad:	49 89 df             	mov    r15,rbx
ffff80000080a0b0:	48 b8 84 93 ee ff ff 	movabs rax,0xffffffffffee9384
ffff80000080a0b7:	ff ff ff 
ffff80000080a0ba:	48 01 d8             	add    rax,rbx
ffff80000080a0bd:	ff d0                	call   rax
ffff80000080a0bf:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080a0c3:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:722
        break;
ffff80000080a0c6:	e9 b9 00 00 00       	jmp    ffff80000080a184 <dl_runtime_resolve+0x1b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:724
    case R_X86_64_RELATIVE:
        *v_rel+=get_load_base(modid);
ffff80000080a0cb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a0cf:	48 89 c7             	mov    rdi,rax
ffff80000080a0d2:	49 89 df             	mov    r15,rbx
ffff80000080a0d5:	48 b8 ab 93 ee ff ff 	movabs rax,0xffffffffffee93ab
ffff80000080a0dc:	ff ff ff 
ffff80000080a0df:	48 01 d8             	add    rax,rbx
ffff80000080a0e2:	ff d0                	call   rax
ffff80000080a0e4:	48 89 c2             	mov    rdx,rax
ffff80000080a0e7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a0eb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a0ee:	48 01 c2             	add    rdx,rax
ffff80000080a0f1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a0f5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:725
        break;
ffff80000080a0f8:	e9 87 00 00 00       	jmp    ffff80000080a184 <dl_runtime_resolve+0x1b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:727
    case R_X86_64_GOTOFF:
        *v_rel+=sym_off-get_got(modid);
ffff80000080a0fd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a101:	48 89 c7             	mov    rdi,rax
ffff80000080a104:	49 89 df             	mov    r15,rbx
ffff80000080a107:	48 b8 f3 93 ee ff ff 	movabs rax,0xffffffffffee93f3
ffff80000080a10e:	ff ff ff 
ffff80000080a111:	48 01 d8             	add    rax,rbx
ffff80000080a114:	ff d0                	call   rax
ffff80000080a116:	48 89 c2             	mov    rdx,rax
ffff80000080a119:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a11d:	48 29 d0             	sub    rax,rdx
ffff80000080a120:	48 89 c1             	mov    rcx,rax
ffff80000080a123:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a127:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a12a:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080a12e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a132:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:728
        break;
ffff80000080a135:	eb 4d                	jmp    ffff80000080a184 <dl_runtime_resolve+0x1b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:730
    case R_X86_64_GOTPC:
        *v_rel+=get_got(modid)-rel_offset;
ffff80000080a137:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a13b:	48 89 c7             	mov    rdi,rax
ffff80000080a13e:	49 89 df             	mov    r15,rbx
ffff80000080a141:	48 b8 f3 93 ee ff ff 	movabs rax,0xffffffffffee93f3
ffff80000080a148:	ff ff ff 
ffff80000080a14b:	48 01 d8             	add    rax,rbx
ffff80000080a14e:	ff d0                	call   rax
ffff80000080a150:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080a154:	48 29 d0             	sub    rax,rdx
ffff80000080a157:	48 89 c1             	mov    rcx,rax
ffff80000080a15a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a15e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a161:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080a165:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a169:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:731
        break;
ffff80000080a16c:	eb 16                	jmp    ffff80000080a184 <dl_runtime_resolve+0x1b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:734
    case R_X86_64_GOT32:
    //这一项,rel里面指向的符号的地址就是got
        *v_rel+=sym_off;
ffff80000080a16e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a172:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080a175:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a179:	48 01 c2             	add    rdx,rax
ffff80000080a17c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a180:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:736
    default:
        break;
ffff80000080a183:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:740
    }
    //重定位完毕，直接返回到目标地址

    asm volatile("mov %0,%%rax\n mov %%rax,0(%%rsp)"::"m"(*v_rel));
ffff80000080a184:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a188:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a18b:	48 89 04 24          	mov    QWORD PTR [rsp],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:741
}
ffff80000080a18f:	90                   	nop
ffff80000080a190:	48 83 c4 30          	add    rsp,0x30
ffff80000080a194:	5b                   	pop    rbx
ffff80000080a195:	41 5f                	pop    r15
ffff80000080a197:	5d                   	pop    rbp
ffff80000080a198:	c3                   	ret    

ffff80000080a199 <get_sym_addr>:
get_sym_addr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:742
off_t get_sym_addr(unsigned long modid,unsigned long symi){
ffff80000080a199:	f3 0f 1e fa          	endbr64 
ffff80000080a19d:	55                   	push   rbp
ffff80000080a19e:	48 89 e5             	mov    rbp,rsp
ffff80000080a1a1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a1a1 <get_sym_addr+0x8>
ffff80000080a1a8:	49 bb af 6d 11 00 00 	movabs r11,0x116daf
ffff80000080a1af:	00 00 00 
ffff80000080a1b2:	4c 01 d8             	add    rax,r11
ffff80000080a1b5:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080a1b9:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:743
    struct Elf64_Sym *sym=modules[modid].p_symbol;
ffff80000080a1bd:	48 ba e0 fd ff ff ff 	movabs rdx,0xfffffffffffffde0
ffff80000080a1c4:	ff ff ff 
ffff80000080a1c7:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080a1cb:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080a1cf:	48 89 ca             	mov    rdx,rcx
ffff80000080a1d2:	48 c1 e2 03          	shl    rdx,0x3
ffff80000080a1d6:	48 29 ca             	sub    rdx,rcx
ffff80000080a1d9:	48 c1 e2 03          	shl    rdx,0x3
ffff80000080a1dd:	48 01 f2             	add    rdx,rsi
ffff80000080a1e0:	48 83 c2 28          	add    rdx,0x28
ffff80000080a1e4:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080a1e7:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:744
    sym+=symi;
ffff80000080a1eb:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080a1ef:	48 89 ca             	mov    rdx,rcx
ffff80000080a1f2:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080a1f6:	48 01 ca             	add    rdx,rcx
ffff80000080a1f9:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080a1fd:	48 01 55 f0          	add    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:750
    if(sym->st_shndx==SHN_COMMON){
        //还没分配空间的符号，需要分配空间，st_value表示地址对齐约束

    }

    off_t symaddr=sym->st_value+modules[modid].load_offset;
ffff80000080a201:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080a205:	48 8b 72 04          	mov    rsi,QWORD PTR [rdx+0x4]
ffff80000080a209:	48 ba e0 fd ff ff ff 	movabs rdx,0xfffffffffffffde0
ffff80000080a210:	ff ff ff 
ffff80000080a213:	48 8b 3c 10          	mov    rdi,QWORD PTR [rax+rdx*1]
ffff80000080a217:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080a21b:	48 89 ca             	mov    rdx,rcx
ffff80000080a21e:	48 c1 e2 03          	shl    rdx,0x3
ffff80000080a222:	48 29 ca             	sub    rdx,rcx
ffff80000080a225:	48 c1 e2 03          	shl    rdx,0x3
ffff80000080a229:	48 01 fa             	add    rdx,rdi
ffff80000080a22c:	48 83 c2 08          	add    rdx,0x8
ffff80000080a230:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080a233:	48 01 f2             	add    rdx,rsi
ffff80000080a236:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:751
    if(modules[modid].type==ET_DYN){
ffff80000080a23a:	48 ba e0 fd ff ff ff 	movabs rdx,0xfffffffffffffde0
ffff80000080a241:	ff ff ff 
ffff80000080a244:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080a248:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080a24c:	48 89 ca             	mov    rdx,rcx
ffff80000080a24f:	48 c1 e2 03          	shl    rdx,0x3
ffff80000080a253:	48 29 ca             	sub    rdx,rcx
ffff80000080a256:	48 c1 e2 03          	shl    rdx,0x3
ffff80000080a25a:	48 01 f2             	add    rdx,rsi
ffff80000080a25d:	48 83 c2 18          	add    rdx,0x18
ffff80000080a261:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080a264:	48 83 fa 03          	cmp    rdx,0x3
ffff80000080a268:	75 64                	jne    ffff80000080a2ce <get_sym_addr+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:753
        //还要加上节地址
        Elf64_Ehdr* ehdr=modules[modid].header;
ffff80000080a26a:	48 ba e0 fd ff ff ff 	movabs rdx,0xfffffffffffffde0
ffff80000080a271:	ff ff ff 
ffff80000080a274:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080a278:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080a27c:	48 89 d0             	mov    rax,rdx
ffff80000080a27f:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a283:	48 29 d0             	sub    rax,rdx
ffff80000080a286:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a28a:	48 01 c8             	add    rax,rcx
ffff80000080a28d:	48 83 c0 10          	add    rax,0x10
ffff80000080a291:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a294:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:754
        struct Elf64_Shdr* shdr=ehdr->e_shoff;
ffff80000080a298:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a29c:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080a2a0:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:755
        symaddr+=shdr[sym->st_shndx].sh_addr;
ffff80000080a2a4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080a2a8:	0f b7 40 12          	movzx  eax,WORD PTR [rax+0x12]
ffff80000080a2ac:	0f b7 d0             	movzx  edx,ax
ffff80000080a2af:	48 89 d0             	mov    rax,rdx
ffff80000080a2b2:	48 01 c0             	add    rax,rax
ffff80000080a2b5:	48 01 d0             	add    rax,rdx
ffff80000080a2b8:	48 c1 e0 04          	shl    rax,0x4
ffff80000080a2bc:	48 89 c2             	mov    rdx,rax
ffff80000080a2bf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a2c3:	48 01 d0             	add    rax,rdx
ffff80000080a2c6:	48 8b 40 0c          	mov    rax,QWORD PTR [rax+0xc]
ffff80000080a2ca:	48 01 45 f8          	add    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:757
    }
    return symaddr;
ffff80000080a2ce:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:758
}
ffff80000080a2d2:	5d                   	pop    rbp
ffff80000080a2d3:	c3                   	ret    

ffff80000080a2d4 <get_sym_plt>:
get_sym_plt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:759
off_t get_sym_plt(unsigned long modid,unsigned long symi){
ffff80000080a2d4:	f3 0f 1e fa          	endbr64 
ffff80000080a2d8:	55                   	push   rbp
ffff80000080a2d9:	48 89 e5             	mov    rbp,rsp
ffff80000080a2dc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a2dc <get_sym_plt+0x8>
ffff80000080a2e3:	49 bb 74 6c 11 00 00 	movabs r11,0x116c74
ffff80000080a2ea:	00 00 00 
ffff80000080a2ed:	4c 01 d8             	add    rax,r11
ffff80000080a2f0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080a2f4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:761

}
ffff80000080a2f8:	90                   	nop
ffff80000080a2f9:	5d                   	pop    rbp
ffff80000080a2fa:	c3                   	ret    

ffff80000080a2fb <get_load_base>:
get_load_base():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:762
off_t get_load_base(unsigned long modid){
ffff80000080a2fb:	f3 0f 1e fa          	endbr64 
ffff80000080a2ff:	55                   	push   rbp
ffff80000080a300:	48 89 e5             	mov    rbp,rsp
ffff80000080a303:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a303 <get_load_base+0x8>
ffff80000080a30a:	49 bb 4d 6c 11 00 00 	movabs r11,0x116c4d
ffff80000080a311:	00 00 00 
ffff80000080a314:	4c 01 d8             	add    rax,r11
ffff80000080a317:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:763
    return modules[modid].base;
ffff80000080a31b:	48 ba e0 fd ff ff ff 	movabs rdx,0xfffffffffffffde0
ffff80000080a322:	ff ff ff 
ffff80000080a325:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080a329:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080a32d:	48 89 d0             	mov    rax,rdx
ffff80000080a330:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a334:	48 29 d0             	sub    rax,rdx
ffff80000080a337:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a33b:	48 01 c8             	add    rax,rcx
ffff80000080a33e:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:764
}
ffff80000080a341:	5d                   	pop    rbp
ffff80000080a342:	c3                   	ret    

ffff80000080a343 <get_got>:
get_got():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:765
off_t get_got(unsigned long modid){
ffff80000080a343:	f3 0f 1e fa          	endbr64 
ffff80000080a347:	55                   	push   rbp
ffff80000080a348:	48 89 e5             	mov    rbp,rsp
ffff80000080a34b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a34b <get_got+0x8>
ffff80000080a352:	49 bb 05 6c 11 00 00 	movabs r11,0x116c05
ffff80000080a359:	00 00 00 
ffff80000080a35c:	4c 01 d8             	add    rax,r11
ffff80000080a35f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:766
    return modules[modid].p_got;
ffff80000080a363:	48 ba e0 fd ff ff ff 	movabs rdx,0xfffffffffffffde0
ffff80000080a36a:	ff ff ff 
ffff80000080a36d:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080a371:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080a375:	48 89 d0             	mov    rax,rdx
ffff80000080a378:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a37c:	48 29 d0             	sub    rax,rdx
ffff80000080a37f:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a383:	48 01 c8             	add    rax,rcx
ffff80000080a386:	48 83 c0 30          	add    rax,0x30
ffff80000080a38a:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:767
}
ffff80000080a38d:	5d                   	pop    rbp
ffff80000080a38e:	c3                   	ret    

ffff80000080a38f <fill_reloc>:
fill_reloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:769

void fill_reloc(Elf64_Rel* rel,int modid){
ffff80000080a38f:	f3 0f 1e fa          	endbr64 
ffff80000080a393:	55                   	push   rbp
ffff80000080a394:	48 89 e5             	mov    rbp,rsp
ffff80000080a397:	41 57                	push   r15
ffff80000080a399:	53                   	push   rbx
ffff80000080a39a:	48 83 ec 30          	sub    rsp,0x30
ffff80000080a39e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a39e <fill_reloc+0xf>
ffff80000080a3a5:	49 bb b2 6b 11 00 00 	movabs r11,0x116bb2
ffff80000080a3ac:	00 00 00 
ffff80000080a3af:	4c 01 db             	add    rbx,r11
ffff80000080a3b2:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080a3b6:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:770
    int symi=ELF64_R_SYM(rel->r_info),type=ELF64_R_TYPE(rel->r_info);
ffff80000080a3b9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a3bd:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080a3c0:	ba 20 00 00 00       	mov    edx,0x20
ffff80000080a3c5:	89 d1                	mov    ecx,edx
ffff80000080a3c7:	d3 e8                	shr    eax,cl
ffff80000080a3c9:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffff80000080a3cc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a3d0:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080a3d3:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:771
    off_t sym_off=get_sym_addr(modid,symi);
ffff80000080a3d6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a3d9:	48 63 d0             	movsxd rdx,eax
ffff80000080a3dc:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080a3df:	48 98                	cdqe   
ffff80000080a3e1:	48 89 d6             	mov    rsi,rdx
ffff80000080a3e4:	48 89 c7             	mov    rdi,rax
ffff80000080a3e7:	49 89 df             	mov    r15,rbx
ffff80000080a3ea:	48 b8 49 92 ee ff ff 	movabs rax,0xffffffffffee9249
ffff80000080a3f1:	ff ff ff 
ffff80000080a3f4:	48 01 d8             	add    rax,rbx
ffff80000080a3f7:	ff d0                	call   rax
ffff80000080a3f9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:774
    //这里假定获取符号的地址是正确的，可以不修改符号表，而是通过记录模块整体加载地址，
    //来加上偏移量获取正确的符号地址
    off_t* v_rel=rel->r_offset;
ffff80000080a3fd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a401:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a404:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:775
    switch (type)
ffff80000080a408:	83 7d e8 0b          	cmp    DWORD PTR [rbp-0x18],0xb
ffff80000080a40c:	0f 87 57 01 00 00    	ja     ffff80000080a569 <fill_reloc+0x1da>
ffff80000080a412:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080a415:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080a41c:	00 
ffff80000080a41d:	48 8d 05 74 41 11 00 	lea    rax,[rip+0x114174]        # ffff80000091e598 <.LC3+0x68>
ffff80000080a424:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080a428:	48 8d 15 69 41 11 00 	lea    rdx,[rip+0x114169]        # ffff80000091e598 <.LC3+0x68>
ffff80000080a42f:	48 01 d0             	add    rax,rdx
ffff80000080a432:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:779
    {
    case R_X86_64_GLOB_DAT:
    case R_X86_64_JUMP_SLOT:
        *v_rel=sym_off;
ffff80000080a435:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a439:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080a43d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:780
        break;
ffff80000080a440:	e9 25 01 00 00       	jmp    ffff80000080a56a <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:782
    case R_X86_64_PLT32:
        *v_rel=get_sym_plt(modid,symi);
ffff80000080a445:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a448:	48 63 d0             	movsxd rdx,eax
ffff80000080a44b:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080a44e:	48 98                	cdqe   
ffff80000080a450:	48 89 d6             	mov    rsi,rdx
ffff80000080a453:	48 89 c7             	mov    rdi,rax
ffff80000080a456:	49 89 df             	mov    r15,rbx
ffff80000080a459:	48 b8 84 93 ee ff ff 	movabs rax,0xffffffffffee9384
ffff80000080a460:	ff ff ff 
ffff80000080a463:	48 01 d8             	add    rax,rbx
ffff80000080a466:	ff d0                	call   rax
ffff80000080a468:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080a46c:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:783
        break;
ffff80000080a46f:	e9 f6 00 00 00       	jmp    ffff80000080a56a <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:785
    case R_X86_64_RELATIVE:
        *v_rel+=get_load_base(modid);
ffff80000080a474:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080a477:	48 98                	cdqe   
ffff80000080a479:	48 89 c7             	mov    rdi,rax
ffff80000080a47c:	49 89 df             	mov    r15,rbx
ffff80000080a47f:	48 b8 ab 93 ee ff ff 	movabs rax,0xffffffffffee93ab
ffff80000080a486:	ff ff ff 
ffff80000080a489:	48 01 d8             	add    rax,rbx
ffff80000080a48c:	ff d0                	call   rax
ffff80000080a48e:	48 89 c2             	mov    rdx,rax
ffff80000080a491:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a495:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a498:	48 01 c2             	add    rdx,rax
ffff80000080a49b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a49f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:786
        break;
ffff80000080a4a2:	e9 c3 00 00 00       	jmp    ffff80000080a56a <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:788
    case R_X86_64_GOTOFF:
        *v_rel+=sym_off-get_got(modid);
ffff80000080a4a7:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080a4aa:	48 98                	cdqe   
ffff80000080a4ac:	48 89 c7             	mov    rdi,rax
ffff80000080a4af:	49 89 df             	mov    r15,rbx
ffff80000080a4b2:	48 b8 f3 93 ee ff ff 	movabs rax,0xffffffffffee93f3
ffff80000080a4b9:	ff ff ff 
ffff80000080a4bc:	48 01 d8             	add    rax,rbx
ffff80000080a4bf:	ff d0                	call   rax
ffff80000080a4c1:	48 89 c2             	mov    rdx,rax
ffff80000080a4c4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a4c8:	48 29 d0             	sub    rax,rdx
ffff80000080a4cb:	48 89 c1             	mov    rcx,rax
ffff80000080a4ce:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a4d2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a4d5:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080a4d9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a4dd:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:789
        break;
ffff80000080a4e0:	e9 85 00 00 00       	jmp    ffff80000080a56a <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:791
    case R_X86_64_GOTPC:
        *v_rel+=get_got(modid)-(off_t)rel;
ffff80000080a4e5:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080a4e8:	48 98                	cdqe   
ffff80000080a4ea:	48 89 c7             	mov    rdi,rax
ffff80000080a4ed:	49 89 df             	mov    r15,rbx
ffff80000080a4f0:	48 b8 f3 93 ee ff ff 	movabs rax,0xffffffffffee93f3
ffff80000080a4f7:	ff ff ff 
ffff80000080a4fa:	48 01 d8             	add    rax,rbx
ffff80000080a4fd:	ff d0                	call   rax
ffff80000080a4ff:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080a503:	48 29 d0             	sub    rax,rdx
ffff80000080a506:	48 89 c1             	mov    rcx,rax
ffff80000080a509:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a50d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a510:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080a514:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a518:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:792
        break;
ffff80000080a51b:	eb 4d                	jmp    ffff80000080a56a <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:795
    case R_X86_64_GOT32:
    //这一项,rel里面指向的符号的地址就是got
        *v_rel+=sym_off;
ffff80000080a51d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a521:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080a524:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a528:	48 01 c2             	add    rdx,rax
ffff80000080a52b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a52f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:796
        break;
ffff80000080a532:	eb 36                	jmp    ffff80000080a56a <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:799
    case R_X86_64_32S:
    case R_X86_64_64:
        *v_rel+=sym_off;
ffff80000080a534:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a538:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080a53b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a53f:	48 01 c2             	add    rdx,rax
ffff80000080a542:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a546:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:800
        break;
ffff80000080a549:	eb 1f                	jmp    ffff80000080a56a <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:802
    case R_X86_64_PC32:
        *v_rel+=sym_off-(off_t)rel;
ffff80000080a54b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a54f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080a552:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080a556:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a55a:	48 29 c8             	sub    rax,rcx
ffff80000080a55d:	48 01 c2             	add    rdx,rax
ffff80000080a560:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a564:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:803
        break;
ffff80000080a567:	eb 01                	jmp    ffff80000080a56a <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:805
    default:
        break;
ffff80000080a569:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:807
    }
ffff80000080a56a:	90                   	nop
ffff80000080a56b:	48 83 c4 30          	add    rsp,0x30
ffff80000080a56f:	5b                   	pop    rbx
ffff80000080a570:	41 5f                	pop    r15
ffff80000080a572:	5d                   	pop    rbp
ffff80000080a573:	c3                   	ret    
ffff80000080a574:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff80000080a57b:	00 00 00 
ffff80000080a57e:	66 90                	xchg   ax,ax

ffff80000080a580 <_syscall>:
_syscall():
ffff80000080a580:	55                   	push   rbp
ffff80000080a581:	48 bd 00 80 10 00 00 	movabs rbp,0xffff800000108000
ffff80000080a588:	80 ff ff 
ffff80000080a58b:	48 89 65 14          	mov    QWORD PTR [rbp+0x14],rsp
ffff80000080a58f:	48 8b 65 24          	mov    rsp,QWORD PTR [rbp+0x24]
ffff80000080a593:	6a 2b                	push   0x2b
ffff80000080a595:	54                   	push   rsp
ffff80000080a596:	9c                   	pushf  
ffff80000080a597:	6a 33                	push   0x33
ffff80000080a599:	51                   	push   rcx
ffff80000080a59a:	50                   	push   rax
ffff80000080a59b:	53                   	push   rbx
ffff80000080a59c:	51                   	push   rcx
ffff80000080a59d:	52                   	push   rdx
ffff80000080a59e:	57                   	push   rdi
ffff80000080a59f:	56                   	push   rsi
ffff80000080a5a0:	41 50                	push   r8
ffff80000080a5a2:	41 51                	push   r9
ffff80000080a5a4:	41 52                	push   r10
ffff80000080a5a6:	41 53                	push   r11
ffff80000080a5a8:	41 54                	push   r12
ffff80000080a5aa:	41 55                	push   r13
ffff80000080a5ac:	41 56                	push   r14
ffff80000080a5ae:	41 57                	push   r15
ffff80000080a5b0:	66 8c c0             	mov    ax,es
ffff80000080a5b3:	50                   	push   rax
ffff80000080a5b4:	66 8c d8             	mov    ax,ds
ffff80000080a5b7:	50                   	push   rax
ffff80000080a5b8:	66 b8 10 00          	mov    ax,0x10
ffff80000080a5bc:	8e c0                	mov    es,eax
ffff80000080a5be:	8e d8                	mov    ds,eax
ffff80000080a5c0:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
ffff80000080a5c5:	41 53                	push   r11
ffff80000080a5c7:	51                   	push   rcx
ffff80000080a5c8:	49 87 ca             	xchg   r10,rcx
ffff80000080a5cb:	57                   	push   rdi
ffff80000080a5cc:	48 bf 28 03 40 00 00 	movabs rdi,0xffff800000400328
ffff80000080a5d3:	80 ff ff 
ffff80000080a5d6:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
ffff80000080a5d9:	4c 89 97 6c 02 00 00 	mov    QWORD PTR [rdi+0x26c],r10
ffff80000080a5e0:	5f                   	pop    rdi
ffff80000080a5e1:	e8 5d 65 ff ff       	call   ffff800000800b43 <syscall>

ffff80000080a5e6 <_syscall_sysret>:
_syscall_sysret():
ffff80000080a5e6:	4c 87 d1             	xchg   rcx,r10
ffff80000080a5e9:	59                   	pop    rcx
ffff80000080a5ea:	41 5b                	pop    r11
ffff80000080a5ec:	58                   	pop    rax
ffff80000080a5ed:	8e d8                	mov    ds,eax
ffff80000080a5ef:	58                   	pop    rax
ffff80000080a5f0:	8e c0                	mov    es,eax
ffff80000080a5f2:	41 5f                	pop    r15
ffff80000080a5f4:	41 5e                	pop    r14
ffff80000080a5f6:	41 5d                	pop    r13
ffff80000080a5f8:	41 5c                	pop    r12
ffff80000080a5fa:	41 5b                	pop    r11
ffff80000080a5fc:	41 5a                	pop    r10
ffff80000080a5fe:	41 59                	pop    r9
ffff80000080a600:	41 58                	pop    r8
ffff80000080a602:	5e                   	pop    rsi
ffff80000080a603:	5f                   	pop    rdi
ffff80000080a604:	5a                   	pop    rdx
ffff80000080a605:	59                   	pop    rcx
ffff80000080a606:	5b                   	pop    rbx
ffff80000080a607:	48 83 c4 08          	add    rsp,0x8
ffff80000080a60b:	48 8b 65 14          	mov    rsp,QWORD PTR [rbp+0x14]
ffff80000080a60f:	5d                   	pop    rbp
ffff80000080a610:	fb                   	sti    
ffff80000080a611:	48 0f 07             	sysretq 

ffff80000080a614 <init_framebuffer>:
init_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:27
static u32 font_width_bytes;
static u8 *glyph_table;
static u32 bytes_per_glyph, glyph_nr;
int font_size=1;
void init_framebuffer()
{
ffff80000080a614:	f3 0f 1e fa          	endbr64 
ffff80000080a618:	55                   	push   rbp
ffff80000080a619:	48 89 e5             	mov    rbp,rsp
ffff80000080a61c:	41 57                	push   r15
ffff80000080a61e:	53                   	push   rbx
ffff80000080a61f:	48 83 ec 50          	sub    rsp,0x50
ffff80000080a623:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a623 <init_framebuffer+0xf>
ffff80000080a62a:	49 bb 2d 69 11 00 00 	movabs r11,0x11692d
ffff80000080a631:	00 00 00 
ffff80000080a634:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:29
    //映射页帧内存
    size_t w=framebuffer.common.framebuffer_width;
ffff80000080a637:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff80000080a63e:	ff ff ff 
ffff80000080a641:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a645:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080a648:	89 c0                	mov    eax,eax
ffff80000080a64a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:30
    size_t h=framebuffer.common.framebuffer_height;
ffff80000080a64e:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff80000080a655:	ff ff ff 
ffff80000080a658:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a65c:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080a65f:	89 c0                	mov    eax,eax
ffff80000080a661:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:31
    size_t bypp=framebuffer.common.framebuffer_bpp/8;
ffff80000080a665:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff80000080a66c:	ff ff ff 
ffff80000080a66f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a673:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
ffff80000080a677:	c0 e8 03             	shr    al,0x3
ffff80000080a67a:	0f b6 c0             	movzx  eax,al
ffff80000080a67d:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:32
    size_t inter=framebuffer.common.framebuffer_pitch;
ffff80000080a681:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff80000080a688:	ff ff ff 
ffff80000080a68b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a68f:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080a692:	89 c0                	mov    eax,eax
ffff80000080a694:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:33
    size_t pc=w*h;
ffff80000080a698:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a69c:	48 0f af 45 c8       	imul   rax,QWORD PTR [rbp-0x38]
ffff80000080a6a1:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:34
    size_t size=h*inter;
ffff80000080a6a5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a6a9:	48 0f af 45 b8       	imul   rax,QWORD PTR [rbp-0x48]
ffff80000080a6ae:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:35
    int pgc=size/PAGE_SIZE;
ffff80000080a6b2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a6b6:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080a6ba:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:36
    addr_t p=FRAMEBUFFER_ADDR;
ffff80000080a6bd:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080a6c4:	80 ff ff 
ffff80000080a6c7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:37
    addr_t pp=framebuffer.common.framebuffer_addr;
ffff80000080a6cb:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff80000080a6d2:	ff ff ff 
ffff80000080a6d5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a6d9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080a6dd:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38
    for (size_t i = 0; i < pgc; i++)
ffff80000080a6e1:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080a6e8:	00 
ffff80000080a6e9:	eb 44                	jmp    ffff80000080a72f <init_framebuffer+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:40 (discriminator 3)
    {
        smmap(pp,p,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,PML4_ADDR);
ffff80000080a6eb:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff80000080a6ef:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a6f3:	48 ba 00 10 10 00 00 	movabs rdx,0xffff800000101000
ffff80000080a6fa:	80 ff ff 
ffff80000080a6fd:	48 89 d1             	mov    rcx,rdx
ffff80000080a700:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080a705:	48 89 c7             	mov    rdi,rax
ffff80000080a708:	49 89 df             	mov    r15,rbx
ffff80000080a70b:	48 b8 77 0e ee ff ff 	movabs rax,0xffffffffffee0e77
ffff80000080a712:	ff ff ff 
ffff80000080a715:	48 01 d8             	add    rax,rbx
ffff80000080a718:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:41 (discriminator 3)
        pp+=PAGE_SIZE;
ffff80000080a71a:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffff80000080a721:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:42 (discriminator 3)
        p+=PAGE_SIZE;
ffff80000080a722:	48 81 45 e8 00 10 00 	add    QWORD PTR [rbp-0x18],0x1000
ffff80000080a729:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38 (discriminator 3)
    for (size_t i = 0; i < pgc; i++)
ffff80000080a72a:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38 (discriminator 1)
ffff80000080a72f:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff80000080a732:	48 98                	cdqe   
ffff80000080a734:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000080a738:	72 b1                	jb     ffff80000080a6eb <init_framebuffer+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:46
    }
    
    
}
ffff80000080a73a:	90                   	nop
ffff80000080a73b:	90                   	nop
ffff80000080a73c:	48 83 c4 50          	add    rsp,0x50
ffff80000080a740:	5b                   	pop    rbx
ffff80000080a741:	41 5f                	pop    r15
ffff80000080a743:	5d                   	pop    rbp
ffff80000080a744:	c3                   	ret    

ffff80000080a745 <init_font>:
init_font():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:47
void init_font(){
ffff80000080a745:	f3 0f 1e fa          	endbr64 
ffff80000080a749:	55                   	push   rbp
ffff80000080a74a:	48 89 e5             	mov    rbp,rsp
ffff80000080a74d:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff80000080a74d <init_font+0x8>
ffff80000080a754:	49 bb 03 68 11 00 00 	movabs r11,0x116803
ffff80000080a75b:	00 00 00 
ffff80000080a75e:	4c 01 d9             	add    rcx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:48
    boot_font = (struct psf2_header*) (_binary_res_font_psf_start);
ffff80000080a761:	48 b8 d0 3c af ff ff 	movabs rax,0xffffffffffaf3cd0
ffff80000080a768:	ff ff ff 
ffff80000080a76b:	48 ba 80 fd ff ff ff 	movabs rdx,0xfffffffffffffd80
ffff80000080a772:	ff ff ff 
ffff80000080a775:	48 8b 14 11          	mov    rdx,QWORD PTR [rcx+rdx*1]
ffff80000080a779:	48 89 14 01          	mov    QWORD PTR [rcx+rax*1],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:50

    font_width_bytes = (boot_font->width + 7) / 8;
ffff80000080a77d:	48 b8 d0 3c af ff ff 	movabs rax,0xffffffffffaf3cd0
ffff80000080a784:	ff ff ff 
ffff80000080a787:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a78b:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff80000080a78e:	83 c0 07             	add    eax,0x7
ffff80000080a791:	c1 e8 03             	shr    eax,0x3
ffff80000080a794:	89 c2                	mov    edx,eax
ffff80000080a796:	48 b8 e0 3c af ff ff 	movabs rax,0xffffffffffaf3ce0
ffff80000080a79d:	ff ff ff 
ffff80000080a7a0:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:51
    font_width = font_width_bytes * 8;
ffff80000080a7a3:	48 b8 e0 3c af ff ff 	movabs rax,0xffffffffffaf3ce0
ffff80000080a7aa:	ff ff ff 
ffff80000080a7ad:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff80000080a7b0:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
ffff80000080a7b7:	48 b8 d8 3c af ff ff 	movabs rax,0xffffffffffaf3cd8
ffff80000080a7be:	ff ff ff 
ffff80000080a7c1:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:52
    font_height = boot_font->height;
ffff80000080a7c4:	48 b8 d0 3c af ff ff 	movabs rax,0xffffffffffaf3cd0
ffff80000080a7cb:	ff ff ff 
ffff80000080a7ce:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a7d2:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080a7d5:	48 ba dc 3c af ff ff 	movabs rdx,0xffffffffffaf3cdc
ffff80000080a7dc:	ff ff ff 
ffff80000080a7df:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:54

    glyph_table = (u8*)(_binary_res_font_psf_start)+boot_font->header_size;
ffff80000080a7e2:	48 b8 d0 3c af ff ff 	movabs rax,0xffffffffffaf3cd0
ffff80000080a7e9:	ff ff ff 
ffff80000080a7ec:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a7f0:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080a7f3:	89 c2                	mov    edx,eax
ffff80000080a7f5:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff80000080a7fc:	ff ff ff 
ffff80000080a7ff:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a803:	48 01 c2             	add    rdx,rax
ffff80000080a806:	48 b8 e8 3c af ff ff 	movabs rax,0xffffffffffaf3ce8
ffff80000080a80d:	ff ff ff 
ffff80000080a810:	48 89 14 01          	mov    QWORD PTR [rcx+rax*1],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:55
    glyph_nr = boot_font->glyph_nr;
ffff80000080a814:	48 b8 d0 3c af ff ff 	movabs rax,0xffffffffffaf3cd0
ffff80000080a81b:	ff ff ff 
ffff80000080a81e:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a822:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080a825:	48 ba f4 3c af ff ff 	movabs rdx,0xffffffffffaf3cf4
ffff80000080a82c:	ff ff ff 
ffff80000080a82f:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:56
    bytes_per_glyph = boot_font->bytes_per_glyph;
ffff80000080a832:	48 b8 d0 3c af ff ff 	movabs rax,0xffffffffffaf3cd0
ffff80000080a839:	ff ff ff 
ffff80000080a83c:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a840:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080a843:	48 ba f0 3c af ff ff 	movabs rdx,0xffffffffffaf3cf0
ffff80000080a84a:	ff ff ff 
ffff80000080a84d:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:58

    fb_cursor_x = fb_cursor_y = 0;
ffff80000080a850:	48 b8 c0 3c af ff ff 	movabs rax,0xffffffffffaf3cc0
ffff80000080a857:	ff ff ff 
ffff80000080a85a:	c7 04 01 00 00 00 00 	mov    DWORD PTR [rcx+rax*1],0x0
ffff80000080a861:	48 b8 c0 3c af ff ff 	movabs rax,0xffffffffffaf3cc0
ffff80000080a868:	ff ff ff 
ffff80000080a86b:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff80000080a86e:	48 ba bc 3c af ff ff 	movabs rdx,0xffffffffffaf3cbc
ffff80000080a875:	ff ff ff 
ffff80000080a878:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:59
    max_ch_nr_x = framebuffer.common.framebuffer_width / font_width;
ffff80000080a87b:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff80000080a882:	ff ff ff 
ffff80000080a885:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a889:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080a88c:	48 ba d8 3c af ff ff 	movabs rdx,0xffffffffffaf3cd8
ffff80000080a893:	ff ff ff 
ffff80000080a896:	8b 34 11             	mov    esi,DWORD PTR [rcx+rdx*1]
ffff80000080a899:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080a89e:	f7 f6                	div    esi
ffff80000080a8a0:	89 c2                	mov    edx,eax
ffff80000080a8a2:	48 b8 c4 3c af ff ff 	movabs rax,0xffffffffffaf3cc4
ffff80000080a8a9:	ff ff ff 
ffff80000080a8ac:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:60
    max_ch_nr_y = framebuffer.common.framebuffer_height / font_height;
ffff80000080a8af:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff80000080a8b6:	ff ff ff 
ffff80000080a8b9:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a8bd:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080a8c0:	48 ba dc 3c af ff ff 	movabs rdx,0xffffffffffaf3cdc
ffff80000080a8c7:	ff ff ff 
ffff80000080a8ca:	8b 3c 11             	mov    edi,DWORD PTR [rcx+rdx*1]
ffff80000080a8cd:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080a8d2:	f7 f7                	div    edi
ffff80000080a8d4:	89 c2                	mov    edx,eax
ffff80000080a8d6:	48 b8 c8 3c af ff ff 	movabs rax,0xffffffffffaf3cc8
ffff80000080a8dd:	ff ff ff 
ffff80000080a8e0:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:61
    font_size=1;
ffff80000080a8e3:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080a8ea:	ff ff ff 
ffff80000080a8ed:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a8f1:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:62
}
ffff80000080a8f7:	90                   	nop
ffff80000080a8f8:	5d                   	pop    rbp
ffff80000080a8f9:	c3                   	ret    

ffff80000080a8fa <set_framebuffer>:
set_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:64
void set_framebuffer(struct multiboot_tag_framebuffer tag)
{
ffff80000080a8fa:	f3 0f 1e fa          	endbr64 
ffff80000080a8fe:	55                   	push   rbp
ffff80000080a8ff:	48 89 e5             	mov    rbp,rsp
ffff80000080a902:	53                   	push   rbx
ffff80000080a903:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a903 <set_framebuffer+0x9>
ffff80000080a90a:	49 bb 4d 66 11 00 00 	movabs r11,0x11664d
ffff80000080a911:	00 00 00 
ffff80000080a914:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:65
    framebuffer=tag;
ffff80000080a917:	48 ba d8 fe ff ff ff 	movabs rdx,0xfffffffffffffed8
ffff80000080a91e:	ff ff ff 
ffff80000080a921:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080a925:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
ffff80000080a929:	48 8b 5d 18          	mov    rbx,QWORD PTR [rbp+0x18]
ffff80000080a92d:	48 89 08             	mov    QWORD PTR [rax],rcx
ffff80000080a930:	48 89 58 08          	mov    QWORD PTR [rax+0x8],rbx
ffff80000080a934:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
ffff80000080a938:	48 8b 5d 28          	mov    rbx,QWORD PTR [rbp+0x28]
ffff80000080a93c:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
ffff80000080a940:	48 89 58 18          	mov    QWORD PTR [rax+0x18],rbx
ffff80000080a944:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
ffff80000080a948:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:66
}
ffff80000080a94c:	90                   	nop
ffff80000080a94d:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff80000080a951:	c9                   	leave  
ffff80000080a952:	c3                   	ret    

ffff80000080a953 <fill_rect>:
fill_rect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:68

void fill_rect(int x,int y,int w,int h,unsigned int color){
ffff80000080a953:	f3 0f 1e fa          	endbr64 
ffff80000080a957:	55                   	push   rbp
ffff80000080a958:	48 89 e5             	mov    rbp,rsp
ffff80000080a95b:	4c 8d 0d f9 ff ff ff 	lea    r9,[rip+0xfffffffffffffff9]        # ffff80000080a95b <fill_rect+0x8>
ffff80000080a962:	49 bb f5 65 11 00 00 	movabs r11,0x1165f5
ffff80000080a969:	00 00 00 
ffff80000080a96c:	4d 01 d9             	add    r9,r11
ffff80000080a96f:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080a972:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080a975:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080a978:	89 4d d0             	mov    DWORD PTR [rbp-0x30],ecx
ffff80000080a97b:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:69
    unsigned int* fb= (unsigned int*) FRAMEBUFFER_ADDR;
ffff80000080a97f:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080a986:	80 ff ff 
ffff80000080a989:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71
    //目前只写32bpp
    for(int py=x;py<h+x;py++){
ffff80000080a98d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a990:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffff80000080a993:	e9 82 00 00 00       	jmp    ffff80000080aa1a <fill_rect+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72
        for(int px=y;px<w+y;px++){
ffff80000080a998:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080a99b:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffff80000080a99e:	eb 69                	jmp    ffff80000080aa09 <fill_rect+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080a9a0:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff80000080a9a7:	ff ff ff 
ffff80000080a9aa:	49 8b 04 01          	mov    rax,QWORD PTR [r9+rax*1]
ffff80000080a9ae:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
ffff80000080a9b1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080a9b4:	0f af c2             	imul   eax,edx
ffff80000080a9b7:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:74 (discriminator 3)
                       +px*framebuffer.common.framebuffer_bpp/8;
ffff80000080a9b9:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff80000080a9c0:	ff ff ff 
ffff80000080a9c3:	49 8b 04 01          	mov    rax,QWORD PTR [r9+rax*1]
ffff80000080a9c7:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
ffff80000080a9cb:	0f b6 c0             	movzx  eax,al
ffff80000080a9ce:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
ffff80000080a9d2:	8d 50 07             	lea    edx,[rax+0x7]
ffff80000080a9d5:	85 c0                	test   eax,eax
ffff80000080a9d7:	0f 48 c2             	cmovs  eax,edx
ffff80000080a9da:	c1 f8 03             	sar    eax,0x3
ffff80000080a9dd:	48 98                	cdqe   
ffff80000080a9df:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080a9e3:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080a9ea:	80 ff ff 
ffff80000080a9ed:	48 01 d0             	add    rax,rdx
ffff80000080a9f0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:75 (discriminator 3)
            fb=(unsigned int*)ptr;
ffff80000080a9f4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a9f8:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:76 (discriminator 3)
            *fb=color;
ffff80000080a9fc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080aa00:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080aa03:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72 (discriminator 3)
        for(int px=y;px<w+y;px++){
ffff80000080aa05:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72 (discriminator 1)
ffff80000080aa09:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080aa0c:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080aa0f:	01 d0                	add    eax,edx
ffff80000080aa11:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
ffff80000080aa14:	7c 8a                	jl     ffff80000080a9a0 <fill_rect+0x4d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71 (discriminator 2)
    for(int py=x;py<h+x;py++){
ffff80000080aa16:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71 (discriminator 1)
ffff80000080aa1a:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080aa1d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080aa20:	01 d0                	add    eax,edx
ffff80000080aa22:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
ffff80000080aa25:	0f 8c 6d ff ff ff    	jl     ffff80000080a998 <fill_rect+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:79
        }
    }
}
ffff80000080aa2b:	90                   	nop
ffff80000080aa2c:	90                   	nop
ffff80000080aa2d:	5d                   	pop    rbp
ffff80000080aa2e:	c3                   	ret    

ffff80000080aa2f <draw_text>:
draw_text():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:82
unsigned char letters[];
void draw_text(int x, int y, int size, char *str)
{
ffff80000080aa2f:	f3 0f 1e fa          	endbr64 
ffff80000080aa33:	55                   	push   rbp
ffff80000080aa34:	48 89 e5             	mov    rbp,rsp
ffff80000080aa37:	41 57                	push   r15
ffff80000080aa39:	53                   	push   rbx
ffff80000080aa3a:	48 83 ec 30          	sub    rsp,0x30
ffff80000080aa3e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080aa3e <draw_text+0xf>
ffff80000080aa45:	49 bb 12 65 11 00 00 	movabs r11,0x116512
ffff80000080aa4c:	00 00 00 
ffff80000080aa4f:	4c 01 db             	add    rbx,r11
ffff80000080aa52:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080aa55:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080aa58:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080aa5b:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:83
    int tx=x;
ffff80000080aa5f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080aa62:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:84
    while(*str!='\0')
ffff80000080aa65:	eb 75                	jmp    ffff80000080aadc <draw_text+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:86
    {
        if(*str=='\n')
ffff80000080aa67:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080aa6b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080aa6e:	3c 0a                	cmp    al,0xa
ffff80000080aa70:	75 23                	jne    ffff80000080aa95 <draw_text+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:88
        {
            y+=font_height*size;
ffff80000080aa72:	48 b8 dc 3c af ff ff 	movabs rax,0xffffffffffaf3cdc
ffff80000080aa79:	ff ff ff 
ffff80000080aa7c:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080aa7f:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080aa82:	0f af d0             	imul   edx,eax
ffff80000080aa85:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080aa88:	01 d0                	add    eax,edx
ffff80000080aa8a:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:89
            tx=x;
ffff80000080aa8d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080aa90:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffff80000080aa93:	eb 42                	jmp    ffff80000080aad7 <draw_text+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:93
        }
        else
        {
            draw_letter(tx,y,size,*str);
ffff80000080aa95:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080aa99:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080aa9c:	0f be c8             	movsx  ecx,al
ffff80000080aa9f:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080aaa2:	8b 75 d8             	mov    esi,DWORD PTR [rbp-0x28]
ffff80000080aaa5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080aaa8:	89 c7                	mov    edi,eax
ffff80000080aaaa:	49 89 df             	mov    r15,rbx
ffff80000080aaad:	48 b8 a2 9b ee ff ff 	movabs rax,0xffffffffffee9ba2
ffff80000080aab4:	ff ff ff 
ffff80000080aab7:	48 01 d8             	add    rax,rbx
ffff80000080aaba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:94
            tx+=size*font_width;
ffff80000080aabc:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080aabf:	48 b8 d8 3c af ff ff 	movabs rax,0xffffffffffaf3cd8
ffff80000080aac6:	ff ff ff 
ffff80000080aac9:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080aacc:	0f af d0             	imul   edx,eax
ffff80000080aacf:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080aad2:	01 d0                	add    eax,edx
ffff80000080aad4:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:96
        }
        str++;
ffff80000080aad7:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:84
    while(*str!='\0')
ffff80000080aadc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080aae0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080aae3:	84 c0                	test   al,al
ffff80000080aae5:	75 80                	jne    ffff80000080aa67 <draw_text+0x38>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:98
    }
}
ffff80000080aae7:	90                   	nop
ffff80000080aae8:	90                   	nop
ffff80000080aae9:	48 83 c4 30          	add    rsp,0x30
ffff80000080aaed:	5b                   	pop    rbx
ffff80000080aaee:	41 5f                	pop    r15
ffff80000080aaf0:	5d                   	pop    rbp
ffff80000080aaf1:	c3                   	ret    

ffff80000080aaf2 <draw_letter>:
draw_letter():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:99
void draw_letter(int x, volatile int y, int size, char c) {
ffff80000080aaf2:	f3 0f 1e fa          	endbr64 
ffff80000080aaf6:	55                   	push   rbp
ffff80000080aaf7:	48 89 e5             	mov    rbp,rsp
ffff80000080aafa:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080aafa <draw_letter+0x8>
ffff80000080ab01:	49 bb 56 64 11 00 00 	movabs r11,0x116456
ffff80000080ab08:	00 00 00 
ffff80000080ab0b:	4c 01 d8             	add    rax,r11
ffff80000080ab0e:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
ffff80000080ab11:	89 75 c8             	mov    DWORD PTR [rbp-0x38],esi
ffff80000080ab14:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
ffff80000080ab17:	89 ca                	mov    edx,ecx
ffff80000080ab19:	88 55 c0             	mov    BYTE PTR [rbp-0x40],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:100
    u8 *glyph = glyph_table;
ffff80000080ab1c:	48 ba e8 3c af ff ff 	movabs rdx,0xffffffffffaf3ce8
ffff80000080ab23:	ff ff ff 
ffff80000080ab26:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ab2a:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:101
    if (c < glyph_nr) {
ffff80000080ab2e:	0f be 4d c0          	movsx  ecx,BYTE PTR [rbp-0x40]
ffff80000080ab32:	48 ba f4 3c af ff ff 	movabs rdx,0xffffffffffaf3cf4
ffff80000080ab39:	ff ff ff 
ffff80000080ab3c:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ab3f:	39 d1                	cmp    ecx,edx
ffff80000080ab41:	73 1a                	jae    ffff80000080ab5d <draw_letter+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:102
        glyph += c * bytes_per_glyph;
ffff80000080ab43:	0f be 4d c0          	movsx  ecx,BYTE PTR [rbp-0x40]
ffff80000080ab47:	48 ba f0 3c af ff ff 	movabs rdx,0xffffffffffaf3cf0
ffff80000080ab4e:	ff ff ff 
ffff80000080ab51:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ab54:	0f af d1             	imul   edx,ecx
ffff80000080ab57:	89 d2                	mov    edx,edx
ffff80000080ab59:	48 01 55 f8          	add    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105
    }
    /* output the font to frame buffer */
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
ffff80000080ab5d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080ab64:	e9 f8 00 00 00       	jmp    ffff80000080ac61 <draw_letter+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:106
        u8 mask = 1 << 7;
ffff80000080ab69:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108

        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
ffff80000080ab6d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080ab74:	e9 bb 00 00 00       	jmp    ffff80000080ac34 <draw_letter+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:109
            int px=x+ch_x*size;
ffff80000080ab79:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000080ab7c:	89 d1                	mov    ecx,edx
ffff80000080ab7e:	0f af 4d ec          	imul   ecx,DWORD PTR [rbp-0x14]
ffff80000080ab82:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080ab85:	01 ca                	add    edx,ecx
ffff80000080ab87:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:110
            int py=y+ch_y*size;
ffff80000080ab8a:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000080ab8d:	89 d1                	mov    ecx,edx
ffff80000080ab8f:	0f af 4d f4          	imul   ecx,DWORD PTR [rbp-0xc]
ffff80000080ab93:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
ffff80000080ab96:	01 ca                	add    edx,ecx
ffff80000080ab98:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:111
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080ab9b:	48 ba d8 fe ff ff ff 	movabs rdx,0xfffffffffffffed8
ffff80000080aba2:	ff ff ff 
ffff80000080aba5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080aba9:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080abac:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080abaf:	0f af d1             	imul   edx,ecx
ffff80000080abb2:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:112
                     +px*framebuffer.common.framebuffer_bpp/8;
ffff80000080abb4:	48 ba d8 fe ff ff ff 	movabs rdx,0xfffffffffffffed8
ffff80000080abbb:	ff ff ff 
ffff80000080abbe:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080abc2:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080abc6:	0f b6 d2             	movzx  edx,dl
ffff80000080abc9:	0f af 55 e8          	imul   edx,DWORD PTR [rbp-0x18]
ffff80000080abcd:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080abd0:	85 d2                	test   edx,edx
ffff80000080abd2:	0f 48 d1             	cmovs  edx,ecx
ffff80000080abd5:	c1 fa 03             	sar    edx,0x3
ffff80000080abd8:	48 63 d2             	movsxd rdx,edx
ffff80000080abdb:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080abdf:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080abe6:	80 ff ff 
ffff80000080abe9:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:111
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080abec:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:113
            if ((*(glyph + ch_x / 8) & mask) != 0) {
ffff80000080abf0:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080abf3:	c1 ea 03             	shr    edx,0x3
ffff80000080abf6:	89 d1                	mov    ecx,edx
ffff80000080abf8:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080abfc:	48 01 ca             	add    rdx,rcx
ffff80000080abff:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080ac02:	22 55 f3             	and    dl,BYTE PTR [rbp-0xd]
ffff80000080ac05:	84 d2                	test   dl,dl
ffff80000080ac07:	74 0c                	je     ffff80000080ac15 <draw_letter+0x123>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:114
                *ptr=-1;
ffff80000080ac09:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080ac0d:	c7 02 ff ff ff ff    	mov    DWORD PTR [rdx],0xffffffff
ffff80000080ac13:	eb 0a                	jmp    ffff80000080ac1f <draw_letter+0x12d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:116
            } else {
                *ptr=0;
ffff80000080ac15:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080ac19:	c7 02 00 00 00 00    	mov    DWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:119
            }

            mask >>= 1;
ffff80000080ac1f:	d0 6d f3             	shr    BYTE PTR [rbp-0xd],1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:120
            if (ch_x % 8 == 0) {
ffff80000080ac22:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080ac25:	83 e2 07             	and    edx,0x7
ffff80000080ac28:	85 d2                	test   edx,edx
ffff80000080ac2a:	75 04                	jne    ffff80000080ac30 <draw_letter+0x13e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:121
                mask = 1 << 7;
ffff80000080ac2c:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108 (discriminator 2)
        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
ffff80000080ac30:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108 (discriminator 1)
ffff80000080ac34:	48 ba d8 3c af ff ff 	movabs rdx,0xffffffffffaf3cd8
ffff80000080ac3b:	ff ff ff 
ffff80000080ac3e:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ac41:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff80000080ac44:	0f 82 2f ff ff ff    	jb     ffff80000080ab79 <draw_letter+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:125 (discriminator 2)
            }
        }

        glyph += font_width_bytes;
ffff80000080ac4a:	48 ba e0 3c af ff ff 	movabs rdx,0xffffffffffaf3ce0
ffff80000080ac51:	ff ff ff 
ffff80000080ac54:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ac57:	89 d2                	mov    edx,edx
ffff80000080ac59:	48 01 55 f8          	add    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105 (discriminator 2)
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
ffff80000080ac5d:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105 (discriminator 1)
ffff80000080ac61:	48 ba dc 3c af ff ff 	movabs rdx,0xffffffffffaf3cdc
ffff80000080ac68:	ff ff ff 
ffff80000080ac6b:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ac6e:	39 55 f4             	cmp    DWORD PTR [rbp-0xc],edx
ffff80000080ac71:	0f 82 f2 fe ff ff    	jb     ffff80000080ab69 <draw_letter+0x77>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:127
    }
}
ffff80000080ac77:	90                   	nop
ffff80000080ac78:	90                   	nop
ffff80000080ac79:	5d                   	pop    rbp
ffff80000080ac7a:	c3                   	ret    

ffff80000080ac7b <scr_up>:
scr_up():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:129
//向上滚动一个像素
void scr_up(){
ffff80000080ac7b:	f3 0f 1e fa          	endbr64 
ffff80000080ac7f:	55                   	push   rbp
ffff80000080ac80:	48 89 e5             	mov    rbp,rsp
ffff80000080ac83:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ac83 <scr_up+0x8>
ffff80000080ac8a:	49 bb cd 62 11 00 00 	movabs r11,0x1162cd
ffff80000080ac91:	00 00 00 
ffff80000080ac94:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130
    for(int dy=0;dy<framebuffer.common.framebuffer_height-1;dy++){
ffff80000080ac97:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080ac9e:	e9 ad 00 00 00       	jmp    ffff80000080ad50 <scr_up+0xd5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131
        for(int dx=0;dx<framebuffer.common.framebuffer_width;dx++){
ffff80000080aca3:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080acaa:	e9 81 00 00 00       	jmp    ffff80000080ad30 <scr_up+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:133 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+
                    dy*framebuffer.common.framebuffer_pitch
ffff80000080acaf:	48 ba d8 fe ff ff ff 	movabs rdx,0xfffffffffffffed8
ffff80000080acb6:	ff ff ff 
ffff80000080acb9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080acbd:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080acc0:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080acc3:	0f af d1             	imul   edx,ecx
ffff80000080acc6:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:134 (discriminator 3)
                    +dx*framebuffer.common.framebuffer_bpp/8);
ffff80000080acc8:	48 ba d8 fe ff ff ff 	movabs rdx,0xfffffffffffffed8
ffff80000080accf:	ff ff ff 
ffff80000080acd2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080acd6:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080acda:	0f b6 d2             	movzx  edx,dl
ffff80000080acdd:	0f af 55 f8          	imul   edx,DWORD PTR [rbp-0x8]
ffff80000080ace1:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080ace4:	85 d2                	test   edx,edx
ffff80000080ace6:	0f 48 d1             	cmovs  edx,ecx
ffff80000080ace9:	c1 fa 03             	sar    edx,0x3
ffff80000080acec:	48 63 d2             	movsxd rdx,edx
ffff80000080acef:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080acf3:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080acfa:	80 ff ff 
ffff80000080acfd:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:132 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+
ffff80000080ad00:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:135 (discriminator 3)
            *p=*(p+framebuffer.common.framebuffer_pitch);
ffff80000080ad04:	48 ba d8 fe ff ff ff 	movabs rdx,0xfffffffffffffed8
ffff80000080ad0b:	ff ff ff 
ffff80000080ad0e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ad12:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000080ad15:	89 d1                	mov    ecx,edx
ffff80000080ad17:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080ad1b:	48 01 ca             	add    rdx,rcx
ffff80000080ad1e:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
ffff80000080ad21:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080ad25:	88 0a                	mov    BYTE PTR [rdx],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:136 (discriminator 3)
            p++;
ffff80000080ad27:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131 (discriminator 3)
        for(int dx=0;dx<framebuffer.common.framebuffer_width;dx++){
ffff80000080ad2c:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131 (discriminator 1)
ffff80000080ad30:	48 ba d8 fe ff ff ff 	movabs rdx,0xfffffffffffffed8
ffff80000080ad37:	ff ff ff 
ffff80000080ad3a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ad3e:	8b 4a 14             	mov    ecx,DWORD PTR [rdx+0x14]
ffff80000080ad41:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080ad44:	39 d1                	cmp    ecx,edx
ffff80000080ad46:	0f 87 63 ff ff ff    	ja     ffff80000080acaf <scr_up+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130 (discriminator 2)
    for(int dy=0;dy<framebuffer.common.framebuffer_height-1;dy++){
ffff80000080ad4c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130 (discriminator 1)
ffff80000080ad50:	48 ba d8 fe ff ff ff 	movabs rdx,0xfffffffffffffed8
ffff80000080ad57:	ff ff ff 
ffff80000080ad5a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ad5e:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080ad61:	8d 4a ff             	lea    ecx,[rdx-0x1]
ffff80000080ad64:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080ad67:	39 d1                	cmp    ecx,edx
ffff80000080ad69:	0f 87 34 ff ff ff    	ja     ffff80000080aca3 <scr_up+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:142
        }

    }
//    for(int i=0;i< framebuffer.common.framebuffer_width*framebuffer.common.framebuffer_bpp/8;i++)
//        *(p++)=0;
}
ffff80000080ad6f:	90                   	nop
ffff80000080ad70:	90                   	nop
ffff80000080ad71:	5d                   	pop    rbp
ffff80000080ad72:	c3                   	ret    

ffff80000080ad73 <scr_down>:
scr_down():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:143
void scr_down(){
ffff80000080ad73:	f3 0f 1e fa          	endbr64 
ffff80000080ad77:	55                   	push   rbp
ffff80000080ad78:	48 89 e5             	mov    rbp,rsp
ffff80000080ad7b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ad7b <scr_down+0x8>
ffff80000080ad82:	49 bb d5 61 11 00 00 	movabs r11,0x1161d5
ffff80000080ad89:	00 00 00 
ffff80000080ad8c:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144
    for(int dy=1;dy<max_ch_nr_y;dy++){
ffff80000080ad8f:	c7 45 fc 01 00 00 00 	mov    DWORD PTR [rbp-0x4],0x1
ffff80000080ad96:	e9 aa 00 00 00       	jmp    ffff80000080ae45 <scr_down+0xd2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145
        for(int dx=0;dx<max_ch_nr_x;dx++){
ffff80000080ad9b:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080ada2:	e9 82 00 00 00       	jmp    ffff80000080ae29 <scr_down+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:146 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
ffff80000080ada7:	48 ba d8 fe ff ff ff 	movabs rdx,0xfffffffffffffed8
ffff80000080adae:	ff ff ff 
ffff80000080adb1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080adb5:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080adb8:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080adbb:	0f af d1             	imul   edx,ecx
ffff80000080adbe:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:147 (discriminator 3)
                            +dx*framebuffer.common.framebuffer_bpp/8);
ffff80000080adc0:	48 ba d8 fe ff ff ff 	movabs rdx,0xfffffffffffffed8
ffff80000080adc7:	ff ff ff 
ffff80000080adca:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080adce:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080add2:	0f b6 d2             	movzx  edx,dl
ffff80000080add5:	0f af 55 f8          	imul   edx,DWORD PTR [rbp-0x8]
ffff80000080add9:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080addc:	85 d2                	test   edx,edx
ffff80000080adde:	0f 48 d1             	cmovs  edx,ecx
ffff80000080ade1:	c1 fa 03             	sar    edx,0x3
ffff80000080ade4:	48 63 d2             	movsxd rdx,edx
ffff80000080ade7:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080adeb:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080adf2:	80 ff ff 
ffff80000080adf5:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:146 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
ffff80000080adf8:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:148 (discriminator 3)
            *p=*(p-framebuffer.common.framebuffer_pitch);
ffff80000080adfc:	48 ba d8 fe ff ff ff 	movabs rdx,0xfffffffffffffed8
ffff80000080ae03:	ff ff ff 
ffff80000080ae06:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ae0a:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000080ae0d:	89 d2                	mov    edx,edx
ffff80000080ae0f:	48 89 d1             	mov    rcx,rdx
ffff80000080ae12:	48 f7 d9             	neg    rcx
ffff80000080ae15:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080ae19:	48 01 ca             	add    rdx,rcx
ffff80000080ae1c:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
ffff80000080ae1f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080ae23:	88 0a                	mov    BYTE PTR [rdx],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145 (discriminator 3)
        for(int dx=0;dx<max_ch_nr_x;dx++){
ffff80000080ae25:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145 (discriminator 1)
ffff80000080ae29:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff80000080ae2c:	48 ba c4 3c af ff ff 	movabs rdx,0xffffffffffaf3cc4
ffff80000080ae33:	ff ff ff 
ffff80000080ae36:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ae39:	39 d1                	cmp    ecx,edx
ffff80000080ae3b:	0f 82 66 ff ff ff    	jb     ffff80000080ada7 <scr_down+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144 (discriminator 2)
    for(int dy=1;dy<max_ch_nr_y;dy++){
ffff80000080ae41:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144 (discriminator 1)
ffff80000080ae45:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080ae48:	48 ba c8 3c af ff ff 	movabs rdx,0xffffffffffaf3cc8
ffff80000080ae4f:	ff ff ff 
ffff80000080ae52:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ae55:	39 d1                	cmp    ecx,edx
ffff80000080ae57:	0f 82 3e ff ff ff    	jb     ffff80000080ad9b <scr_down+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:152
        }

    }
}
ffff80000080ae5d:	90                   	nop
ffff80000080ae5e:	90                   	nop
ffff80000080ae5f:	5d                   	pop    rbp
ffff80000080ae60:	c3                   	ret    

ffff80000080ae61 <print>:
print():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:153
void print(char* s){
ffff80000080ae61:	f3 0f 1e fa          	endbr64 
ffff80000080ae65:	55                   	push   rbp
ffff80000080ae66:	48 89 e5             	mov    rbp,rsp
ffff80000080ae69:	41 57                	push   r15
ffff80000080ae6b:	53                   	push   rbx
ffff80000080ae6c:	48 83 ec 10          	sub    rsp,0x10
ffff80000080ae70:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ae70 <print+0xf>
ffff80000080ae77:	49 bb e0 60 11 00 00 	movabs r11,0x1160e0
ffff80000080ae7e:	00 00 00 
ffff80000080ae81:	4c 01 db             	add    rbx,r11
ffff80000080ae84:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
    for(;*s;s++){
ffff80000080ae88:	e9 55 01 00 00       	jmp    ffff80000080afe2 <print+0x181>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155
        if(fb_cursor_x>max_ch_nr_x||*s=='\n')
ffff80000080ae8d:	48 b8 bc 3c af ff ff 	movabs rax,0xffffffffffaf3cbc
ffff80000080ae94:	ff ff ff 
ffff80000080ae97:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080ae9a:	48 b8 c4 3c af ff ff 	movabs rax,0xffffffffffaf3cc4
ffff80000080aea1:	ff ff ff 
ffff80000080aea4:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080aea7:	39 c2                	cmp    edx,eax
ffff80000080aea9:	77 0b                	ja     ffff80000080aeb6 <print+0x55>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155 (discriminator 1)
ffff80000080aeab:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080aeaf:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080aeb2:	3c 0a                	cmp    al,0xa
ffff80000080aeb4:	75 2e                	jne    ffff80000080aee4 <print+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:157
        {
            fb_cursor_y+=1;
ffff80000080aeb6:	48 b8 c0 3c af ff ff 	movabs rax,0xffffffffffaf3cc0
ffff80000080aebd:	ff ff ff 
ffff80000080aec0:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080aec3:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080aec6:	48 b8 c0 3c af ff ff 	movabs rax,0xffffffffffaf3cc0
ffff80000080aecd:	ff ff ff 
ffff80000080aed0:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:158
            fb_cursor_x=0;
ffff80000080aed3:	48 b8 bc 3c af ff ff 	movabs rax,0xffffffffffaf3cbc
ffff80000080aeda:	ff ff ff 
ffff80000080aedd:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:160
        }
        if(*s=='\n')continue;
ffff80000080aee4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080aee8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080aeeb:	3c 0a                	cmp    al,0xa
ffff80000080aeed:	0f 84 e9 00 00 00    	je     ffff80000080afdc <print+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:161
        if(fb_cursor_y>=max_ch_nr_y-1){
ffff80000080aef3:	48 b8 c8 3c af ff ff 	movabs rax,0xffffffffffaf3cc8
ffff80000080aefa:	ff ff ff 
ffff80000080aefd:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080af00:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080af03:	48 b8 c0 3c af ff ff 	movabs rax,0xffffffffffaf3cc0
ffff80000080af0a:	ff ff ff 
ffff80000080af0d:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080af10:	39 c2                	cmp    edx,eax
ffff80000080af12:	77 11                	ja     ffff80000080af25 <print+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:165
//            for(int i=0;i<font_height*font_size;i++)
////                scr_up();
////            fb_cursor_y=max_ch_nr_y-1;
            fb_cursor_y=0;
ffff80000080af14:	48 b8 c0 3c af ff ff 	movabs rax,0xffffffffffaf3cc0
ffff80000080af1b:	ff ff ff 
ffff80000080af1e:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:167
        }
        draw_letter(fb_cursor_x*font_width*font_size,fb_cursor_y*font_height*font_size,font_size,*s);
ffff80000080af25:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080af29:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080af2c:	0f be d0             	movsx  edx,al
ffff80000080af2f:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080af36:	ff ff ff 
ffff80000080af39:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080af3d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080af3f:	48 b9 c0 3c af ff ff 	movabs rcx,0xffffffffffaf3cc0
ffff80000080af46:	ff ff ff 
ffff80000080af49:	8b 34 0b             	mov    esi,DWORD PTR [rbx+rcx*1]
ffff80000080af4c:	48 b9 dc 3c af ff ff 	movabs rcx,0xffffffffffaf3cdc
ffff80000080af53:	ff ff ff 
ffff80000080af56:	8b 0c 0b             	mov    ecx,DWORD PTR [rbx+rcx*1]
ffff80000080af59:	0f af f1             	imul   esi,ecx
ffff80000080af5c:	48 b9 08 fe ff ff ff 	movabs rcx,0xfffffffffffffe08
ffff80000080af63:	ff ff ff 
ffff80000080af66:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080af6a:	8b 09                	mov    ecx,DWORD PTR [rcx]
ffff80000080af6c:	0f af ce             	imul   ecx,esi
ffff80000080af6f:	41 89 c8             	mov    r8d,ecx
ffff80000080af72:	48 b9 bc 3c af ff ff 	movabs rcx,0xffffffffffaf3cbc
ffff80000080af79:	ff ff ff 
ffff80000080af7c:	8b 34 0b             	mov    esi,DWORD PTR [rbx+rcx*1]
ffff80000080af7f:	48 b9 d8 3c af ff ff 	movabs rcx,0xffffffffffaf3cd8
ffff80000080af86:	ff ff ff 
ffff80000080af89:	8b 0c 0b             	mov    ecx,DWORD PTR [rbx+rcx*1]
ffff80000080af8c:	0f af f1             	imul   esi,ecx
ffff80000080af8f:	48 b9 08 fe ff ff ff 	movabs rcx,0xfffffffffffffe08
ffff80000080af96:	ff ff ff 
ffff80000080af99:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080af9d:	8b 09                	mov    ecx,DWORD PTR [rcx]
ffff80000080af9f:	0f af ce             	imul   ecx,esi
ffff80000080afa2:	89 cf                	mov    edi,ecx
ffff80000080afa4:	89 d1                	mov    ecx,edx
ffff80000080afa6:	89 c2                	mov    edx,eax
ffff80000080afa8:	44 89 c6             	mov    esi,r8d
ffff80000080afab:	49 89 df             	mov    r15,rbx
ffff80000080afae:	48 b8 a2 9b ee ff ff 	movabs rax,0xffffffffffee9ba2
ffff80000080afb5:	ff ff ff 
ffff80000080afb8:	48 01 d8             	add    rax,rbx
ffff80000080afbb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:168
        fb_cursor_x+=1;
ffff80000080afbd:	48 b8 bc 3c af ff ff 	movabs rax,0xffffffffffaf3cbc
ffff80000080afc4:	ff ff ff 
ffff80000080afc7:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080afca:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080afcd:	48 b8 bc 3c af ff ff 	movabs rax,0xffffffffffaf3cbc
ffff80000080afd4:	ff ff ff 
ffff80000080afd7:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
ffff80000080afda:	eb 01                	jmp    ffff80000080afdd <print+0x17c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:160
        if(*s=='\n')continue;
ffff80000080afdc:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
    for(;*s;s++){
ffff80000080afdd:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154 (discriminator 1)
ffff80000080afe2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080afe6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080afe9:	84 c0                	test   al,al
ffff80000080afeb:	0f 85 9c fe ff ff    	jne    ffff80000080ae8d <print+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:170
    }
}
ffff80000080aff1:	90                   	nop
ffff80000080aff2:	90                   	nop
ffff80000080aff3:	48 83 c4 10          	add    rsp,0x10
ffff80000080aff7:	5b                   	pop    rbx
ffff80000080aff8:	41 5f                	pop    r15
ffff80000080affa:	5d                   	pop    rbp
ffff80000080affb:	c3                   	ret    

ffff80000080affc <open_framebuffer>:
open_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:175
struct file_operations framebuffer_fops={
        .open=open_framebuffer,.close=close_framebuffer,.read=read_framebuffer,.write=write_framebuffer,
        .ioctl=ioctl_framebuffer
};
long open_framebuffer(struct index_node * inode,struct file * filp){
ffff80000080affc:	f3 0f 1e fa          	endbr64 
ffff80000080b000:	55                   	push   rbp
ffff80000080b001:	48 89 e5             	mov    rbp,rsp
ffff80000080b004:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b004 <open_framebuffer+0x8>
ffff80000080b00b:	49 bb 4c 5f 11 00 00 	movabs r11,0x115f4c
ffff80000080b012:	00 00 00 
ffff80000080b015:	4c 01 d8             	add    rax,r11
ffff80000080b018:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080b01c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:176
    inode->f_ops=&framebuffer_fops;
ffff80000080b020:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080b024:	48 b9 20 fe ff ff ff 	movabs rcx,0xfffffffffffffe20
ffff80000080b02b:	ff ff ff 
ffff80000080b02e:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080b032:	48 89 4a 28          	mov    QWORD PTR [rdx+0x28],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:177
    filp->f_ops=&framebuffer_fops;
ffff80000080b036:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080b03a:	48 b9 20 fe ff ff ff 	movabs rcx,0xfffffffffffffe20
ffff80000080b041:	ff ff ff 
ffff80000080b044:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080b048:	48 89 42 18          	mov    QWORD PTR [rdx+0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:178
    return 1;
ffff80000080b04c:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:179
}
ffff80000080b051:	5d                   	pop    rbp
ffff80000080b052:	c3                   	ret    

ffff80000080b053 <close_framebuffer>:
close_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:180
long close_framebuffer(struct index_node * inode,struct file * filp){
ffff80000080b053:	f3 0f 1e fa          	endbr64 
ffff80000080b057:	55                   	push   rbp
ffff80000080b058:	48 89 e5             	mov    rbp,rsp
ffff80000080b05b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b05b <close_framebuffer+0x8>
ffff80000080b062:	49 bb f5 5e 11 00 00 	movabs r11,0x115ef5
ffff80000080b069:	00 00 00 
ffff80000080b06c:	4c 01 d8             	add    rax,r11
ffff80000080b06f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080b073:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:182

}
ffff80000080b077:	90                   	nop
ffff80000080b078:	5d                   	pop    rbp
ffff80000080b079:	c3                   	ret    

ffff80000080b07a <read_framebuffer>:
read_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:183
long read_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080b07a:	f3 0f 1e fa          	endbr64 
ffff80000080b07e:	55                   	push   rbp
ffff80000080b07f:	48 89 e5             	mov    rbp,rsp
ffff80000080b082:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b082 <read_framebuffer+0x8>
ffff80000080b089:	49 bb ce 5e 11 00 00 	movabs r11,0x115ece
ffff80000080b090:	00 00 00 
ffff80000080b093:	4c 01 d8             	add    rax,r11
ffff80000080b096:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080b09a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080b09e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080b0a2:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:185

}
ffff80000080b0a6:	90                   	nop
ffff80000080b0a7:	5d                   	pop    rbp
ffff80000080b0a8:	c3                   	ret    

ffff80000080b0a9 <write_framebuffer>:
write_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:186
long write_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080b0a9:	f3 0f 1e fa          	endbr64 
ffff80000080b0ad:	55                   	push   rbp
ffff80000080b0ae:	48 89 e5             	mov    rbp,rsp
ffff80000080b0b1:	41 57                	push   r15
ffff80000080b0b3:	53                   	push   rbx
ffff80000080b0b4:	48 83 ec 40          	sub    rsp,0x40
ffff80000080b0b8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b0b8 <write_framebuffer+0xf>
ffff80000080b0bf:	49 bb 98 5e 11 00 00 	movabs r11,0x115e98
ffff80000080b0c6:	00 00 00 
ffff80000080b0c9:	4c 01 db             	add    rbx,r11
ffff80000080b0cc:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080b0d0:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff80000080b0d4:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff80000080b0d8:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:187
    char *tmp= (char*) kmalloc();
ffff80000080b0dc:	49 89 df             	mov    r15,rbx
ffff80000080b0df:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b0e4:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff80000080b0eb:	ff ff ff 
ffff80000080b0ee:	48 01 da             	add    rdx,rbx
ffff80000080b0f1:	ff d2                	call   rdx
ffff80000080b0f3:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:188
    int c=count/(PAGE_4K_SIZE-1),p=0;
ffff80000080b0f7:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff80000080b0fb:	48 ba 11 00 01 10 00 	movabs rdx,0x10010010010011
ffff80000080b102:	01 10 00 
ffff80000080b105:	48 89 c8             	mov    rax,rcx
ffff80000080b108:	48 f7 e2             	mul    rdx
ffff80000080b10b:	48 89 c8             	mov    rax,rcx
ffff80000080b10e:	48 29 d0             	sub    rax,rdx
ffff80000080b111:	48 d1 e8             	shr    rax,1
ffff80000080b114:	48 01 d0             	add    rax,rdx
ffff80000080b117:	48 c1 e8 0b          	shr    rax,0xb
ffff80000080b11b:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080b11e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190
    //一块一块输出
    for(int i=0;i<(c?c:1);i++){
ffff80000080b125:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080b12c:	eb 60                	jmp    ffff80000080b18e <write_framebuffer+0xe5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:191 (discriminator 7)
        memcpy(tmp,buf+p,PAGE_4K_SIZE-1);
ffff80000080b12e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080b131:	48 63 d0             	movsxd rdx,eax
ffff80000080b134:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b138:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000080b13c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b140:	ba ff 0f 00 00       	mov    edx,0xfff
ffff80000080b145:	48 89 ce             	mov    rsi,rcx
ffff80000080b148:	48 89 c7             	mov    rdi,rax
ffff80000080b14b:	49 89 df             	mov    r15,rbx
ffff80000080b14e:	48 b8 53 21 ef ff ff 	movabs rax,0xffffffffffef2153
ffff80000080b155:	ff ff ff 
ffff80000080b158:	48 01 d8             	add    rax,rbx
ffff80000080b15b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:192 (discriminator 7)
        tmp[PAGE_4K_SIZE-1]=0;
ffff80000080b15d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b161:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080b167:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:193 (discriminator 7)
        print(tmp);
ffff80000080b16a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b16e:	48 89 c7             	mov    rdi,rax
ffff80000080b171:	49 89 df             	mov    r15,rbx
ffff80000080b174:	48 b8 11 9f ee ff ff 	movabs rax,0xffffffffffee9f11
ffff80000080b17b:	ff ff ff 
ffff80000080b17e:	48 01 d8             	add    rax,rbx
ffff80000080b181:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:194 (discriminator 7)
        p+=PAGE_4K_SIZE-1;
ffff80000080b183:	81 45 ec ff 0f 00 00 	add    DWORD PTR [rbp-0x14],0xfff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 7)
    for(int i=0;i<(c?c:1);i++){
ffff80000080b18a:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 1)
ffff80000080b18e:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080b192:	74 05                	je     ffff80000080b199 <write_framebuffer+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 3)
ffff80000080b194:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080b197:	eb 05                	jmp    ffff80000080b19e <write_framebuffer+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 4)
ffff80000080b199:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 6)
ffff80000080b19e:	3b 45 e8             	cmp    eax,DWORD PTR [rbp-0x18]
ffff80000080b1a1:	7f 8b                	jg     ffff80000080b12e <write_framebuffer+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:196
    }
    kmfree(tmp);
ffff80000080b1a3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b1a7:	48 89 c7             	mov    rdi,rax
ffff80000080b1aa:	49 89 df             	mov    r15,rbx
ffff80000080b1ad:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff80000080b1b4:	ff ff ff 
ffff80000080b1b7:	48 01 d8             	add    rax,rbx
ffff80000080b1ba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:197
    return 0;
ffff80000080b1bc:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:198
}
ffff80000080b1c1:	48 83 c4 40          	add    rsp,0x40
ffff80000080b1c5:	5b                   	pop    rbx
ffff80000080b1c6:	41 5f                	pop    r15
ffff80000080b1c8:	5d                   	pop    rbp
ffff80000080b1c9:	c3                   	ret    

ffff80000080b1ca <ioctl_framebuffer>:
ioctl_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:199
long ioctl_framebuffer(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff80000080b1ca:	f3 0f 1e fa          	endbr64 
ffff80000080b1ce:	55                   	push   rbp
ffff80000080b1cf:	48 89 e5             	mov    rbp,rsp
ffff80000080b1d2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b1d2 <ioctl_framebuffer+0x8>
ffff80000080b1d9:	49 bb 7e 5d 11 00 00 	movabs r11,0x115d7e
ffff80000080b1e0:	00 00 00 
ffff80000080b1e3:	4c 01 d8             	add    rax,r11
ffff80000080b1e6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080b1ea:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080b1ee:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080b1f2:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:201

}
ffff80000080b1f6:	90                   	nop
ffff80000080b1f7:	5d                   	pop    rbp
ffff80000080b1f8:	c3                   	ret    

ffff80000080b1f9 <path_walk>:
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:15
#include "str.h"
#include <ramdisk.h>
mount_point mp_mount_points[MAX_MOUNTPOINTS];

struct dir_entry * path_walk(char * name,unsigned long flags)
{
ffff80000080b1f9:	f3 0f 1e fa          	endbr64 
ffff80000080b1fd:	55                   	push   rbp
ffff80000080b1fe:	48 89 e5             	mov    rbp,rsp
ffff80000080b201:	41 57                	push   r15
ffff80000080b203:	53                   	push   rbx
ffff80000080b204:	48 83 ec 60          	sub    rsp,0x60
ffff80000080b208:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b208 <path_walk+0xf>
ffff80000080b20f:	49 bb 48 5d 11 00 00 	movabs r11,0x115d48
ffff80000080b216:	00 00 00 
ffff80000080b219:	4c 01 db             	add    rbx,r11
ffff80000080b21c:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff80000080b220:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:16
    char * tmpname = NULL;
ffff80000080b224:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080b22b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:17
    int tmpnamelen = 0;
ffff80000080b22c:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:18
    struct dir_entry * parent = root_sb->root;
ffff80000080b233:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080b23a:	ff ff ff 
ffff80000080b23d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b241:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b244:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b247:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:19
    struct dir_entry * path = NULL;
ffff80000080b24b:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080b252:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:21

    while(*name == '/')
ffff80000080b253:	eb 05                	jmp    ffff80000080b25a <path_walk+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:22
        name++;
ffff80000080b255:	48 83 45 98 01       	add    QWORD PTR [rbp-0x68],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:21
    while(*name == '/')
ffff80000080b25a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b25e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b261:	3c 2f                	cmp    al,0x2f
ffff80000080b263:	74 f0                	je     ffff80000080b255 <path_walk+0x5c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:24

    if(!*name)
ffff80000080b265:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b269:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b26c:	84 c0                	test   al,al
ffff80000080b26e:	75 09                	jne    ffff80000080b279 <path_walk+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:26
    {
        return parent;
ffff80000080b270:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b274:	e9 f9 02 00 00       	jmp    ffff80000080b572 <path_walk+0x379>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:31
    }

    for(;;)
    {
        tmpname = name;
ffff80000080b279:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b27d:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:32
        while(*name && (*name != '/'))
ffff80000080b281:	eb 05                	jmp    ffff80000080b288 <path_walk+0x8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:33
            name++;
ffff80000080b283:	48 83 45 98 01       	add    QWORD PTR [rbp-0x68],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:32
        while(*name && (*name != '/'))
ffff80000080b288:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b28c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b28f:	84 c0                	test   al,al
ffff80000080b291:	74 0b                	je     ffff80000080b29e <path_walk+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:32 (discriminator 1)
ffff80000080b293:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b297:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b29a:	3c 2f                	cmp    al,0x2f
ffff80000080b29c:	75 e5                	jne    ffff80000080b283 <path_walk+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:34
        tmpnamelen = name - tmpname;
ffff80000080b29e:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b2a2:	48 2b 45 d0          	sub    rax,QWORD PTR [rbp-0x30]
ffff80000080b2a6:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:37
        //先在缓存中寻找已有的dentry
        //寻找名字为tmpname的dentry
        struct List* lp=parent->subdirs_list.next;
ffff80000080b2a9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b2ad:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080b2b1:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:38
        while (lp)
ffff80000080b2b5:	eb 4e                	jmp    ffff80000080b305 <path_walk+0x10c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:40
        {
            path=lp->data;
ffff80000080b2b7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b2bb:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080b2bf:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:41
            if(memcmp(tmpname,path->name,tmpnamelen)==0){
ffff80000080b2c3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b2c7:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080b2ca:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080b2cd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b2d1:	48 89 ce             	mov    rsi,rcx
ffff80000080b2d4:	48 89 c7             	mov    rdi,rax
ffff80000080b2d7:	49 89 df             	mov    r15,rbx
ffff80000080b2da:	48 b8 9d 21 ef ff ff 	movabs rax,0xffffffffffef219d
ffff80000080b2e1:	ff ff ff 
ffff80000080b2e4:	48 01 d8             	add    rax,rbx
ffff80000080b2e7:	ff d0                	call   rax
ffff80000080b2e9:	85 c0                	test   eax,eax
ffff80000080b2eb:	74 21                	je     ffff80000080b30e <path_walk+0x115>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:44
                break;
            }
            lp=&path->child_node;
ffff80000080b2ed:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b2f1:	48 83 c0 10          	add    rax,0x10
ffff80000080b2f5:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:45
            lp=lp->next;
ffff80000080b2f9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b2fd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b301:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:38
        while (lp)
ffff80000080b305:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080b30a:	75 ab                	jne    ffff80000080b2b7 <path_walk+0xbe>
ffff80000080b30c:	eb 01                	jmp    ffff80000080b30f <path_walk+0x116>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:42
                break;
ffff80000080b30e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:47
        }
        if(!lp){
ffff80000080b30f:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080b314:	0f 85 ea 01 00 00    	jne    ffff80000080b504 <path_walk+0x30b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:49
            //缓存中没有，再读取介质
            path = (struct dir_entry *) kmalloc(sizeof(struct dir_entry), 0);
ffff80000080b31a:	be 00 00 00 00       	mov    esi,0x0
ffff80000080b31f:	bf 60 00 00 00       	mov    edi,0x60
ffff80000080b324:	49 89 df             	mov    r15,rbx
ffff80000080b327:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b32c:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff80000080b333:	ff ff ff 
ffff80000080b336:	48 01 da             	add    rdx,rbx
ffff80000080b339:	ff d2                	call   rdx
ffff80000080b33b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:50
            memset(path,0,sizeof(struct dir_entry));
ffff80000080b33f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b343:	ba 60 00 00 00       	mov    edx,0x60
ffff80000080b348:	be 00 00 00 00       	mov    esi,0x0
ffff80000080b34d:	48 89 c7             	mov    rdi,rax
ffff80000080b350:	49 89 df             	mov    r15,rbx
ffff80000080b353:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff80000080b35a:	ff ff ff 
ffff80000080b35d:	48 01 d8             	add    rax,rbx
ffff80000080b360:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:52

            path->name = kmalloc();
ffff80000080b362:	49 89 df             	mov    r15,rbx
ffff80000080b365:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b36a:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff80000080b371:	ff ff ff 
ffff80000080b374:	48 01 da             	add    rdx,rbx
ffff80000080b377:	ff d2                	call   rdx
ffff80000080b379:	48 89 c2             	mov    rdx,rax
ffff80000080b37c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b380:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:53
            memset(path->name,0,tmpnamelen+1);
ffff80000080b383:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080b386:	83 c0 01             	add    eax,0x1
ffff80000080b389:	89 c2                	mov    edx,eax
ffff80000080b38b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b38f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b392:	be 00 00 00 00       	mov    esi,0x0
ffff80000080b397:	48 89 c7             	mov    rdi,rax
ffff80000080b39a:	49 89 df             	mov    r15,rbx
ffff80000080b39d:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff80000080b3a4:	ff ff ff 
ffff80000080b3a7:	48 01 d8             	add    rax,rbx
ffff80000080b3aa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:54
            memcpy(path->name,tmpname,tmpnamelen);
ffff80000080b3ac:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080b3af:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b3b3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b3b6:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080b3ba:	48 89 ce             	mov    rsi,rcx
ffff80000080b3bd:	48 89 c7             	mov    rdi,rax
ffff80000080b3c0:	49 89 df             	mov    r15,rbx
ffff80000080b3c3:	48 b8 53 21 ef ff ff 	movabs rax,0xffffffffffef2153
ffff80000080b3ca:	ff ff ff 
ffff80000080b3cd:	48 01 d8             	add    rax,rbx
ffff80000080b3d0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:55
            path->name_length = tmpnamelen;
ffff80000080b3d2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b3d6:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080b3d9:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:57

            path=parent->dir_inode->inode_ops->lookup(parent->dir_inode,path);
ffff80000080b3dc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b3e0:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080b3e4:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080b3e8:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080b3ec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b3f0:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080b3f4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080b3f8:	48 89 d6             	mov    rsi,rdx
ffff80000080b3fb:	48 89 c7             	mov    rdi,rax
ffff80000080b3fe:	ff d1                	call   rcx
ffff80000080b400:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:59
        
            if(path == NULL)
ffff80000080b404:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080b409:	75 39                	jne    ffff80000080b444 <path_walk+0x24b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:61
            {
                printf("can not find file or dir:%s\n",name);
ffff80000080b40b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b40f:	48 89 c6             	mov    rsi,rax
ffff80000080b412:	48 b8 a8 d6 ff ff ff 	movabs rax,0xffffffffffffd6a8
ffff80000080b419:	ff ff ff 
ffff80000080b41c:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080b420:	48 89 c7             	mov    rdi,rax
ffff80000080b423:	49 89 df             	mov    r15,rbx
ffff80000080b426:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b42b:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff80000080b432:	ff ff ff 
ffff80000080b435:	48 01 da             	add    rdx,rbx
ffff80000080b438:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:64
                // kmfree(path->name);
                // kmfree(path);
                return NULL;
ffff80000080b43a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b43f:	e9 2e 01 00 00       	jmp    ffff80000080b572 <path_walk+0x379>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:68
            }
//        list_init(&path->child_node);
//        list_init(&path->subdirs_list);
            path->parent = parent;
ffff80000080b444:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b448:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b44c:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:71
            //list_add会查重，如果链表里面已经有了data指针值相同的项，就不添加。
            //不过这里已经是缓存中没有找到dentry的情况了，一般不会出现data一样。
            list_add(&parent->subdirs_list,&path->child_node);
ffff80000080b450:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b454:	48 83 c0 10          	add    rax,0x10
ffff80000080b458:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b45c:	48 83 c2 28          	add    rdx,0x28
ffff80000080b460:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
ffff80000080b464:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    struct List* p=entry;
ffff80000080b468:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b46c:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080b470:	eb 21                	jmp    ffff80000080b493 <path_walk+0x29a>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        if(p->data==new->data)
ffff80000080b472:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080b476:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080b47a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080b47e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080b482:	48 39 c2             	cmp    rdx,rax
ffff80000080b485:	74 7c                	je     ffff80000080b503 <path_walk+0x30a>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080b487:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080b48b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b48f:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffff80000080b493:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080b497:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b49b:	48 85 c0             	test   rax,rax
ffff80000080b49e:	74 0e                	je     ffff80000080b4ae <path_walk+0x2b5>
ffff80000080b4a0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080b4a4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b4a8:	48 39 45 b0          	cmp    QWORD PTR [rbp-0x50],rax
ffff80000080b4ac:	75 c4                	jne    ffff80000080b472 <path_walk+0x279>
ffff80000080b4ae:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080b4b2:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffff80000080b4b6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080b4ba:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->next = entry->next;
ffff80000080b4be:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b4c2:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080b4c6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080b4ca:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    new->prev = entry;
ffff80000080b4ce:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080b4d2:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080b4d6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
    if(new->next)
ffff80000080b4d9:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080b4dd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b4e1:	48 85 c0             	test   rax,rax
ffff80000080b4e4:	74 0f                	je     ffff80000080b4f5 <path_walk+0x2fc>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
        new->next->prev = new;
ffff80000080b4e6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080b4ea:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b4ee:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080b4f2:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
    entry->next = new;
ffff80000080b4f5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b4f9:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080b4fd:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:31
}
ffff80000080b501:	eb 01                	jmp    ffff80000080b504 <path_walk+0x30b>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
            return;
ffff80000080b503:	90                   	nop
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:78
        }
        
        


        if(!*name)
ffff80000080b504:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b508:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b50b:	84 c0                	test   al,al
ffff80000080b50d:	74 49                	je     ffff80000080b558 <path_walk+0x35f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:80
            goto last_component;
        while(*name == '/')
ffff80000080b50f:	eb 05                	jmp    ffff80000080b516 <path_walk+0x31d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:81
            name++;
ffff80000080b511:	48 83 45 98 01       	add    QWORD PTR [rbp-0x68],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:80
        while(*name == '/')
ffff80000080b516:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b51a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b51d:	3c 2f                	cmp    al,0x2f
ffff80000080b51f:	74 f0                	je     ffff80000080b511 <path_walk+0x318>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:82
        if(!*name)
ffff80000080b521:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b525:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b528:	84 c0                	test   al,al
ffff80000080b52a:	74 2f                	je     ffff80000080b55b <path_walk+0x362>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:84
            goto last_slash;
        if(path->mount_point)
ffff80000080b52c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b530:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
ffff80000080b534:	48 85 c0             	test   rax,rax
ffff80000080b537:	74 12                	je     ffff80000080b54b <path_walk+0x352>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:87
        {
            //有挂载点，则进入挂载文件系统的文件树
            path=path->mount_point->sb->root;
ffff80000080b539:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b53d:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
ffff80000080b541:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b544:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b547:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:89
        }
        parent = path;
ffff80000080b54b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b54f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30
    {
ffff80000080b553:	e9 21 fd ff ff       	jmp    ffff80000080b279 <path_walk+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:79
            goto last_component;
ffff80000080b558:	90                   	nop
ffff80000080b559:	eb 01                	jmp    ffff80000080b55c <path_walk+0x363>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:83
            goto last_slash;
ffff80000080b55b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:95
    }

    last_slash:
    last_component:

    if(flags & 1)
ffff80000080b55c:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080b560:	83 e0 01             	and    eax,0x1
ffff80000080b563:	48 85 c0             	test   rax,rax
ffff80000080b566:	74 06                	je     ffff80000080b56e <path_walk+0x375>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:97
    {
        return parent;
ffff80000080b568:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b56c:	eb 04                	jmp    ffff80000080b572 <path_walk+0x379>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:100
    }

    return path;
ffff80000080b56e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:101
}
ffff80000080b572:	48 83 c4 60          	add    rsp,0x60
ffff80000080b576:	5b                   	pop    rbx
ffff80000080b577:	41 5f                	pop    r15
ffff80000080b579:	5d                   	pop    rbp
ffff80000080b57a:	c3                   	ret    

ffff80000080b57b <fill_dentry>:
fill_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:105


int fill_dentry(void *buf,char *name, long namelen,long type,long offset)
{
ffff80000080b57b:	f3 0f 1e fa          	endbr64 
ffff80000080b57f:	55                   	push   rbp
ffff80000080b580:	48 89 e5             	mov    rbp,rsp
ffff80000080b583:	41 57                	push   r15
ffff80000080b585:	48 83 ec 48          	sub    rsp,0x48
ffff80000080b589:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b589 <fill_dentry+0xe>
ffff80000080b590:	49 bb c7 59 11 00 00 	movabs r11,0x1159c7
ffff80000080b597:	00 00 00 
ffff80000080b59a:	4c 01 d8             	add    rax,r11
ffff80000080b59d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080b5a1:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080b5a5:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff80000080b5a9:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffff80000080b5ad:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:106
    struct dirent* dent = (struct dirent*)buf;
ffff80000080b5b1:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b5b5:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:108

    if((unsigned long)buf < PAGE_4K_SIZE)
ffff80000080b5b9:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b5bd:	48 81 fa ff 0f 00 00 	cmp    rdx,0xfff
ffff80000080b5c4:	77 07                	ja     ffff80000080b5cd <fill_dentry+0x52>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:109
        return -EFAULT;
ffff80000080b5c6:	b8 eb ff ff ff       	mov    eax,0xffffffeb
ffff80000080b5cb:	eb 53                	jmp    ffff80000080b620 <fill_dentry+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:111

    memcpy(name,dent->d_name,namelen);
ffff80000080b5cd:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080b5d1:	89 d7                	mov    edi,edx
ffff80000080b5d3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b5d7:	48 8d 72 18          	lea    rsi,[rdx+0x18]
ffff80000080b5db:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080b5df:	89 fa                	mov    edx,edi
ffff80000080b5e1:	48 89 cf             	mov    rdi,rcx
ffff80000080b5e4:	49 89 c7             	mov    r15,rax
ffff80000080b5e7:	48 b9 53 21 ef ff ff 	movabs rcx,0xffffffffffef2153
ffff80000080b5ee:	ff ff ff 
ffff80000080b5f1:	48 01 c1             	add    rcx,rax
ffff80000080b5f4:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:112
    dent->d_namelen = namelen;
ffff80000080b5f6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b5fa:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080b5fe:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:113
    dent->d_type = type;
ffff80000080b602:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b606:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080b60a:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:114
    dent->d_offset = offset;
ffff80000080b60e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b612:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080b616:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:115
    return sizeof(struct dirent) + namelen;
ffff80000080b619:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b61d:	83 c0 18             	add    eax,0x18
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:116
}
ffff80000080b620:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080b624:	c9                   	leave  
ffff80000080b625:	c3                   	ret    

ffff80000080b626 <mount_fs>:
mount_fs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:123
//function mount_root
struct super_block * root_sb = NULL;
struct file_system_type filesystem = {"filesystem",0};

struct super_block* mount_fs(char * name,struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
ffff80000080b626:	f3 0f 1e fa          	endbr64 
ffff80000080b62a:	55                   	push   rbp
ffff80000080b62b:	48 89 e5             	mov    rbp,rsp
ffff80000080b62e:	41 57                	push   r15
ffff80000080b630:	53                   	push   rbx
ffff80000080b631:	48 83 ec 30          	sub    rsp,0x30
ffff80000080b635:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b635 <mount_fs+0xf>
ffff80000080b63c:	49 bb 1b 59 11 00 00 	movabs r11,0x11591b
ffff80000080b643:	00 00 00 
ffff80000080b646:	4c 01 db             	add    rbx,r11
ffff80000080b649:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080b64d:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080b651:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:124
    struct file_system_type * p = NULL;
ffff80000080b655:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080b65c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:126

    for(p = &filesystem;p;p = p->next)
ffff80000080b65d:	48 b8 40 ff ff ff ff 	movabs rax,0xffffffffffffff40
ffff80000080b664:	ff ff ff 
ffff80000080b667:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b66b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080b66f:	eb 4d                	jmp    ffff80000080b6be <mount_fs+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:127
        if(!strcmp(p->name,name))
ffff80000080b671:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b675:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b678:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b67c:	48 89 d6             	mov    rsi,rdx
ffff80000080b67f:	48 89 c7             	mov    rdi,rax
ffff80000080b682:	49 89 df             	mov    r15,rbx
ffff80000080b685:	48 b8 a5 24 ef ff ff 	movabs rax,0xffffffffffef24a5
ffff80000080b68c:	ff ff ff 
ffff80000080b68f:	48 01 d8             	add    rax,rbx
ffff80000080b692:	ff d0                	call   rax
ffff80000080b694:	85 c0                	test   eax,eax
ffff80000080b696:	75 1a                	jne    ffff80000080b6b2 <mount_fs+0x8c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:129
        {
            return p->read_superblock(DPTE,buf);
ffff80000080b698:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b69c:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
ffff80000080b6a0:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080b6a4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b6a8:	48 89 d6             	mov    rsi,rdx
ffff80000080b6ab:	48 89 c7             	mov    rdi,rax
ffff80000080b6ae:	ff d1                	call   rcx
ffff80000080b6b0:	eb 18                	jmp    ffff80000080b6ca <mount_fs+0xa4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:126 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
ffff80000080b6b2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b6b6:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b6ba:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:126 (discriminator 1)
ffff80000080b6be:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080b6c3:	75 ac                	jne    ffff80000080b671 <mount_fs+0x4b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:131
        }
    return 0;
ffff80000080b6c5:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:132
}
ffff80000080b6ca:	48 83 c4 30          	add    rsp,0x30
ffff80000080b6ce:	5b                   	pop    rbx
ffff80000080b6cf:	41 5f                	pop    r15
ffff80000080b6d1:	5d                   	pop    rbp
ffff80000080b6d2:	c3                   	ret    

ffff80000080b6d3 <mount_fs_on>:
mount_fs_on():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:133
int mount_fs_on(struct dir_entry *d_to_mount,struct super_block* fs){
ffff80000080b6d3:	f3 0f 1e fa          	endbr64 
ffff80000080b6d7:	55                   	push   rbp
ffff80000080b6d8:	48 89 e5             	mov    rbp,rsp
ffff80000080b6db:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b6db <mount_fs_on+0x8>
ffff80000080b6e2:	49 bb 75 58 11 00 00 	movabs r11,0x115875
ffff80000080b6e9:	00 00 00 
ffff80000080b6ec:	4c 01 d8             	add    rax,r11
ffff80000080b6ef:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080b6f3:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:134
    for(int i=0;i<MAX_MOUNTPOINTS;i++){
ffff80000080b6f7:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080b6fe:	e9 9d 00 00 00       	jmp    ffff80000080b7a0 <mount_fs_on+0xcd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:135
        if(!mp_mount_points[i].sb){
ffff80000080b703:	48 ba 70 fe ff ff ff 	movabs rdx,0xfffffffffffffe70
ffff80000080b70a:	ff ff ff 
ffff80000080b70d:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080b711:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080b714:	48 63 d2             	movsxd rdx,edx
ffff80000080b717:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080b71b:	48 01 ca             	add    rdx,rcx
ffff80000080b71e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080b721:	48 85 d2             	test   rdx,rdx
ffff80000080b724:	75 76                	jne    ffff80000080b79c <mount_fs_on+0xc9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:136
            mp_mount_points[i].sb=fs;
ffff80000080b726:	48 ba 70 fe ff ff ff 	movabs rdx,0xfffffffffffffe70
ffff80000080b72d:	ff ff ff 
ffff80000080b730:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080b734:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080b737:	48 63 d2             	movsxd rdx,edx
ffff80000080b73a:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080b73e:	48 01 d1             	add    rcx,rdx
ffff80000080b741:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080b745:	48 89 11             	mov    QWORD PTR [rcx],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:137
            mp_mount_points[i].dmount_point=d_to_mount;
ffff80000080b748:	48 ba 70 fe ff ff ff 	movabs rdx,0xfffffffffffffe70
ffff80000080b74f:	ff ff ff 
ffff80000080b752:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080b756:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080b759:	48 63 d2             	movsxd rdx,edx
ffff80000080b75c:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080b760:	48 01 ca             	add    rdx,rcx
ffff80000080b763:	48 8d 4a 08          	lea    rcx,[rdx+0x8]
ffff80000080b767:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b76b:	48 89 11             	mov    QWORD PTR [rcx],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:138
            d_to_mount->mount_point=mp_mount_points+i;
ffff80000080b76e:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080b771:	48 63 d2             	movsxd rdx,edx
ffff80000080b774:	48 89 d1             	mov    rcx,rdx
ffff80000080b777:	48 c1 e1 04          	shl    rcx,0x4
ffff80000080b77b:	48 ba 70 fe ff ff ff 	movabs rdx,0xfffffffffffffe70
ffff80000080b782:	ff ff ff 
ffff80000080b785:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080b789:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080b78d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b791:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:139
            return 1;
ffff80000080b795:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080b79a:	eb 13                	jmp    ffff80000080b7af <mount_fs_on+0xdc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:134 (discriminator 2)
    for(int i=0;i<MAX_MOUNTPOINTS;i++){
ffff80000080b79c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:134 (discriminator 1)
ffff80000080b7a0:	83 7d fc 17          	cmp    DWORD PTR [rbp-0x4],0x17
ffff80000080b7a4:	0f 8e 59 ff ff ff    	jle    ffff80000080b703 <mount_fs_on+0x30>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:142
        }
    }
    return -ENOMEM;
ffff80000080b7aa:	b8 cf ff ff ff       	mov    eax,0xffffffcf
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:143
}
ffff80000080b7af:	5d                   	pop    rbp
ffff80000080b7b0:	c3                   	ret    

ffff80000080b7b1 <umount_fs>:
umount_fs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:144
int umount_fs(struct dir_entry* d_mp){
ffff80000080b7b1:	f3 0f 1e fa          	endbr64 
ffff80000080b7b5:	55                   	push   rbp
ffff80000080b7b6:	48 89 e5             	mov    rbp,rsp
ffff80000080b7b9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b7b9 <umount_fs+0x8>
ffff80000080b7c0:	49 bb 97 57 11 00 00 	movabs r11,0x115797
ffff80000080b7c7:	00 00 00 
ffff80000080b7ca:	4c 01 d8             	add    rax,r11
ffff80000080b7cd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:145
    if(d_mp->mount_point){
ffff80000080b7d1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b7d5:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
ffff80000080b7d9:	48 85 c0             	test   rax,rax
ffff80000080b7dc:	74 26                	je     ffff80000080b804 <umount_fs+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:146
        d_mp->mount_point->dmount_point=0;
ffff80000080b7de:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b7e2:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
ffff80000080b7e6:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff80000080b7ed:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:147
        d_mp->mount_point->sb=0;
ffff80000080b7ee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b7f2:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
ffff80000080b7f6:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:148
        return 1;
ffff80000080b7fd:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080b802:	eb 05                	jmp    ffff80000080b809 <umount_fs+0x58>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:150
    }
    return -ENOENT;
ffff80000080b804:	b8 d3 ff ff ff       	mov    eax,0xffffffd3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:151
}
ffff80000080b809:	5d                   	pop    rbp
ffff80000080b80a:	c3                   	ret    

ffff80000080b80b <register_filesystem>:
register_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:153
unsigned long register_filesystem(struct file_system_type * fs)
{
ffff80000080b80b:	f3 0f 1e fa          	endbr64 
ffff80000080b80f:	55                   	push   rbp
ffff80000080b810:	48 89 e5             	mov    rbp,rsp
ffff80000080b813:	41 57                	push   r15
ffff80000080b815:	53                   	push   rbx
ffff80000080b816:	48 83 ec 20          	sub    rsp,0x20
ffff80000080b81a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b81a <register_filesystem+0xf>
ffff80000080b821:	49 bb 36 57 11 00 00 	movabs r11,0x115736
ffff80000080b828:	00 00 00 
ffff80000080b82b:	4c 01 db             	add    rbx,r11
ffff80000080b82e:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:154
    struct file_system_type * p = NULL;
ffff80000080b832:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080b839:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:156

    for(p = &filesystem;p;p = p->next)
ffff80000080b83a:	48 b8 40 ff ff ff ff 	movabs rax,0xffffffffffffff40
ffff80000080b841:	ff ff ff 
ffff80000080b844:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b848:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080b84c:	eb 3d                	jmp    ffff80000080b88b <register_filesystem+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:157
        if(!strcmp(fs->name,p->name))
ffff80000080b84e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b852:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b855:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b859:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b85c:	48 89 d6             	mov    rsi,rdx
ffff80000080b85f:	48 89 c7             	mov    rdi,rax
ffff80000080b862:	49 89 df             	mov    r15,rbx
ffff80000080b865:	48 b8 a5 24 ef ff ff 	movabs rax,0xffffffffffef24a5
ffff80000080b86c:	ff ff ff 
ffff80000080b86f:	48 01 d8             	add    rax,rbx
ffff80000080b872:	ff d0                	call   rax
ffff80000080b874:	85 c0                	test   eax,eax
ffff80000080b876:	75 07                	jne    ffff80000080b87f <register_filesystem+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:158
            return 0;
ffff80000080b878:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b87d:	eb 48                	jmp    ffff80000080b8c7 <register_filesystem+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:156 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
ffff80000080b87f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b883:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b887:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:156 (discriminator 1)
ffff80000080b88b:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080b890:	75 bc                	jne    ffff80000080b84e <register_filesystem+0x43>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:160

    fs->next = filesystem.next;
ffff80000080b892:	48 b8 40 ff ff ff ff 	movabs rax,0xffffffffffffff40
ffff80000080b899:	ff ff ff 
ffff80000080b89c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b8a0:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080b8a4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b8a8:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:161
    filesystem.next = fs;
ffff80000080b8ac:	48 b8 40 ff ff ff ff 	movabs rax,0xffffffffffffff40
ffff80000080b8b3:	ff ff ff 
ffff80000080b8b6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b8ba:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b8be:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:163

    return 1;
ffff80000080b8c2:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:164
}
ffff80000080b8c7:	48 83 c4 20          	add    rsp,0x20
ffff80000080b8cb:	5b                   	pop    rbx
ffff80000080b8cc:	41 5f                	pop    r15
ffff80000080b8ce:	5d                   	pop    rbp
ffff80000080b8cf:	c3                   	ret    

ffff80000080b8d0 <unregister_filesystem>:
unregister_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:167

unsigned long unregister_filesystem(struct file_system_type * fs)
{
ffff80000080b8d0:	f3 0f 1e fa          	endbr64 
ffff80000080b8d4:	55                   	push   rbp
ffff80000080b8d5:	48 89 e5             	mov    rbp,rsp
ffff80000080b8d8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b8d8 <unregister_filesystem+0x8>
ffff80000080b8df:	49 bb 78 56 11 00 00 	movabs r11,0x115678
ffff80000080b8e6:	00 00 00 
ffff80000080b8e9:	4c 01 d8             	add    rax,r11
ffff80000080b8ec:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:168
    struct file_system_type * p = &filesystem;
ffff80000080b8f0:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff80000080b8f7:	ff ff ff 
ffff80000080b8fa:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080b8fe:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:170

    while(p->next)
ffff80000080b902:	eb 41                	jmp    ffff80000080b945 <unregister_filesystem+0x75>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:171
        if(p->next == fs)
ffff80000080b904:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b908:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b90c:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff80000080b910:	75 27                	jne    ffff80000080b939 <unregister_filesystem+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:173
        {
            p->next = p->next->next;
ffff80000080b912:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b916:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b91a:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080b91e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b922:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:174
            fs->next = NULL;
ffff80000080b926:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b92a:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff80000080b931:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:175
            return 1;
ffff80000080b932:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080b937:	eb 1e                	jmp    ffff80000080b957 <unregister_filesystem+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:178
        }
        else
            p = p->next;
ffff80000080b939:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b93d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b941:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:170
    while(p->next)
ffff80000080b945:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b949:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b94d:	48 85 c0             	test   rax,rax
ffff80000080b950:	75 b2                	jne    ffff80000080b904 <unregister_filesystem+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:179
    return 0;
ffff80000080b952:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:180
}
ffff80000080b957:	5d                   	pop    rbp
ffff80000080b958:	c3                   	ret    

ffff80000080b959 <root_lookup>:
root_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:182
//在parent inode下查找dest dentry
struct dir_entry* root_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry){
ffff80000080b959:	f3 0f 1e fa          	endbr64 
ffff80000080b95d:	55                   	push   rbp
ffff80000080b95e:	48 89 e5             	mov    rbp,rsp
ffff80000080b961:	41 57                	push   r15
ffff80000080b963:	53                   	push   rbx
ffff80000080b964:	48 83 ec 30          	sub    rsp,0x30
ffff80000080b968:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b968 <root_lookup+0xf>
ffff80000080b96f:	49 bb e8 55 11 00 00 	movabs r11,0x1155e8
ffff80000080b976:	00 00 00 
ffff80000080b979:	4c 01 db             	add    rbx,r11
ffff80000080b97c:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080b980:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:183
    struct dir_entry* tmp= (struct dir_entry *) parent_inode->private_index_info;
ffff80000080b984:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b988:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080b98c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:184
    struct List* p= tmp->subdirs_list.next;
ffff80000080b990:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b994:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080b998:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:185
    while (p){
ffff80000080b99c:	eb 61                	jmp    ffff80000080b9ff <root_lookup+0xa6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:186
        struct dir_entry* dp=p->data;
ffff80000080b99e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b9a2:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080b9a6:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:187
        if(strcmp(dp->name,dest_dentry->name)==0){
ffff80000080b9aa:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b9ae:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b9b1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b9b5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b9b8:	48 89 d6             	mov    rsi,rdx
ffff80000080b9bb:	48 89 c7             	mov    rdi,rax
ffff80000080b9be:	49 89 df             	mov    r15,rbx
ffff80000080b9c1:	48 b8 a5 24 ef ff ff 	movabs rax,0xffffffffffef24a5
ffff80000080b9c8:	ff ff ff 
ffff80000080b9cb:	48 01 d8             	add    rax,rbx
ffff80000080b9ce:	ff d0                	call   rax
ffff80000080b9d0:	85 c0                	test   eax,eax
ffff80000080b9d2:	75 1f                	jne    ffff80000080b9f3 <root_lookup+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:188
            kmfree(dest_dentry);
ffff80000080b9d4:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b9d8:	48 89 c7             	mov    rdi,rax
ffff80000080b9db:	49 89 df             	mov    r15,rbx
ffff80000080b9de:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff80000080b9e5:	ff ff ff 
ffff80000080b9e8:	48 01 d8             	add    rax,rbx
ffff80000080b9eb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:189
            return dp;
ffff80000080b9ed:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b9f1:	eb 31                	jmp    ffff80000080ba24 <root_lookup+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:191
        }
        p=p->next;
ffff80000080b9f3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b9f7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b9fb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:185
    while (p){
ffff80000080b9ff:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080ba04:	75 98                	jne    ffff80000080b99e <root_lookup+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:193
    }
    kmfree(dest_dentry);
ffff80000080ba06:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080ba0a:	48 89 c7             	mov    rdi,rax
ffff80000080ba0d:	49 89 df             	mov    r15,rbx
ffff80000080ba10:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff80000080ba17:	ff ff ff 
ffff80000080ba1a:	48 01 d8             	add    rax,rbx
ffff80000080ba1d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:194
    return NULL;
ffff80000080ba1f:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:195
}
ffff80000080ba24:	48 83 c4 30          	add    rsp,0x30
ffff80000080ba28:	5b                   	pop    rbx
ffff80000080ba29:	41 5f                	pop    r15
ffff80000080ba2b:	5d                   	pop    rbp
ffff80000080ba2c:	c3                   	ret    

ffff80000080ba2d <init_rootfs>:
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:199
struct index_node_operations root_iops={
    .lookup=root_lookup
};
void init_rootfs(){
ffff80000080ba2d:	f3 0f 1e fa          	endbr64 
ffff80000080ba31:	55                   	push   rbp
ffff80000080ba32:	48 89 e5             	mov    rbp,rsp
ffff80000080ba35:	41 57                	push   r15
ffff80000080ba37:	53                   	push   rbx
ffff80000080ba38:	48 83 ec 20          	sub    rsp,0x20
ffff80000080ba3c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ba3c <init_rootfs+0xf>
ffff80000080ba43:	49 bb 14 55 11 00 00 	movabs r11,0x115514
ffff80000080ba4a:	00 00 00 
ffff80000080ba4d:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:200
    root_sb=(struct super_block*) kmalloc();
ffff80000080ba50:	49 89 df             	mov    r15,rbx
ffff80000080ba53:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ba58:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff80000080ba5f:	ff ff ff 
ffff80000080ba62:	48 01 da             	add    rdx,rbx
ffff80000080ba65:	ff d2                	call   rdx
ffff80000080ba67:	48 89 c2             	mov    rdx,rax
ffff80000080ba6a:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080ba71:	ff ff ff 
ffff80000080ba74:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ba78:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:201
    root_sb->root=root_sb+1;//紧凑跟在后面
ffff80000080ba7b:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080ba82:	ff ff ff 
ffff80000080ba85:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ba89:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080ba8c:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080ba93:	ff ff ff 
ffff80000080ba96:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ba9a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ba9d:	48 83 c2 28          	add    rdx,0x28
ffff80000080baa1:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:202
    root_sb->sb_ops=NULL;
ffff80000080baa4:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080baab:	ff ff ff 
ffff80000080baae:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bab2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bab5:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff80000080babc:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:204
    
    struct index_node* ir=root_sb->root+1;
ffff80000080babd:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080bac4:	ff ff ff 
ffff80000080bac7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bacb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bace:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bad1:	48 83 c0 60          	add    rax,0x60
ffff80000080bad5:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:205
    root_sb->root->dir_inode=ir;
ffff80000080bad9:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080bae0:	ff ff ff 
ffff80000080bae3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bae7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080baea:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080baed:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080baf1:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:206
    ir->sb=root_sb;
ffff80000080baf5:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080bafc:	ff ff ff 
ffff80000080baff:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bb03:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080bb06:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bb0a:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:207
    ir->attribute=FS_ATTR_DIR;
ffff80000080bb0e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bb12:	48 c7 40 10 02 00 00 	mov    QWORD PTR [rax+0x10],0x2
ffff80000080bb19:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:208
    ir->file_size=0;
ffff80000080bb1a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bb1e:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:209
    ir->inode_ops=&root_iops;//lookup函数是必要的
ffff80000080bb25:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bb29:	48 ba 18 fd ff ff ff 	movabs rdx,0xfffffffffffffd18
ffff80000080bb30:	ff ff ff 
ffff80000080bb33:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080bb37:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:210
    ir->f_ops=NULL;
ffff80000080bb3b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bb3f:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffff80000080bb46:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:211
    ir->private_index_info=root_sb->root;
ffff80000080bb47:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080bb4e:	ff ff ff 
ffff80000080bb51:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bb55:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bb58:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080bb5b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bb5f:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:213

    root_sb->root->name=ir+1;//紧凑跟在后面
ffff80000080bb63:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080bb6a:	ff ff ff 
ffff80000080bb6d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bb71:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bb74:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bb77:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080bb7b:	48 83 c2 40          	add    rdx,0x40
ffff80000080bb7f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:214
    strcpy(root_sb->root->name,"/");
ffff80000080bb82:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080bb89:	ff ff ff 
ffff80000080bb8c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bb90:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bb93:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bb96:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bb99:	48 ba d0 d6 ff ff ff 	movabs rdx,0xffffffffffffd6d0
ffff80000080bba0:	ff ff ff 
ffff80000080bba3:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080bba7:	48 89 d6             	mov    rsi,rdx
ffff80000080bbaa:	48 89 c7             	mov    rdi,rax
ffff80000080bbad:	49 89 df             	mov    r15,rbx
ffff80000080bbb0:	48 b8 57 22 ef ff ff 	movabs rax,0xffffffffffef2257
ffff80000080bbb7:	ff ff ff 
ffff80000080bbba:	48 01 d8             	add    rax,rbx
ffff80000080bbbd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:215
    root_sb->root->name_length=1;
ffff80000080bbbf:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080bbc6:	ff ff ff 
ffff80000080bbc9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bbcd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bbd0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bbd3:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:216
    root_sb->root->parent=root_sb->root;
ffff80000080bbda:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080bbe1:	ff ff ff 
ffff80000080bbe4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bbe8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080bbeb:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080bbf2:	ff ff ff 
ffff80000080bbf5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bbf9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bbfc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bbff:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080bc02:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:217
    list_init(&root_sb->root->subdirs_list);
ffff80000080bc06:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080bc0d:	ff ff ff 
ffff80000080bc10:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bc14:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bc17:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bc1a:	48 83 c0 28          	add    rax,0x28
ffff80000080bc1e:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff80000080bc22:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080bc26:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff80000080bc2d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080bc31:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080bc38:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff80000080bc39:	90                   	nop
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:218
    list_init(&root_sb->root->child_node);
ffff80000080bc3a:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080bc41:	ff ff ff 
ffff80000080bc44:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bc48:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bc4b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bc4e:	48 83 c0 10          	add    rax,0x10
ffff80000080bc52:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff80000080bc56:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bc5a:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff80000080bc61:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bc65:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080bc6c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff80000080bc6d:	90                   	nop
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:219
    root_sb->root->child_node.data=root_sb->root;
ffff80000080bc6e:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080bc75:	ff ff ff 
ffff80000080bc78:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bc7c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080bc7f:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080bc86:	ff ff ff 
ffff80000080bc89:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bc8d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bc90:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bc93:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080bc96:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:221

    root_sb->dev=dev_ramdisk<<8;
ffff80000080bc9a:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff80000080bca1:	ff ff ff 
ffff80000080bca4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bca8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080bcaa:	89 c2                	mov    edx,eax
ffff80000080bcac:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080bcb3:	ff ff ff 
ffff80000080bcb6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bcba:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bcbd:	c1 e2 08             	shl    edx,0x8
ffff80000080bcc0:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:222
    root_sb->p_dev=&bd_ramdisk;
ffff80000080bcc4:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080bccb:	ff ff ff 
ffff80000080bcce:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bcd2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bcd5:	48 ba a0 ff ff ff ff 	movabs rdx,0xffffffffffffffa0
ffff80000080bcdc:	ff ff ff 
ffff80000080bcdf:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080bce3:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:223
}
ffff80000080bce7:	90                   	nop
ffff80000080bce8:	48 83 c4 20          	add    rsp,0x20
ffff80000080bcec:	5b                   	pop    rbx
ffff80000080bced:	41 5f                	pop    r15
ffff80000080bcef:	5d                   	pop    rbp
ffff80000080bcf0:	c3                   	ret    

ffff80000080bcf1 <sys_putstring>:
sys_putstring():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:21
#include "int.h"
#include <sys/mman.h>


unsigned long sys_putstring(char *string)
{
ffff80000080bcf1:	f3 0f 1e fa          	endbr64 
ffff80000080bcf5:	55                   	push   rbp
ffff80000080bcf6:	48 89 e5             	mov    rbp,rsp
ffff80000080bcf9:	41 57                	push   r15
ffff80000080bcfb:	48 83 ec 18          	sub    rsp,0x18
ffff80000080bcff:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080bcff <sys_putstring+0xe>
ffff80000080bd06:	49 bb 51 52 11 00 00 	movabs r11,0x115251
ffff80000080bd0d:	00 00 00 
ffff80000080bd10:	4c 01 da             	add    rdx,r11
ffff80000080bd13:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:22
    printf(string);
ffff80000080bd17:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bd1b:	48 89 c7             	mov    rdi,rax
ffff80000080bd1e:	49 89 d7             	mov    r15,rdx
ffff80000080bd21:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080bd26:	48 b9 71 0a ee ff ff 	movabs rcx,0xffffffffffee0a71
ffff80000080bd2d:	ff ff ff 
ffff80000080bd30:	48 01 d1             	add    rcx,rdx
ffff80000080bd33:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:23
    return 0;
ffff80000080bd35:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:24
}
ffff80000080bd3a:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080bd3e:	c9                   	leave  
ffff80000080bd3f:	c3                   	ret    

ffff80000080bd40 <sys_open>:
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:27

unsigned long sys_open(char *filename,int flags)
{
ffff80000080bd40:	f3 0f 1e fa          	endbr64 
ffff80000080bd44:	55                   	push   rbp
ffff80000080bd45:	48 89 e5             	mov    rbp,rsp
ffff80000080bd48:	41 57                	push   r15
ffff80000080bd4a:	53                   	push   rbx
ffff80000080bd4b:	48 81 ec 90 00 00 00 	sub    rsp,0x90
ffff80000080bd52:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080bd52 <sys_open+0x12>
ffff80000080bd59:	49 bb fe 51 11 00 00 	movabs r11,0x1151fe
ffff80000080bd60:	00 00 00 
ffff80000080bd63:	4c 01 db             	add    rbx,r11
ffff80000080bd66:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
ffff80000080bd6d:	89 b5 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:28
    char * path = NULL;
ffff80000080bd73:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080bd7a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:29
    long pathlen = 0;
ffff80000080bd7b:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080bd82:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:30
    long error = 0;
ffff80000080bd83:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080bd8a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:31
    struct dir_entry * dentry = NULL;
ffff80000080bd8b:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080bd92:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:32
    struct file * filp = NULL;
ffff80000080bd93:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000080bd9a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:33
    struct file ** f = NULL;
ffff80000080bd9b:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff80000080bda2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:34
    int fd = -1;
ffff80000080bda3:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [rbp-0x24],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:38
    int i;

//	printf("sys_open\n");
    path = (char *) kmalloc();
ffff80000080bdaa:	49 89 df             	mov    r15,rbx
ffff80000080bdad:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080bdb2:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff80000080bdb9:	ff ff ff 
ffff80000080bdbc:	48 01 da             	add    rdx,rbx
ffff80000080bdbf:	ff d2                	call   rdx
ffff80000080bdc1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:39
    if(path == NULL)
ffff80000080bdc5:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080bdca:	75 0c                	jne    ffff80000080bdd8 <sys_open+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:40
        return -ENOMEM;
ffff80000080bdcc:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
ffff80000080bdd3:	e9 86 05 00 00       	jmp    ffff80000080c35e <sys_open+0x61e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:41
    memset(path,0,PAGE_4K_SIZE);
ffff80000080bdd8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080bddc:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080bde1:	be 00 00 00 00       	mov    esi,0x0
ffff80000080bde6:	48 89 c7             	mov    rdi,rax
ffff80000080bde9:	49 89 df             	mov    r15,rbx
ffff80000080bdec:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff80000080bdf3:	ff ff ff 
ffff80000080bdf6:	48 01 d8             	add    rax,rbx
ffff80000080bdf9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:42
    pathlen = strlen(filename);
ffff80000080bdfb:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080be02:	48 89 c7             	mov    rdi,rax
ffff80000080be05:	49 89 df             	mov    r15,rbx
ffff80000080be08:	48 b8 24 25 ef ff ff 	movabs rax,0xffffffffffef2524
ffff80000080be0f:	ff ff ff 
ffff80000080be12:	48 01 d8             	add    rax,rbx
ffff80000080be15:	ff d0                	call   rax
ffff80000080be17:	48 98                	cdqe   
ffff80000080be19:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:43
    if(pathlen <= 0)
ffff80000080be1d:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080be22:	7f 25                	jg     ffff80000080be49 <sys_open+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:45
    {
        kmfree(path);
ffff80000080be24:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080be28:	48 89 c7             	mov    rdi,rax
ffff80000080be2b:	49 89 df             	mov    r15,rbx
ffff80000080be2e:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff80000080be35:	ff ff ff 
ffff80000080be38:	48 01 d8             	add    rax,rbx
ffff80000080be3b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:46
        return -EFAULT;
ffff80000080be3d:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080be44:	e9 15 05 00 00       	jmp    ffff80000080c35e <sys_open+0x61e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:48
    }
    else if(pathlen >= PAGE_4K_SIZE)
ffff80000080be49:	48 81 7d c0 ff 0f 00 	cmp    QWORD PTR [rbp-0x40],0xfff
ffff80000080be50:	00 
ffff80000080be51:	7e 25                	jle    ffff80000080be78 <sys_open+0x138>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:50
    {
        kmfree(path);
ffff80000080be53:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080be57:	48 89 c7             	mov    rdi,rax
ffff80000080be5a:	49 89 df             	mov    r15,rbx
ffff80000080be5d:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff80000080be64:	ff ff ff 
ffff80000080be67:	48 01 d8             	add    rax,rbx
ffff80000080be6a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:51
        return -ENAMETOOLONG;
ffff80000080be6c:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
ffff80000080be73:	e9 e6 04 00 00       	jmp    ffff80000080c35e <sys_open+0x61e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:53
    }
    strcpy(path,filename);
ffff80000080be78:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffff80000080be7f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080be83:	48 89 d6             	mov    rsi,rdx
ffff80000080be86:	48 89 c7             	mov    rdi,rax
ffff80000080be89:	49 89 df             	mov    r15,rbx
ffff80000080be8c:	48 b8 57 22 ef ff ff 	movabs rax,0xffffffffffef2257
ffff80000080be93:	ff ff ff 
ffff80000080be96:	48 01 d8             	add    rax,rbx
ffff80000080be99:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:55

    dentry = path_walk(path,0);
ffff80000080be9b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080be9f:	be 00 00 00 00       	mov    esi,0x0
ffff80000080bea4:	48 89 c7             	mov    rdi,rax
ffff80000080bea7:	49 89 df             	mov    r15,rbx
ffff80000080beaa:	48 b8 a9 a2 ee ff ff 	movabs rax,0xffffffffffeea2a9
ffff80000080beb1:	ff ff ff 
ffff80000080beb4:	48 01 d8             	add    rax,rbx
ffff80000080beb7:	ff d0                	call   rax
ffff80000080beb9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:57

    if(dentry == NULL){
ffff80000080bebd:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080bec2:	0f 85 32 02 00 00    	jne    ffff80000080c0fa <sys_open+0x3ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62
        if(!flags&O_CREAT)
            return -ENOENT;
        //创建文件
        //找到上一级目录
        char* p=path+strlen(path)-1;
ffff80000080bec8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080becc:	48 89 c7             	mov    rdi,rax
ffff80000080becf:	49 89 df             	mov    r15,rbx
ffff80000080bed2:	48 b8 24 25 ef ff ff 	movabs rax,0xffffffffffef2524
ffff80000080bed9:	ff ff ff 
ffff80000080bedc:	48 01 d8             	add    rax,rbx
ffff80000080bedf:	ff d0                	call   rax
ffff80000080bee1:	48 98                	cdqe   
ffff80000080bee3:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff80000080bee7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080beeb:	48 01 d0             	add    rax,rdx
ffff80000080beee:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63
        for(;*p!='/'&&p>path;p--);
ffff80000080bef2:	eb 05                	jmp    ffff80000080bef9 <sys_open+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63 (discriminator 3)
ffff80000080bef4:	48 83 6d d0 01       	sub    QWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63 (discriminator 1)
ffff80000080bef9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080befd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080bf00:	3c 2f                	cmp    al,0x2f
ffff80000080bf02:	74 0a                	je     ffff80000080bf0e <sys_open+0x1ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63 (discriminator 2)
ffff80000080bf04:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080bf08:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
ffff80000080bf0c:	77 e6                	ja     ffff80000080bef4 <sys_open+0x1b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:64
        *p='\0';
ffff80000080bf0e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080bf12:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:65
        struct dir_entry *parent= path_walk(path,O_DIRECTORY);
ffff80000080bf15:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080bf19:	be 00 40 00 00       	mov    esi,0x4000
ffff80000080bf1e:	48 89 c7             	mov    rdi,rax
ffff80000080bf21:	49 89 df             	mov    r15,rbx
ffff80000080bf24:	48 b8 a9 a2 ee ff ff 	movabs rax,0xffffffffffeea2a9
ffff80000080bf2b:	ff ff ff 
ffff80000080bf2e:	48 01 d8             	add    rax,rbx
ffff80000080bf31:	ff d0                	call   rax
ffff80000080bf33:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:66
        if(parent==NULL)
ffff80000080bf37:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff80000080bf3c:	75 0c                	jne    ffff80000080bf4a <sys_open+0x20a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:67
            return -ENOENT;//上级目录也不在
ffff80000080bf3e:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
ffff80000080bf45:	e9 14 04 00 00       	jmp    ffff80000080c35e <sys_open+0x61e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:69
        //创建新的文件
        dentry=(struct dir_entry*) kmalloc();
ffff80000080bf4a:	49 89 df             	mov    r15,rbx
ffff80000080bf4d:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080bf52:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff80000080bf59:	ff ff ff 
ffff80000080bf5c:	48 01 da             	add    rdx,rbx
ffff80000080bf5f:	ff d2                	call   rdx
ffff80000080bf61:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:70
        list_init(&dentry->subdirs_list);
ffff80000080bf65:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bf69:	48 83 c0 28          	add    rax,0x28
ffff80000080bf6d:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff80000080bf74:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080bf7b:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff80000080bf82:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080bf89:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080bf90:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff80000080bf91:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:71
        list_init(&dentry->child_node);
ffff80000080bf92:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bf96:	48 83 c0 10          	add    rax,0x10
ffff80000080bf9a:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff80000080bfa1:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080bfa8:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff80000080bfaf:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080bfb6:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080bfbd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff80000080bfbe:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:72
        dentry->child_node.data=dentry;
ffff80000080bfbf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bfc3:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080bfc7:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:73
        list_add(&parent->subdirs_list,&dentry->child_node);
ffff80000080bfcb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bfcf:	48 83 c0 10          	add    rax,0x10
ffff80000080bfd3:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080bfd7:	48 83 c2 28          	add    rdx,0x28
ffff80000080bfdb:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
ffff80000080bfdf:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    struct List* p=entry;
ffff80000080bfe3:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080bfe7:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080bfeb:	eb 21                	jmp    ffff80000080c00e <sys_open+0x2ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        if(p->data==new->data)
ffff80000080bfed:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080bff1:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080bff5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080bff9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080bffd:	48 39 c2             	cmp    rdx,rax
ffff80000080c000:	74 7c                	je     ffff80000080c07e <sys_open+0x33e>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080c002:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080c006:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c00a:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffff80000080c00e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080c012:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c016:	48 85 c0             	test   rax,rax
ffff80000080c019:	74 0e                	je     ffff80000080c029 <sys_open+0x2e9>
ffff80000080c01b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080c01f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c023:	48 39 45 90          	cmp    QWORD PTR [rbp-0x70],rax
ffff80000080c027:	75 c4                	jne    ffff80000080bfed <sys_open+0x2ad>
ffff80000080c029:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080c02d:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffff80000080c031:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080c035:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->next = entry->next;
ffff80000080c039:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c03d:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080c041:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080c045:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    new->prev = entry;
ffff80000080c049:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080c04d:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080c051:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
    if(new->next)
ffff80000080c054:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080c058:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c05c:	48 85 c0             	test   rax,rax
ffff80000080c05f:	74 0f                	je     ffff80000080c070 <sys_open+0x330>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
        new->next->prev = new;
ffff80000080c061:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080c065:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c069:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff80000080c06d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
    entry->next = new;
ffff80000080c070:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c074:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff80000080c078:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:31
}
ffff80000080c07c:	eb 01                	jmp    ffff80000080c07f <sys_open+0x33f>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
            return;
ffff80000080c07e:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:74
        dentry->parent=parent;
ffff80000080c07f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c083:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080c087:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:75
        dentry->dir_inode=dentry+1;//放在后面
ffff80000080c08b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c08f:	48 8d 50 60          	lea    rdx,[rax+0x60]
ffff80000080c093:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c097:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:76
        dentry->dir_inode->file_size=0;
ffff80000080c09b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c09f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c0a3:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:78
        //继承操作方法
        dentry->dir_inode->f_ops=parent->dir_inode->f_ops;
ffff80000080c0aa:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c0ae:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080c0b2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c0b6:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c0ba:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080c0be:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:79
        dentry->dir_inode->inode_ops=parent->dir_inode->inode_ops;
ffff80000080c0c2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c0c6:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080c0ca:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c0ce:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c0d2:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080c0d6:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:80
        dentry->dir_ops=parent->dir_ops;
ffff80000080c0da:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c0de:	48 8b 50 58          	mov    rdx,QWORD PTR [rax+0x58]
ffff80000080c0e2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c0e6:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:82
        //这样的创建文件只能创建普通文件，设备文件要通过devman创建
        dentry->dir_inode->attribute=FS_ATTR_FILE;
ffff80000080c0ea:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c0ee:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c0f2:	48 c7 40 10 01 00 00 	mov    QWORD PTR [rax+0x10],0x1
ffff80000080c0f9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:84
    }
    kmfree(path);
ffff80000080c0fa:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c0fe:	48 89 c7             	mov    rdi,rax
ffff80000080c101:	49 89 df             	mov    r15,rbx
ffff80000080c104:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff80000080c10b:	ff ff ff 
ffff80000080c10e:	48 01 d8             	add    rax,rbx
ffff80000080c111:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:86

    if((flags & O_DIRECTORY) && (dentry->dir_inode->attribute != FS_ATTR_DIR))
ffff80000080c113:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
ffff80000080c119:	25 00 40 00 00       	and    eax,0x4000
ffff80000080c11e:	85 c0                	test   eax,eax
ffff80000080c120:	74 1e                	je     ffff80000080c140 <sys_open+0x400>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:86 (discriminator 1)
ffff80000080c122:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c126:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c12a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c12e:	48 83 f8 02          	cmp    rax,0x2
ffff80000080c132:	74 0c                	je     ffff80000080c140 <sys_open+0x400>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:87
        return -ENOTDIR;
ffff80000080c134:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
ffff80000080c13b:	e9 1e 02 00 00       	jmp    ffff80000080c35e <sys_open+0x61e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:88
    if(!(flags & O_DIRECTORY) && (dentry->dir_inode->attribute == FS_ATTR_DIR))
ffff80000080c140:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
ffff80000080c146:	25 00 40 00 00       	and    eax,0x4000
ffff80000080c14b:	85 c0                	test   eax,eax
ffff80000080c14d:	75 1e                	jne    ffff80000080c16d <sys_open+0x42d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:88 (discriminator 1)
ffff80000080c14f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c153:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c157:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c15b:	48 83 f8 02          	cmp    rax,0x2
ffff80000080c15f:	75 0c                	jne    ffff80000080c16d <sys_open+0x42d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:89
        return -EISDIR;
ffff80000080c161:	48 c7 c0 e1 ff ff ff 	mov    rax,0xffffffffffffffe1
ffff80000080c168:	e9 f1 01 00 00       	jmp    ffff80000080c35e <sys_open+0x61e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:91

    filp = (struct file *) kmalloc();
ffff80000080c16d:	49 89 df             	mov    r15,rbx
ffff80000080c170:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c175:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff80000080c17c:	ff ff ff 
ffff80000080c17f:	48 01 da             	add    rdx,rbx
ffff80000080c182:	ff d2                	call   rdx
ffff80000080c184:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:92
    memset(filp,0,sizeof(struct file));
ffff80000080c188:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080c18c:	ba 28 00 00 00       	mov    edx,0x28
ffff80000080c191:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c196:	48 89 c7             	mov    rdi,rax
ffff80000080c199:	49 89 df             	mov    r15,rbx
ffff80000080c19c:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff80000080c1a3:	ff ff ff 
ffff80000080c1a6:	48 01 d8             	add    rax,rbx
ffff80000080c1a9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:93
    filp->dentry = dentry;
ffff80000080c1ab:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080c1af:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080c1b3:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:94
    filp->mode = flags;
ffff80000080c1b7:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
ffff80000080c1bd:	48 63 d0             	movsxd rdx,eax
ffff80000080c1c0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080c1c4:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:96

    if(dentry->dir_inode->attribute & FS_ATTR_DEVICE){
ffff80000080c1c8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c1cc:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c1d0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c1d4:	83 e0 04             	and    eax,0x4
ffff80000080c1d7:	48 85 c0             	test   rax,rax
ffff80000080c1da:	74 18                	je     ffff80000080c1f4 <sys_open+0x4b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:98
        extern struct file_operations devfs_fops;
        filp->f_ops = &devfs_fops;	//////	find device file operation function
ffff80000080c1dc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080c1e0:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff80000080c1e7:	ff ff ff 
ffff80000080c1ea:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080c1ee:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
ffff80000080c1f2:	eb 14                	jmp    ffff80000080c208 <sys_open+0x4c8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:101
    }
    else
        filp->f_ops = dentry->dir_inode->f_ops;
ffff80000080c1f4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c1f8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c1fc:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080c200:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080c204:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:102
    if(filp->f_ops && filp->f_ops->open)
ffff80000080c208:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080c20c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c210:	48 85 c0             	test   rax,rax
ffff80000080c213:	74 33                	je     ffff80000080c248 <sys_open+0x508>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:102 (discriminator 1)
ffff80000080c215:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080c219:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c21d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c220:	48 85 c0             	test   rax,rax
ffff80000080c223:	74 23                	je     ffff80000080c248 <sys_open+0x508>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:103
        error = filp->f_ops->open(dentry->dir_inode,filp);
ffff80000080c225:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080c229:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c22d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080c230:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c234:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c238:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080c23c:	48 89 d6             	mov    rsi,rdx
ffff80000080c23f:	48 89 c7             	mov    rdi,rax
ffff80000080c242:	ff d1                	call   rcx
ffff80000080c244:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:104
    if(error != 1)
ffff80000080c248:	48 83 7d e8 01       	cmp    QWORD PTR [rbp-0x18],0x1
ffff80000080c24d:	74 25                	je     ffff80000080c274 <sys_open+0x534>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:106
    {
        kmfree(filp);
ffff80000080c24f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080c253:	48 89 c7             	mov    rdi,rax
ffff80000080c256:	49 89 df             	mov    r15,rbx
ffff80000080c259:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff80000080c260:	ff ff ff 
ffff80000080c263:	48 01 d8             	add    rax,rbx
ffff80000080c266:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:107
        return -EFAULT;
ffff80000080c268:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080c26f:	e9 ea 00 00 00       	jmp    ffff80000080c35e <sys_open+0x61e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:110
    }

    if(filp->mode & O_TRUNC)
ffff80000080c274:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080c278:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080c27c:	25 00 02 00 00       	and    eax,0x200
ffff80000080c281:	48 85 c0             	test   rax,rax
ffff80000080c284:	74 13                	je     ffff80000080c299 <sys_open+0x559>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:112
    {
        filp->dentry->dir_inode->file_size = 0;
ffff80000080c286:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080c28a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c28e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c292:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:114
    }
    if(filp->mode & O_APPEND)
ffff80000080c299:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080c29d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080c2a1:	25 00 04 00 00       	and    eax,0x400
ffff80000080c2a6:	48 85 c0             	test   rax,rax
ffff80000080c2a9:	74 19                	je     ffff80000080c2c4 <sys_open+0x584>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:116
    {
        filp->position = filp->dentry->dir_inode->file_size;
ffff80000080c2ab:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080c2af:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c2b3:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c2b7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c2ba:	48 89 c2             	mov    rdx,rax
ffff80000080c2bd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080c2c1:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:119
    }

    f = current->openf;
ffff80000080c2c4:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff80000080c2cb:	ff ff ff 
ffff80000080c2ce:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c2d2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c2d5:	48 05 f8 00 00 00    	add    rax,0xf8
ffff80000080c2db:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:120
    for(i = 0;i < MAX_TASKS;i++)
ffff80000080c2df:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080c2e6:	eb 28                	jmp    ffff80000080c310 <sys_open+0x5d0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:121
        if(f[i] == NULL)
ffff80000080c2e8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080c2eb:	48 98                	cdqe   
ffff80000080c2ed:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080c2f4:	00 
ffff80000080c2f5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080c2f9:	48 01 d0             	add    rax,rdx
ffff80000080c2fc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c2ff:	48 85 c0             	test   rax,rax
ffff80000080c302:	75 08                	jne    ffff80000080c30c <sys_open+0x5cc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:123
        {
            fd = i;
ffff80000080c304:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080c307:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:124
            break;
ffff80000080c30a:	eb 0a                	jmp    ffff80000080c316 <sys_open+0x5d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:120 (discriminator 2)
    for(i = 0;i < MAX_TASKS;i++)
ffff80000080c30c:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:120 (discriminator 1)
ffff80000080c310:	83 7d d8 1f          	cmp    DWORD PTR [rbp-0x28],0x1f
ffff80000080c314:	7e d2                	jle    ffff80000080c2e8 <sys_open+0x5a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:126
        }
    if(i == MAX_TASKS)
ffff80000080c316:	83 7d d8 20          	cmp    DWORD PTR [rbp-0x28],0x20
ffff80000080c31a:	75 22                	jne    ffff80000080c33e <sys_open+0x5fe>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:128
    {
        kmfree(filp);
ffff80000080c31c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080c320:	48 89 c7             	mov    rdi,rax
ffff80000080c323:	49 89 df             	mov    r15,rbx
ffff80000080c326:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff80000080c32d:	ff ff ff 
ffff80000080c330:	48 01 d8             	add    rax,rbx
ffff80000080c333:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:130
        //// reclaim struct index_node & struct dir_entry
        return -EMFILE;
ffff80000080c335:	48 c7 c0 df ff ff ff 	mov    rax,0xffffffffffffffdf
ffff80000080c33c:	eb 20                	jmp    ffff80000080c35e <sys_open+0x61e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:132
    }
    f[fd] = filp;
ffff80000080c33e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080c341:	48 98                	cdqe   
ffff80000080c343:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080c34a:	00 
ffff80000080c34b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080c34f:	48 01 c2             	add    rdx,rax
ffff80000080c352:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080c356:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:134

    return fd;
ffff80000080c359:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080c35c:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:135
}
ffff80000080c35e:	48 81 c4 90 00 00 00 	add    rsp,0x90
ffff80000080c365:	5b                   	pop    rbx
ffff80000080c366:	41 5f                	pop    r15
ffff80000080c368:	5d                   	pop    rbp
ffff80000080c369:	c3                   	ret    

ffff80000080c36a <sys_close>:
sys_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:138

unsigned long sys_close(int fd)
{
ffff80000080c36a:	f3 0f 1e fa          	endbr64 
ffff80000080c36e:	55                   	push   rbp
ffff80000080c36f:	48 89 e5             	mov    rbp,rsp
ffff80000080c372:	41 57                	push   r15
ffff80000080c374:	53                   	push   rbx
ffff80000080c375:	48 83 ec 20          	sub    rsp,0x20
ffff80000080c379:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c379 <sys_close+0xf>
ffff80000080c380:	49 bb d7 4b 11 00 00 	movabs r11,0x114bd7
ffff80000080c387:	00 00 00 
ffff80000080c38a:	4c 01 db             	add    rbx,r11
ffff80000080c38d:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:139
    struct file * filp = NULL;
ffff80000080c390:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080c397:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:142

//	printf("sys_close:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080c398:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080c39c:	78 06                	js     ffff80000080c3a4 <sys_close+0x3a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:142 (discriminator 1)
ffff80000080c39e:	83 7d dc 1f          	cmp    DWORD PTR [rbp-0x24],0x1f
ffff80000080c3a2:	7e 0c                	jle    ffff80000080c3b0 <sys_close+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:143
        return -EBADF;
ffff80000080c3a4:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080c3ab:	e9 a8 00 00 00       	jmp    ffff80000080c458 <sys_close+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:145

    filp = current->openf[fd];
ffff80000080c3b0:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff80000080c3b7:	ff ff ff 
ffff80000080c3ba:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c3be:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c3c1:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080c3c4:	48 63 d2             	movsxd rdx,edx
ffff80000080c3c7:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080c3cb:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080c3d0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:146
    if(filp->f_ops && filp->f_ops->close)
ffff80000080c3d4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c3d8:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c3dc:	48 85 c0             	test   rax,rax
ffff80000080c3df:	74 35                	je     ffff80000080c416 <sys_close+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:146 (discriminator 1)
ffff80000080c3e1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c3e5:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c3e9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080c3ed:	48 85 c0             	test   rax,rax
ffff80000080c3f0:	74 24                	je     ffff80000080c416 <sys_close+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:147
        filp->f_ops->close(filp->dentry->dir_inode,filp);
ffff80000080c3f2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c3f6:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c3fa:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080c3fe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c402:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c406:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c40a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c40e:	48 89 d6             	mov    rsi,rdx
ffff80000080c411:	48 89 c7             	mov    rdi,rax
ffff80000080c414:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:149

    kmfree(filp);
ffff80000080c416:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c41a:	48 89 c7             	mov    rdi,rax
ffff80000080c41d:	49 89 df             	mov    r15,rbx
ffff80000080c420:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff80000080c427:	ff ff ff 
ffff80000080c42a:	48 01 d8             	add    rax,rbx
ffff80000080c42d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:150
    current->openf[fd] = NULL;
ffff80000080c42f:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff80000080c436:	ff ff ff 
ffff80000080c439:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c43d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c440:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080c443:	48 63 d2             	movsxd rdx,edx
ffff80000080c446:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080c44a:	48 c7 44 d0 08 00 00 	mov    QWORD PTR [rax+rdx*8+0x8],0x0
ffff80000080c451:	00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:152

    return 0;
ffff80000080c453:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:153
}
ffff80000080c458:	48 83 c4 20          	add    rsp,0x20
ffff80000080c45c:	5b                   	pop    rbx
ffff80000080c45d:	41 5f                	pop    r15
ffff80000080c45f:	5d                   	pop    rbp
ffff80000080c460:	c3                   	ret    

ffff80000080c461 <sys_read>:
sys_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:156

unsigned long sys_read(int fd,void * buf,long count)
{
ffff80000080c461:	f3 0f 1e fa          	endbr64 
ffff80000080c465:	55                   	push   rbp
ffff80000080c466:	48 89 e5             	mov    rbp,rsp
ffff80000080c469:	48 83 ec 30          	sub    rsp,0x30
ffff80000080c46d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c46d <sys_read+0xc>
ffff80000080c474:	49 bb e3 4a 11 00 00 	movabs r11,0x114ae3
ffff80000080c47b:	00 00 00 
ffff80000080c47e:	4c 01 d8             	add    rax,r11
ffff80000080c481:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080c484:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080c488:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:157
    struct file * filp = NULL;
ffff80000080c48c:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080c493:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:158
    unsigned long ret = 0;
ffff80000080c494:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080c49b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:161

//	printf("sys_read:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080c49c:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080c4a0:	78 06                	js     ffff80000080c4a8 <sys_read+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:161 (discriminator 1)
ffff80000080c4a2:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080c4a6:	7e 09                	jle    ffff80000080c4b1 <sys_read+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:162
        return -EBADF;
ffff80000080c4a8:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080c4af:	eb 7c                	jmp    ffff80000080c52d <sys_read+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:163
    if(count < 0)
ffff80000080c4b1:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080c4b6:	79 09                	jns    ffff80000080c4c1 <sys_read+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:164
        return -EINVAL;
ffff80000080c4b8:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080c4bf:	eb 6c                	jmp    ffff80000080c52d <sys_read+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:166

    filp = current->openf[fd];
ffff80000080c4c1:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff80000080c4c8:	ff ff ff 
ffff80000080c4cb:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080c4cf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c4d2:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080c4d5:	48 63 d2             	movsxd rdx,edx
ffff80000080c4d8:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080c4dc:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080c4e1:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:167
    if(filp->f_ops && filp->f_ops->read)
ffff80000080c4e5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c4e9:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c4ed:	48 85 c0             	test   rax,rax
ffff80000080c4f0:	74 37                	je     ffff80000080c529 <sys_read+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:167 (discriminator 1)
ffff80000080c4f2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c4f6:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c4fa:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c4fe:	48 85 c0             	test   rax,rax
ffff80000080c501:	74 26                	je     ffff80000080c529 <sys_read+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:168
        ret = filp->f_ops->read(filp,buf,count,&filp->position);
ffff80000080c503:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c507:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c50b:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff80000080c50f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080c513:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c517:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080c51b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c51f:	48 89 c7             	mov    rdi,rax
ffff80000080c522:	41 ff d0             	call   r8
ffff80000080c525:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:169
    return ret;
ffff80000080c529:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:170
}
ffff80000080c52d:	c9                   	leave  
ffff80000080c52e:	c3                   	ret    

ffff80000080c52f <sys_write>:
sys_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:173

unsigned long sys_write(int fd,void * buf,long count)
{
ffff80000080c52f:	f3 0f 1e fa          	endbr64 
ffff80000080c533:	55                   	push   rbp
ffff80000080c534:	48 89 e5             	mov    rbp,rsp
ffff80000080c537:	48 83 ec 30          	sub    rsp,0x30
ffff80000080c53b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c53b <sys_write+0xc>
ffff80000080c542:	49 bb 15 4a 11 00 00 	movabs r11,0x114a15
ffff80000080c549:	00 00 00 
ffff80000080c54c:	4c 01 d8             	add    rax,r11
ffff80000080c54f:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080c552:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080c556:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:174
    struct file * filp = NULL;
ffff80000080c55a:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080c561:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:175
    unsigned long ret = 0;
ffff80000080c562:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080c569:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:178

//	printf("sys_write:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080c56a:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080c56e:	78 06                	js     ffff80000080c576 <sys_write+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:178 (discriminator 1)
ffff80000080c570:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080c574:	7e 09                	jle    ffff80000080c57f <sys_write+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:179
        return -EBADF;
ffff80000080c576:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080c57d:	eb 7c                	jmp    ffff80000080c5fb <sys_write+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:180
    if(count < 0)
ffff80000080c57f:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080c584:	79 09                	jns    ffff80000080c58f <sys_write+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:181
        return -EINVAL;
ffff80000080c586:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080c58d:	eb 6c                	jmp    ffff80000080c5fb <sys_write+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:183

    filp = current->openf[fd];
ffff80000080c58f:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff80000080c596:	ff ff ff 
ffff80000080c599:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080c59d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c5a0:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080c5a3:	48 63 d2             	movsxd rdx,edx
ffff80000080c5a6:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080c5aa:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080c5af:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:184
    if(filp->f_ops && filp->f_ops->write)
ffff80000080c5b3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c5b7:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c5bb:	48 85 c0             	test   rax,rax
ffff80000080c5be:	74 37                	je     ffff80000080c5f7 <sys_write+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:184 (discriminator 1)
ffff80000080c5c0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c5c4:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c5c8:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c5cc:	48 85 c0             	test   rax,rax
ffff80000080c5cf:	74 26                	je     ffff80000080c5f7 <sys_write+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:185
        ret = filp->f_ops->write(filp,buf,count,&filp->position);
ffff80000080c5d1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c5d5:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c5d9:	4c 8b 40 18          	mov    r8,QWORD PTR [rax+0x18]
ffff80000080c5dd:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080c5e1:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c5e5:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080c5e9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c5ed:	48 89 c7             	mov    rdi,rax
ffff80000080c5f0:	41 ff d0             	call   r8
ffff80000080c5f3:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:186
    return ret;
ffff80000080c5f7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:187
}
ffff80000080c5fb:	c9                   	leave  
ffff80000080c5fc:	c3                   	ret    

ffff80000080c5fd <sys_lseek>:
sys_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:191


unsigned long sys_lseek(int filds,long offset,int whence)
{
ffff80000080c5fd:	f3 0f 1e fa          	endbr64 
ffff80000080c601:	55                   	push   rbp
ffff80000080c602:	48 89 e5             	mov    rbp,rsp
ffff80000080c605:	48 83 ec 20          	sub    rsp,0x20
ffff80000080c609:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c609 <sys_lseek+0xc>
ffff80000080c610:	49 bb 47 49 11 00 00 	movabs r11,0x114947
ffff80000080c617:	00 00 00 
ffff80000080c61a:	4c 01 d8             	add    rax,r11
ffff80000080c61d:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080c620:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080c624:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:192
    struct file * filp = NULL;
ffff80000080c627:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080c62e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:193
    unsigned long ret = 0;
ffff80000080c62f:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080c636:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:196

//	printf("sys_lseek:%d\n",filds);
    if(filds < 0 || filds >= MAX_TASKS)
ffff80000080c637:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080c63b:	78 06                	js     ffff80000080c643 <sys_lseek+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:196 (discriminator 1)
ffff80000080c63d:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080c641:	7e 0c                	jle    ffff80000080c64f <sys_lseek+0x52>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:197
        return -EBADF;
ffff80000080c643:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080c64a:	e9 82 00 00 00       	jmp    ffff80000080c6d1 <sys_lseek+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:198
    if(whence < 0 || whence >= SEEK_MAX)
ffff80000080c64f:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080c653:	78 06                	js     ffff80000080c65b <sys_lseek+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:198 (discriminator 1)
ffff80000080c655:	83 7d e8 02          	cmp    DWORD PTR [rbp-0x18],0x2
ffff80000080c659:	7e 09                	jle    ffff80000080c664 <sys_lseek+0x67>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:199
        return -EINVAL;
ffff80000080c65b:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080c662:	eb 6d                	jmp    ffff80000080c6d1 <sys_lseek+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:201

    filp = current->openf[filds];
ffff80000080c664:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff80000080c66b:	ff ff ff 
ffff80000080c66e:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080c672:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c675:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080c678:	48 63 d2             	movsxd rdx,edx
ffff80000080c67b:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080c67f:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080c684:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:202
    if(filp->f_ops && filp->f_ops->lseek)
ffff80000080c688:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c68c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c690:	48 85 c0             	test   rax,rax
ffff80000080c693:	74 38                	je     ffff80000080c6cd <sys_lseek+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:202 (discriminator 1)
ffff80000080c695:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c699:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c69d:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080c6a1:	48 85 c0             	test   rax,rax
ffff80000080c6a4:	74 27                	je     ffff80000080c6cd <sys_lseek+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:203
        ret = filp->f_ops->lseek(filp,offset,whence);
ffff80000080c6a6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c6aa:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c6ae:	4c 8b 40 20          	mov    r8,QWORD PTR [rax+0x20]
ffff80000080c6b2:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080c6b5:	48 63 d0             	movsxd rdx,eax
ffff80000080c6b8:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080c6bc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c6c0:	48 89 ce             	mov    rsi,rcx
ffff80000080c6c3:	48 89 c7             	mov    rdi,rax
ffff80000080c6c6:	41 ff d0             	call   r8
ffff80000080c6c9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:204
    return ret;
ffff80000080c6cd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:205
}
ffff80000080c6d1:	c9                   	leave  
ffff80000080c6d2:	c3                   	ret    

ffff80000080c6d3 <sys_vfork>:
sys_vfork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:215
//    printf("sys_fork\n");
//    //return do_fork(regs,0,regs->rsp,0);
//}

unsigned long sys_vfork()
{
ffff80000080c6d3:	f3 0f 1e fa          	endbr64 
ffff80000080c6d7:	55                   	push   rbp
ffff80000080c6d8:	48 89 e5             	mov    rbp,rsp
ffff80000080c6db:	41 57                	push   r15
ffff80000080c6dd:	48 83 ec 18          	sub    rsp,0x18
ffff80000080c6e1:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080c6e1 <sys_vfork+0xe>
ffff80000080c6e8:	49 bb 6f 48 11 00 00 	movabs r11,0x11486f
ffff80000080c6ef:	00 00 00 
ffff80000080c6f2:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:216
    regs_t *regs = (regs_t *)current->tss.rsp0 -1;
ffff80000080c6f5:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff80000080c6fc:	ff ff ff 
ffff80000080c6ff:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080c703:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c706:	48 8b 80 fc 01 00 00 	mov    rax,QWORD PTR [rax+0x1fc]
ffff80000080c70d:	48 2d d0 00 00 00    	sub    rax,0xd0
ffff80000080c713:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:217
    printf("sys_vfork\n");
ffff80000080c717:	48 b8 d8 d6 ff ff ff 	movabs rax,0xffffffffffffd6d8
ffff80000080c71e:	ff ff ff 
ffff80000080c721:	48 8d 04 02          	lea    rax,[rdx+rax*1]
ffff80000080c725:	48 89 c7             	mov    rdi,rax
ffff80000080c728:	49 89 d7             	mov    r15,rdx
ffff80000080c72b:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c730:	48 b9 71 0a ee ff ff 	movabs rcx,0xffffffffffee0a71
ffff80000080c737:	ff ff ff 
ffff80000080c73a:	48 01 d1             	add    rcx,rdx
ffff80000080c73d:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:219
    //return do_fork(regs,CLONE_VM | CLONE_FS | CLONE_SIGNAL,regs->rsp,0);
}
ffff80000080c73f:	90                   	nop
ffff80000080c740:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080c744:	c9                   	leave  
ffff80000080c745:	c3                   	ret    

ffff80000080c746 <sys_wait>:
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:262

/*
	rusage reserved
*/

unsigned long sys_wait(pid_t pid, int *stat_loc, int options){
ffff80000080c746:	f3 0f 1e fa          	endbr64 
ffff80000080c74a:	55                   	push   rbp
ffff80000080c74b:	48 89 e5             	mov    rbp,rsp
ffff80000080c74e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c74e <sys_wait+0x8>
ffff80000080c755:	49 bb 02 48 11 00 00 	movabs r11,0x114802
ffff80000080c75c:	00 00 00 
ffff80000080c75f:	4c 01 d8             	add    rax,r11
ffff80000080c762:	89 7d bc             	mov    DWORD PTR [rbp-0x44],edi
ffff80000080c765:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff80000080c769:	89 55 b8             	mov    DWORD PTR [rbp-0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:263
    struct process* waitee=NULL;
ffff80000080c76c:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080c773:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:265
    extern struct process task[];
    if(!current->child_procs)
ffff80000080c774:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff80000080c77b:	ff ff ff 
ffff80000080c77e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c782:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c785:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080c78c:	48 85 d2             	test   rdx,rdx
ffff80000080c78f:	75 0c                	jne    ffff80000080c79d <sys_wait+0x57>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:266
        return -ECHILD;//没有子进程可以等
ffff80000080c791:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
ffff80000080c798:	e9 ef 01 00 00       	jmp    ffff80000080c98c <sys_wait+0x246>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:267
    if(pid==-1){
ffff80000080c79d:	83 7d bc ff          	cmp    DWORD PTR [rbp-0x44],0xffffffff
ffff80000080c7a1:	75 58                	jne    ffff80000080c7fb <sys_wait+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270
        //任意一个子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080c7a3:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff80000080c7aa:	ff ff ff 
ffff80000080c7ad:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c7b1:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c7b4:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080c7bb:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff80000080c7bf:	eb 31                	jmp    ffff80000080c7f2 <sys_wait+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:271
                struct process* p=l->data;
ffff80000080c7c1:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c7c5:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080c7c9:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:272
                if(p->stat == TASK_ZOMBIE) {
ffff80000080c7cd:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080c7d1:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080c7d4:	83 fa 04             	cmp    edx,0x4
ffff80000080c7d7:	75 0d                	jne    ffff80000080c7e6 <sys_wait+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:273
                    waitee=p;
ffff80000080c7d9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c7dd:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:274
                    goto done;
ffff80000080c7e1:	e9 46 01 00 00       	jmp    ffff80000080c92c <sys_wait+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080c7e6:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c7ea:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080c7ee:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270 (discriminator 1)
ffff80000080c7f2:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffff80000080c7f7:	75 c8                	jne    ffff80000080c7c1 <sys_wait+0x7b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270
ffff80000080c7f9:	eb a8                	jmp    ffff80000080c7a3 <sys_wait+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:279
                }
            }
        }

    }else if(pid==0) {
ffff80000080c7fb:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080c7ff:	75 77                	jne    ffff80000080c878 <sys_wait+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282
        //等待任意一个和父进程同一个进程组的子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080c801:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff80000080c808:	ff ff ff 
ffff80000080c80b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c80f:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c812:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080c819:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080c81d:	eb 50                	jmp    ffff80000080c86f <sys_wait+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:283
                struct process* p=l->data;
ffff80000080c81f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c823:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080c827:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:284
                if(p->gpid==current->gpid&& p->stat == TASK_ZOMBIE) {
ffff80000080c82b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c82f:	8b 4a 04             	mov    ecx,DWORD PTR [rdx+0x4]
ffff80000080c832:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff80000080c839:	ff ff ff 
ffff80000080c83c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c840:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c843:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080c846:	39 d1                	cmp    ecx,edx
ffff80000080c848:	75 19                	jne    ffff80000080c863 <sys_wait+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:284 (discriminator 1)
ffff80000080c84a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c84e:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080c851:	83 fa 04             	cmp    edx,0x4
ffff80000080c854:	75 0d                	jne    ffff80000080c863 <sys_wait+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:285
                    waitee=p;
ffff80000080c856:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c85a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:286
                    goto done;
ffff80000080c85e:	e9 c9 00 00 00       	jmp    ffff80000080c92c <sys_wait+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080c863:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c867:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080c86b:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282 (discriminator 1)
ffff80000080c86f:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080c874:	75 a9                	jne    ffff80000080c81f <sys_wait+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282
ffff80000080c876:	eb 89                	jmp    ffff80000080c801 <sys_wait+0xbb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:291
                }
            }
        }
    }else{
        if(pid<0)pid=-pid;
ffff80000080c878:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080c87c:	79 03                	jns    ffff80000080c881 <sys_wait+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:291 (discriminator 1)
ffff80000080c87e:	f7 5d bc             	neg    DWORD PTR [rbp-0x44]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:293
        //检查是不是本进程的子进程
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080c881:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080c888:	eb 4f                	jmp    ffff80000080c8d9 <sys_wait+0x193>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:294
            if(task[i].pid==pid){
ffff80000080c88a:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff80000080c891:	ff ff ff 
ffff80000080c894:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080c898:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080c89b:	48 63 d2             	movsxd rdx,edx
ffff80000080c89e:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff80000080c8a5:	48 01 ca             	add    rdx,rcx
ffff80000080c8a8:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff80000080c8aa:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff80000080c8ad:	39 d1                	cmp    ecx,edx
ffff80000080c8af:	75 24                	jne    ffff80000080c8d5 <sys_wait+0x18f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:295
                waitee=&task[i];
ffff80000080c8b1:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080c8b4:	48 63 d2             	movsxd rdx,edx
ffff80000080c8b7:	48 69 ca 58 03 00 00 	imul   rcx,rdx,0x358
ffff80000080c8be:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff80000080c8c5:	ff ff ff 
ffff80000080c8c8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c8cc:	48 01 ca             	add    rdx,rcx
ffff80000080c8cf:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:296
                break;
ffff80000080c8d3:	eb 0a                	jmp    ffff80000080c8df <sys_wait+0x199>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:293 (discriminator 2)
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080c8d5:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:293 (discriminator 1)
ffff80000080c8d9:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
ffff80000080c8dd:	7e ab                	jle    ffff80000080c88a <sys_wait+0x144>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:299
            }
        }
        if(waitee==NULL||waitee->parent_pid!=current->pid)
ffff80000080c8df:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080c8e4:	74 21                	je     ffff80000080c907 <sys_wait+0x1c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:299 (discriminator 1)
ffff80000080c8e6:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080c8ea:	8b 92 bc 00 00 00    	mov    edx,DWORD PTR [rdx+0xbc]
ffff80000080c8f0:	48 b9 80 fe ff ff ff 	movabs rcx,0xfffffffffffffe80
ffff80000080c8f7:	ff ff ff 
ffff80000080c8fa:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080c8fe:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c901:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080c903:	39 c2                	cmp    edx,eax
ffff80000080c905:	74 09                	je     ffff80000080c910 <sys_wait+0x1ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:300
            return -ECHILD;//没有这个进程或者不是子进程
ffff80000080c907:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
ffff80000080c90e:	eb 7c                	jmp    ffff80000080c98c <sys_wait+0x246>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:302
        //TODO 等待结束以及等待信号
        while (waitee->stat != TASK_ZOMBIE);
ffff80000080c910:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:302 (discriminator 1)
ffff80000080c911:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c915:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080c918:	83 f8 04             	cmp    eax,0x4
ffff80000080c91b:	75 f4                	jne    ffff80000080c911 <sys_wait+0x1cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:303
        *stat_loc=waitee->exit_code;
ffff80000080c91d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c921:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff80000080c924:	89 c2                	mov    edx,eax
ffff80000080c926:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080c92a:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:307
    }
    done:
    //清除子进程
    waitee->stat=TASK_EMPTY;
ffff80000080c92c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c930:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:309
    //从链表中删除，不再是子进程
    list_drop(&waitee->node);
ffff80000080c937:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c93b:	48 05 34 03 00 00    	add    rax,0x334
ffff80000080c941:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_drop():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:44
    list_add_to_behind(p,new);
}
__attribute__((always_inline)) inline void list_drop(struct List * entry)
{
    //从链表中删除
    if(entry->prev)
ffff80000080c945:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c949:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c94c:	48 85 c0             	test   rax,rax
ffff80000080c94f:	74 13                	je     ffff80000080c964 <sys_wait+0x21e>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:45
        entry->prev->next=entry->next;
ffff80000080c951:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c955:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c958:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080c95c:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080c960:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:46
    if(entry->next)
ffff80000080c964:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c968:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c96c:	48 85 c0             	test   rax,rax
ffff80000080c96f:	74 12                	je     ffff80000080c983 <sys_wait+0x23d>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:47
        entry->next->prev=entry->prev;
ffff80000080c971:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c975:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c979:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080c97d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c980:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:48
}
ffff80000080c983:	90                   	nop
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:311
    //TODO 被信号中断时返回-1
    return waitee->pid;
ffff80000080c984:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c988:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080c98a:	89 c0                	mov    eax,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:312
}
ffff80000080c98c:	5d                   	pop    rbp
ffff80000080c98d:	c3                   	ret    

ffff80000080c98e <sys_wait4>:
sys_wait4():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:314
unsigned long sys_wait4(unsigned long pid,int *status,int options,void *rusage)
{
ffff80000080c98e:	f3 0f 1e fa          	endbr64 
ffff80000080c992:	55                   	push   rbp
ffff80000080c993:	48 89 e5             	mov    rbp,rsp
ffff80000080c996:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c996 <sys_wait4+0x8>
ffff80000080c99d:	49 bb ba 45 11 00 00 	movabs r11,0x1145ba
ffff80000080c9a4:	00 00 00 
ffff80000080c9a7:	4c 01 d8             	add    rax,r11
ffff80000080c9aa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080c9ae:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080c9b2:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080c9b5:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:350
//    copy_to_user(&child->exit_code,status,sizeof(long));
//    tsk->next = child->next;
//    exit_mm(child);
//    vmfree(child);
//    return retval;
}
ffff80000080c9b9:	90                   	nop
ffff80000080c9ba:	5d                   	pop    rbp
ffff80000080c9bb:	c3                   	ret    

ffff80000080c9bc <sys_brk>:
sys_brk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:353

unsigned long sys_brk(unsigned long brk)
{
ffff80000080c9bc:	f3 0f 1e fa          	endbr64 
ffff80000080c9c0:	55                   	push   rbp
ffff80000080c9c1:	48 89 e5             	mov    rbp,rsp
ffff80000080c9c4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c9c4 <sys_brk+0x8>
ffff80000080c9cb:	49 bb 8c 45 11 00 00 	movabs r11,0x11458c
ffff80000080c9d2:	00 00 00 
ffff80000080c9d5:	4c 01 d8             	add    rax,r11
ffff80000080c9d8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:367
//
//    new_brk = do_brk(current->mm->end_brk,new_brk - current->mm->end_brk);	//expand brk space
//
//    current->mm->end_brk = new_brk;
//    return new_brk;
}
ffff80000080c9dc:	90                   	nop
ffff80000080c9dd:	5d                   	pop    rbp
ffff80000080c9de:	c3                   	ret    

ffff80000080c9df <sys_reboot>:
sys_reboot():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:370

unsigned long sys_reboot(unsigned long cmd,void * arg)
{
ffff80000080c9df:	f3 0f 1e fa          	endbr64 
ffff80000080c9e3:	55                   	push   rbp
ffff80000080c9e4:	48 89 e5             	mov    rbp,rsp
ffff80000080c9e7:	41 57                	push   r15
ffff80000080c9e9:	53                   	push   rbx
ffff80000080c9ea:	48 83 ec 10          	sub    rsp,0x10
ffff80000080c9ee:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c9ee <sys_reboot+0xf>
ffff80000080c9f5:	49 bb 62 45 11 00 00 	movabs r11,0x114562
ffff80000080c9fc:	00 00 00 
ffff80000080c9ff:	4c 01 db             	add    rbx,r11
ffff80000080ca02:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080ca06:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:371
    printf("sys_reboot\n");
ffff80000080ca0a:	48 b8 e3 d6 ff ff ff 	movabs rax,0xffffffffffffd6e3
ffff80000080ca11:	ff ff ff 
ffff80000080ca14:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080ca18:	48 89 c7             	mov    rdi,rax
ffff80000080ca1b:	49 89 df             	mov    r15,rbx
ffff80000080ca1e:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ca23:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff80000080ca2a:	ff ff ff 
ffff80000080ca2d:	48 01 da             	add    rdx,rbx
ffff80000080ca30:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:372
    switch(cmd)
ffff80000080ca32:	48 83 7d e8 01       	cmp    QWORD PTR [rbp-0x18],0x1
ffff80000080ca37:	74 09                	je     ffff80000080ca42 <sys_reboot+0x63>
ffff80000080ca39:	48 83 7d e8 02       	cmp    QWORD PTR [rbp-0x18],0x2
ffff80000080ca3e:	74 20                	je     ffff80000080ca60 <sys_reboot+0x81>
ffff80000080ca40:	eb 48                	jmp    ffff80000080ca8a <sys_reboot+0xab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:375
    {
        case SYSTEM_REBOOT:
            outb(0x64,0xFE);
ffff80000080ca42:	be fe 00 00 00       	mov    esi,0xfe
ffff80000080ca47:	bf 64 00 00 00       	mov    edi,0x64
ffff80000080ca4c:	49 89 df             	mov    r15,rbx
ffff80000080ca4f:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff80000080ca56:	ff ff ff 
ffff80000080ca59:	48 01 d8             	add    rax,rbx
ffff80000080ca5c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:376
            break;
ffff80000080ca5e:	eb 53                	jmp    ffff80000080cab3 <sys_reboot+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:379

        case SYSTEM_POWEROFF:
            printf("sys_reboot cmd SYSTEM_POWEROFF\n");
ffff80000080ca60:	48 b8 f0 d6 ff ff ff 	movabs rax,0xffffffffffffd6f0
ffff80000080ca67:	ff ff ff 
ffff80000080ca6a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080ca6e:	48 89 c7             	mov    rdi,rax
ffff80000080ca71:	49 89 df             	mov    r15,rbx
ffff80000080ca74:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ca79:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff80000080ca80:	ff ff ff 
ffff80000080ca83:	48 01 da             	add    rdx,rbx
ffff80000080ca86:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:380
            break;
ffff80000080ca88:	eb 29                	jmp    ffff80000080cab3 <sys_reboot+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:383

        default:
            printf("sys_reboot cmd ERROR!\n");
ffff80000080ca8a:	48 b8 10 d7 ff ff ff 	movabs rax,0xffffffffffffd710
ffff80000080ca91:	ff ff ff 
ffff80000080ca94:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080ca98:	48 89 c7             	mov    rdi,rax
ffff80000080ca9b:	49 89 df             	mov    r15,rbx
ffff80000080ca9e:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080caa3:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff80000080caaa:	ff ff ff 
ffff80000080caad:	48 01 da             	add    rdx,rbx
ffff80000080cab0:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:384
            break;
ffff80000080cab2:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:386
    }
    return 0;
ffff80000080cab3:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:387
}
ffff80000080cab8:	48 83 c4 10          	add    rsp,0x10
ffff80000080cabc:	5b                   	pop    rbx
ffff80000080cabd:	41 5f                	pop    r15
ffff80000080cabf:	5d                   	pop    rbp
ffff80000080cac0:	c3                   	ret    

ffff80000080cac1 <sys_chdir>:
sys_chdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:391


unsigned long sys_chdir(char *filename)
{
ffff80000080cac1:	f3 0f 1e fa          	endbr64 
ffff80000080cac5:	55                   	push   rbp
ffff80000080cac6:	48 89 e5             	mov    rbp,rsp
ffff80000080cac9:	41 57                	push   r15
ffff80000080cacb:	53                   	push   rbx
ffff80000080cacc:	48 83 ec 30          	sub    rsp,0x30
ffff80000080cad0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080cad0 <sys_chdir+0xf>
ffff80000080cad7:	49 bb 80 44 11 00 00 	movabs r11,0x114480
ffff80000080cade:	00 00 00 
ffff80000080cae1:	4c 01 db             	add    rbx,r11
ffff80000080cae4:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:392
    char * path = NULL;
ffff80000080cae8:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080caef:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:393
    long pathlen = 0;
ffff80000080caf0:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080caf7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:394
    struct dir_entry * dentry = NULL;
ffff80000080caf8:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080caff:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:396

    printf("sys_chdir\n");
ffff80000080cb00:	48 b8 27 d7 ff ff ff 	movabs rax,0xffffffffffffd727
ffff80000080cb07:	ff ff ff 
ffff80000080cb0a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080cb0e:	48 89 c7             	mov    rdi,rax
ffff80000080cb11:	49 89 df             	mov    r15,rbx
ffff80000080cb14:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080cb19:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff80000080cb20:	ff ff ff 
ffff80000080cb23:	48 01 da             	add    rdx,rbx
ffff80000080cb26:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:397
    path = (char *) kmalloc();
ffff80000080cb28:	49 89 df             	mov    r15,rbx
ffff80000080cb2b:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080cb30:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff80000080cb37:	ff ff ff 
ffff80000080cb3a:	48 01 da             	add    rdx,rbx
ffff80000080cb3d:	ff d2                	call   rdx
ffff80000080cb3f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:399

    if(path == NULL)
ffff80000080cb43:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080cb48:	75 0c                	jne    ffff80000080cb56 <sys_chdir+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:400
        return -ENOMEM;
ffff80000080cb4a:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
ffff80000080cb51:	e9 28 01 00 00       	jmp    ffff80000080cc7e <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:401
    memset(path,0,PAGE_4K_SIZE);
ffff80000080cb56:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cb5a:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080cb5f:	be 00 00 00 00       	mov    esi,0x0
ffff80000080cb64:	48 89 c7             	mov    rdi,rax
ffff80000080cb67:	49 89 df             	mov    r15,rbx
ffff80000080cb6a:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff80000080cb71:	ff ff ff 
ffff80000080cb74:	48 01 d8             	add    rax,rbx
ffff80000080cb77:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:402
    pathlen = strlen(filename);
ffff80000080cb79:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080cb7d:	48 89 c7             	mov    rdi,rax
ffff80000080cb80:	49 89 df             	mov    r15,rbx
ffff80000080cb83:	48 b8 24 25 ef ff ff 	movabs rax,0xffffffffffef2524
ffff80000080cb8a:	ff ff ff 
ffff80000080cb8d:	48 01 d8             	add    rax,rbx
ffff80000080cb90:	ff d0                	call   rax
ffff80000080cb92:	48 98                	cdqe   
ffff80000080cb94:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:403
    if(pathlen <= 0)
ffff80000080cb98:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080cb9d:	7f 25                	jg     ffff80000080cbc4 <sys_chdir+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:405
    {
        kmfree(path);
ffff80000080cb9f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cba3:	48 89 c7             	mov    rdi,rax
ffff80000080cba6:	49 89 df             	mov    r15,rbx
ffff80000080cba9:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff80000080cbb0:	ff ff ff 
ffff80000080cbb3:	48 01 d8             	add    rax,rbx
ffff80000080cbb6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:406
        return -EFAULT;
ffff80000080cbb8:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080cbbf:	e9 ba 00 00 00       	jmp    ffff80000080cc7e <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:408
    }
    else if(pathlen >= PAGE_4K_SIZE)
ffff80000080cbc4:	48 81 7d e0 ff 0f 00 	cmp    QWORD PTR [rbp-0x20],0xfff
ffff80000080cbcb:	00 
ffff80000080cbcc:	7e 25                	jle    ffff80000080cbf3 <sys_chdir+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:410
    {
        kmfree(path);
ffff80000080cbce:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cbd2:	48 89 c7             	mov    rdi,rax
ffff80000080cbd5:	49 89 df             	mov    r15,rbx
ffff80000080cbd8:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff80000080cbdf:	ff ff ff 
ffff80000080cbe2:	48 01 d8             	add    rax,rbx
ffff80000080cbe5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:411
        return -ENAMETOOLONG;
ffff80000080cbe7:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
ffff80000080cbee:	e9 8b 00 00 00       	jmp    ffff80000080cc7e <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:413
    }
    strcpy(filename,path);
ffff80000080cbf3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080cbf7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080cbfb:	48 89 d6             	mov    rsi,rdx
ffff80000080cbfe:	48 89 c7             	mov    rdi,rax
ffff80000080cc01:	49 89 df             	mov    r15,rbx
ffff80000080cc04:	48 b8 57 22 ef ff ff 	movabs rax,0xffffffffffef2257
ffff80000080cc0b:	ff ff ff 
ffff80000080cc0e:	48 01 d8             	add    rax,rbx
ffff80000080cc11:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:415

    dentry = path_walk(path,0);
ffff80000080cc13:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cc17:	be 00 00 00 00       	mov    esi,0x0
ffff80000080cc1c:	48 89 c7             	mov    rdi,rax
ffff80000080cc1f:	49 89 df             	mov    r15,rbx
ffff80000080cc22:	48 b8 a9 a2 ee ff ff 	movabs rax,0xffffffffffeea2a9
ffff80000080cc29:	ff ff ff 
ffff80000080cc2c:	48 01 d8             	add    rax,rbx
ffff80000080cc2f:	ff d0                	call   rax
ffff80000080cc31:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:416
    kmfree(path);
ffff80000080cc35:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cc39:	48 89 c7             	mov    rdi,rax
ffff80000080cc3c:	49 89 df             	mov    r15,rbx
ffff80000080cc3f:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff80000080cc46:	ff ff ff 
ffff80000080cc49:	48 01 d8             	add    rax,rbx
ffff80000080cc4c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:418

    if(dentry == NULL)
ffff80000080cc4e:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080cc53:	75 09                	jne    ffff80000080cc5e <sys_chdir+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:419
        return -ENOENT;
ffff80000080cc55:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
ffff80000080cc5c:	eb 20                	jmp    ffff80000080cc7e <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:420
    if(dentry->dir_inode->attribute != FS_ATTR_DIR)
ffff80000080cc5e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080cc62:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080cc66:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cc6a:	48 83 f8 02          	cmp    rax,0x2
ffff80000080cc6e:	74 09                	je     ffff80000080cc79 <sys_chdir+0x1b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:421
        return -ENOTDIR;
ffff80000080cc70:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
ffff80000080cc77:	eb 05                	jmp    ffff80000080cc7e <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:422
    return 0;
ffff80000080cc79:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:423
}
ffff80000080cc7e:	48 83 c4 30          	add    rsp,0x30
ffff80000080cc82:	5b                   	pop    rbx
ffff80000080cc83:	41 5f                	pop    r15
ffff80000080cc85:	5d                   	pop    rbp
ffff80000080cc86:	c3                   	ret    

ffff80000080cc87 <sys_getdents>:
sys_getdents():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:426

unsigned long sys_getdents(int fd, void * dirent, long count)
{
ffff80000080cc87:	f3 0f 1e fa          	endbr64 
ffff80000080cc8b:	55                   	push   rbp
ffff80000080cc8c:	48 89 e5             	mov    rbp,rsp
ffff80000080cc8f:	48 83 ec 30          	sub    rsp,0x30
ffff80000080cc93:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cc93 <sys_getdents+0xc>
ffff80000080cc9a:	49 bb bd 42 11 00 00 	movabs r11,0x1142bd
ffff80000080cca1:	00 00 00 
ffff80000080cca4:	4c 01 d8             	add    rax,r11
ffff80000080cca7:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080ccaa:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080ccae:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:427
    struct file * filp = NULL;
ffff80000080ccb2:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080ccb9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:428
    unsigned long ret = 0;
ffff80000080ccba:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080ccc1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:431

//	printf("sys_getdents:%d\n",fd);
    if(fd < 0 || fd > MAX_TASKS)
ffff80000080ccc2:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080ccc6:	78 06                	js     ffff80000080ccce <sys_getdents+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:431 (discriminator 1)
ffff80000080ccc8:	83 7d ec 20          	cmp    DWORD PTR [rbp-0x14],0x20
ffff80000080cccc:	7e 0c                	jle    ffff80000080ccda <sys_getdents+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:432
        return -EBADF;
ffff80000080ccce:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080ccd5:	e9 85 00 00 00       	jmp    ffff80000080cd5f <sys_getdents+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:433
    if(count < 0)
ffff80000080ccda:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080ccdf:	79 09                	jns    ffff80000080ccea <sys_getdents+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:434
        return -EINVAL;
ffff80000080cce1:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080cce8:	eb 75                	jmp    ffff80000080cd5f <sys_getdents+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:436

    filp = current->openf[fd];
ffff80000080ccea:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff80000080ccf1:	ff ff ff 
ffff80000080ccf4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ccf8:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ccfb:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffff80000080ccfe:	48 63 c9             	movsxd rcx,ecx
ffff80000080cd01:	48 83 c1 1e          	add    rcx,0x1e
ffff80000080cd05:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff80000080cd0a:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:437
    if(filp->f_ops && filp->f_ops->readdir)
ffff80000080cd0e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080cd12:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080cd16:	48 85 d2             	test   rdx,rdx
ffff80000080cd19:	74 40                	je     ffff80000080cd5b <sys_getdents+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:437 (discriminator 1)
ffff80000080cd1b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080cd1f:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080cd23:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080cd27:	48 85 d2             	test   rdx,rdx
ffff80000080cd2a:	74 2f                	je     ffff80000080cd5b <sys_getdents+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:438
        ret = filp->f_ops->readdir(filp,dirent,&fill_dentry);
ffff80000080cd2c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080cd30:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080cd34:	4c 8b 42 30          	mov    r8,QWORD PTR [rdx+0x30]
ffff80000080cd38:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080cd3c:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080cd40:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080cd47:	ff ff ff 
ffff80000080cd4a:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080cd4e:	48 89 c2             	mov    rdx,rax
ffff80000080cd51:	48 89 cf             	mov    rdi,rcx
ffff80000080cd54:	41 ff d0             	call   r8
ffff80000080cd57:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:439
    return ret;
ffff80000080cd5b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:440
}
ffff80000080cd5f:	c9                   	leave  
ffff80000080cd60:	c3                   	ret    

ffff80000080cd61 <sys_mmap>:
sys_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:442

void *sys_mmap(void *addr, size_t len, int prot, int flags,int fildes, off_t off){
ffff80000080cd61:	f3 0f 1e fa          	endbr64 
ffff80000080cd65:	55                   	push   rbp
ffff80000080cd66:	48 89 e5             	mov    rbp,rsp
ffff80000080cd69:	41 57                	push   r15
ffff80000080cd6b:	41 56                	push   r14
ffff80000080cd6d:	41 55                	push   r13
ffff80000080cd6f:	41 54                	push   r12
ffff80000080cd71:	53                   	push   rbx
ffff80000080cd72:	48 83 ec 58          	sub    rsp,0x58
ffff80000080cd76:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080cd76 <sys_mmap+0x15>
ffff80000080cd7d:	49 bb da 41 11 00 00 	movabs r11,0x1141da
ffff80000080cd84:	00 00 00 
ffff80000080cd87:	4c 01 db             	add    rbx,r11
ffff80000080cd8a:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffff80000080cd8e:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
ffff80000080cd92:	89 55 9c             	mov    DWORD PTR [rbp-0x64],edx
ffff80000080cd95:	89 4d 98             	mov    DWORD PTR [rbp-0x68],ecx
ffff80000080cd98:	44 89 45 94          	mov    DWORD PTR [rbp-0x6c],r8d
ffff80000080cd9c:	4c 89 4d 88          	mov    QWORD PTR [rbp-0x78],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:443
    int attr=PAGE_PRESENT|PAGE_FOR_ALL;
ffff80000080cda0:	c7 45 c4 05 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x5
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:445
    if((prot|PROT_WRITE)||(prot|PROT_EXEC))
        attr|=PAGE_RWX;
ffff80000080cda7:	83 4d c4 02          	or     DWORD PTR [rbp-0x3c],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:446
    if(addr){
ffff80000080cdab:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff80000080cdb0:	0f 84 15 01 00 00    	je     ffff80000080cecb <sys_mmap+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:447
        if(chk_mmap(addr,len)){
ffff80000080cdb6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080cdba:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080cdbe:	48 89 d6             	mov    rsi,rdx
ffff80000080cdc1:	48 89 c7             	mov    rdi,rax
ffff80000080cdc4:	49 89 df             	mov    r15,rbx
ffff80000080cdc7:	48 b8 cf 6a ee ff ff 	movabs rax,0xffffffffffee6acf
ffff80000080cdce:	ff ff ff 
ffff80000080cdd1:	48 01 d8             	add    rax,rbx
ffff80000080cdd4:	ff d0                	call   rax
ffff80000080cdd6:	85 c0                	test   eax,eax
ffff80000080cdd8:	0f 84 8f 00 00 00    	je     ffff80000080ce6d <sys_mmap+0x10c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:448
            int pgc=(len-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff80000080cdde:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080cde2:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080cde8:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080cdec:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:449
            for(int i=0;i<pgc;i++){
ffff80000080cdef:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff80000080cdf6:	eb 68                	jmp    ffff80000080ce60 <sys_mmap+0xff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:450 (discriminator 3)
                smmap(pmalloc(),addr+i*PAGE_4K_SIZE,attr,current->pml4);
ffff80000080cdf8:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff80000080cdff:	ff ff ff 
ffff80000080ce02:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ce06:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ce09:	4c 8b a8 e0 00 00 00 	mov    r13,QWORD PTR [rax+0xe0]
ffff80000080ce10:	44 8b 65 c4          	mov    r12d,DWORD PTR [rbp-0x3c]
ffff80000080ce14:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080ce17:	c1 e0 0c             	shl    eax,0xc
ffff80000080ce1a:	48 63 d0             	movsxd rdx,eax
ffff80000080ce1d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ce21:	48 01 d0             	add    rax,rdx
ffff80000080ce24:	49 89 c6             	mov    r14,rax
ffff80000080ce27:	49 89 df             	mov    r15,rbx
ffff80000080ce2a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ce2f:	48 ba ed 1e ee ff ff 	movabs rdx,0xffffffffffee1eed
ffff80000080ce36:	ff ff ff 
ffff80000080ce39:	48 01 da             	add    rdx,rbx
ffff80000080ce3c:	ff d2                	call   rdx
ffff80000080ce3e:	4c 89 e9             	mov    rcx,r13
ffff80000080ce41:	44 89 e2             	mov    edx,r12d
ffff80000080ce44:	4c 89 f6             	mov    rsi,r14
ffff80000080ce47:	48 89 c7             	mov    rdi,rax
ffff80000080ce4a:	49 89 df             	mov    r15,rbx
ffff80000080ce4d:	48 b8 77 0e ee ff ff 	movabs rax,0xffffffffffee0e77
ffff80000080ce54:	ff ff ff 
ffff80000080ce57:	48 01 d8             	add    rax,rbx
ffff80000080ce5a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:449 (discriminator 3)
            for(int i=0;i<pgc;i++){
ffff80000080ce5c:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:449 (discriminator 1)
ffff80000080ce60:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080ce63:	3b 45 bc             	cmp    eax,DWORD PTR [rbp-0x44]
ffff80000080ce66:	7c 90                	jl     ffff80000080cdf8 <sys_mmap+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:453

            }
            goto sync_f;
ffff80000080ce68:	e9 0d 01 00 00       	jmp    ffff80000080cf7a <sys_mmap+0x219>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:456
        }
        if(flags|MAP_FIXED){
            set_errno(-ENOMEM);
ffff80000080ce6d:	bf cf ff ff ff       	mov    edi,0xffffffcf
ffff80000080ce72:	49 89 df             	mov    r15,rbx
ffff80000080ce75:	48 b8 86 71 ee ff ff 	movabs rax,0xffffffffffee7186
ffff80000080ce7c:	ff ff ff 
ffff80000080ce7f:	48 01 d8             	add    rax,rbx
ffff80000080ce82:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:457
            return MAP_FAILED;
ffff80000080ce84:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080ce8b:	e9 ee 00 00 00       	jmp    ffff80000080cf7e <sys_mmap+0x21d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:463
        }
    }
    //寻找一块空的虚拟内存
    while (!chk_mmap(addr,len))
    {
        addr+=PAGE_4K_SIZE;
ffff80000080ce90:	48 81 45 a8 00 10 00 	add    QWORD PTR [rbp-0x58],0x1000
ffff80000080ce97:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:464
        if(addr>=KNL_BASE){
ffff80000080ce98:	48 b8 ff ff ff ff ff 	movabs rax,0xffff7fffffffffff
ffff80000080ce9f:	7f ff ff 
ffff80000080cea2:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff80000080cea6:	76 23                	jbe    ffff80000080cecb <sys_mmap+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:465
            set_errno(-ENOMEM);
ffff80000080cea8:	bf cf ff ff ff       	mov    edi,0xffffffcf
ffff80000080cead:	49 89 df             	mov    r15,rbx
ffff80000080ceb0:	48 b8 86 71 ee ff ff 	movabs rax,0xffffffffffee7186
ffff80000080ceb7:	ff ff ff 
ffff80000080ceba:	48 01 d8             	add    rax,rbx
ffff80000080cebd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:466
            return MAP_FAILED;
ffff80000080cebf:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080cec6:	e9 b3 00 00 00       	jmp    ffff80000080cf7e <sys_mmap+0x21d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:461
    while (!chk_mmap(addr,len))
ffff80000080cecb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080cecf:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080ced3:	48 89 d6             	mov    rsi,rdx
ffff80000080ced6:	48 89 c7             	mov    rdi,rax
ffff80000080ced9:	49 89 df             	mov    r15,rbx
ffff80000080cedc:	48 b8 cf 6a ee ff ff 	movabs rax,0xffffffffffee6acf
ffff80000080cee3:	ff ff ff 
ffff80000080cee6:	48 01 d8             	add    rax,rbx
ffff80000080cee9:	ff d0                	call   rax
ffff80000080ceeb:	85 c0                	test   eax,eax
ffff80000080ceed:	74 a1                	je     ffff80000080ce90 <sys_mmap+0x12f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:469
        }
    }
    int pgc=(len-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff80000080ceef:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080cef3:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080cef9:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080cefd:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:470
    for(int i=0;i<pgc;i++){
ffff80000080cf00:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
ffff80000080cf07:	eb 68                	jmp    ffff80000080cf71 <sys_mmap+0x210>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:471 (discriminator 3)
        smmap(pmalloc(),addr+i*PAGE_4K_SIZE,attr,current->pml4);
ffff80000080cf09:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff80000080cf10:	ff ff ff 
ffff80000080cf13:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cf17:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cf1a:	4c 8b a8 e0 00 00 00 	mov    r13,QWORD PTR [rax+0xe0]
ffff80000080cf21:	44 8b 65 c4          	mov    r12d,DWORD PTR [rbp-0x3c]
ffff80000080cf25:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff80000080cf28:	c1 e0 0c             	shl    eax,0xc
ffff80000080cf2b:	48 63 d0             	movsxd rdx,eax
ffff80000080cf2e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080cf32:	48 01 d0             	add    rax,rdx
ffff80000080cf35:	49 89 c6             	mov    r14,rax
ffff80000080cf38:	49 89 df             	mov    r15,rbx
ffff80000080cf3b:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080cf40:	48 ba ed 1e ee ff ff 	movabs rdx,0xffffffffffee1eed
ffff80000080cf47:	ff ff ff 
ffff80000080cf4a:	48 01 da             	add    rdx,rbx
ffff80000080cf4d:	ff d2                	call   rdx
ffff80000080cf4f:	4c 89 e9             	mov    rcx,r13
ffff80000080cf52:	44 89 e2             	mov    edx,r12d
ffff80000080cf55:	4c 89 f6             	mov    rsi,r14
ffff80000080cf58:	48 89 c7             	mov    rdi,rax
ffff80000080cf5b:	49 89 df             	mov    r15,rbx
ffff80000080cf5e:	48 b8 77 0e ee ff ff 	movabs rax,0xffffffffffee0e77
ffff80000080cf65:	ff ff ff 
ffff80000080cf68:	48 01 d8             	add    rax,rbx
ffff80000080cf6b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:470 (discriminator 3)
    for(int i=0;i<pgc;i++){
ffff80000080cf6d:	83 45 c8 01          	add    DWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:470 (discriminator 1)
ffff80000080cf71:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff80000080cf74:	3b 45 c0             	cmp    eax,DWORD PTR [rbp-0x40]
ffff80000080cf77:	7c 90                	jl     ffff80000080cf09 <sys_mmap+0x1a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:473
    }
sync_f:
ffff80000080cf79:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:476
    if(flags|MAP_ANNONYMOUS){
        //不需要映射到文件，匿名映射
        return addr;
ffff80000080cf7a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:484
    //目前先一致读取
    sys_lseek(fildes,off,SEEK_SET);
    sys_read(fildes,addr,len);
    return addr;
    
}
ffff80000080cf7e:	48 83 c4 58          	add    rsp,0x58
ffff80000080cf82:	5b                   	pop    rbx
ffff80000080cf83:	41 5c                	pop    r12
ffff80000080cf85:	41 5d                	pop    r13
ffff80000080cf87:	41 5e                	pop    r14
ffff80000080cf89:	41 5f                	pop    r15
ffff80000080cf8b:	5d                   	pop    rbp
ffff80000080cf8c:	c3                   	ret    

ffff80000080cf8d <init_ramfs>:
init_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:28
};
struct index_node_operations ramfs_iops={
        .lookup=lookup_inode_ramfs,.create=create_inode_ramfs
};
struct index_node* test;
void init_ramfs(){
ffff80000080cf8d:	f3 0f 1e fa          	endbr64 
ffff80000080cf91:	55                   	push   rbp
ffff80000080cf92:	48 89 e5             	mov    rbp,rsp
ffff80000080cf95:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cf95 <init_ramfs+0x8>
ffff80000080cf9c:	49 bb bb 3f 11 00 00 	movabs r11,0x113fbb
ffff80000080cfa3:	00 00 00 
ffff80000080cfa6:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:31
    //挂载新文件系统到/mnt,设备为/dev/ram

    ramfs_sb.sb_ops=&ramfs_fops;
ffff80000080cfa9:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff80000080cfb0:	ff ff ff 
ffff80000080cfb3:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cfb7:	48 b9 08 fd ff ff ff 	movabs rcx,0xfffffffffffffd08
ffff80000080cfbe:	ff ff ff 
ffff80000080cfc1:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080cfc5:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:32
    ramfs_sb.root=dmnt;
ffff80000080cfc9:	48 ba c8 fe ff ff ff 	movabs rdx,0xfffffffffffffec8
ffff80000080cfd0:	ff ff ff 
ffff80000080cfd3:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cfd7:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080cfda:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff80000080cfe1:	ff ff ff 
ffff80000080cfe4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cfe8:	48 89 0a             	mov    QWORD PTR [rdx],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:33
    ramfs_sb.p_dev=&bd_ramdisk;
ffff80000080cfeb:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff80000080cff2:	ff ff ff 
ffff80000080cff5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cff9:	48 b9 a0 ff ff ff ff 	movabs rcx,0xffffffffffffffa0
ffff80000080d000:	ff ff ff 
ffff80000080d003:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080d007:	48 89 4a 18          	mov    QWORD PTR [rdx+0x18],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:34
    ramfs_sb.dev=dev_ramdisk;
ffff80000080d00b:	48 ba b0 fe ff ff ff 	movabs rdx,0xfffffffffffffeb0
ffff80000080d012:	ff ff ff 
ffff80000080d015:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d019:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080d01b:	89 d1                	mov    ecx,edx
ffff80000080d01d:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff80000080d024:	ff ff ff 
ffff80000080d027:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080d02b:	66 89 48 10          	mov    WORD PTR [rax+0x10],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:45
    // test->sb=&ramfs_sb;
    // test->attribute=FS_ATTR_FILE;
    // test->inode_ops=&ramfs_iops;
    //设置一下dmnt的inode的操作，查找的时候会用到
    // dmnt->dir_inode->inode_ops=&ramfs_iops;
}
ffff80000080d02f:	90                   	nop
ffff80000080d030:	5d                   	pop    rbp
ffff80000080d031:	c3                   	ret    

ffff80000080d032 <create_inode_ramfs>:
create_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:47

long create_inode_ramfs(struct index_node * inode,struct dir_entry * dentry,int mode){}
ffff80000080d032:	f3 0f 1e fa          	endbr64 
ffff80000080d036:	55                   	push   rbp
ffff80000080d037:	48 89 e5             	mov    rbp,rsp
ffff80000080d03a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d03a <create_inode_ramfs+0x8>
ffff80000080d041:	49 bb 16 3f 11 00 00 	movabs r11,0x113f16
ffff80000080d048:	00 00 00 
ffff80000080d04b:	4c 01 d8             	add    rax,r11
ffff80000080d04e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080d052:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080d056:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080d059:	90                   	nop
ffff80000080d05a:	5d                   	pop    rbp
ffff80000080d05b:	c3                   	ret    

ffff80000080d05c <lookup_inode_ramfs>:
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:48
struct dir_entry* lookup_inode_ramfs(struct index_node * parent_inode,struct dir_entry * dest_dentry){
ffff80000080d05c:	f3 0f 1e fa          	endbr64 
ffff80000080d060:	55                   	push   rbp
ffff80000080d061:	48 89 e5             	mov    rbp,rsp
ffff80000080d064:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d064 <lookup_inode_ramfs+0x8>
ffff80000080d06b:	49 bb ec 3e 11 00 00 	movabs r11,0x113eec
ffff80000080d072:	00 00 00 
ffff80000080d075:	4c 01 d8             	add    rax,r11
ffff80000080d078:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080d07c:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:49
    list_init(&dest_dentry->subdirs_list);
ffff80000080d080:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080d084:	48 83 c2 28          	add    rdx,0x28
ffff80000080d088:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff80000080d08c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080d090:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff80000080d097:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080d09b:	48 c7 42 10 00 00 00 	mov    QWORD PTR [rdx+0x10],0x0
ffff80000080d0a2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff80000080d0a3:	90                   	nop
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:50
    list_init(&dest_dentry->child_node);
ffff80000080d0a4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080d0a8:	48 83 c2 10          	add    rdx,0x10
ffff80000080d0ac:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff80000080d0b0:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d0b4:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff80000080d0bb:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d0bf:	48 c7 42 10 00 00 00 	mov    QWORD PTR [rdx+0x10],0x0
ffff80000080d0c6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff80000080d0c7:	90                   	nop
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:51
    dest_dentry->dir_inode=test;
ffff80000080d0c8:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff80000080d0cf:	ff ff ff 
ffff80000080d0d2:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080d0d6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d0d9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d0dd:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:52
    dest_dentry->child_node.data=dest_dentry;
ffff80000080d0e1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d0e5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080d0e9:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:53
    return dest_dentry;
ffff80000080d0ed:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:54
}
ffff80000080d0f1:	5d                   	pop    rbp
ffff80000080d0f2:	c3                   	ret    

ffff80000080d0f3 <open_ramfs>:
open_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:55
long open_ramfs(struct index_node * inode,struct file * filp){
ffff80000080d0f3:	f3 0f 1e fa          	endbr64 
ffff80000080d0f7:	55                   	push   rbp
ffff80000080d0f8:	48 89 e5             	mov    rbp,rsp
ffff80000080d0fb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d0fb <open_ramfs+0x8>
ffff80000080d102:	49 bb 55 3e 11 00 00 	movabs r11,0x113e55
ffff80000080d109:	00 00 00 
ffff80000080d10c:	4c 01 d8             	add    rax,r11
ffff80000080d10f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080d113:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:56
    filp->f_ops=inode->f_ops;
ffff80000080d117:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d11b:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080d11f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d123:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:57
    filp->position=0;
ffff80000080d127:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d12b:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:58
    return 1;
ffff80000080d132:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:59
}
ffff80000080d137:	5d                   	pop    rbp
ffff80000080d138:	c3                   	ret    

ffff80000080d139 <close_ramfs>:
close_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:61

long close_ramfs(struct index_node * inode,struct file * filp){
ffff80000080d139:	f3 0f 1e fa          	endbr64 
ffff80000080d13d:	55                   	push   rbp
ffff80000080d13e:	48 89 e5             	mov    rbp,rsp
ffff80000080d141:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d141 <close_ramfs+0x8>
ffff80000080d148:	49 bb 0f 3e 11 00 00 	movabs r11,0x113e0f
ffff80000080d14f:	00 00 00 
ffff80000080d152:	4c 01 d8             	add    rax,r11
ffff80000080d155:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080d159:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:62
    return 0;
ffff80000080d15d:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:63
}
ffff80000080d162:	5d                   	pop    rbp
ffff80000080d163:	c3                   	ret    

ffff80000080d164 <read_ramfs>:
read_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:65
//注意一下:position是指针
long read_ramfs(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080d164:	f3 0f 1e fa          	endbr64 
ffff80000080d168:	55                   	push   rbp
ffff80000080d169:	48 89 e5             	mov    rbp,rsp
ffff80000080d16c:	41 57                	push   r15
ffff80000080d16e:	48 83 ec 28          	sub    rsp,0x28
ffff80000080d172:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d172 <read_ramfs+0xe>
ffff80000080d179:	49 bb de 3d 11 00 00 	movabs r11,0x113dde
ffff80000080d180:	00 00 00 
ffff80000080d183:	4c 01 d8             	add    rax,r11
ffff80000080d186:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080d18a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080d18e:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff80000080d192:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:66
    blkdev_read(filp->dentry->dir_inode->dev,*position,count,buf);
ffff80000080d196:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080d19a:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d19d:	48 89 d6             	mov    rsi,rdx
ffff80000080d1a0:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d1a4:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080d1a8:	48 8b 52 40          	mov    rdx,QWORD PTR [rdx+0x40]
ffff80000080d1ac:	0f b7 52 18          	movzx  edx,WORD PTR [rdx+0x18]
ffff80000080d1b0:	0f b7 fa             	movzx  edi,dx
ffff80000080d1b3:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080d1b7:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080d1bb:	49 89 c7             	mov    r15,rax
ffff80000080d1be:	49 b8 d3 d0 ee ff ff 	movabs r8,0xffffffffffeed0d3
ffff80000080d1c5:	ff ff ff 
ffff80000080d1c8:	49 01 c0             	add    r8,rax
ffff80000080d1cb:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:73
    if(len>count)len=count;
    for(int i=0;i<len;i++){
        buf[i]=_binary_bin_test_elf_start[i + *position];
    }
    *position+=len; */
    return 0;
ffff80000080d1ce:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:74
}
ffff80000080d1d3:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080d1d7:	c9                   	leave  
ffff80000080d1d8:	c3                   	ret    

ffff80000080d1d9 <write_ramfs>:
write_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:75
long write_ramfs(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080d1d9:	f3 0f 1e fa          	endbr64 
ffff80000080d1dd:	55                   	push   rbp
ffff80000080d1de:	48 89 e5             	mov    rbp,rsp
ffff80000080d1e1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d1e1 <write_ramfs+0x8>
ffff80000080d1e8:	49 bb 6f 3d 11 00 00 	movabs r11,0x113d6f
ffff80000080d1ef:	00 00 00 
ffff80000080d1f2:	4c 01 d8             	add    rax,r11
ffff80000080d1f5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080d1f9:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080d1fd:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080d201:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:76
    return 0;
ffff80000080d205:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:77
}
ffff80000080d20a:	5d                   	pop    rbp
ffff80000080d20b:	c3                   	ret    

ffff80000080d20c <ioctl_ramfs>:
ioctl_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:78
long ioctl_ramfs(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff80000080d20c:	f3 0f 1e fa          	endbr64 
ffff80000080d210:	55                   	push   rbp
ffff80000080d211:	48 89 e5             	mov    rbp,rsp
ffff80000080d214:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d214 <ioctl_ramfs+0x8>
ffff80000080d21b:	49 bb 3c 3d 11 00 00 	movabs r11,0x113d3c
ffff80000080d222:	00 00 00 
ffff80000080d225:	4c 01 d8             	add    rax,r11
ffff80000080d228:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080d22c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080d230:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080d234:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:79
    return 0;
ffff80000080d238:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:80
ffff80000080d23d:	5d                   	pop    rbp
ffff80000080d23e:	c3                   	ret    

ffff80000080d23f <ramdisk_do_req>:
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:22
long ramdisk_size;
int dev_ramdisk=-1;
struct blk_dev bd_ramdisk={
    .do_request=ramdisk_do_req
};
void ramdisk_do_req(struct request* req){
ffff80000080d23f:	f3 0f 1e fa          	endbr64 
ffff80000080d243:	55                   	push   rbp
ffff80000080d244:	48 89 e5             	mov    rbp,rsp
ffff80000080d247:	48 83 ec 40          	sub    rsp,0x40
ffff80000080d24b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d24b <ramdisk_do_req+0xc>
ffff80000080d252:	49 bb 05 3d 11 00 00 	movabs r11,0x113d05
ffff80000080d259:	00 00 00 
ffff80000080d25c:	4c 01 d8             	add    rax,r11
ffff80000080d25f:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:23
    if(!req)
ffff80000080d263:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080d268:	0f 84 1b 02 00 00    	je     ffff80000080d489 <ramdisk_do_req+0x24a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:25
        return;
    start_request(req->dev);
ffff80000080d26e:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d272:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080d275:	0f b7 d2             	movzx  edx,dx
ffff80000080d278:	66 89 55 e6          	mov    WORD PTR [rbp-0x1a],dx
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:70
    int major=BLKDEV_MAJOR(dev);
    blk_devs[major].current_request->dev=-1;
    blk_devs[major].current_request=blk_devs[major].current_request->next;
}
__attribute__((__always_inline__))inline void start_request(unsigned short dev){
    wait_on_req(blk_devs[BLKDEV_MAJOR(dev)].current_request->waiting);
ffff80000080d27c:	0f b7 55 e6          	movzx  edx,WORD PTR [rbp-0x1a]
ffff80000080d280:	c1 fa 04             	sar    edx,0x4
ffff80000080d283:	89 d1                	mov    ecx,edx
ffff80000080d285:	83 e1 0f             	and    ecx,0xf
ffff80000080d288:	48 ba 90 ff ff ff ff 	movabs rdx,0xffffffffffffff90
ffff80000080d28f:	ff ff ff 
ffff80000080d292:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080d296:	48 63 d1             	movsxd rdx,ecx
ffff80000080d299:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d29d:	48 01 f2             	add    rdx,rsi
ffff80000080d2a0:	48 83 c2 08          	add    rdx,0x8
ffff80000080d2a4:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d2a7:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080d2ab:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
wait_on_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:195
    unsigned int argv;
    unsigned int argc;
}proc_ret_stack;

__attribute__((__always_inline__))inline void wait_on_req(struct process* p){
        if(p->stat==TASK_READY||p->stat==TASK_RUNNING)
ffff80000080d2af:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080d2b3:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080d2b6:	83 fa 02             	cmp    edx,0x2
ffff80000080d2b9:	74 0c                	je     ffff80000080d2c7 <ramdisk_do_req+0x88>
ffff80000080d2bb:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080d2bf:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080d2c2:	83 fa 01             	cmp    edx,0x1
ffff80000080d2c5:	75 0b                	jne    ffff80000080d2d2 <ramdisk_do_req+0x93>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:196
            p->stat=TASK_SUSPENDED;
ffff80000080d2c7:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080d2cb:	c7 42 18 03 00 00 00 	mov    DWORD PTR [rdx+0x18],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:197
}
ffff80000080d2d2:	90                   	nop
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:71
ffff80000080d2d3:	90                   	nop
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:26
    switch (req->cmd)
ffff80000080d2d4:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d2d8:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080d2db:	85 d2                	test   edx,edx
ffff80000080d2dd:	74 0a                	je     ffff80000080d2e9 <ramdisk_do_req+0xaa>
ffff80000080d2df:	83 fa 01             	cmp    edx,0x1
ffff80000080d2e2:	74 6e                	je     ffff80000080d352 <ramdisk_do_req+0x113>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:43
        for(int i=0;i<lenw;i++){
            ramdisk_base[i + basew]=req->buffer[i];
        }
        break;
    default:
        break;
ffff80000080d2e4:	e9 d1 00 00 00       	jmp    ffff80000080d3ba <ramdisk_do_req+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:29
        int len= req->nr_sectors*SECTOR_SIZE;
ffff80000080d2e9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d2ed:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080d2f1:	c1 e2 09             	shl    edx,0x9
ffff80000080d2f4:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:30
        int base=req->sector*SECTOR_SIZE;
ffff80000080d2f7:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d2fb:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080d2ff:	c1 e2 09             	shl    edx,0x9
ffff80000080d302:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31
        for(int i=0;i<len;i++){
ffff80000080d305:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080d30c:	eb 3a                	jmp    ffff80000080d348 <ramdisk_do_req+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:32 (discriminator 3)
            req->buffer[i]=ramdisk_base[i + base];
ffff80000080d30e:	48 ba e0 ff ff ff ff 	movabs rdx,0xffffffffffffffe0
ffff80000080d315:	ff ff ff 
ffff80000080d318:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d31c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080d31f:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
ffff80000080d322:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080d325:	01 f2                	add    edx,esi
ffff80000080d327:	48 63 d2             	movsxd rdx,edx
ffff80000080d32a:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080d32e:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d332:	48 8b 4a 28          	mov    rcx,QWORD PTR [rdx+0x28]
ffff80000080d336:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080d339:	48 63 d2             	movsxd rdx,edx
ffff80000080d33c:	48 01 d1             	add    rcx,rdx
ffff80000080d33f:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff80000080d342:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31 (discriminator 3)
        for(int i=0;i<len;i++){
ffff80000080d344:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31 (discriminator 1)
ffff80000080d348:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080d34b:	3b 55 ec             	cmp    edx,DWORD PTR [rbp-0x14]
ffff80000080d34e:	7c be                	jl     ffff80000080d30e <ramdisk_do_req+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:34
        break;
ffff80000080d350:	eb 68                	jmp    ffff80000080d3ba <ramdisk_do_req+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:36
        int lenw= req->nr_sectors*BLOCK_SIZE;
ffff80000080d352:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d356:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080d35a:	c1 e2 0c             	shl    edx,0xc
ffff80000080d35d:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:37
        int basew=req->sector*BLOCK_SIZE;
ffff80000080d360:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d364:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080d368:	c1 e2 0c             	shl    edx,0xc
ffff80000080d36b:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:38
        for(int i=0;i<lenw;i++){
ffff80000080d36e:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080d375:	eb 3a                	jmp    ffff80000080d3b1 <ramdisk_do_req+0x172>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:39 (discriminator 3)
            ramdisk_base[i + basew]=req->buffer[i];
ffff80000080d377:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d37b:	48 8b 4a 28          	mov    rcx,QWORD PTR [rdx+0x28]
ffff80000080d37f:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080d382:	48 63 d2             	movsxd rdx,edx
ffff80000080d385:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080d389:	48 ba e0 ff ff ff ff 	movabs rdx,0xffffffffffffffe0
ffff80000080d390:	ff ff ff 
ffff80000080d393:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d397:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080d39a:	8b 7d f8             	mov    edi,DWORD PTR [rbp-0x8]
ffff80000080d39d:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080d3a0:	01 fa                	add    edx,edi
ffff80000080d3a2:	48 63 d2             	movsxd rdx,edx
ffff80000080d3a5:	48 01 d1             	add    rcx,rdx
ffff80000080d3a8:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff80000080d3ab:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:38 (discriminator 3)
        for(int i=0;i<lenw;i++){
ffff80000080d3ad:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:38 (discriminator 1)
ffff80000080d3b1:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080d3b4:	3b 55 f4             	cmp    edx,DWORD PTR [rbp-0xc]
ffff80000080d3b7:	7c be                	jl     ffff80000080d377 <ramdisk_do_req+0x138>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:41
        break;
ffff80000080d3b9:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:45
    }
    end_request(req->dev);
ffff80000080d3ba:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d3be:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080d3c1:	0f b7 d2             	movzx  edx,dx
ffff80000080d3c4:	66 89 55 d6          	mov    WORD PTR [rbp-0x2a],dx
end_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:65
    int major=BLKDEV_MAJOR(dev);
ffff80000080d3c8:	0f b7 55 d6          	movzx  edx,WORD PTR [rbp-0x2a]
ffff80000080d3cc:	c1 fa 04             	sar    edx,0x4
ffff80000080d3cf:	83 e2 0f             	and    edx,0xf
ffff80000080d3d2:	89 55 d0             	mov    DWORD PTR [rbp-0x30],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:66
    blk_devs[major].current_request->dev=-1;
ffff80000080d3d5:	48 ba 90 ff ff ff ff 	movabs rdx,0xffffffffffffff90
ffff80000080d3dc:	ff ff ff 
ffff80000080d3df:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d3e3:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080d3e6:	48 63 d2             	movsxd rdx,edx
ffff80000080d3e9:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d3ed:	48 01 ca             	add    rdx,rcx
ffff80000080d3f0:	48 83 c2 08          	add    rdx,0x8
ffff80000080d3f4:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d3f7:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:67
    blk_devs[major].current_request=blk_devs[major].current_request->next;
ffff80000080d3fc:	48 ba 90 ff ff ff ff 	movabs rdx,0xffffffffffffff90
ffff80000080d403:	ff ff ff 
ffff80000080d406:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d40a:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080d40d:	48 63 d2             	movsxd rdx,edx
ffff80000080d410:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d414:	48 01 ca             	add    rdx,rcx
ffff80000080d417:	48 83 c2 08          	add    rdx,0x8
ffff80000080d41b:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d41e:	48 8b 52 38          	mov    rdx,QWORD PTR [rdx+0x38]
ffff80000080d422:	48 b9 90 ff ff ff ff 	movabs rcx,0xffffffffffffff90
ffff80000080d429:	ff ff ff 
ffff80000080d42c:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080d430:	8b 4d d0             	mov    ecx,DWORD PTR [rbp-0x30]
ffff80000080d433:	48 63 c9             	movsxd rcx,ecx
ffff80000080d436:	48 c1 e1 04          	shl    rcx,0x4
ffff80000080d43a:	48 01 f1             	add    rcx,rsi
ffff80000080d43d:	48 83 c1 08          	add    rcx,0x8
ffff80000080d441:	48 89 11             	mov    QWORD PTR [rcx],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:68
}
ffff80000080d444:	90                   	nop
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:46
    ramdisk_do_req(blk_devs[dev_ramdisk].current_request);
ffff80000080d445:	48 ba b0 fe ff ff ff 	movabs rdx,0xfffffffffffffeb0
ffff80000080d44c:	ff ff ff 
ffff80000080d44f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d453:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080d455:	48 b9 90 ff ff ff ff 	movabs rcx,0xffffffffffffff90
ffff80000080d45c:	ff ff ff 
ffff80000080d45f:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080d463:	48 63 d2             	movsxd rdx,edx
ffff80000080d466:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d46a:	48 01 ca             	add    rdx,rcx
ffff80000080d46d:	48 83 c2 08          	add    rdx,0x8
ffff80000080d471:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d474:	48 89 d7             	mov    rdi,rdx
ffff80000080d477:	48 ba ef c2 ee ff ff 	movabs rdx,0xffffffffffeec2ef
ffff80000080d47e:	ff ff ff 
ffff80000080d481:	48 8d 04 10          	lea    rax,[rax+rdx*1]
ffff80000080d485:	ff d0                	call   rax
ffff80000080d487:	eb 01                	jmp    ffff80000080d48a <ramdisk_do_req+0x24b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:24
        return;
ffff80000080d489:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:47
}
ffff80000080d48a:	c9                   	leave  
ffff80000080d48b:	c3                   	ret    

ffff80000080d48c <init_ramdisk>:
init_ramdisk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:48
void init_ramdisk(){
ffff80000080d48c:	f3 0f 1e fa          	endbr64 
ffff80000080d490:	55                   	push   rbp
ffff80000080d491:	48 89 e5             	mov    rbp,rsp
ffff80000080d494:	41 57                	push   r15
ffff80000080d496:	41 54                	push   r12
ffff80000080d498:	53                   	push   rbx
ffff80000080d499:	48 83 ec 18          	sub    rsp,0x18
ffff80000080d49d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d49d <init_ramdisk+0x11>
ffff80000080d4a4:	49 bb b3 3a 11 00 00 	movabs r11,0x113ab3
ffff80000080d4ab:	00 00 00 
ffff80000080d4ae:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:50
    //初始化ramdisk，在/dev下创建一个ram
    ramdisk_base= KNL_BASE+0x81000000;//(char *) kmallocat(0, 100);
ffff80000080d4b1:	48 b8 e0 ff ff ff ff 	movabs rax,0xffffffffffffffe0
ffff80000080d4b8:	ff ff ff 
ffff80000080d4bb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d4bf:	48 be 00 00 00 81 00 	movabs rsi,0xffff800081000000
ffff80000080d4c6:	80 ff ff 
ffff80000080d4c9:	48 89 30             	mov    QWORD PTR [rax],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:51
    if(ramdisk_base==-1){
ffff80000080d4cc:	48 b8 e0 ff ff ff ff 	movabs rax,0xffffffffffffffe0
ffff80000080d4d3:	ff ff ff 
ffff80000080d4d6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d4da:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d4dd:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
ffff80000080d4e1:	75 2d                	jne    ffff80000080d510 <init_ramdisk+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:52
        comprintf("failed to init ramdisk.\n");
ffff80000080d4e3:	48 b8 32 d7 ff ff ff 	movabs rax,0xffffffffffffd732
ffff80000080d4ea:	ff ff ff 
ffff80000080d4ed:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080d4f1:	48 89 c7             	mov    rdi,rax
ffff80000080d4f4:	49 89 df             	mov    r15,rbx
ffff80000080d4f7:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d4fc:	48 ba b3 1c ef ff ff 	movabs rdx,0xffffffffffef1cb3
ffff80000080d503:	ff ff ff 
ffff80000080d506:	48 01 da             	add    rdx,rbx
ffff80000080d509:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:53
        return;
ffff80000080d50b:	e9 a3 01 00 00       	jmp    ffff80000080d6b3 <init_ramdisk+0x227>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:55
    }
    ramdisk_size= (char*)_binary_rd_img_end - (char*)_binary_rd_img_start;//PAGE_4K_SIZE*100;
ffff80000080d510:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff80000080d517:	ff ff ff 
ffff80000080d51a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d51e:	48 89 c2             	mov    rdx,rax
ffff80000080d521:	48 b8 30 fe ff ff ff 	movabs rax,0xfffffffffffffe30
ffff80000080d528:	ff ff ff 
ffff80000080d52b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d52f:	48 29 c2             	sub    rdx,rax
ffff80000080d532:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff80000080d539:	ff ff ff 
ffff80000080d53c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d540:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:56
    if((dev_ramdisk=reg_blkdev(&bd_ramdisk))<0){
ffff80000080d543:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080d54a:	ff ff ff 
ffff80000080d54d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d551:	48 89 c7             	mov    rdi,rax
ffff80000080d554:	49 89 df             	mov    r15,rbx
ffff80000080d557:	48 b8 6e c7 ee ff ff 	movabs rax,0xffffffffffeec76e
ffff80000080d55e:	ff ff ff 
ffff80000080d561:	48 01 d8             	add    rax,rbx
ffff80000080d564:	ff d0                	call   rax
ffff80000080d566:	48 ba b0 fe ff ff ff 	movabs rdx,0xfffffffffffffeb0
ffff80000080d56d:	ff ff ff 
ffff80000080d570:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080d574:	89 02                	mov    DWORD PTR [rdx],eax
ffff80000080d576:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff80000080d57d:	ff ff ff 
ffff80000080d580:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d584:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080d586:	85 c0                	test   eax,eax
ffff80000080d588:	79 2d                	jns    ffff80000080d5b7 <init_ramdisk+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:57
        comprintf("no place for more blkdev.\n");
ffff80000080d58a:	48 b8 4b d7 ff ff ff 	movabs rax,0xffffffffffffd74b
ffff80000080d591:	ff ff ff 
ffff80000080d594:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080d598:	48 89 c7             	mov    rdi,rax
ffff80000080d59b:	49 89 df             	mov    r15,rbx
ffff80000080d59e:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d5a3:	48 ba b3 1c ef ff ff 	movabs rdx,0xffffffffffef1cb3
ffff80000080d5aa:	ff ff ff 
ffff80000080d5ad:	48 01 da             	add    rdx,rbx
ffff80000080d5b0:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:58
        return;
ffff80000080d5b2:	e9 fc 00 00 00       	jmp    ffff80000080d6b3 <init_ramdisk+0x227>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:60
    }
    for(int i=0;i<(ramdisk_size+PAGE_4K_SIZE-1)/PAGE_4K_SIZE;i++){
ffff80000080d5b7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080d5be:	e9 b8 00 00 00       	jmp    ffff80000080d67b <init_ramdisk+0x1ef>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:61 (discriminator 3)
        smmap(pmalloc(),ramdisk_base+i*PAGE_4K_SIZE,PAGE_PRESENT|PAGE_RWX,PML4_ADDR);
ffff80000080d5c3:	48 b8 e0 ff ff ff ff 	movabs rax,0xffffffffffffffe0
ffff80000080d5ca:	ff ff ff 
ffff80000080d5cd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d5d1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d5d4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d5d7:	c1 e0 0c             	shl    eax,0xc
ffff80000080d5da:	48 98                	cdqe   
ffff80000080d5dc:	48 01 d0             	add    rax,rdx
ffff80000080d5df:	49 89 c4             	mov    r12,rax
ffff80000080d5e2:	49 89 df             	mov    r15,rbx
ffff80000080d5e5:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d5ea:	48 ba ed 1e ee ff ff 	movabs rdx,0xffffffffffee1eed
ffff80000080d5f1:	ff ff ff 
ffff80000080d5f4:	48 01 da             	add    rdx,rbx
ffff80000080d5f7:	ff d2                	call   rdx
ffff80000080d5f9:	48 89 c7             	mov    rdi,rax
ffff80000080d5fc:	48 b8 00 10 10 00 00 	movabs rax,0xffff800000101000
ffff80000080d603:	80 ff ff 
ffff80000080d606:	48 89 c1             	mov    rcx,rax
ffff80000080d609:	ba 03 00 00 00       	mov    edx,0x3
ffff80000080d60e:	4c 89 e6             	mov    rsi,r12
ffff80000080d611:	49 89 df             	mov    r15,rbx
ffff80000080d614:	48 b8 77 0e ee ff ff 	movabs rax,0xffffffffffee0e77
ffff80000080d61b:	ff ff ff 
ffff80000080d61e:	48 01 d8             	add    rax,rbx
ffff80000080d621:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:63 (discriminator 3)
        //解压img里面的test程序
        memcpy(ramdisk_base+i*PAGE_4K_SIZE, _binary_rd_img_start+i*PAGE_4K_SIZE,PAGE_4K_SIZE);
ffff80000080d623:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d626:	c1 e0 0c             	shl    eax,0xc
ffff80000080d629:	48 63 d0             	movsxd rdx,eax
ffff80000080d62c:	48 b8 30 fe ff ff ff 	movabs rax,0xfffffffffffffe30
ffff80000080d633:	ff ff ff 
ffff80000080d636:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d63a:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000080d63e:	48 b8 e0 ff ff ff ff 	movabs rax,0xffffffffffffffe0
ffff80000080d645:	ff ff ff 
ffff80000080d648:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d64c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d64f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d652:	c1 e0 0c             	shl    eax,0xc
ffff80000080d655:	48 98                	cdqe   
ffff80000080d657:	48 01 d0             	add    rax,rdx
ffff80000080d65a:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080d65f:	48 89 ce             	mov    rsi,rcx
ffff80000080d662:	48 89 c7             	mov    rdi,rax
ffff80000080d665:	49 89 df             	mov    r15,rbx
ffff80000080d668:	48 b8 53 21 ef ff ff 	movabs rax,0xffffffffffef2153
ffff80000080d66f:	ff ff ff 
ffff80000080d672:	48 01 d8             	add    rax,rbx
ffff80000080d675:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:60 (discriminator 3)
    for(int i=0;i<(ramdisk_size+PAGE_4K_SIZE-1)/PAGE_4K_SIZE;i++){
ffff80000080d677:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:60 (discriminator 1)
ffff80000080d67b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d67e:	48 63 d0             	movsxd rdx,eax
ffff80000080d681:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff80000080d688:	ff ff ff 
ffff80000080d68b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d68f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d692:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080d698:	48 8d 88 ff 0f 00 00 	lea    rcx,[rax+0xfff]
ffff80000080d69f:	48 85 c0             	test   rax,rax
ffff80000080d6a2:	48 0f 48 c1          	cmovs  rax,rcx
ffff80000080d6a6:	48 c1 f8 0c          	sar    rax,0xc
ffff80000080d6aa:	48 39 c2             	cmp    rdx,rax
ffff80000080d6ad:	0f 8c 10 ff ff ff    	jl     ffff80000080d5c3 <init_ramdisk+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:68

    }

    
}
ffff80000080d6b3:	48 83 c4 18          	add    rsp,0x18
ffff80000080d6b7:	5b                   	pop    rbx
ffff80000080d6b8:	41 5c                	pop    r12
ffff80000080d6ba:	41 5f                	pop    r15
ffff80000080d6bc:	5d                   	pop    rbp
ffff80000080d6bd:	c3                   	ret    

ffff80000080d6be <reg_blkdev>:
reg_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:5
#include <blk_dev.h>
#include <errno.h>
struct blk_dev blk_devs[MAX_BLKDEVS];
struct request requests[MAX_REQUESTS];
int reg_blkdev(struct blk_dev* dev){
ffff80000080d6be:	f3 0f 1e fa          	endbr64 
ffff80000080d6c2:	55                   	push   rbp
ffff80000080d6c3:	48 89 e5             	mov    rbp,rsp
ffff80000080d6c6:	53                   	push   rbx
ffff80000080d6c7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d6c7 <reg_blkdev+0x9>
ffff80000080d6ce:	49 bb 89 38 11 00 00 	movabs r11,0x113889
ffff80000080d6d5:	00 00 00 
ffff80000080d6d8:	4c 01 d8             	add    rax,r11
ffff80000080d6db:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6
    for(int i=0;i<MAX_BLKDEVS;i++){
ffff80000080d6df:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080d6e6:	e9 80 00 00 00       	jmp    ffff80000080d76b <reg_blkdev+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:7
        if(blk_devs[i].do_request)continue;
ffff80000080d6eb:	48 ba 90 ff ff ff ff 	movabs rdx,0xffffffffffffff90
ffff80000080d6f2:	ff ff ff 
ffff80000080d6f5:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d6f9:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080d6fc:	48 63 d2             	movsxd rdx,edx
ffff80000080d6ff:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d703:	48 01 ca             	add    rdx,rcx
ffff80000080d706:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d709:	48 85 d2             	test   rdx,rdx
ffff80000080d70c:	75 58                	jne    ffff80000080d766 <reg_blkdev+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:8
        blk_devs[i]=*dev;
ffff80000080d70e:	48 ba 90 ff ff ff ff 	movabs rdx,0xffffffffffffff90
ffff80000080d715:	ff ff ff 
ffff80000080d718:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d71c:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080d71f:	48 63 d2             	movsxd rdx,edx
ffff80000080d722:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d726:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080d72a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080d72e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080d731:	48 8b 5a 08          	mov    rbx,QWORD PTR [rdx+0x8]
ffff80000080d735:	48 89 0e             	mov    QWORD PTR [rsi],rcx
ffff80000080d738:	48 89 5e 08          	mov    QWORD PTR [rsi+0x8],rbx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:9
        blk_devs[i].current_request=NULL;
ffff80000080d73c:	48 ba 90 ff ff ff ff 	movabs rdx,0xffffffffffffff90
ffff80000080d743:	ff ff ff 
ffff80000080d746:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d74a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff80000080d74d:	48 98                	cdqe   
ffff80000080d74f:	48 c1 e0 04          	shl    rax,0x4
ffff80000080d753:	48 01 d0             	add    rax,rdx
ffff80000080d756:	48 83 c0 08          	add    rax,0x8
ffff80000080d75a:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:10
        return i;
ffff80000080d761:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff80000080d764:	eb 14                	jmp    ffff80000080d77a <reg_blkdev+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:7
        if(blk_devs[i].do_request)continue;
ffff80000080d766:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6
    for(int i=0;i<MAX_BLKDEVS;i++){
ffff80000080d767:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6 (discriminator 1)
ffff80000080d76b:	83 7d f4 0b          	cmp    DWORD PTR [rbp-0xc],0xb
ffff80000080d76f:	0f 8e 76 ff ff ff    	jle    ffff80000080d6eb <reg_blkdev+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:12
    }
    return -ENOMEM;
ffff80000080d775:	b8 cf ff ff ff       	mov    eax,0xffffffcf
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:13
}
ffff80000080d77a:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff80000080d77e:	c9                   	leave  
ffff80000080d77f:	c3                   	ret    

ffff80000080d780 <unreg_blkdev>:
unreg_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:14
int unreg_blkdev(unsigned short dev){
ffff80000080d780:	f3 0f 1e fa          	endbr64 
ffff80000080d784:	55                   	push   rbp
ffff80000080d785:	48 89 e5             	mov    rbp,rsp
ffff80000080d788:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d788 <unreg_blkdev+0x8>
ffff80000080d78f:	49 bb c8 37 11 00 00 	movabs r11,0x1137c8
ffff80000080d796:	00 00 00 
ffff80000080d799:	4c 01 d8             	add    rax,r11
ffff80000080d79c:	89 fa                	mov    edx,edi
ffff80000080d79e:	66 89 55 fc          	mov    WORD PTR [rbp-0x4],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:15
    if(blk_devs[dev].current_request)
ffff80000080d7a2:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffff80000080d7a6:	48 b9 90 ff ff ff ff 	movabs rcx,0xffffffffffffff90
ffff80000080d7ad:	ff ff ff 
ffff80000080d7b0:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080d7b4:	48 63 d2             	movsxd rdx,edx
ffff80000080d7b7:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d7bb:	48 01 ca             	add    rdx,rcx
ffff80000080d7be:	48 83 c2 08          	add    rdx,0x8
ffff80000080d7c2:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d7c5:	48 85 d2             	test   rdx,rdx
ffff80000080d7c8:	74 07                	je     ffff80000080d7d1 <unreg_blkdev+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:16
        return -EBUSY;//设备还有没完成的请求
ffff80000080d7ca:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
ffff80000080d7cf:	eb 23                	jmp    ffff80000080d7f4 <unreg_blkdev+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:17
    blk_devs[dev].do_request=0;//清除
ffff80000080d7d1:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffff80000080d7d5:	48 b9 90 ff ff ff ff 	movabs rcx,0xffffffffffffff90
ffff80000080d7dc:	ff ff ff 
ffff80000080d7df:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080d7e3:	48 63 c2             	movsxd rax,edx
ffff80000080d7e6:	48 c1 e0 04          	shl    rax,0x4
ffff80000080d7ea:	48 01 c8             	add    rax,rcx
ffff80000080d7ed:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:18
}
ffff80000080d7f4:	5d                   	pop    rbp
ffff80000080d7f5:	c3                   	ret    

ffff80000080d7f6 <make_request>:
make_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:19
int make_request(unsigned short dev,int cmd,unsigned long sector, unsigned long count,char * buffer){
ffff80000080d7f6:	f3 0f 1e fa          	endbr64 
ffff80000080d7fa:	55                   	push   rbp
ffff80000080d7fb:	48 89 e5             	mov    rbp,rsp
ffff80000080d7fe:	48 83 ec 40          	sub    rsp,0x40
ffff80000080d802:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d802 <make_request+0xc>
ffff80000080d809:	49 bb 4e 37 11 00 00 	movabs r11,0x11374e
ffff80000080d810:	00 00 00 
ffff80000080d813:	4c 01 d8             	add    rax,r11
ffff80000080d816:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080d819:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffff80000080d81d:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffff80000080d821:	4c 89 45 c0          	mov    QWORD PTR [rbp-0x40],r8
ffff80000080d825:	89 fa                	mov    edx,edi
ffff80000080d827:	66 89 55 dc          	mov    WORD PTR [rbp-0x24],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:20
    struct blk_dev* d=&blk_devs[BLKDEV_MAJOR(dev)];
ffff80000080d82b:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080d82f:	c1 fa 04             	sar    edx,0x4
ffff80000080d832:	83 e2 0f             	and    edx,0xf
ffff80000080d835:	48 63 d2             	movsxd rdx,edx
ffff80000080d838:	48 89 d1             	mov    rcx,rdx
ffff80000080d83b:	48 c1 e1 04          	shl    rcx,0x4
ffff80000080d83f:	48 ba 90 ff ff ff ff 	movabs rdx,0xffffffffffffff90
ffff80000080d846:	ff ff ff 
ffff80000080d849:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d84d:	48 01 ca             	add    rdx,rcx
ffff80000080d850:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:21
    if(!d->do_request)
ffff80000080d854:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080d858:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d85b:	48 85 d2             	test   rdx,rdx
ffff80000080d85e:	75 0a                	jne    ffff80000080d86a <make_request+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:22
        return -ENODEV;//没有这个设备
ffff80000080d860:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080d865:	e9 53 01 00 00       	jmp    ffff80000080d9bd <make_request+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:24
    //找一个空的请求
    struct request* req=NULL;
ffff80000080d86a:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080d871:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080d872:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080d879:	eb 4c                	jmp    ffff80000080d8c7 <make_request+0xd1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:26
        if(requests[i].dev==(unsigned short)-1){
ffff80000080d87b:	48 ba c8 fd ff ff ff 	movabs rdx,0xfffffffffffffdc8
ffff80000080d882:	ff ff ff 
ffff80000080d885:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d889:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080d88c:	48 63 d2             	movsxd rdx,edx
ffff80000080d88f:	48 c1 e2 06          	shl    rdx,0x6
ffff80000080d893:	48 01 ca             	add    rdx,rcx
ffff80000080d896:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080d899:	66 83 fa ff          	cmp    dx,0xffff
ffff80000080d89d:	75 24                	jne    ffff80000080d8c3 <make_request+0xcd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:27
            req=requests+i;
ffff80000080d89f:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080d8a2:	48 63 d2             	movsxd rdx,edx
ffff80000080d8a5:	48 89 d1             	mov    rcx,rdx
ffff80000080d8a8:	48 c1 e1 06          	shl    rcx,0x6
ffff80000080d8ac:	48 ba c8 fd ff ff ff 	movabs rdx,0xfffffffffffffdc8
ffff80000080d8b3:	ff ff ff 
ffff80000080d8b6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d8ba:	48 01 ca             	add    rdx,rcx
ffff80000080d8bd:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:28
            break;
ffff80000080d8c1:	eb 0a                	jmp    ffff80000080d8cd <make_request+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25 (discriminator 2)
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080d8c3:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25 (discriminator 1)
ffff80000080d8c7:	83 7d f4 3f          	cmp    DWORD PTR [rbp-0xc],0x3f
ffff80000080d8cb:	7e ae                	jle    ffff80000080d87b <make_request+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:32
        }
    }
    //下面的处理不太好。感觉最好是等到有空位置为止。
    if(!req)
ffff80000080d8cd:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080d8d2:	75 0a                	jne    ffff80000080d8de <make_request+0xe8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:33
        return -ENOMEM;//没有空的请求位置。
ffff80000080d8d4:	b8 cf ff ff ff       	mov    eax,0xffffffcf
ffff80000080d8d9:	e9 df 00 00 00       	jmp    ffff80000080d9bd <make_request+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:38
    /*
    检查有没有请求正在运行，有的话接到后面，没有的话直接接上去，前面请求完成之后顺着链表下一个，
    这样就能保证所有请求都可以被访问到。
    */
    req->dev=dev;
ffff80000080d8de:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d8e2:	0f b7 4d dc          	movzx  ecx,WORD PTR [rbp-0x24]
ffff80000080d8e6:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:39
    req->cmd=cmd;
ffff80000080d8e9:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d8ed:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffff80000080d8f0:	89 4a 04             	mov    DWORD PTR [rdx+0x4],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:40
    req->buffer=buffer;
ffff80000080d8f3:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d8f7:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff80000080d8fb:	48 89 4a 28          	mov    QWORD PTR [rdx+0x28],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:41
    req->count=count;
ffff80000080d8ff:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d903:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080d907:	48 89 4a 20          	mov    QWORD PTR [rdx+0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:42
    req->next=NULL;
ffff80000080d90b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d90f:	48 c7 42 38 00 00 00 	mov    QWORD PTR [rdx+0x38],0x0
ffff80000080d916:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:43
    req->nr_sectors=TO_BLKN(count);
ffff80000080d917:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d91b:	48 81 c2 ff 0f 00 00 	add    rdx,0xfff
ffff80000080d922:	48 89 d1             	mov    rcx,rdx
ffff80000080d925:	48 c1 e9 0c          	shr    rcx,0xc
ffff80000080d929:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d92d:	48 89 4a 18          	mov    QWORD PTR [rdx+0x18],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:44
    req->sector=sector;
ffff80000080d931:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d935:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080d939:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:45
    req->waiting=current;
ffff80000080d93d:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff80000080d944:	ff ff ff 
ffff80000080d947:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080d94b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d94e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d952:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:47
    //这里可能不需要阻塞进程，有的设备不需要阻塞。    
    if(!d->current_request)
ffff80000080d956:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d95a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d95e:	48 85 c0             	test   rax,rax
ffff80000080d961:	75 22                	jne    ffff80000080d985 <make_request+0x18f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:49
    {
        d->current_request=req;
ffff80000080d963:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d967:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d96b:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:50
        d->do_request(d->current_request);
ffff80000080d96f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d973:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d976:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d97a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d97e:	48 89 c7             	mov    rdi,rax
ffff80000080d981:	ff d2                	call   rdx
ffff80000080d983:	eb 33                	jmp    ffff80000080d9b8 <make_request+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:52
    }else{
        struct request* rp=d->current_request;
ffff80000080d985:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d989:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d98d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53
        for(;rp->next;rp=rp->next);
ffff80000080d991:	eb 0c                	jmp    ffff80000080d99f <make_request+0x1a9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53 (discriminator 2)
ffff80000080d993:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d997:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080d99b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53 (discriminator 1)
ffff80000080d99f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d9a3:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080d9a7:	48 85 c0             	test   rax,rax
ffff80000080d9aa:	75 e7                	jne    ffff80000080d993 <make_request+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:54
        rp->next=req;
ffff80000080d9ac:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d9b0:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d9b4:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:56
    }
    return 1;
ffff80000080d9b8:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:57
}
ffff80000080d9bd:	c9                   	leave  
ffff80000080d9be:	c3                   	ret    

ffff80000080d9bf <init_blkdev>:
init_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:58
void init_blkdev(void){
ffff80000080d9bf:	f3 0f 1e fa          	endbr64 
ffff80000080d9c3:	55                   	push   rbp
ffff80000080d9c4:	48 89 e5             	mov    rbp,rsp
ffff80000080d9c7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d9c7 <init_blkdev+0x8>
ffff80000080d9ce:	49 bb 89 35 11 00 00 	movabs r11,0x113589
ffff80000080d9d5:	00 00 00 
ffff80000080d9d8:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080d9db:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080d9e2:	eb 24                	jmp    ffff80000080da08 <init_blkdev+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:60 (discriminator 3)
        requests[i].dev=-1;
ffff80000080d9e4:	48 ba c8 fd ff ff ff 	movabs rdx,0xfffffffffffffdc8
ffff80000080d9eb:	ff ff ff 
ffff80000080d9ee:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d9f2:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080d9f5:	48 63 d2             	movsxd rdx,edx
ffff80000080d9f8:	48 c1 e2 06          	shl    rdx,0x6
ffff80000080d9fc:	48 01 ca             	add    rdx,rcx
ffff80000080d9ff:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59 (discriminator 3)
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080da04:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59 (discriminator 1)
ffff80000080da08:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff80000080da0c:	7e d6                	jle    ffff80000080d9e4 <init_blkdev+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:62
    }
ffff80000080da0e:	90                   	nop
ffff80000080da0f:	90                   	nop
ffff80000080da10:	5d                   	pop    rbp
ffff80000080da11:	c3                   	ret    

ffff80000080da12 <init_blkbuf>:
init_blkbuf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:9
#include <errno.h>
#include <memory.h>
buffer_head l_buffer_heads[MAX_BUFFERHEADS];
//这个存储的是各个块设备映射的缓冲区链表中的头
buffer_head* l_blk_bh_heads[MAX_BLKDEVS];
void init_blkbuf(){
ffff80000080da12:	f3 0f 1e fa          	endbr64 
ffff80000080da16:	55                   	push   rbp
ffff80000080da17:	48 89 e5             	mov    rbp,rsp
ffff80000080da1a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080da1a <init_blkbuf+0x8>
ffff80000080da21:	49 bb 36 35 11 00 00 	movabs r11,0x113536
ffff80000080da28:	00 00 00 
ffff80000080da2b:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080da2e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080da35:	eb 44                	jmp    ffff80000080da7b <init_blkbuf+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:11 (discriminator 3)
        l_buffer_heads[i].dev=-1;
ffff80000080da37:	48 ba b0 fd ff ff ff 	movabs rdx,0xfffffffffffffdb0
ffff80000080da3e:	ff ff ff 
ffff80000080da41:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080da45:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080da48:	48 63 d2             	movsxd rdx,edx
ffff80000080da4b:	48 c1 e2 06          	shl    rdx,0x6
ffff80000080da4f:	48 01 ca             	add    rdx,rcx
ffff80000080da52:	48 83 c2 10          	add    rdx,0x10
ffff80000080da56:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:12 (discriminator 3)
        l_blk_bh_heads[i]=NULL;
ffff80000080da5b:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff80000080da62:	ff ff ff 
ffff80000080da65:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080da69:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080da6c:	48 63 c9             	movsxd rcx,ecx
ffff80000080da6f:	48 c7 04 ca 00 00 00 	mov    QWORD PTR [rdx+rcx*8],0x0
ffff80000080da76:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10 (discriminator 3)
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080da77:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10 (discriminator 1)
ffff80000080da7b:	83 7d fc 7f          	cmp    DWORD PTR [rbp-0x4],0x7f
ffff80000080da7f:	7e b6                	jle    ffff80000080da37 <init_blkbuf+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:14
    }
}
ffff80000080da81:	90                   	nop
ffff80000080da82:	90                   	nop
ffff80000080da83:	5d                   	pop    rbp
ffff80000080da84:	c3                   	ret    

ffff80000080da85 <bget>:
bget():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:15
buffer_head *bget(){
ffff80000080da85:	f3 0f 1e fa          	endbr64 
ffff80000080da89:	55                   	push   rbp
ffff80000080da8a:	48 89 e5             	mov    rbp,rsp
ffff80000080da8d:	41 57                	push   r15
ffff80000080da8f:	53                   	push   rbx
ffff80000080da90:	48 83 ec 10          	sub    rsp,0x10
ffff80000080da94:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080da94 <bget+0xf>
ffff80000080da9b:	49 bb bc 34 11 00 00 	movabs r11,0x1134bc
ffff80000080daa2:	00 00 00 
ffff80000080daa5:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080daa8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080daaf:	e9 a2 00 00 00       	jmp    ffff80000080db56 <bget+0xd1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:17
        if(l_buffer_heads[i].dev==(unsigned short)-1)
ffff80000080dab4:	48 b8 b0 fd ff ff ff 	movabs rax,0xfffffffffffffdb0
ffff80000080dabb:	ff ff ff 
ffff80000080dabe:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080dac2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080dac5:	48 98                	cdqe   
ffff80000080dac7:	48 c1 e0 06          	shl    rax,0x6
ffff80000080dacb:	48 01 d0             	add    rax,rdx
ffff80000080dace:	48 83 c0 10          	add    rax,0x10
ffff80000080dad2:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080dad5:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000080dad9:	75 77                	jne    ffff80000080db52 <bget+0xcd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:19
        {
            l_buffer_heads[i].data=kmalloc();
ffff80000080dadb:	49 89 df             	mov    r15,rbx
ffff80000080dade:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080dae3:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff80000080daea:	ff ff ff 
ffff80000080daed:	48 01 da             	add    rdx,rbx
ffff80000080daf0:	ff d2                	call   rdx
ffff80000080daf2:	48 89 c2             	mov    rdx,rax
ffff80000080daf5:	48 b8 b0 fd ff ff ff 	movabs rax,0xfffffffffffffdb0
ffff80000080dafc:	ff ff ff 
ffff80000080daff:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080db03:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080db06:	48 98                	cdqe   
ffff80000080db08:	48 c1 e0 06          	shl    rax,0x6
ffff80000080db0c:	48 01 c8             	add    rax,rcx
ffff80000080db0f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:20
            l_buffer_heads[i].count=0;
ffff80000080db12:	48 b8 b0 fd ff ff ff 	movabs rax,0xfffffffffffffdb0
ffff80000080db19:	ff ff ff 
ffff80000080db1c:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080db20:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080db23:	48 98                	cdqe   
ffff80000080db25:	48 c1 e0 06          	shl    rax,0x6
ffff80000080db29:	48 01 d0             	add    rax,rdx
ffff80000080db2c:	48 83 c0 14          	add    rax,0x14
ffff80000080db30:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:21
            return l_buffer_heads+i;
ffff80000080db33:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080db36:	48 98                	cdqe   
ffff80000080db38:	48 c1 e0 06          	shl    rax,0x6
ffff80000080db3c:	48 89 c2             	mov    rdx,rax
ffff80000080db3f:	48 b8 b0 fd ff ff ff 	movabs rax,0xfffffffffffffdb0
ffff80000080db46:	ff ff ff 
ffff80000080db49:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080db4d:	48 01 d0             	add    rax,rdx
ffff80000080db50:	eb 13                	jmp    ffff80000080db65 <bget+0xe0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16 (discriminator 2)
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080db52:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16 (discriminator 1)
ffff80000080db56:	83 7d ec 7f          	cmp    DWORD PTR [rbp-0x14],0x7f
ffff80000080db5a:	0f 8e 54 ff ff ff    	jle    ffff80000080dab4 <bget+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:25
        }
    }
    //errno = -ENOBUF
    return NULL;
ffff80000080db60:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:26
}
ffff80000080db65:	48 83 c4 10          	add    rsp,0x10
ffff80000080db69:	5b                   	pop    rbx
ffff80000080db6a:	41 5f                	pop    r15
ffff80000080db6c:	5d                   	pop    rbp
ffff80000080db6d:	c3                   	ret    

ffff80000080db6e <get_block>:
get_block():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:28

buffer_head *get_block(unsigned short dev,int blocknr){
ffff80000080db6e:	f3 0f 1e fa          	endbr64 
ffff80000080db72:	55                   	push   rbp
ffff80000080db73:	48 89 e5             	mov    rbp,rsp
ffff80000080db76:	41 57                	push   r15
ffff80000080db78:	53                   	push   rbx
ffff80000080db79:	48 83 ec 20          	sub    rsp,0x20
ffff80000080db7d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080db7d <get_block+0xf>
ffff80000080db84:	49 bb d3 33 11 00 00 	movabs r11,0x1133d3
ffff80000080db8b:	00 00 00 
ffff80000080db8e:	4c 01 db             	add    rbx,r11
ffff80000080db91:	89 f8                	mov    eax,edi
ffff80000080db93:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080db96:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:29
    buffer_head *bh=l_blk_bh_heads[BLKDEV_MAJOR(dev)];
ffff80000080db9a:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080db9e:	c1 f8 04             	sar    eax,0x4
ffff80000080dba1:	83 e0 0f             	and    eax,0xf
ffff80000080dba4:	89 c2                	mov    edx,eax
ffff80000080dba6:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080dbad:	ff ff ff 
ffff80000080dbb0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080dbb4:	48 63 d2             	movsxd rdx,edx
ffff80000080dbb7:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffff80000080dbbb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:30
    if(!bh){
ffff80000080dbbf:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080dbc4:	75 7c                	jne    ffff80000080dc42 <get_block+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:32
        //这个设备没有任何的缓冲区
        bh=bget();
ffff80000080dbc6:	49 89 df             	mov    r15,rbx
ffff80000080dbc9:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080dbce:	48 ba 35 cb ee ff ff 	movabs rdx,0xffffffffffeecb35
ffff80000080dbd5:	ff ff ff 
ffff80000080dbd8:	48 01 da             	add    rdx,rbx
ffff80000080dbdb:	ff d2                	call   rdx
ffff80000080dbdd:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:33
        if(!bh){
ffff80000080dbe1:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080dbe6:	75 0a                	jne    ffff80000080dbf2 <get_block+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:35
            //errno=-ENOBUFS
            return NULL;
ffff80000080dbe8:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080dbed:	e9 f0 00 00 00       	jmp    ffff80000080dce2 <get_block+0x174>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:37
        }
        bh->dev=dev;
ffff80000080dbf2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dbf6:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080dbfa:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:38
        bh->blocknr=blocknr;
ffff80000080dbfe:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080dc01:	48 63 d0             	movsxd rdx,eax
ffff80000080dc04:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dc08:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:39
        l_blk_bh_heads[BLKDEV_MAJOR(dev)]=bh;
ffff80000080dc0c:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080dc10:	c1 f8 04             	sar    eax,0x4
ffff80000080dc13:	83 e0 0f             	and    eax,0xf
ffff80000080dc16:	89 c2                	mov    edx,eax
ffff80000080dc18:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080dc1f:	ff ff ff 
ffff80000080dc22:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080dc26:	48 63 d2             	movsxd rdx,edx
ffff80000080dc29:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080dc2d:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
ffff80000080dc31:	e9 96 00 00 00       	jmp    ffff80000080dccc <get_block+0x15e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:41 (discriminator 3)
    }else{
        for(;bh->next&&bh->blocknr!=blocknr;bh=bh->next);
ffff80000080dc36:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dc3a:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080dc3e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:41 (discriminator 1)
ffff80000080dc42:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dc46:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080dc4a:	48 85 c0             	test   rax,rax
ffff80000080dc4d:	74 12                	je     ffff80000080dc61 <get_block+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:41 (discriminator 2)
ffff80000080dc4f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dc53:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080dc57:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080dc5a:	48 98                	cdqe   
ffff80000080dc5c:	48 39 c2             	cmp    rdx,rax
ffff80000080dc5f:	75 d5                	jne    ffff80000080dc36 <get_block+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:42
        if(bh->blocknr!=blocknr)
ffff80000080dc61:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dc65:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080dc69:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080dc6c:	48 98                	cdqe   
ffff80000080dc6e:	48 39 c2             	cmp    rdx,rax
ffff80000080dc71:	74 59                	je     ffff80000080dccc <get_block+0x15e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:46
        {
            //这块数据没有缓冲
            //这个时候肯定处于链表最后一个了
            bh->next=bget();
ffff80000080dc73:	49 89 df             	mov    r15,rbx
ffff80000080dc76:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080dc7b:	48 ba 35 cb ee ff ff 	movabs rdx,0xffffffffffeecb35
ffff80000080dc82:	ff ff ff 
ffff80000080dc85:	48 01 da             	add    rdx,rbx
ffff80000080dc88:	ff d2                	call   rdx
ffff80000080dc8a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080dc8e:	48 89 42 28          	mov    QWORD PTR [rdx+0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:47
            buffer_head *bhn=bh->next;
ffff80000080dc92:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dc96:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080dc9a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:48
            bhn->prev=bh;
ffff80000080dc9e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dca2:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080dca6:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:49
            bh=bhn;
ffff80000080dcaa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dcae:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:50
            bh->dev=dev;
ffff80000080dcb2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dcb6:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080dcba:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:51
            bh->blocknr=blocknr;
ffff80000080dcbe:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080dcc1:	48 63 d0             	movsxd rdx,eax
ffff80000080dcc4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dcc8:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:55
        }
    }
    //TODO 等待缓冲解锁
    bh->count++;
ffff80000080dccc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dcd0:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080dcd4:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080dcd7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dcdb:	88 50 14             	mov    BYTE PTR [rax+0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:56
    return bh;
ffff80000080dcde:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:57
}
ffff80000080dce2:	48 83 c4 20          	add    rsp,0x20
ffff80000080dce6:	5b                   	pop    rbx
ffff80000080dce7:	41 5f                	pop    r15
ffff80000080dce9:	5d                   	pop    rbp
ffff80000080dcea:	c3                   	ret    

ffff80000080dceb <bread>:
bread():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:59
//从指定的块设备中读取一块数据，然后返回这块数据。
buffer_head* bread(unsigned short dev,int blkn){
ffff80000080dceb:	f3 0f 1e fa          	endbr64 
ffff80000080dcef:	55                   	push   rbp
ffff80000080dcf0:	48 89 e5             	mov    rbp,rsp
ffff80000080dcf3:	41 57                	push   r15
ffff80000080dcf5:	53                   	push   rbx
ffff80000080dcf6:	48 83 ec 20          	sub    rsp,0x20
ffff80000080dcfa:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080dcfa <bread+0xf>
ffff80000080dd01:	49 bb 56 32 11 00 00 	movabs r11,0x113256
ffff80000080dd08:	00 00 00 
ffff80000080dd0b:	4c 01 db             	add    rbx,r11
ffff80000080dd0e:	89 f8                	mov    eax,edi
ffff80000080dd10:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080dd13:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:60
    if(!blk_devs[BLKDEV_MAJOR(dev)].do_request)
ffff80000080dd17:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080dd1b:	c1 f8 04             	sar    eax,0x4
ffff80000080dd1e:	83 e0 0f             	and    eax,0xf
ffff80000080dd21:	89 c2                	mov    edx,eax
ffff80000080dd23:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff80000080dd2a:	ff ff ff 
ffff80000080dd2d:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080dd31:	48 63 c2             	movsxd rax,edx
ffff80000080dd34:	48 c1 e0 04          	shl    rax,0x4
ffff80000080dd38:	48 01 c8             	add    rax,rcx
ffff80000080dd3b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080dd3e:	48 85 c0             	test   rax,rax
ffff80000080dd41:	75 07                	jne    ffff80000080dd4a <bread+0x5f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:61
        return NULL;
ffff80000080dd43:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080dd48:	eb 7a                	jmp    ffff80000080ddc4 <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:62
    buffer_head *bh=get_block(dev,blkn);
ffff80000080dd4a:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080dd4e:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080dd51:	89 d6                	mov    esi,edx
ffff80000080dd53:	89 c7                	mov    edi,eax
ffff80000080dd55:	49 89 df             	mov    r15,rbx
ffff80000080dd58:	48 b8 1e cc ee ff ff 	movabs rax,0xffffffffffeecc1e
ffff80000080dd5f:	ff ff ff 
ffff80000080dd62:	48 01 d8             	add    rax,rbx
ffff80000080dd65:	ff d0                	call   rax
ffff80000080dd67:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:63
    if(!bh)
ffff80000080dd6b:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080dd70:	75 07                	jne    ffff80000080dd79 <bread+0x8e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:64
        return NULL;
ffff80000080dd72:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080dd77:	eb 4b                	jmp    ffff80000080ddc4 <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:65
    if(bh->uptodate)
ffff80000080dd79:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dd7d:	0f b6 40 12          	movzx  eax,BYTE PTR [rax+0x12]
ffff80000080dd81:	84 c0                	test   al,al
ffff80000080dd83:	74 06                	je     ffff80000080dd8b <bread+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:66
        return bh;//数据没变，可以直接返回
ffff80000080dd85:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dd89:	eb 39                	jmp    ffff80000080ddc4 <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:69
    //这里的疑点是，可以直接返回吗？
    //应该要等数据准备完毕之后再返回的
    make_request(dev,BLKDEV_REQ_READ,blkn*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE/SECTOR_SIZE,bh->data);
ffff80000080dd8b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dd8f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080dd92:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080dd95:	c1 e0 03             	shl    eax,0x3
ffff80000080dd98:	48 63 d0             	movsxd rdx,eax
ffff80000080dd9b:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080dd9f:	49 89 c8             	mov    r8,rcx
ffff80000080dda2:	b9 08 00 00 00       	mov    ecx,0x8
ffff80000080dda7:	be 00 00 00 00       	mov    esi,0x0
ffff80000080ddac:	89 c7                	mov    edi,eax
ffff80000080ddae:	49 89 df             	mov    r15,rbx
ffff80000080ddb1:	48 b8 a6 c8 ee ff ff 	movabs rax,0xffffffffffeec8a6
ffff80000080ddb8:	ff ff ff 
ffff80000080ddbb:	48 01 d8             	add    rax,rbx
ffff80000080ddbe:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:71
    //TODO 等待读取完成
    return bh;
ffff80000080ddc0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:72
}
ffff80000080ddc4:	48 83 c4 20          	add    rsp,0x20
ffff80000080ddc8:	5b                   	pop    rbx
ffff80000080ddc9:	41 5f                	pop    r15
ffff80000080ddcb:	5d                   	pop    rbp
ffff80000080ddcc:	c3                   	ret    

ffff80000080ddcd <bwrite>:
bwrite():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:77
/*
向缓冲区写入数据。注意缓冲区的大小固定BLOCK_SIZE。
这会使得dirty置位。
*/
int bwrite(buffer_head* bh,char* src,int pos,int count){
ffff80000080ddcd:	f3 0f 1e fa          	endbr64 
ffff80000080ddd1:	55                   	push   rbp
ffff80000080ddd2:	48 89 e5             	mov    rbp,rsp
ffff80000080ddd5:	41 57                	push   r15
ffff80000080ddd7:	48 83 ec 28          	sub    rsp,0x28
ffff80000080dddb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080dddb <bwrite+0xe>
ffff80000080dde2:	49 bb 75 31 11 00 00 	movabs r11,0x113175
ffff80000080dde9:	00 00 00 
ffff80000080ddec:	4c 01 d8             	add    rax,r11
ffff80000080ddef:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080ddf3:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080ddf7:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff80000080ddfa:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:78
    if(!bh)
ffff80000080ddfd:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080de02:	75 07                	jne    ffff80000080de0b <bwrite+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:79
        return -ENOBUFS;
ffff80000080de04:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff80000080de09:	eb 5d                	jmp    ffff80000080de68 <bwrite+0x9b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:80
    if (count+pos>BLOCK_SIZE)
ffff80000080de0b:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffff80000080de0e:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080de11:	01 ca                	add    edx,ecx
ffff80000080de13:	81 fa 00 10 00 00    	cmp    edx,0x1000
ffff80000080de19:	7e 0b                	jle    ffff80000080de26 <bwrite+0x59>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:81
        count=BLOCK_SIZE-pos;//truncate
ffff80000080de1b:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080de20:	2b 55 dc             	sub    edx,DWORD PTR [rbp-0x24]
ffff80000080de23:	89 55 d8             	mov    DWORD PTR [rbp-0x28],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:82
    memcpy(bh->data+pos,src,count);
ffff80000080de26:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080de29:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080de2d:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
ffff80000080de30:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
ffff80000080de33:	48 63 c9             	movsxd rcx,ecx
ffff80000080de36:	48 8d 3c 0e          	lea    rdi,[rsi+rcx*1]
ffff80000080de3a:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080de3e:	48 89 ce             	mov    rsi,rcx
ffff80000080de41:	49 89 c7             	mov    r15,rax
ffff80000080de44:	48 b9 53 21 ef ff ff 	movabs rcx,0xffffffffffef2153
ffff80000080de4b:	ff ff ff 
ffff80000080de4e:	48 01 c1             	add    rcx,rax
ffff80000080de51:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:83
    bh->dirt=1;
ffff80000080de53:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080de57:	c6 40 13 01          	mov    BYTE PTR [rax+0x13],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:84
    bh->uptodate=0;
ffff80000080de5b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080de5f:	c6 40 12 00          	mov    BYTE PTR [rax+0x12],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:85
    return 1;
ffff80000080de63:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:86
}
ffff80000080de68:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080de6c:	c9                   	leave  
ffff80000080de6d:	c3                   	ret    

ffff80000080de6e <bflush>:
bflush():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:90
/*
立即把缓冲区里面的更新应用到块设备上。
*/
int bflush(buffer_head* bh){
ffff80000080de6e:	f3 0f 1e fa          	endbr64 
ffff80000080de72:	55                   	push   rbp
ffff80000080de73:	48 89 e5             	mov    rbp,rsp
ffff80000080de76:	41 57                	push   r15
ffff80000080de78:	48 83 ec 18          	sub    rsp,0x18
ffff80000080de7c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080de7c <bflush+0xe>
ffff80000080de83:	49 bb d4 30 11 00 00 	movabs r11,0x1130d4
ffff80000080de8a:	00 00 00 
ffff80000080de8d:	4c 01 d8             	add    rax,r11
ffff80000080de90:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:91
    if(!blk_devs[bh->dev].do_request)
ffff80000080de94:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080de98:	0f b7 52 10          	movzx  edx,WORD PTR [rdx+0x10]
ffff80000080de9c:	0f b7 d2             	movzx  edx,dx
ffff80000080de9f:	48 b9 90 ff ff ff ff 	movabs rcx,0xffffffffffffff90
ffff80000080dea6:	ff ff ff 
ffff80000080dea9:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080dead:	48 63 d2             	movsxd rdx,edx
ffff80000080deb0:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080deb4:	48 01 ca             	add    rdx,rcx
ffff80000080deb7:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080deba:	48 85 d2             	test   rdx,rdx
ffff80000080debd:	75 07                	jne    ffff80000080dec6 <bflush+0x58>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:92
        return -ENODEV;
ffff80000080debf:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080dec4:	eb 5a                	jmp    ffff80000080df20 <bflush+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:93
    if(!bh->dirt)
ffff80000080dec6:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080deca:	0f b6 52 13          	movzx  edx,BYTE PTR [rdx+0x13]
ffff80000080dece:	84 d2                	test   dl,dl
ffff80000080ded0:	75 07                	jne    ffff80000080ded9 <bflush+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:94
        return 1;
ffff80000080ded2:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080ded7:	eb 47                	jmp    ffff80000080df20 <bflush+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:95
    make_request(bh->dev,BLKDEV_REQ_WRITE,bh->blocknr*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE/SECTOR_SIZE,bh->data);
ffff80000080ded9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080dedd:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080dee0:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080dee4:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080dee8:	48 c1 e2 0c          	shl    rdx,0xc
ffff80000080deec:	48 c1 ea 09          	shr    rdx,0x9
ffff80000080def0:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080def4:	0f b7 49 10          	movzx  ecx,WORD PTR [rcx+0x10]
ffff80000080def8:	0f b7 f9             	movzx  edi,cx
ffff80000080defb:	49 89 f0             	mov    r8,rsi
ffff80000080defe:	b9 08 00 00 00       	mov    ecx,0x8
ffff80000080df03:	be 01 00 00 00       	mov    esi,0x1
ffff80000080df08:	49 89 c7             	mov    r15,rax
ffff80000080df0b:	49 b9 a6 c8 ee ff ff 	movabs r9,0xffffffffffeec8a6
ffff80000080df12:	ff ff ff 
ffff80000080df15:	49 01 c1             	add    r9,rax
ffff80000080df18:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:97
    //这个不用等
    return 1;
ffff80000080df1b:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:98
}
ffff80000080df20:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080df24:	c9                   	leave  
ffff80000080df25:	c3                   	ret    

ffff80000080df26 <bdiscard>:
bdiscard():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:100
//丢弃更改。
int bdiscard(buffer_head *bh){
ffff80000080df26:	f3 0f 1e fa          	endbr64 
ffff80000080df2a:	55                   	push   rbp
ffff80000080df2b:	48 89 e5             	mov    rbp,rsp
ffff80000080df2e:	41 57                	push   r15
ffff80000080df30:	48 83 ec 18          	sub    rsp,0x18
ffff80000080df34:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080df34 <bdiscard+0xe>
ffff80000080df3b:	49 bb 1c 30 11 00 00 	movabs r11,0x11301c
ffff80000080df42:	00 00 00 
ffff80000080df45:	4c 01 d8             	add    rax,r11
ffff80000080df48:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:101
    if(bh->dev==-1||!blk_devs[bh->dev].do_request)
ffff80000080df4c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080df50:	0f b7 52 10          	movzx  edx,WORD PTR [rdx+0x10]
ffff80000080df54:	0f b7 d2             	movzx  edx,dx
ffff80000080df57:	48 b9 90 ff ff ff ff 	movabs rcx,0xffffffffffffff90
ffff80000080df5e:	ff ff ff 
ffff80000080df61:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080df65:	48 63 d2             	movsxd rdx,edx
ffff80000080df68:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080df6c:	48 01 ca             	add    rdx,rcx
ffff80000080df6f:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080df72:	48 85 d2             	test   rdx,rdx
ffff80000080df75:	75 07                	jne    ffff80000080df7e <bdiscard+0x58>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:102
        return -ENODEV;
ffff80000080df77:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080df7c:	eb 5a                	jmp    ffff80000080dfd8 <bdiscard+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:104
    
    if(bh->uptodate)
ffff80000080df7e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080df82:	0f b6 52 12          	movzx  edx,BYTE PTR [rdx+0x12]
ffff80000080df86:	84 d2                	test   dl,dl
ffff80000080df88:	74 07                	je     ffff80000080df91 <bdiscard+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:105
        return 1;//数据没变，可以直接返回
ffff80000080df8a:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080df8f:	eb 47                	jmp    ffff80000080dfd8 <bdiscard+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:108
    //这里的疑点是，可以直接返回吗？
    //应该要等数据准备完毕之后再返回的
    make_request(bh->dev,BLKDEV_REQ_READ,bh->blocknr*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE/SECTOR_SIZE,bh->data);
ffff80000080df91:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080df95:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080df98:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080df9c:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080dfa0:	48 c1 e2 0c          	shl    rdx,0xc
ffff80000080dfa4:	48 c1 ea 09          	shr    rdx,0x9
ffff80000080dfa8:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080dfac:	0f b7 49 10          	movzx  ecx,WORD PTR [rcx+0x10]
ffff80000080dfb0:	0f b7 f9             	movzx  edi,cx
ffff80000080dfb3:	49 89 f0             	mov    r8,rsi
ffff80000080dfb6:	b9 08 00 00 00       	mov    ecx,0x8
ffff80000080dfbb:	be 00 00 00 00       	mov    esi,0x0
ffff80000080dfc0:	49 89 c7             	mov    r15,rax
ffff80000080dfc3:	49 b9 a6 c8 ee ff ff 	movabs r9,0xffffffffffeec8a6
ffff80000080dfca:	ff ff ff 
ffff80000080dfcd:	49 01 c1             	add    r9,rax
ffff80000080dfd0:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:110
    //TODO 等待读取完成
    return 1;
ffff80000080dfd3:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:111
}
ffff80000080dfd8:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080dfdc:	c9                   	leave  
ffff80000080dfdd:	c3                   	ret    

ffff80000080dfde <bupdate>:
bupdate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:113

int bupdate(buffer_head *bh){
ffff80000080dfde:	f3 0f 1e fa          	endbr64 
ffff80000080dfe2:	55                   	push   rbp
ffff80000080dfe3:	48 89 e5             	mov    rbp,rsp
ffff80000080dfe6:	41 57                	push   r15
ffff80000080dfe8:	48 83 ec 18          	sub    rsp,0x18
ffff80000080dfec:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080dfec <bupdate+0xe>
ffff80000080dff3:	49 bb 64 2f 11 00 00 	movabs r11,0x112f64
ffff80000080dffa:	00 00 00 
ffff80000080dffd:	4c 01 d8             	add    rax,r11
ffff80000080e000:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:114
    return bdiscard(bh);
ffff80000080e004:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080e008:	48 89 d7             	mov    rdi,rdx
ffff80000080e00b:	49 89 c7             	mov    r15,rax
ffff80000080e00e:	48 ba d6 cf ee ff ff 	movabs rdx,0xffffffffffeecfd6
ffff80000080e015:	ff ff ff 
ffff80000080e018:	48 01 c2             	add    rdx,rax
ffff80000080e01b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:115
}
ffff80000080e01d:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080e021:	c9                   	leave  
ffff80000080e022:	c3                   	ret    

ffff80000080e023 <blkdev_read>:
blkdev_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:119
/*
bread的更高级封装，可以不以块为单位读取到buf。
*/
int blkdev_read(unsigned short dev,off_t offset, size_t count, char *buf){
ffff80000080e023:	f3 0f 1e fa          	endbr64 
ffff80000080e027:	55                   	push   rbp
ffff80000080e028:	48 89 e5             	mov    rbp,rsp
ffff80000080e02b:	41 57                	push   r15
ffff80000080e02d:	53                   	push   rbx
ffff80000080e02e:	48 83 ec 60          	sub    rsp,0x60
ffff80000080e032:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e032 <blkdev_read+0xf>
ffff80000080e039:	49 bb 1e 2f 11 00 00 	movabs r11,0x112f1e
ffff80000080e040:	00 00 00 
ffff80000080e043:	4c 01 db             	add    rbx,r11
ffff80000080e046:	89 f8                	mov    eax,edi
ffff80000080e048:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
ffff80000080e04c:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
ffff80000080e050:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
ffff80000080e054:	66 89 45 ac          	mov    WORD PTR [rbp-0x54],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:120
    int n=TO_BLKN(count);
ffff80000080e058:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080e05c:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080e062:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080e066:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:121
    off_t blkn=BLOCK_FLOOR(offset);
ffff80000080e069:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080e06d:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff80000080e073:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:122
    off_t first_off=offset%BLOCK_SIZE;
ffff80000080e077:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080e07b:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080e080:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:123
    char* p=buf;
ffff80000080e084:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080e088:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:124
    size_t mod_count=count%BLOCK_SIZE;
ffff80000080e08c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080e090:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080e095:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:125
    int len=BLOCK_SIZE-first_off;
ffff80000080e099:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080e09d:	89 c2                	mov    edx,eax
ffff80000080e09f:	b8 00 10 00 00       	mov    eax,0x1000
ffff80000080e0a4:	29 d0                	sub    eax,edx
ffff80000080e0a6:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:126
    for(int i=0;i<n;i++){
ffff80000080e0a9:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff80000080e0b0:	e9 b5 00 00 00       	jmp    ffff80000080e16a <blkdev_read+0x147>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:127
        buffer_head *bh=bread(dev,blkn);
ffff80000080e0b5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e0b9:	89 c2                	mov    edx,eax
ffff80000080e0bb:	0f b7 45 ac          	movzx  eax,WORD PTR [rbp-0x54]
ffff80000080e0bf:	89 d6                	mov    esi,edx
ffff80000080e0c1:	89 c7                	mov    edi,eax
ffff80000080e0c3:	49 89 df             	mov    r15,rbx
ffff80000080e0c6:	48 b8 9b cd ee ff ff 	movabs rax,0xffffffffffeecd9b
ffff80000080e0cd:	ff ff ff 
ffff80000080e0d0:	48 01 d8             	add    rax,rbx
ffff80000080e0d3:	ff d0                	call   rax
ffff80000080e0d5:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:128
        if(!bh)
ffff80000080e0d9:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
ffff80000080e0de:	75 0a                	jne    ffff80000080e0ea <blkdev_read+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:129
            return -ENOBUFS;//buffer不够了
ffff80000080e0e0:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff80000080e0e5:	e9 91 00 00 00       	jmp    ffff80000080e17b <blkdev_read+0x158>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:130
        if(i==n-1)
ffff80000080e0ea:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080e0ed:	83 e8 01             	sub    eax,0x1
ffff80000080e0f0:	39 45 d0             	cmp    DWORD PTR [rbp-0x30],eax
ffff80000080e0f3:	75 09                	jne    ffff80000080e0fe <blkdev_read+0xdb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:131
            len=mod_count;
ffff80000080e0f5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080e0f9:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
ffff80000080e0fc:	eb 0d                	jmp    ffff80000080e10b <blkdev_read+0xe8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:132
        else if(i==2)
ffff80000080e0fe:	83 7d d0 02          	cmp    DWORD PTR [rbp-0x30],0x2
ffff80000080e102:	75 07                	jne    ffff80000080e10b <blkdev_read+0xe8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:133
            len=BLOCK_SIZE;
ffff80000080e104:	c7 45 d4 00 10 00 00 	mov    DWORD PTR [rbp-0x2c],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:134 (discriminator 2)
        memcpy(p,bh->data+first_off,len);
ffff80000080e10b:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080e10e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080e112:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080e115:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080e119:	48 01 c1             	add    rcx,rax
ffff80000080e11c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080e120:	48 89 ce             	mov    rsi,rcx
ffff80000080e123:	48 89 c7             	mov    rdi,rax
ffff80000080e126:	49 89 df             	mov    r15,rbx
ffff80000080e129:	48 b8 53 21 ef ff ff 	movabs rax,0xffffffffffef2153
ffff80000080e130:	ff ff ff 
ffff80000080e133:	48 01 d8             	add    rax,rbx
ffff80000080e136:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:135 (discriminator 2)
        brelse(bh);
ffff80000080e138:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080e13c:	48 89 c7             	mov    rdi,rax
ffff80000080e13f:	49 89 df             	mov    r15,rbx
ffff80000080e142:	48 b8 95 d3 ee ff ff 	movabs rax,0xffffffffffeed395
ffff80000080e149:	ff ff ff 
ffff80000080e14c:	48 01 d8             	add    rax,rbx
ffff80000080e14f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:136 (discriminator 2)
        blkn++;
ffff80000080e151:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:137 (discriminator 2)
        p+=BLOCK_SIZE;
ffff80000080e156:	48 81 45 d8 00 10 00 	add    QWORD PTR [rbp-0x28],0x1000
ffff80000080e15d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:138 (discriminator 2)
        first_off=0;
ffff80000080e15e:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080e165:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:126 (discriminator 2)
    for(int i=0;i<n;i++){
ffff80000080e166:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:126 (discriminator 1)
ffff80000080e16a:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000080e16d:	3b 45 cc             	cmp    eax,DWORD PTR [rbp-0x34]
ffff80000080e170:	0f 8c 3f ff ff ff    	jl     ffff80000080e0b5 <blkdev_read+0x92>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:140
    }
    return 1;
ffff80000080e176:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:141
}
ffff80000080e17b:	48 83 c4 60          	add    rsp,0x60
ffff80000080e17f:	5b                   	pop    rbx
ffff80000080e180:	41 5f                	pop    r15
ffff80000080e182:	5d                   	pop    rbp
ffff80000080e183:	c3                   	ret    

ffff80000080e184 <blkdev_write>:
blkdev_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:143

int blkdev_write(unsigned short dev,off_t offset, size_t count, char *buf){
ffff80000080e184:	f3 0f 1e fa          	endbr64 
ffff80000080e188:	55                   	push   rbp
ffff80000080e189:	48 89 e5             	mov    rbp,rsp
ffff80000080e18c:	41 57                	push   r15
ffff80000080e18e:	53                   	push   rbx
ffff80000080e18f:	48 83 ec 60          	sub    rsp,0x60
ffff80000080e193:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e193 <blkdev_write+0xf>
ffff80000080e19a:	49 bb bd 2d 11 00 00 	movabs r11,0x112dbd
ffff80000080e1a1:	00 00 00 
ffff80000080e1a4:	4c 01 db             	add    rbx,r11
ffff80000080e1a7:	89 f8                	mov    eax,edi
ffff80000080e1a9:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
ffff80000080e1ad:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
ffff80000080e1b1:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
ffff80000080e1b5:	66 89 45 ac          	mov    WORD PTR [rbp-0x54],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:144
    int n=TO_BLKN(count);
ffff80000080e1b9:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080e1bd:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080e1c3:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080e1c7:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:145
    off_t blkn=BLOCK_FLOOR(offset);
ffff80000080e1ca:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080e1ce:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff80000080e1d4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:146
    off_t first_off=offset%BLOCK_SIZE;
ffff80000080e1d8:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080e1dc:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080e1e1:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:147
    char* p=buf;
ffff80000080e1e5:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080e1e9:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:148
    size_t mod_count=count%BLOCK_SIZE;
ffff80000080e1ed:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080e1f1:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080e1f6:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:149
    int len=BLOCK_SIZE-first_off;
ffff80000080e1fa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080e1fe:	89 c2                	mov    edx,eax
ffff80000080e200:	b8 00 10 00 00       	mov    eax,0x1000
ffff80000080e205:	29 d0                	sub    eax,edx
ffff80000080e207:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:150
    for(int i=0;i<n;i++){
ffff80000080e20a:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff80000080e211:	e9 b5 00 00 00       	jmp    ffff80000080e2cb <blkdev_write+0x147>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:151
        buffer_head *bh=get_block(dev,blkn);
ffff80000080e216:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e21a:	89 c2                	mov    edx,eax
ffff80000080e21c:	0f b7 45 ac          	movzx  eax,WORD PTR [rbp-0x54]
ffff80000080e220:	89 d6                	mov    esi,edx
ffff80000080e222:	89 c7                	mov    edi,eax
ffff80000080e224:	49 89 df             	mov    r15,rbx
ffff80000080e227:	48 b8 1e cc ee ff ff 	movabs rax,0xffffffffffeecc1e
ffff80000080e22e:	ff ff ff 
ffff80000080e231:	48 01 d8             	add    rax,rbx
ffff80000080e234:	ff d0                	call   rax
ffff80000080e236:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:152
        if(!bh)
ffff80000080e23a:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
ffff80000080e23f:	75 0a                	jne    ffff80000080e24b <blkdev_write+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:153
            return -ENOBUFS;//buffer不够了
ffff80000080e241:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff80000080e246:	e9 91 00 00 00       	jmp    ffff80000080e2dc <blkdev_write+0x158>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:154
        if(i==n-1)
ffff80000080e24b:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080e24e:	83 e8 01             	sub    eax,0x1
ffff80000080e251:	39 45 d0             	cmp    DWORD PTR [rbp-0x30],eax
ffff80000080e254:	75 09                	jne    ffff80000080e25f <blkdev_write+0xdb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:155
            len=mod_count;
ffff80000080e256:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080e25a:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
ffff80000080e25d:	eb 0d                	jmp    ffff80000080e26c <blkdev_write+0xe8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:156
        else if(i==2)
ffff80000080e25f:	83 7d d0 02          	cmp    DWORD PTR [rbp-0x30],0x2
ffff80000080e263:	75 07                	jne    ffff80000080e26c <blkdev_write+0xe8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:157
            len=BLOCK_SIZE;
ffff80000080e265:	c7 45 d4 00 10 00 00 	mov    DWORD PTR [rbp-0x2c],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:158 (discriminator 2)
        memcpy(bh->data+first_off,p,len);
ffff80000080e26c:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080e26f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080e273:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080e276:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080e27a:	48 01 c1             	add    rcx,rax
ffff80000080e27d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080e281:	48 89 c6             	mov    rsi,rax
ffff80000080e284:	48 89 cf             	mov    rdi,rcx
ffff80000080e287:	49 89 df             	mov    r15,rbx
ffff80000080e28a:	48 b8 53 21 ef ff ff 	movabs rax,0xffffffffffef2153
ffff80000080e291:	ff ff ff 
ffff80000080e294:	48 01 d8             	add    rax,rbx
ffff80000080e297:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:159 (discriminator 2)
        brelse(bh);
ffff80000080e299:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080e29d:	48 89 c7             	mov    rdi,rax
ffff80000080e2a0:	49 89 df             	mov    r15,rbx
ffff80000080e2a3:	48 b8 95 d3 ee ff ff 	movabs rax,0xffffffffffeed395
ffff80000080e2aa:	ff ff ff 
ffff80000080e2ad:	48 01 d8             	add    rax,rbx
ffff80000080e2b0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:160 (discriminator 2)
        blkn++;
ffff80000080e2b2:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:161 (discriminator 2)
        p+=BLOCK_SIZE;
ffff80000080e2b7:	48 81 45 d8 00 10 00 	add    QWORD PTR [rbp-0x28],0x1000
ffff80000080e2be:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:162 (discriminator 2)
        first_off=0;
ffff80000080e2bf:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080e2c6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:150 (discriminator 2)
    for(int i=0;i<n;i++){
ffff80000080e2c7:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:150 (discriminator 1)
ffff80000080e2cb:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000080e2ce:	3b 45 cc             	cmp    eax,DWORD PTR [rbp-0x34]
ffff80000080e2d1:	0f 8c 3f ff ff ff    	jl     ffff80000080e216 <blkdev_write+0x92>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:164
    }
    return 1;
ffff80000080e2d7:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:166

}
ffff80000080e2dc:	48 83 c4 60          	add    rsp,0x60
ffff80000080e2e0:	5b                   	pop    rbx
ffff80000080e2e1:	41 5f                	pop    r15
ffff80000080e2e3:	5d                   	pop    rbp
ffff80000080e2e4:	c3                   	ret    

ffff80000080e2e5 <brelse>:
brelse():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:167
int brelse(buffer_head *bh){
ffff80000080e2e5:	f3 0f 1e fa          	endbr64 
ffff80000080e2e9:	55                   	push   rbp
ffff80000080e2ea:	48 89 e5             	mov    rbp,rsp
ffff80000080e2ed:	41 57                	push   r15
ffff80000080e2ef:	53                   	push   rbx
ffff80000080e2f0:	48 83 ec 10          	sub    rsp,0x10
ffff80000080e2f4:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e2f4 <brelse+0xf>
ffff80000080e2fb:	49 bb 5c 2c 11 00 00 	movabs r11,0x112c5c
ffff80000080e302:	00 00 00 
ffff80000080e305:	4c 01 db             	add    rbx,r11
ffff80000080e308:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:168
    if(bh->dev==(unsigned short)-1||!blk_devs[BLKDEV_MAJOR(bh->dev)].do_request)
ffff80000080e30c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e310:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080e314:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000080e318:	74 33                	je     ffff80000080e34d <brelse+0x68>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:168 (discriminator 1)
ffff80000080e31a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e31e:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080e322:	0f b7 c0             	movzx  eax,ax
ffff80000080e325:	c1 f8 04             	sar    eax,0x4
ffff80000080e328:	83 e0 0f             	and    eax,0xf
ffff80000080e32b:	89 c2                	mov    edx,eax
ffff80000080e32d:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff80000080e334:	ff ff ff 
ffff80000080e337:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080e33b:	48 63 c2             	movsxd rax,edx
ffff80000080e33e:	48 c1 e0 04          	shl    rax,0x4
ffff80000080e342:	48 01 c8             	add    rax,rcx
ffff80000080e345:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e348:	48 85 c0             	test   rax,rax
ffff80000080e34b:	75 0a                	jne    ffff80000080e357 <brelse+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:169
        return -ENODEV;
ffff80000080e34d:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080e352:	e9 b0 00 00 00       	jmp    ffff80000080e407 <brelse+0x122>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:170
    if(bh->dirt)
ffff80000080e357:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e35b:	0f b6 40 13          	movzx  eax,BYTE PTR [rax+0x13]
ffff80000080e35f:	84 c0                	test   al,al
ffff80000080e361:	74 19                	je     ffff80000080e37c <brelse+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:171
        bflush(bh);
ffff80000080e363:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e367:	48 89 c7             	mov    rdi,rax
ffff80000080e36a:	49 89 df             	mov    r15,rbx
ffff80000080e36d:	48 b8 1e cf ee ff ff 	movabs rax,0xffffffffffeecf1e
ffff80000080e374:	ff ff ff 
ffff80000080e377:	48 01 d8             	add    rax,rbx
ffff80000080e37a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:172
    bh->count--;
ffff80000080e37c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e380:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080e384:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080e387:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e38b:	88 50 14             	mov    BYTE PTR [rax+0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:173
    if(bh->count==0)
ffff80000080e38e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e392:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080e396:	84 c0                	test   al,al
ffff80000080e398:	75 68                	jne    ffff80000080e402 <brelse+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:175
    {
        if(bh->prev)
ffff80000080e39a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e39e:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080e3a2:	48 85 c0             	test   rax,rax
ffff80000080e3a5:	74 14                	je     ffff80000080e3bb <brelse+0xd6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:176
            bh->prev->next=bh->next;
ffff80000080e3a7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e3ab:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080e3af:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080e3b3:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080e3b7:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:177
        if(bh->next)
ffff80000080e3bb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e3bf:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080e3c3:	48 85 c0             	test   rax,rax
ffff80000080e3c6:	74 14                	je     ffff80000080e3dc <brelse+0xf7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:178
            bh->next->prev=bh->prev;
ffff80000080e3c8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e3cc:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080e3d0:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080e3d4:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000080e3d8:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:179
        bh->dev=-1;
ffff80000080e3dc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e3e0:	66 c7 40 10 ff ff    	mov    WORD PTR [rax+0x10],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:180
        kmfree(bh->data);
ffff80000080e3e6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e3ea:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e3ed:	48 89 c7             	mov    rdi,rax
ffff80000080e3f0:	49 89 df             	mov    r15,rbx
ffff80000080e3f3:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff80000080e3fa:	ff ff ff 
ffff80000080e3fd:	48 01 d8             	add    rax,rbx
ffff80000080e400:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:182
    }
    return 1;
ffff80000080e402:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:183
ffff80000080e407:	48 83 c4 10          	add    rsp,0x10
ffff80000080e40b:	5b                   	pop    rbx
ffff80000080e40c:	41 5f                	pop    r15
ffff80000080e40e:	5d                   	pop    rbp
ffff80000080e40f:	c3                   	ret    

ffff80000080e410 <shift>:
shift():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:123
/* 0x5D - Apps      */ {  0,        0,       0x5D,      0x5D }
        };
char k_shift=0,k_ctrl=0,k_capslock=0;

void shift()
{
ffff80000080e410:	f3 0f 1e fa          	endbr64 
ffff80000080e414:	55                   	push   rbp
ffff80000080e415:	48 89 e5             	mov    rbp,rsp
ffff80000080e418:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e418 <shift+0x8>
ffff80000080e41f:	49 bb 38 2b 11 00 00 	movabs r11,0x112b38
ffff80000080e426:	00 00 00 
ffff80000080e429:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:124
    k_shift=!k_shift;
ffff80000080e42c:	48 ba 60 ff ff ff ff 	movabs rdx,0xffffffffffffff60
ffff80000080e433:	ff ff ff 
ffff80000080e436:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e43a:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e43d:	84 d2                	test   dl,dl
ffff80000080e43f:	0f 94 c2             	sete   dl
ffff80000080e442:	89 d1                	mov    ecx,edx
ffff80000080e444:	48 ba 60 ff ff ff ff 	movabs rdx,0xffffffffffffff60
ffff80000080e44b:	ff ff ff 
ffff80000080e44e:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080e452:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:125
}
ffff80000080e454:	90                   	nop
ffff80000080e455:	5d                   	pop    rbp
ffff80000080e456:	c3                   	ret    

ffff80000080e457 <ctrl>:
ctrl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:127
void ctrl()
{
ffff80000080e457:	f3 0f 1e fa          	endbr64 
ffff80000080e45b:	55                   	push   rbp
ffff80000080e45c:	48 89 e5             	mov    rbp,rsp
ffff80000080e45f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e45f <ctrl+0x8>
ffff80000080e466:	49 bb f1 2a 11 00 00 	movabs r11,0x112af1
ffff80000080e46d:	00 00 00 
ffff80000080e470:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:128
    k_ctrl=!k_ctrl;
ffff80000080e473:	48 ba f8 fc ff ff ff 	movabs rdx,0xfffffffffffffcf8
ffff80000080e47a:	ff ff ff 
ffff80000080e47d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e481:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e484:	84 d2                	test   dl,dl
ffff80000080e486:	0f 94 c2             	sete   dl
ffff80000080e489:	89 d1                	mov    ecx,edx
ffff80000080e48b:	48 ba f8 fc ff ff ff 	movabs rdx,0xfffffffffffffcf8
ffff80000080e492:	ff ff ff 
ffff80000080e495:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080e499:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:129
}
ffff80000080e49b:	90                   	nop
ffff80000080e49c:	5d                   	pop    rbp
ffff80000080e49d:	c3                   	ret    

ffff80000080e49e <capslock>:
capslock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:131
void capslock()
{
ffff80000080e49e:	f3 0f 1e fa          	endbr64 
ffff80000080e4a2:	55                   	push   rbp
ffff80000080e4a3:	48 89 e5             	mov    rbp,rsp
ffff80000080e4a6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e4a6 <capslock+0x8>
ffff80000080e4ad:	49 bb aa 2a 11 00 00 	movabs r11,0x112aaa
ffff80000080e4b4:	00 00 00 
ffff80000080e4b7:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:132
    k_capslock=k_capslock==0?1:0;
ffff80000080e4ba:	48 ba 68 fe ff ff ff 	movabs rdx,0xfffffffffffffe68
ffff80000080e4c1:	ff ff ff 
ffff80000080e4c4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e4c8:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e4cb:	84 d2                	test   dl,dl
ffff80000080e4cd:	0f 94 c2             	sete   dl
ffff80000080e4d0:	89 d1                	mov    ecx,edx
ffff80000080e4d2:	48 ba 68 fe ff ff ff 	movabs rdx,0xfffffffffffffe68
ffff80000080e4d9:	ff ff ff 
ffff80000080e4dc:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080e4e0:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:133
}
ffff80000080e4e2:	90                   	nop
ffff80000080e4e3:	5d                   	pop    rbp
ffff80000080e4e4:	c3                   	ret    

ffff80000080e4e5 <to_ascii>:
to_ascii():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:135
char to_ascii(char scan_code)
{
ffff80000080e4e5:	f3 0f 1e fa          	endbr64 
ffff80000080e4e9:	55                   	push   rbp
ffff80000080e4ea:	48 89 e5             	mov    rbp,rsp
ffff80000080e4ed:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e4ed <to_ascii+0x8>
ffff80000080e4f4:	49 bb 63 2a 11 00 00 	movabs r11,0x112a63
ffff80000080e4fb:	00 00 00 
ffff80000080e4fe:	4c 01 d8             	add    rax,r11
ffff80000080e501:	89 fa                	mov    edx,edi
ffff80000080e503:	88 55 ec             	mov    BYTE PTR [rbp-0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
ffff80000080e506:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080e50d:	e9 25 01 00 00       	jmp    ffff80000080e637 <to_ascii+0x152>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:137
        if(key_map[i].scan_code==scan_code)
ffff80000080e512:	48 be 70 d7 ff ff ff 	movabs rsi,0xffffffffffffd770
ffff80000080e519:	ff ff ff 
ffff80000080e51c:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e51f:	48 63 ca             	movsxd rcx,edx
ffff80000080e522:	48 89 ca             	mov    rdx,rcx
ffff80000080e525:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e529:	48 01 ca             	add    rdx,rcx
ffff80000080e52c:	48 01 c2             	add    rdx,rax
ffff80000080e52f:	48 01 f2             	add    rdx,rsi
ffff80000080e532:	48 83 c2 02          	add    rdx,0x2
ffff80000080e536:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e539:	38 55 ec             	cmp    BYTE PTR [rbp-0x14],dl
ffff80000080e53c:	0f 85 f1 00 00 00    	jne    ffff80000080e633 <to_ascii+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139
        {
            if(k_capslock&&key_map[i].ascii>='a'&&key_map[i].ascii<='z')return key_map[i].ascii_shift;
ffff80000080e542:	48 ba 68 fe ff ff ff 	movabs rdx,0xfffffffffffffe68
ffff80000080e549:	ff ff ff 
ffff80000080e54c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e550:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e553:	84 d2                	test   dl,dl
ffff80000080e555:	74 79                	je     ffff80000080e5d0 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 1)
ffff80000080e557:	48 be 70 d7 ff ff ff 	movabs rsi,0xffffffffffffd770
ffff80000080e55e:	ff ff ff 
ffff80000080e561:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e564:	48 63 ca             	movsxd rcx,edx
ffff80000080e567:	48 01 c6             	add    rsi,rax
ffff80000080e56a:	48 89 ca             	mov    rdx,rcx
ffff80000080e56d:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e571:	48 01 ca             	add    rdx,rcx
ffff80000080e574:	48 01 f2             	add    rdx,rsi
ffff80000080e577:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e57a:	80 fa 60             	cmp    dl,0x60
ffff80000080e57d:	7e 51                	jle    ffff80000080e5d0 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 2)
ffff80000080e57f:	48 be 70 d7 ff ff ff 	movabs rsi,0xffffffffffffd770
ffff80000080e586:	ff ff ff 
ffff80000080e589:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e58c:	48 63 ca             	movsxd rcx,edx
ffff80000080e58f:	48 01 c6             	add    rsi,rax
ffff80000080e592:	48 89 ca             	mov    rdx,rcx
ffff80000080e595:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e599:	48 01 ca             	add    rdx,rcx
ffff80000080e59c:	48 01 f2             	add    rdx,rsi
ffff80000080e59f:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e5a2:	80 fa 7a             	cmp    dl,0x7a
ffff80000080e5a5:	7f 29                	jg     ffff80000080e5d0 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 3)
ffff80000080e5a7:	48 be 70 d7 ff ff ff 	movabs rsi,0xffffffffffffd770
ffff80000080e5ae:	ff ff ff 
ffff80000080e5b1:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e5b4:	48 63 ca             	movsxd rcx,edx
ffff80000080e5b7:	48 89 ca             	mov    rdx,rcx
ffff80000080e5ba:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e5be:	48 01 ca             	add    rdx,rcx
ffff80000080e5c1:	48 01 d0             	add    rax,rdx
ffff80000080e5c4:	48 01 f0             	add    rax,rsi
ffff80000080e5c7:	48 83 c0 01          	add    rax,0x1
ffff80000080e5cb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080e5ce:	eb 76                	jmp    ffff80000080e646 <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:140
            else if(k_shift)return key_map[i].ascii_shift;
ffff80000080e5d0:	48 ba 60 ff ff ff ff 	movabs rdx,0xffffffffffffff60
ffff80000080e5d7:	ff ff ff 
ffff80000080e5da:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e5de:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e5e1:	84 d2                	test   dl,dl
ffff80000080e5e3:	74 29                	je     ffff80000080e60e <to_ascii+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:140 (discriminator 1)
ffff80000080e5e5:	48 be 70 d7 ff ff ff 	movabs rsi,0xffffffffffffd770
ffff80000080e5ec:	ff ff ff 
ffff80000080e5ef:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e5f2:	48 63 ca             	movsxd rcx,edx
ffff80000080e5f5:	48 89 ca             	mov    rdx,rcx
ffff80000080e5f8:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e5fc:	48 01 ca             	add    rdx,rcx
ffff80000080e5ff:	48 01 d0             	add    rax,rdx
ffff80000080e602:	48 01 f0             	add    rax,rsi
ffff80000080e605:	48 83 c0 01          	add    rax,0x1
ffff80000080e609:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080e60c:	eb 38                	jmp    ffff80000080e646 <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:141
            else return key_map[i].ascii;
ffff80000080e60e:	48 b9 70 d7 ff ff ff 	movabs rcx,0xffffffffffffd770
ffff80000080e615:	ff ff ff 
ffff80000080e618:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e61b:	48 63 d2             	movsxd rdx,edx
ffff80000080e61e:	48 01 c1             	add    rcx,rax
ffff80000080e621:	48 89 d0             	mov    rax,rdx
ffff80000080e624:	48 c1 e0 02          	shl    rax,0x2
ffff80000080e628:	48 01 d0             	add    rax,rdx
ffff80000080e62b:	48 01 c8             	add    rax,rcx
ffff80000080e62e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080e631:	eb 13                	jmp    ffff80000080e646 <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136 (discriminator 2)
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
ffff80000080e633:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136 (discriminator 1)
ffff80000080e637:	83 7d fc 5d          	cmp    DWORD PTR [rbp-0x4],0x5d
ffff80000080e63b:	0f 8e d1 fe ff ff    	jle    ffff80000080e512 <to_ascii+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:144
        }

    return '\0';
ffff80000080e641:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:145
}
ffff80000080e646:	5d                   	pop    rbp
ffff80000080e647:	c3                   	ret    

ffff80000080e648 <init_kb>:
init_kb():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:147
int init_kb()
{
ffff80000080e648:	f3 0f 1e fa          	endbr64 
ffff80000080e64c:	55                   	push   rbp
ffff80000080e64d:	48 89 e5             	mov    rbp,rsp
ffff80000080e650:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e650 <init_kb+0x8>
ffff80000080e657:	49 bb 00 29 11 00 00 	movabs r11,0x112900
ffff80000080e65e:	00 00 00 
ffff80000080e661:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:148
}
ffff80000080e664:	90                   	nop
ffff80000080e665:	5d                   	pop    rbp
ffff80000080e666:	c3                   	ret    

ffff80000080e667 <key_proc>:
key_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:150
int key_proc()
{
ffff80000080e667:	f3 0f 1e fa          	endbr64 
ffff80000080e66b:	55                   	push   rbp
ffff80000080e66c:	48 89 e5             	mov    rbp,rsp
ffff80000080e66f:	41 57                	push   r15
ffff80000080e671:	53                   	push   rbx
ffff80000080e672:	48 83 ec 20          	sub    rsp,0x20
ffff80000080e676:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e676 <key_proc+0xf>
ffff80000080e67d:	49 bb da 28 11 00 00 	movabs r11,0x1128da
ffff80000080e684:	00 00 00 
ffff80000080e687:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:151
    asm volatile("cli");
ffff80000080e68a:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:153
    //获取完整的扫描码
    u8 scan1=0,scan2=0,ch=0;
ffff80000080e68b:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
ffff80000080e68f:	c6 45 ee 00          	mov    BYTE PTR [rbp-0x12],0x0
ffff80000080e693:	c6 45 ed 00          	mov    BYTE PTR [rbp-0x13],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:155
    key_code tmpc;
    scan1=inb(0x60);
ffff80000080e697:	bf 60 00 00 00       	mov    edi,0x60
ffff80000080e69c:	49 89 df             	mov    r15,rbx
ffff80000080e69f:	48 b8 e9 71 ee ff ff 	movabs rax,0xffffffffffee71e9
ffff80000080e6a6:	ff ff ff 
ffff80000080e6a9:	48 01 d8             	add    rax,rbx
ffff80000080e6ac:	ff d0                	call   rax
ffff80000080e6ae:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:167
//    tmpc.scan_code2=scan2;
//    tmpc.ascii= ch;


//    ENQUEUE(key_bufq,tmpc)
    if((key_bufq.tail+1)%key_bufq.size!=key_bufq.head)
ffff80000080e6b1:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080e6b8:	ff ff ff 
ffff80000080e6bb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e6bf:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e6c2:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080e6c5:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080e6cc:	ff ff ff 
ffff80000080e6cf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e6d3:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080e6d6:	89 d0                	mov    eax,edx
ffff80000080e6d8:	99                   	cdq    
ffff80000080e6d9:	f7 f9                	idiv   ecx
ffff80000080e6db:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080e6e2:	ff ff ff 
ffff80000080e6e5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e6e9:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e6ec:	39 c2                	cmp    edx,eax
ffff80000080e6ee:	74 68                	je     ffff80000080e758 <key_proc+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:169
    {
        key_bufq.data[key_bufq.tail]=scan1;
ffff80000080e6f0:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080e6f7:	ff ff ff 
ffff80000080e6fa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e6fe:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080e701:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080e708:	ff ff ff 
ffff80000080e70b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e70f:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e712:	48 98                	cdqe   
ffff80000080e714:	48 01 c2             	add    rdx,rax
ffff80000080e717:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e71b:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:170
        key_bufq.tail=(key_bufq.tail+1)%key_bufq.size;
ffff80000080e71d:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080e724:	ff ff ff 
ffff80000080e727:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e72b:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e72e:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080e731:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080e738:	ff ff ff 
ffff80000080e73b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e73f:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080e742:	89 d0                	mov    eax,edx
ffff80000080e744:	99                   	cdq    
ffff80000080e745:	f7 f9                	idiv   ecx
ffff80000080e747:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080e74e:	ff ff ff 
ffff80000080e751:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e755:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:173
    }

    if(scan1==0x48)
ffff80000080e758:	80 7d ef 48          	cmp    BYTE PTR [rbp-0x11],0x48
ffff80000080e75c:	75 17                	jne    ffff80000080e775 <key_proc+0x10e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:174
        scr_up();
ffff80000080e75e:	49 89 df             	mov    r15,rbx
ffff80000080e761:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e766:	48 ba 2b 9d ee ff ff 	movabs rdx,0xffffffffffee9d2b
ffff80000080e76d:	ff ff ff 
ffff80000080e770:	48 01 da             	add    rdx,rbx
ffff80000080e773:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:175
    if(scan1==0x50)
ffff80000080e775:	80 7d ef 50          	cmp    BYTE PTR [rbp-0x11],0x50
ffff80000080e779:	75 17                	jne    ffff80000080e792 <key_proc+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:176
        scr_down();
ffff80000080e77b:	49 89 df             	mov    r15,rbx
ffff80000080e77e:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e783:	48 ba 23 9e ee ff ff 	movabs rdx,0xffffffffffee9e23
ffff80000080e78a:	ff ff ff 
ffff80000080e78d:	48 01 da             	add    rdx,rbx
ffff80000080e790:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:177
    switch (scan1)
ffff80000080e792:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e796:	3d b6 00 00 00       	cmp    eax,0xb6
ffff80000080e79b:	74 45                	je     ffff80000080e7e2 <key_proc+0x17b>
ffff80000080e79d:	3d b6 00 00 00       	cmp    eax,0xb6
ffff80000080e7a2:	0f 8f 85 00 00 00    	jg     ffff80000080e82d <key_proc+0x1c6>
ffff80000080e7a8:	3d aa 00 00 00       	cmp    eax,0xaa
ffff80000080e7ad:	74 33                	je     ffff80000080e7e2 <key_proc+0x17b>
ffff80000080e7af:	3d aa 00 00 00       	cmp    eax,0xaa
ffff80000080e7b4:	7f 77                	jg     ffff80000080e82d <key_proc+0x1c6>
ffff80000080e7b6:	3d 9d 00 00 00       	cmp    eax,0x9d
ffff80000080e7bb:	74 3e                	je     ffff80000080e7fb <key_proc+0x194>
ffff80000080e7bd:	3d 9d 00 00 00       	cmp    eax,0x9d
ffff80000080e7c2:	7f 69                	jg     ffff80000080e82d <key_proc+0x1c6>
ffff80000080e7c4:	83 f8 3a             	cmp    eax,0x3a
ffff80000080e7c7:	74 4b                	je     ffff80000080e814 <key_proc+0x1ad>
ffff80000080e7c9:	83 f8 3a             	cmp    eax,0x3a
ffff80000080e7cc:	7f 5f                	jg     ffff80000080e82d <key_proc+0x1c6>
ffff80000080e7ce:	83 f8 36             	cmp    eax,0x36
ffff80000080e7d1:	74 0f                	je     ffff80000080e7e2 <key_proc+0x17b>
ffff80000080e7d3:	83 f8 36             	cmp    eax,0x36
ffff80000080e7d6:	7f 55                	jg     ffff80000080e82d <key_proc+0x1c6>
ffff80000080e7d8:	83 f8 1d             	cmp    eax,0x1d
ffff80000080e7db:	74 1e                	je     ffff80000080e7fb <key_proc+0x194>
ffff80000080e7dd:	83 f8 2a             	cmp    eax,0x2a
ffff80000080e7e0:	75 4b                	jne    ffff80000080e82d <key_proc+0x1c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:183
    {
        case 0x36:
        case 0x2a:
        case 0xaa:
        case 0xb6:
            shift();
ffff80000080e7e2:	49 89 df             	mov    r15,rbx
ffff80000080e7e5:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e7ea:	48 ba c0 d4 ee ff ff 	movabs rdx,0xffffffffffeed4c0
ffff80000080e7f1:	ff ff ff 
ffff80000080e7f4:	48 01 da             	add    rdx,rbx
ffff80000080e7f7:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:184
            break;
ffff80000080e7f9:	eb 33                	jmp    ffff80000080e82e <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:187
        case 0x1d:
        case 0x9d:
            ctrl();
ffff80000080e7fb:	49 89 df             	mov    r15,rbx
ffff80000080e7fe:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e803:	48 ba 07 d5 ee ff ff 	movabs rdx,0xffffffffffeed507
ffff80000080e80a:	ff ff ff 
ffff80000080e80d:	48 01 da             	add    rdx,rbx
ffff80000080e810:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:188
            break;
ffff80000080e812:	eb 1a                	jmp    ffff80000080e82e <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:190
        case 0x3a:
            capslock();
ffff80000080e814:	49 89 df             	mov    r15,rbx
ffff80000080e817:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e81c:	48 ba 4e d5 ee ff ff 	movabs rdx,0xffffffffffeed54e
ffff80000080e823:	ff ff ff 
ffff80000080e826:	48 01 da             	add    rdx,rbx
ffff80000080e829:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:191
            break;
ffff80000080e82b:	eb 01                	jmp    ffff80000080e82e <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:193
        default:
            break;
ffff80000080e82d:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:196
    }
    //发送到std
    if(!(scan1&FLAG_BREAK)){
ffff80000080e82e:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e832:	84 c0                	test   al,al
ffff80000080e834:	78 51                	js     ffff80000080e887 <key_proc+0x220>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:197
        char ch= to_ascii(scan1);
ffff80000080e836:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e83a:	0f be c0             	movsx  eax,al
ffff80000080e83d:	89 c7                	mov    edi,eax
ffff80000080e83f:	49 89 df             	mov    r15,rbx
ffff80000080e842:	48 b8 95 d5 ee ff ff 	movabs rax,0xffffffffffeed595
ffff80000080e849:	ff ff ff 
ffff80000080e84c:	48 01 d8             	add    rax,rbx
ffff80000080e84f:	ff d0                	call   rax
ffff80000080e851:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:198
        unsigned long args[]={(unsigned long) &ch, 1};
ffff80000080e854:	48 8d 45 e7          	lea    rax,[rbp-0x19]
ffff80000080e858:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffff80000080e85c:	48 c7 45 d8 01 00 00 	mov    QWORD PTR [rbp-0x28],0x1
ffff80000080e863:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:200
        //写入stdin
        sys_ioctl(0,TTY_WSTDIN,(unsigned long)args);
ffff80000080e864:	48 8d 45 d0          	lea    rax,[rbp-0x30]
ffff80000080e868:	48 89 c2             	mov    rdx,rax
ffff80000080e86b:	be 03 00 00 00       	mov    esi,0x3
ffff80000080e870:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080e875:	49 89 df             	mov    r15,rbx
ffff80000080e878:	48 b8 d9 70 ee ff ff 	movabs rax,0xffffffffffee70d9
ffff80000080e87f:	ff ff ff 
ffff80000080e882:	48 01 d8             	add    rax,rbx
ffff80000080e885:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:219
//        //logf("%x\n",stdin.w_ptr);
//        //print_stdin();
//        //printchar(ch);
//        //flush_screen(0);*/
//    }
    eoi();
ffff80000080e887:	49 89 df             	mov    r15,rbx
ffff80000080e88a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e88f:	48 ba fe 71 ee ff ff 	movabs rdx,0xffffffffffee71fe
ffff80000080e896:	ff ff ff 
ffff80000080e899:	48 01 da             	add    rdx,rbx
ffff80000080e89c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:220
    asm volatile("leave\r\n iretq");
ffff80000080e89e:	c9                   	leave  
ffff80000080e89f:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:221
}
ffff80000080e8a1:	90                   	nop
ffff80000080e8a2:	48 83 c4 20          	add    rsp,0x20
ffff80000080e8a6:	5b                   	pop    rbx
ffff80000080e8a7:	41 5f                	pop    r15
ffff80000080e8a9:	5d                   	pop    rbp
ffff80000080e8aa:	c3                   	ret    

ffff80000080e8ab <sys_analyse_key>:
sys_analyse_key():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:224

char sys_analyse_key()
{
ffff80000080e8ab:	f3 0f 1e fa          	endbr64 
ffff80000080e8af:	55                   	push   rbp
ffff80000080e8b0:	48 89 e5             	mov    rbp,rsp
ffff80000080e8b3:	41 57                	push   r15
ffff80000080e8b5:	53                   	push   rbx
ffff80000080e8b6:	48 83 ec 30          	sub    rsp,0x30
ffff80000080e8ba:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e8ba <sys_analyse_key+0xf>
ffff80000080e8c1:	49 bb 96 26 11 00 00 	movabs r11,0x112696
ffff80000080e8c8:	00 00 00 
ffff80000080e8cb:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:225
    if(key_bufq.tail==key_bufq.head)return -1;
ffff80000080e8ce:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080e8d5:	ff ff ff 
ffff80000080e8d8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e8dc:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff80000080e8df:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080e8e6:	ff ff ff 
ffff80000080e8e9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e8ed:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e8f0:	39 c2                	cmp    edx,eax
ffff80000080e8f2:	75 0a                	jne    ffff80000080e8fe <sys_analyse_key+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:225 (discriminator 1)
ffff80000080e8f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080e8f9:	e9 b1 01 00 00       	jmp    ffff80000080eaaf <sys_analyse_key+0x204>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:226
    char c=key_buf[key_bufq.head];
ffff80000080e8fe:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080e905:	ff ff ff 
ffff80000080e908:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e90c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e90f:	48 ba 50 fd ff ff ff 	movabs rdx,0xfffffffffffffd50
ffff80000080e916:	ff ff ff 
ffff80000080e919:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080e91d:	48 98                	cdqe   
ffff80000080e91f:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080e923:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:227
    key_bufq.head=(key_bufq.head+1)%key_bufq.size;
ffff80000080e926:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080e92d:	ff ff ff 
ffff80000080e930:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e934:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e937:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080e93a:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080e941:	ff ff ff 
ffff80000080e944:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e948:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080e94b:	89 d0                	mov    eax,edx
ffff80000080e94d:	99                   	cdq    
ffff80000080e94e:	f7 f9                	idiv   ecx
ffff80000080e950:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080e957:	ff ff ff 
ffff80000080e95a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e95e:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:229
//    QHEAD(key_bufq)=(QHEAD(key_bufq)+1)%QSIZE(key_bufq);
    printf("scan code:");
ffff80000080e961:	48 b8 46 d9 ff ff ff 	movabs rax,0xffffffffffffd946
ffff80000080e968:	ff ff ff 
ffff80000080e96b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e96f:	48 89 c7             	mov    rdi,rax
ffff80000080e972:	49 89 df             	mov    r15,rbx
ffff80000080e975:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e97a:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff80000080e981:	ff ff ff 
ffff80000080e984:	48 01 da             	add    rdx,rbx
ffff80000080e987:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:230
    char res[33]={0};
ffff80000080e989:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080e990:	00 
ffff80000080e991:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080e998:	00 
ffff80000080e999:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080e9a0:	00 
ffff80000080e9a1:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080e9a8:	00 
ffff80000080e9a9:	c6 45 e0 00          	mov    BYTE PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:231
    itoa(res,16,c);
ffff80000080e9ad:	0f be 55 ef          	movsx  edx,BYTE PTR [rbp-0x11]
ffff80000080e9b1:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffff80000080e9b5:	be 10 00 00 00       	mov    esi,0x10
ffff80000080e9ba:	48 89 c7             	mov    rdi,rax
ffff80000080e9bd:	49 89 df             	mov    r15,rbx
ffff80000080e9c0:	48 b8 f7 08 ee ff ff 	movabs rax,0xffffffffffee08f7
ffff80000080e9c7:	ff ff ff 
ffff80000080e9ca:	48 01 d8             	add    rax,rbx
ffff80000080e9cd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:232
    printf(res);
ffff80000080e9cf:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffff80000080e9d3:	48 89 c7             	mov    rdi,rax
ffff80000080e9d6:	49 89 df             	mov    r15,rbx
ffff80000080e9d9:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e9de:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff80000080e9e5:	ff ff ff 
ffff80000080e9e8:	48 01 da             	add    rdx,rbx
ffff80000080e9eb:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:233
    if(c&FLAG_BREAK){
ffff80000080e9ed:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffff80000080e9f1:	79 32                	jns    ffff80000080ea25 <sys_analyse_key+0x17a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:234
        printf("\n");
ffff80000080e9f3:	48 b8 51 d9 ff ff ff 	movabs rax,0xffffffffffffd951
ffff80000080e9fa:	ff ff ff 
ffff80000080e9fd:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080ea01:	48 89 c7             	mov    rdi,rax
ffff80000080ea04:	49 89 df             	mov    r15,rbx
ffff80000080ea07:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ea0c:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff80000080ea13:	ff ff ff 
ffff80000080ea16:	48 01 da             	add    rdx,rbx
ffff80000080ea19:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:235
        return -1;
ffff80000080ea1b:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080ea20:	e9 8a 00 00 00       	jmp    ffff80000080eaaf <sys_analyse_key+0x204>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:237
    }
    c= to_ascii(c&0x7f);
ffff80000080ea25:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff80000080ea29:	83 e0 7f             	and    eax,0x7f
ffff80000080ea2c:	89 c7                	mov    edi,eax
ffff80000080ea2e:	49 89 df             	mov    r15,rbx
ffff80000080ea31:	48 b8 95 d5 ee ff ff 	movabs rax,0xffffffffffeed595
ffff80000080ea38:	ff ff ff 
ffff80000080ea3b:	48 01 d8             	add    rax,rbx
ffff80000080ea3e:	ff d0                	call   rax
ffff80000080ea40:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:238
    printf(" char:");
ffff80000080ea43:	48 b8 53 d9 ff ff ff 	movabs rax,0xffffffffffffd953
ffff80000080ea4a:	ff ff ff 
ffff80000080ea4d:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080ea51:	48 89 c7             	mov    rdi,rax
ffff80000080ea54:	49 89 df             	mov    r15,rbx
ffff80000080ea57:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ea5c:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff80000080ea63:	ff ff ff 
ffff80000080ea66:	48 01 da             	add    rdx,rbx
ffff80000080ea69:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:239
    putchar(c);
ffff80000080ea6b:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff80000080ea6f:	89 c7                	mov    edi,eax
ffff80000080ea71:	49 89 df             	mov    r15,rbx
ffff80000080ea74:	48 b8 20 0a ee ff ff 	movabs rax,0xffffffffffee0a20
ffff80000080ea7b:	ff ff ff 
ffff80000080ea7e:	48 01 d8             	add    rax,rbx
ffff80000080ea81:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:240
    printf("\n");
ffff80000080ea83:	48 b8 51 d9 ff ff ff 	movabs rax,0xffffffffffffd951
ffff80000080ea8a:	ff ff ff 
ffff80000080ea8d:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080ea91:	48 89 c7             	mov    rdi,rax
ffff80000080ea94:	49 89 df             	mov    r15,rbx
ffff80000080ea97:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ea9c:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff80000080eaa3:	ff ff ff 
ffff80000080eaa6:	48 01 da             	add    rdx,rbx
ffff80000080eaa9:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:241
    return c;
ffff80000080eaab:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:242 (discriminator 1)
ffff80000080eaaf:	48 83 c4 30          	add    rsp,0x30
ffff80000080eab3:	5b                   	pop    rbx
ffff80000080eab4:	41 5f                	pop    r15
ffff80000080eab6:	5d                   	pop    rbp
ffff80000080eab7:	c3                   	ret    

ffff80000080eab8 <init_disk>:
init_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:20
struct blk_dev bd_hd={
    .do_request=hd_do_req
};
int dev_hd=-1,last_chk_res=0;
int init_disk()
{
ffff80000080eab8:	f3 0f 1e fa          	endbr64 
ffff80000080eabc:	55                   	push   rbp
ffff80000080eabd:	48 89 e5             	mov    rbp,rsp
ffff80000080eac0:	41 57                	push   r15
ffff80000080eac2:	53                   	push   rbx
ffff80000080eac3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080eac3 <init_disk+0xb>
ffff80000080eaca:	49 bb 8d 24 11 00 00 	movabs r11,0x11248d
ffff80000080ead1:	00 00 00 
ffff80000080ead4:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:21
    if((dev_hd= reg_blkdev(&bd_hd))<0)
ffff80000080ead7:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff80000080eade:	ff ff ff 
ffff80000080eae1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080eae5:	48 89 c7             	mov    rdi,rax
ffff80000080eae8:	49 89 df             	mov    r15,rbx
ffff80000080eaeb:	48 b8 6e c7 ee ff ff 	movabs rax,0xffffffffffeec76e
ffff80000080eaf2:	ff ff ff 
ffff80000080eaf5:	48 01 d8             	add    rax,rbx
ffff80000080eaf8:	ff d0                	call   rax
ffff80000080eafa:	48 ba f8 fe ff ff ff 	movabs rdx,0xfffffffffffffef8
ffff80000080eb01:	ff ff ff 
ffff80000080eb04:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080eb08:	89 02                	mov    DWORD PTR [rdx],eax
ffff80000080eb0a:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff80000080eb11:	ff ff ff 
ffff80000080eb14:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080eb18:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080eb1a:	85 c0                	test   eax,eax
ffff80000080eb1c:	79 07                	jns    ffff80000080eb25 <init_disk+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:22
        return -1;
ffff80000080eb1e:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080eb23:	eb 05                	jmp    ffff80000080eb2a <init_disk+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:27
    //disk_devi= reg_device(&dev_disk);
    //disk_drvi= reg_driver(&drv_disk);
    //dev_disk.drv=&drv_disk;
    // hd_iterate();
    return 0;
ffff80000080eb25:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:28
}
ffff80000080eb2a:	5b                   	pop    rbx
ffff80000080eb2b:	41 5f                	pop    r15
ffff80000080eb2d:	5d                   	pop    rbp
ffff80000080eb2e:	c3                   	ret    

ffff80000080eb2f <disk_int_handler_c>:
disk_int_handler_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:31

int disk_int_handler_c()
{
ffff80000080eb2f:	f3 0f 1e fa          	endbr64 
ffff80000080eb33:	55                   	push   rbp
ffff80000080eb34:	48 89 e5             	mov    rbp,rsp
ffff80000080eb37:	41 57                	push   r15
ffff80000080eb39:	53                   	push   rbx
ffff80000080eb3a:	48 83 ec 30          	sub    rsp,0x30
ffff80000080eb3e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080eb3e <disk_int_handler_c+0xf>
ffff80000080eb45:	49 bb 12 24 11 00 00 	movabs r11,0x112412
ffff80000080eb4c:	00 00 00 
ffff80000080eb4f:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:32
    if(r_running==NULL)
ffff80000080eb52:	48 b8 20 fd ff ff ff 	movabs rax,0xfffffffffffffd20
ffff80000080eb59:	ff ff ff 
ffff80000080eb5c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080eb60:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080eb63:	48 85 c0             	test   rax,rax
ffff80000080eb66:	75 32                	jne    ffff80000080eb9a <disk_int_handler_c+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:34
    {
        comprintf("err:null running dreq\n");
ffff80000080eb68:	48 b8 5a d9 ff ff ff 	movabs rax,0xffffffffffffd95a
ffff80000080eb6f:	ff ff ff 
ffff80000080eb72:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080eb76:	48 89 c7             	mov    rdi,rax
ffff80000080eb79:	49 89 df             	mov    r15,rbx
ffff80000080eb7c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080eb81:	48 ba b3 1c ef ff ff 	movabs rdx,0xffffffffffef1cb3
ffff80000080eb88:	ff ff ff 
ffff80000080eb8b:	48 01 da             	add    rdx,rbx
ffff80000080eb8e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:35
        return 1;//同步读写硬盘
ffff80000080eb90:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080eb95:	e9 20 03 00 00       	jmp    ffff80000080eeba <disk_int_handler_c+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:37
    }
    short *p=r_running->buffer;
ffff80000080eb9a:	48 b8 20 fd ff ff ff 	movabs rax,0xfffffffffffffd20
ffff80000080eba1:	ff ff ff 
ffff80000080eba4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080eba8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ebab:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080ebaf:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:38
    int port=PORT_DISK_MAJOR;
ffff80000080ebb3:	c7 45 e4 f0 01 00 00 	mov    DWORD PTR [rbp-0x1c],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:39
    if(BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_MAJOR||\
ffff80000080ebba:	48 b8 20 fd ff ff ff 	movabs rax,0xfffffffffffffd20
ffff80000080ebc1:	ff ff ff 
ffff80000080ebc4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ebc8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ebcb:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080ebce:	0f b7 c0             	movzx  eax,ax
ffff80000080ebd1:	83 e0 0f             	and    eax,0xf
ffff80000080ebd4:	83 f8 02             	cmp    eax,0x2
ffff80000080ebd7:	74 1f                	je     ffff80000080ebf8 <disk_int_handler_c+0xc9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:40 (discriminator 1)
    BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_SLAVE)
ffff80000080ebd9:	48 b8 20 fd ff ff ff 	movabs rax,0xfffffffffffffd20
ffff80000080ebe0:	ff ff ff 
ffff80000080ebe3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ebe7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ebea:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080ebed:	0f b7 c0             	movzx  eax,ax
ffff80000080ebf0:	83 e0 0f             	and    eax,0xf
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:39 (discriminator 1)
    if(BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_MAJOR||\
ffff80000080ebf3:	83 f8 03             	cmp    eax,0x3
ffff80000080ebf6:	75 07                	jne    ffff80000080ebff <disk_int_handler_c+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:41
        port=PORT_DISK_SLAVE;
ffff80000080ebf8:	c7 45 e4 70 01 00 00 	mov    DWORD PTR [rbp-0x1c],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:42
    if(r_running->cmd==BLKDEV_REQ_READ)
ffff80000080ebff:	48 b8 20 fd ff ff ff 	movabs rax,0xfffffffffffffd20
ffff80000080ec06:	ff ff ff 
ffff80000080ec09:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ec0d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ec10:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080ec13:	85 c0                	test   eax,eax
ffff80000080ec15:	75 61                	jne    ffff80000080ec78 <disk_int_handler_c+0x149>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46
    {
        ////printf("sys_read dist:%x\n",p);
        //读取
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080ec17:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000080ec1e:	eb 2f                	jmp    ffff80000080ec4f <disk_int_handler_c+0x120>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:48 (discriminator 3)
        {
            *p++=inw(port);
ffff80000080ec20:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080ec23:	0f b7 c0             	movzx  eax,ax
ffff80000080ec26:	89 c7                	mov    edi,eax
ffff80000080ec28:	49 89 df             	mov    r15,rbx
ffff80000080ec2b:	48 b8 f3 71 ee ff ff 	movabs rax,0xffffffffffee71f3
ffff80000080ec32:	ff ff ff 
ffff80000080ec35:	48 01 d8             	add    rax,rbx
ffff80000080ec38:	ff d0                	call   rax
ffff80000080ec3a:	89 c2                	mov    edx,eax
ffff80000080ec3c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ec40:	48 8d 48 02          	lea    rcx,[rax+0x2]
ffff80000080ec44:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffff80000080ec48:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46 (discriminator 3)
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080ec4b:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46 (discriminator 1)
ffff80000080ec4f:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080ec52:	48 63 d0             	movsxd rdx,eax
ffff80000080ec55:	48 b8 20 fd ff ff ff 	movabs rax,0xfffffffffffffd20
ffff80000080ec5c:	ff ff ff 
ffff80000080ec5f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ec63:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ec66:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080ec6a:	48 c1 e0 08          	shl    rax,0x8
ffff80000080ec6e:	48 39 c2             	cmp    rdx,rax
ffff80000080ec71:	72 ad                	jb     ffff80000080ec20 <disk_int_handler_c+0xf1>
ffff80000080ec73:	e9 53 01 00 00       	jmp    ffff80000080edcb <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:50
        }
    }else if(r_running->cmd==BLKDEV_REQ_WRITE)
ffff80000080ec78:	48 b8 20 fd ff ff ff 	movabs rax,0xfffffffffffffd20
ffff80000080ec7f:	ff ff ff 
ffff80000080ec82:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ec86:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ec89:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080ec8c:	83 f8 01             	cmp    eax,0x1
ffff80000080ec8f:	75 64                	jne    ffff80000080ecf5 <disk_int_handler_c+0x1c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52
    {
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080ec91:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080ec98:	eb 32                	jmp    ffff80000080eccc <disk_int_handler_c+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:53 (discriminator 3)
            outw(port,*p++);
ffff80000080ec9a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ec9e:	48 8d 50 02          	lea    rdx,[rax+0x2]
ffff80000080eca2:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080eca6:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080eca9:	0f b7 d0             	movzx  edx,ax
ffff80000080ecac:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080ecaf:	0f b7 c0             	movzx  eax,ax
ffff80000080ecb2:	89 d6                	mov    esi,edx
ffff80000080ecb4:	89 c7                	mov    edi,eax
ffff80000080ecb6:	49 89 df             	mov    r15,rbx
ffff80000080ecb9:	48 b8 dd 71 ee ff ff 	movabs rax,0xffffffffffee71dd
ffff80000080ecc0:	ff ff ff 
ffff80000080ecc3:	48 01 d8             	add    rax,rbx
ffff80000080ecc6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52 (discriminator 3)
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080ecc8:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52 (discriminator 1)
ffff80000080eccc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080eccf:	48 63 d0             	movsxd rdx,eax
ffff80000080ecd2:	48 b8 20 fd ff ff ff 	movabs rax,0xfffffffffffffd20
ffff80000080ecd9:	ff ff ff 
ffff80000080ecdc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ece0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ece3:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080ece7:	48 c1 e0 08          	shl    rax,0x8
ffff80000080eceb:	48 39 c2             	cmp    rdx,rax
ffff80000080ecee:	72 aa                	jb     ffff80000080ec9a <disk_int_handler_c+0x16b>
ffff80000080ecf0:	e9 d6 00 00 00       	jmp    ffff80000080edcb <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:54
    }else if(r_running->cmd==DISKREQ_CHECK)
ffff80000080ecf5:	48 b8 20 fd ff ff ff 	movabs rax,0xfffffffffffffd20
ffff80000080ecfc:	ff ff ff 
ffff80000080ecff:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ed03:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ed06:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080ed09:	83 f8 02             	cmp    eax,0x2
ffff80000080ed0c:	75 54                	jne    ffff80000080ed62 <disk_int_handler_c+0x233>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:56
    {
        char stat=inb(port+7);
ffff80000080ed0e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080ed11:	83 c0 07             	add    eax,0x7
ffff80000080ed14:	0f b6 c0             	movzx  eax,al
ffff80000080ed17:	89 c7                	mov    edi,eax
ffff80000080ed19:	49 89 df             	mov    r15,rbx
ffff80000080ed1c:	48 b8 e9 71 ee ff ff 	movabs rax,0xffffffffffee71e9
ffff80000080ed23:	ff ff ff 
ffff80000080ed26:	48 01 d8             	add    rax,rbx
ffff80000080ed29:	ff d0                	call   rax
ffff80000080ed2b:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:57
        short dat=inw(port);
ffff80000080ed2e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080ed31:	0f b7 c0             	movzx  eax,ax
ffff80000080ed34:	89 c7                	mov    edi,eax
ffff80000080ed36:	49 89 df             	mov    r15,rbx
ffff80000080ed39:	48 b8 f3 71 ee ff ff 	movabs rax,0xffffffffffee71f3
ffff80000080ed40:	ff ff ff 
ffff80000080ed43:	48 01 d8             	add    rax,rbx
ffff80000080ed46:	ff d0                	call   rax
ffff80000080ed48:	66 89 45 d4          	mov    WORD PTR [rbp-0x2c],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:60
        if(1)
        {
            last_chk_res=DISK_CHK_OK;
ffff80000080ed4c:	48 b8 78 fd ff ff ff 	movabs rax,0xfffffffffffffd78
ffff80000080ed53:	ff ff ff 
ffff80000080ed56:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ed5a:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
ffff80000080ed60:	eb 69                	jmp    ffff80000080edcb <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:67
        {
            char err=inb(port+1);//错误原因
            printf("checking disk err:%x\nresetting hd\n",err);
            last_chk_res=DISK_CHK_ERR;
        }
    }else if(r_running->cmd==DISKREQ_RESET)
ffff80000080ed62:	48 b8 20 fd ff ff ff 	movabs rax,0xfffffffffffffd20
ffff80000080ed69:	ff ff ff 
ffff80000080ed6c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ed70:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ed73:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080ed76:	83 f8 03             	cmp    eax,0x3
ffff80000080ed79:	75 50                	jne    ffff80000080edcb <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:69
    {
        int stat=inb(port+7);
ffff80000080ed7b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080ed7e:	83 c0 07             	add    eax,0x7
ffff80000080ed81:	0f b6 c0             	movzx  eax,al
ffff80000080ed84:	89 c7                	mov    edi,eax
ffff80000080ed86:	49 89 df             	mov    r15,rbx
ffff80000080ed89:	48 b8 e9 71 ee ff ff 	movabs rax,0xffffffffffee71e9
ffff80000080ed90:	ff ff ff 
ffff80000080ed93:	48 01 d8             	add    rax,rbx
ffff80000080ed96:	ff d0                	call   rax
ffff80000080ed98:	0f b6 c0             	movzx  eax,al
ffff80000080ed9b:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:70
        printf("reset disk done.\nstat now:%x\n",stat);
ffff80000080ed9e:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080eda1:	89 c6                	mov    esi,eax
ffff80000080eda3:	48 b8 71 d9 ff ff ff 	movabs rax,0xffffffffffffd971
ffff80000080edaa:	ff ff ff 
ffff80000080edad:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080edb1:	48 89 c7             	mov    rdi,rax
ffff80000080edb4:	49 89 df             	mov    r15,rbx
ffff80000080edb7:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080edbc:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff80000080edc3:	ff ff ff 
ffff80000080edc6:	48 01 da             	add    rdx,rbx
ffff80000080edc9:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:73
    }
    
    r_running=NULL;
ffff80000080edcb:	48 b8 20 fd ff ff ff 	movabs rax,0xfffffffffffffd20
ffff80000080edd2:	ff ff ff 
ffff80000080edd5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080edd9:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:74
    end_request(dev_hd);
ffff80000080ede0:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff80000080ede7:	ff ff ff 
ffff80000080edea:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080edee:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080edf0:	0f b7 c0             	movzx  eax,ax
ffff80000080edf3:	66 89 45 d2          	mov    WORD PTR [rbp-0x2e],ax
end_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:65
    int major=BLKDEV_MAJOR(dev);
ffff80000080edf7:	0f b7 45 d2          	movzx  eax,WORD PTR [rbp-0x2e]
ffff80000080edfb:	c1 f8 04             	sar    eax,0x4
ffff80000080edfe:	83 e0 0f             	and    eax,0xf
ffff80000080ee01:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:66
    blk_devs[major].current_request->dev=-1;
ffff80000080ee04:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff80000080ee0b:	ff ff ff 
ffff80000080ee0e:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080ee12:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080ee15:	48 98                	cdqe   
ffff80000080ee17:	48 c1 e0 04          	shl    rax,0x4
ffff80000080ee1b:	48 01 d0             	add    rax,rdx
ffff80000080ee1e:	48 83 c0 08          	add    rax,0x8
ffff80000080ee22:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ee25:	66 c7 00 ff ff       	mov    WORD PTR [rax],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:67
    blk_devs[major].current_request=blk_devs[major].current_request->next;
ffff80000080ee2a:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff80000080ee31:	ff ff ff 
ffff80000080ee34:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080ee38:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080ee3b:	48 98                	cdqe   
ffff80000080ee3d:	48 c1 e0 04          	shl    rax,0x4
ffff80000080ee41:	48 01 d0             	add    rax,rdx
ffff80000080ee44:	48 83 c0 08          	add    rax,0x8
ffff80000080ee48:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ee4b:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080ee4f:	48 ba 90 ff ff ff ff 	movabs rdx,0xffffffffffffff90
ffff80000080ee56:	ff ff ff 
ffff80000080ee59:	48 8b 0c 13          	mov    rcx,QWORD PTR [rbx+rdx*1]
ffff80000080ee5d:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080ee60:	48 63 d2             	movsxd rdx,edx
ffff80000080ee63:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080ee67:	48 01 ca             	add    rdx,rcx
ffff80000080ee6a:	48 83 c2 08          	add    rdx,0x8
ffff80000080ee6e:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:68
}
ffff80000080ee71:	90                   	nop
disk_int_handler_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:76
    //执行下一个请求
    hd_do_req(blk_devs[dev_hd].current_request);
ffff80000080ee72:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff80000080ee79:	ff ff ff 
ffff80000080ee7c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ee80:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080ee82:	48 ba 90 ff ff ff ff 	movabs rdx,0xffffffffffffff90
ffff80000080ee89:	ff ff ff 
ffff80000080ee8c:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080ee90:	48 98                	cdqe   
ffff80000080ee92:	48 c1 e0 04          	shl    rax,0x4
ffff80000080ee96:	48 01 d0             	add    rax,rdx
ffff80000080ee99:	48 83 c0 08          	add    rax,0x8
ffff80000080ee9d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080eea0:	48 89 c7             	mov    rdi,rax
ffff80000080eea3:	49 89 df             	mov    r15,rbx
ffff80000080eea6:	48 b8 27 e5 ee ff ff 	movabs rax,0xffffffffffeee527
ffff80000080eead:	ff ff ff 
ffff80000080eeb0:	48 01 d8             	add    rax,rbx
ffff80000080eeb3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:77
    return 0;
ffff80000080eeb5:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:78
}
ffff80000080eeba:	48 83 c4 30          	add    rsp,0x30
ffff80000080eebe:	5b                   	pop    rbx
ffff80000080eebf:	41 5f                	pop    r15
ffff80000080eec1:	5d                   	pop    rbp
ffff80000080eec2:	c3                   	ret    

ffff80000080eec3 <async_reset_disk>:
async_reset_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:80
int async_reset_disk(int disk)
{
ffff80000080eec3:	f3 0f 1e fa          	endbr64 
ffff80000080eec7:	55                   	push   rbp
ffff80000080eec8:	48 89 e5             	mov    rbp,rsp
ffff80000080eecb:	41 57                	push   r15
ffff80000080eecd:	48 83 ec 18          	sub    rsp,0x18
ffff80000080eed1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080eed1 <async_reset_disk+0xe>
ffff80000080eed8:	49 bb 7f 20 11 00 00 	movabs r11,0x11207f
ffff80000080eedf:	00 00 00 
ffff80000080eee2:	4c 01 d8             	add    rax,r11
ffff80000080eee5:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:81
    outb(PORT_DISK_CONTROL,DISK_CMD_RESET);
ffff80000080eee8:	be 0c 00 00 00       	mov    esi,0xc
ffff80000080eeed:	bf f6 03 00 00       	mov    edi,0x3f6
ffff80000080eef2:	49 89 c7             	mov    r15,rax
ffff80000080eef5:	48 ba d0 71 ee ff ff 	movabs rdx,0xffffffffffee71d0
ffff80000080eefc:	ff ff ff 
ffff80000080eeff:	48 01 c2             	add    rdx,rax
ffff80000080ef02:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:82
    return 0;
ffff80000080ef04:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:83
}
ffff80000080ef09:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080ef0d:	c9                   	leave  
ffff80000080ef0e:	c3                   	ret    

ffff80000080ef0f <async_read_disk>:
async_read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:85
int async_read_disk(int disk,unsigned int lba,int sec_n,char* mem_addr)
{
ffff80000080ef0f:	f3 0f 1e fa          	endbr64 
ffff80000080ef13:	55                   	push   rbp
ffff80000080ef14:	48 89 e5             	mov    rbp,rsp
ffff80000080ef17:	41 57                	push   r15
ffff80000080ef19:	53                   	push   rbx
ffff80000080ef1a:	48 83 ec 30          	sub    rsp,0x30
ffff80000080ef1e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ef1e <async_read_disk+0xf>
ffff80000080ef25:	49 bb 32 20 11 00 00 	movabs r11,0x112032
ffff80000080ef2c:	00 00 00 
ffff80000080ef2f:	4c 01 db             	add    rbx,r11
ffff80000080ef32:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080ef35:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080ef38:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080ef3b:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:86
    unsigned short port=PORT_DISK_MAJOR;
ffff80000080ef3f:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:87
    int slave_disk=0;
ffff80000080ef45:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:88
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080ef4c:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080ef50:	74 06                	je     ffff80000080ef58 <async_read_disk+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:88 (discriminator 1)
ffff80000080ef52:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080ef56:	75 06                	jne    ffff80000080ef5e <async_read_disk+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:89
        port=PORT_DISK_SLAVE;
ffff80000080ef58:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:90
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
ffff80000080ef5e:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080ef62:	74 06                	je     ffff80000080ef6a <async_read_disk+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:90 (discriminator 1)
ffff80000080ef64:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080ef68:	75 07                	jne    ffff80000080ef71 <async_read_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:91
        slave_disk=1;
ffff80000080ef6a:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:92
    outb(port+2,sec_n);
ffff80000080ef71:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080ef74:	0f b6 d0             	movzx  edx,al
ffff80000080ef77:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ef7b:	83 c0 02             	add    eax,0x2
ffff80000080ef7e:	0f b7 c0             	movzx  eax,ax
ffff80000080ef81:	89 d6                	mov    esi,edx
ffff80000080ef83:	89 c7                	mov    edi,eax
ffff80000080ef85:	49 89 df             	mov    r15,rbx
ffff80000080ef88:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff80000080ef8f:	ff ff ff 
ffff80000080ef92:	48 01 d8             	add    rax,rbx
ffff80000080ef95:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:93
    outb(port+3,lba&0xff);
ffff80000080ef97:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ef9a:	0f b6 d0             	movzx  edx,al
ffff80000080ef9d:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080efa1:	83 c0 03             	add    eax,0x3
ffff80000080efa4:	0f b7 c0             	movzx  eax,ax
ffff80000080efa7:	89 d6                	mov    esi,edx
ffff80000080efa9:	89 c7                	mov    edi,eax
ffff80000080efab:	49 89 df             	mov    r15,rbx
ffff80000080efae:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff80000080efb5:	ff ff ff 
ffff80000080efb8:	48 01 d8             	add    rax,rbx
ffff80000080efbb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:94
    outb(port+4,(lba>>8)&0xff);
ffff80000080efbd:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080efc0:	c1 e8 08             	shr    eax,0x8
ffff80000080efc3:	0f b6 d0             	movzx  edx,al
ffff80000080efc6:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080efca:	83 c0 04             	add    eax,0x4
ffff80000080efcd:	0f b7 c0             	movzx  eax,ax
ffff80000080efd0:	89 d6                	mov    esi,edx
ffff80000080efd2:	89 c7                	mov    edi,eax
ffff80000080efd4:	49 89 df             	mov    r15,rbx
ffff80000080efd7:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff80000080efde:	ff ff ff 
ffff80000080efe1:	48 01 d8             	add    rax,rbx
ffff80000080efe4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:95
    outb(port+5,(lba>>16)&0xff);
ffff80000080efe6:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080efe9:	c1 e8 10             	shr    eax,0x10
ffff80000080efec:	0f b6 d0             	movzx  edx,al
ffff80000080efef:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eff3:	83 c0 05             	add    eax,0x5
ffff80000080eff6:	0f b7 c0             	movzx  eax,ax
ffff80000080eff9:	89 d6                	mov    esi,edx
ffff80000080effb:	89 c7                	mov    edi,eax
ffff80000080effd:	49 89 df             	mov    r15,rbx
ffff80000080f000:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff80000080f007:	ff ff ff 
ffff80000080f00a:	48 01 d8             	add    rax,rbx
ffff80000080f00d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96
    char drv=slave_disk?0x10:0;
ffff80000080f00f:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080f013:	74 07                	je     ffff80000080f01c <async_read_disk+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 1)
ffff80000080f015:	b8 10 00 00 00       	mov    eax,0x10
ffff80000080f01a:	eb 05                	jmp    ffff80000080f021 <async_read_disk+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 2)
ffff80000080f01c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 4)
ffff80000080f021:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:97 (discriminator 4)
    char lba_hi=(lba>>24)&0xf|drv|0xe0;
ffff80000080f024:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f027:	c1 e8 18             	shr    eax,0x18
ffff80000080f02a:	83 e0 0f             	and    eax,0xf
ffff80000080f02d:	89 c2                	mov    edx,eax
ffff80000080f02f:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffff80000080f033:	09 d0                	or     eax,edx
ffff80000080f035:	83 c8 e0             	or     eax,0xffffffe0
ffff80000080f038:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:98 (discriminator 4)
    outb(port+6,lba_hi);
ffff80000080f03b:	0f b6 45 e6          	movzx  eax,BYTE PTR [rbp-0x1a]
ffff80000080f03f:	0f b6 d0             	movzx  edx,al
ffff80000080f042:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f046:	83 c0 06             	add    eax,0x6
ffff80000080f049:	0f b7 c0             	movzx  eax,ax
ffff80000080f04c:	89 d6                	mov    esi,edx
ffff80000080f04e:	89 c7                	mov    edi,eax
ffff80000080f050:	49 89 df             	mov    r15,rbx
ffff80000080f053:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff80000080f05a:	ff ff ff 
ffff80000080f05d:	48 01 d8             	add    rax,rbx
ffff80000080f060:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:99 (discriminator 4)
    outb(port+7,DISK_CMD_READ);
ffff80000080f062:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f066:	83 c0 07             	add    eax,0x7
ffff80000080f069:	0f b7 c0             	movzx  eax,ax
ffff80000080f06c:	be 20 00 00 00       	mov    esi,0x20
ffff80000080f071:	89 c7                	mov    edi,eax
ffff80000080f073:	49 89 df             	mov    r15,rbx
ffff80000080f076:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff80000080f07d:	ff ff ff 
ffff80000080f080:	48 01 d8             	add    rax,rbx
ffff80000080f083:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:119 (discriminator 4)
    // }
    // for(int i=0;i<running_req->sec_n*256;i++)
    // {
    //     *mem_addr++=inw(port);
    // }
    return 0;
ffff80000080f085:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:120 (discriminator 4)
}
ffff80000080f08a:	48 83 c4 30          	add    rsp,0x30
ffff80000080f08e:	5b                   	pop    rbx
ffff80000080f08f:	41 5f                	pop    r15
ffff80000080f091:	5d                   	pop    rbp
ffff80000080f092:	c3                   	ret    

ffff80000080f093 <async_write_disk>:
async_write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:122
int async_write_disk(int disk,unsigned int lba, int sec_n, char* mem_ptr)
{
ffff80000080f093:	f3 0f 1e fa          	endbr64 
ffff80000080f097:	55                   	push   rbp
ffff80000080f098:	48 89 e5             	mov    rbp,rsp
ffff80000080f09b:	41 57                	push   r15
ffff80000080f09d:	53                   	push   rbx
ffff80000080f09e:	48 83 ec 30          	sub    rsp,0x30
ffff80000080f0a2:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f0a2 <async_write_disk+0xf>
ffff80000080f0a9:	49 bb ae 1e 11 00 00 	movabs r11,0x111eae
ffff80000080f0b0:	00 00 00 
ffff80000080f0b3:	4c 01 db             	add    rbx,r11
ffff80000080f0b6:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080f0b9:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080f0bc:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080f0bf:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:123
    unsigned short port=PORT_DISK_MAJOR;
ffff80000080f0c3:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:124
    int slave_disk=0;
ffff80000080f0c9:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:125
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080f0d0:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080f0d4:	74 06                	je     ffff80000080f0dc <async_write_disk+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:125 (discriminator 1)
ffff80000080f0d6:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080f0da:	75 06                	jne    ffff80000080f0e2 <async_write_disk+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:126
        port=PORT_DISK_SLAVE;
ffff80000080f0dc:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:127
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
ffff80000080f0e2:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080f0e6:	74 06                	je     ffff80000080f0ee <async_write_disk+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:127 (discriminator 1)
ffff80000080f0e8:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080f0ec:	75 07                	jne    ffff80000080f0f5 <async_write_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:128
        slave_disk=1;
ffff80000080f0ee:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:131
    while (1)
    {
        byte t=inb(0x1f7);
ffff80000080f0f5:	bf f7 00 00 00       	mov    edi,0xf7
ffff80000080f0fa:	49 89 df             	mov    r15,rbx
ffff80000080f0fd:	48 b8 e9 71 ee ff ff 	movabs rax,0xffffffffffee71e9
ffff80000080f104:	ff ff ff 
ffff80000080f107:	48 01 d8             	add    rax,rbx
ffff80000080f10a:	ff d0                	call   rax
ffff80000080f10c:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:133
        //logf("istat:%x",t);
        byte err=t&1;
ffff80000080f10f:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffff80000080f113:	83 e0 01             	and    eax,0x1
ffff80000080f116:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:134
        if(err!=0)
ffff80000080f119:	80 7d e6 00          	cmp    BYTE PTR [rbp-0x1a],0x0
ffff80000080f11d:	74 0a                	je     ffff80000080f129 <async_write_disk+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:137
        {
            //printf("ERR iwriting disk\n");
            return -1;
ffff80000080f11f:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080f124:	e9 23 01 00 00       	jmp    ffff80000080f24c <async_write_disk+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:139
        }
        t&=0x88;
ffff80000080f129:	80 65 e7 88          	and    BYTE PTR [rbp-0x19],0x88
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
        if(t==0x8)break;
ffff80000080f12d:	80 7d e7 08          	cmp    BYTE PTR [rbp-0x19],0x8
ffff80000080f131:	74 02                	je     ffff80000080f135 <async_write_disk+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:130
    {
ffff80000080f133:	eb c0                	jmp    ffff80000080f0f5 <async_write_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
        if(t==0x8)break;
ffff80000080f135:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:142
    }
    outb(port+2,sec_n);
ffff80000080f136:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f139:	0f b6 d0             	movzx  edx,al
ffff80000080f13c:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f140:	83 c0 02             	add    eax,0x2
ffff80000080f143:	0f b7 c0             	movzx  eax,ax
ffff80000080f146:	89 d6                	mov    esi,edx
ffff80000080f148:	89 c7                	mov    edi,eax
ffff80000080f14a:	49 89 df             	mov    r15,rbx
ffff80000080f14d:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff80000080f154:	ff ff ff 
ffff80000080f157:	48 01 d8             	add    rax,rbx
ffff80000080f15a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:143
    outb(port+3,lba&0xff);
ffff80000080f15c:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f15f:	0f b6 d0             	movzx  edx,al
ffff80000080f162:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f166:	83 c0 03             	add    eax,0x3
ffff80000080f169:	0f b7 c0             	movzx  eax,ax
ffff80000080f16c:	89 d6                	mov    esi,edx
ffff80000080f16e:	89 c7                	mov    edi,eax
ffff80000080f170:	49 89 df             	mov    r15,rbx
ffff80000080f173:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff80000080f17a:	ff ff ff 
ffff80000080f17d:	48 01 d8             	add    rax,rbx
ffff80000080f180:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:144
    outb(port+4,(lba>>8)&0xff);
ffff80000080f182:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f185:	c1 e8 08             	shr    eax,0x8
ffff80000080f188:	0f b6 d0             	movzx  edx,al
ffff80000080f18b:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f18f:	83 c0 04             	add    eax,0x4
ffff80000080f192:	0f b7 c0             	movzx  eax,ax
ffff80000080f195:	89 d6                	mov    esi,edx
ffff80000080f197:	89 c7                	mov    edi,eax
ffff80000080f199:	49 89 df             	mov    r15,rbx
ffff80000080f19c:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff80000080f1a3:	ff ff ff 
ffff80000080f1a6:	48 01 d8             	add    rax,rbx
ffff80000080f1a9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:145
    outb(port+5,(lba>>16)&0xff);
ffff80000080f1ab:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f1ae:	c1 e8 10             	shr    eax,0x10
ffff80000080f1b1:	0f b6 d0             	movzx  edx,al
ffff80000080f1b4:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f1b8:	83 c0 05             	add    eax,0x5
ffff80000080f1bb:	0f b7 c0             	movzx  eax,ax
ffff80000080f1be:	89 d6                	mov    esi,edx
ffff80000080f1c0:	89 c7                	mov    edi,eax
ffff80000080f1c2:	49 89 df             	mov    r15,rbx
ffff80000080f1c5:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff80000080f1cc:	ff ff ff 
ffff80000080f1cf:	48 01 d8             	add    rax,rbx
ffff80000080f1d2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146
    char drv=slave_disk?0x10:0;
ffff80000080f1d4:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080f1d8:	74 07                	je     ffff80000080f1e1 <async_write_disk+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 1)
ffff80000080f1da:	b8 10 00 00 00       	mov    eax,0x10
ffff80000080f1df:	eb 05                	jmp    ffff80000080f1e6 <async_write_disk+0x153>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 2)
ffff80000080f1e1:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 4)
ffff80000080f1e6:	88 45 e5             	mov    BYTE PTR [rbp-0x1b],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:147 (discriminator 4)
    unsigned char lba_hi=(lba>>24)&0xf|drv|0xe0;
ffff80000080f1e9:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f1ec:	c1 e8 18             	shr    eax,0x18
ffff80000080f1ef:	83 e0 0f             	and    eax,0xf
ffff80000080f1f2:	89 c2                	mov    edx,eax
ffff80000080f1f4:	0f b6 45 e5          	movzx  eax,BYTE PTR [rbp-0x1b]
ffff80000080f1f8:	09 d0                	or     eax,edx
ffff80000080f1fa:	83 c8 e0             	or     eax,0xffffffe0
ffff80000080f1fd:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:148 (discriminator 4)
    outb(port+6,lba_hi);
ffff80000080f200:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffff80000080f204:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f208:	83 c0 06             	add    eax,0x6
ffff80000080f20b:	0f b7 c0             	movzx  eax,ax
ffff80000080f20e:	89 d6                	mov    esi,edx
ffff80000080f210:	89 c7                	mov    edi,eax
ffff80000080f212:	49 89 df             	mov    r15,rbx
ffff80000080f215:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff80000080f21c:	ff ff ff 
ffff80000080f21f:	48 01 d8             	add    rax,rbx
ffff80000080f222:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:149 (discriminator 4)
    outb(port+7,DISK_CMD_WRITE);
ffff80000080f224:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f228:	83 c0 07             	add    eax,0x7
ffff80000080f22b:	0f b7 c0             	movzx  eax,ax
ffff80000080f22e:	be 30 00 00 00       	mov    esi,0x30
ffff80000080f233:	89 c7                	mov    edi,eax
ffff80000080f235:	49 89 df             	mov    r15,rbx
ffff80000080f238:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff80000080f23f:	ff ff ff 
ffff80000080f242:	48 01 d8             	add    rax,rbx
ffff80000080f245:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:166 (discriminator 4)
    //     if(t==0x8)break;
    // }
    // short *p=mem_ptr;
    // for(int i=0;i<running_req->sec_n*256;i++)
    //         outw(port,*p++);
    return 0;
ffff80000080f247:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:167
}
ffff80000080f24c:	48 83 c4 30          	add    rsp,0x30
ffff80000080f250:	5b                   	pop    rbx
ffff80000080f251:	41 5f                	pop    r15
ffff80000080f253:	5d                   	pop    rbp
ffff80000080f254:	c3                   	ret    

ffff80000080f255 <read_disk>:
read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:169
int read_disk(int disk, int lba, int secn, char *dest)
{
ffff80000080f255:	f3 0f 1e fa          	endbr64 
ffff80000080f259:	55                   	push   rbp
ffff80000080f25a:	48 89 e5             	mov    rbp,rsp
ffff80000080f25d:	41 57                	push   r15
ffff80000080f25f:	53                   	push   rbx
ffff80000080f260:	48 83 ec 30          	sub    rsp,0x30
ffff80000080f264:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f264 <read_disk+0xf>
ffff80000080f26b:	49 bb ec 1c 11 00 00 	movabs r11,0x111cec
ffff80000080f272:	00 00 00 
ffff80000080f275:	4c 01 db             	add    rbx,r11
ffff80000080f278:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080f27b:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080f27e:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080f281:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:171
    // request(disk,DISKREQ_READ,lba,secn,dest);
    int ret=read_disk_asm(lba,secn,dest);
ffff80000080f285:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080f289:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff80000080f28c:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f28f:	89 ce                	mov    esi,ecx
ffff80000080f291:	89 c7                	mov    edi,eax
ffff80000080f293:	49 89 df             	mov    r15,rbx
ffff80000080f296:	48 b8 ac e6 ee ff ff 	movabs rax,0xffffffffffeee6ac
ffff80000080f29d:	ff ff ff 
ffff80000080f2a0:	48 01 d8             	add    rax,rbx
ffff80000080f2a3:	ff d0                	call   rax
ffff80000080f2a5:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:179

        // running_req->stat=REQ_STAT_DONE;
        // running_req->args->stat=REQ_STAT_EMPTY;
    }
    //set_proc_stat(running_req->pid,TASK_READY);
    running_req=NULL;
ffff80000080f2a8:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080f2af:	ff ff ff 
ffff80000080f2b2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f2b6:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:180
    return ret;
ffff80000080f2bd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:181
}
ffff80000080f2c0:	48 83 c4 30          	add    rsp,0x30
ffff80000080f2c4:	5b                   	pop    rbx
ffff80000080f2c5:	41 5f                	pop    r15
ffff80000080f2c7:	5d                   	pop    rbp
ffff80000080f2c8:	c3                   	ret    

ffff80000080f2c9 <write_disk>:
write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:183
int write_disk(int disk, int lba, int secn, char *src)
{
ffff80000080f2c9:	f3 0f 1e fa          	endbr64 
ffff80000080f2cd:	55                   	push   rbp
ffff80000080f2ce:	48 89 e5             	mov    rbp,rsp
ffff80000080f2d1:	41 57                	push   r15
ffff80000080f2d3:	53                   	push   rbx
ffff80000080f2d4:	48 83 ec 30          	sub    rsp,0x30
ffff80000080f2d8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f2d8 <write_disk+0xf>
ffff80000080f2df:	49 bb 78 1c 11 00 00 	movabs r11,0x111c78
ffff80000080f2e6:	00 00 00 
ffff80000080f2e9:	4c 01 db             	add    rbx,r11
ffff80000080f2ec:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080f2ef:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080f2f2:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080f2f5:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:185
    // request(disk,DISKREQ_WRITE,lba,secn,src);
    int ret=write_disk_asm(lba,secn,src);
ffff80000080f2f9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080f2fd:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff80000080f300:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f303:	89 ce                	mov    esi,ecx
ffff80000080f305:	89 c7                	mov    edi,eax
ffff80000080f307:	49 89 df             	mov    r15,rbx
ffff80000080f30a:	48 b8 20 e7 ee ff ff 	movabs rax,0xffffffffffeee720
ffff80000080f311:	ff ff ff 
ffff80000080f314:	48 01 d8             	add    rax,rbx
ffff80000080f317:	ff d0                	call   rax
ffff80000080f319:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:192
    if(running_req){

        // running_req->stat=REQ_STAT_DONE;
        // running_req->args->stat=REQ_STAT_EMPTY;
    }
    running_req=NULL;
ffff80000080f31c:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080f323:	ff ff ff 
ffff80000080f326:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f32a:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:193
    return ret;
ffff80000080f331:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:194
}
ffff80000080f334:	48 83 c4 30          	add    rsp,0x30
ffff80000080f338:	5b                   	pop    rbx
ffff80000080f339:	41 5f                	pop    r15
ffff80000080f33b:	5d                   	pop    rbp
ffff80000080f33c:	c3                   	ret    

ffff80000080f33d <async_check_disk>:
async_check_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:198


int async_check_disk(int disk)
{
ffff80000080f33d:	f3 0f 1e fa          	endbr64 
ffff80000080f341:	55                   	push   rbp
ffff80000080f342:	48 89 e5             	mov    rbp,rsp
ffff80000080f345:	41 57                	push   r15
ffff80000080f347:	53                   	push   rbx
ffff80000080f348:	48 83 ec 20          	sub    rsp,0x20
ffff80000080f34c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f34c <async_check_disk+0xf>
ffff80000080f353:	49 bb 04 1c 11 00 00 	movabs r11,0x111c04
ffff80000080f35a:	00 00 00 
ffff80000080f35d:	4c 01 db             	add    rbx,r11
ffff80000080f360:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:199
    unsigned short disknr=PORT_DISK_MAJOR;
ffff80000080f363:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:200
    unsigned short chkcmd=0xe0;
ffff80000080f369:	66 c7 45 ec e0 00    	mov    WORD PTR [rbp-0x14],0xe0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080f36f:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080f373:	74 06                	je     ffff80000080f37b <async_check_disk+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201 (discriminator 1)
ffff80000080f375:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080f379:	75 06                	jne    ffff80000080f381 <async_check_disk+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:202
        disknr=PORT_DISK_SLAVE;
ffff80000080f37b:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203
    if(disk==DISK_MAJOR_SLAVE||disk==DISK_SLAVE_SLAVE)
ffff80000080f381:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080f385:	74 06                	je     ffff80000080f38d <async_check_disk+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203 (discriminator 1)
ffff80000080f387:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080f38b:	75 06                	jne    ffff80000080f393 <async_check_disk+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:204
        chkcmd=0xf0;
ffff80000080f38d:	66 c7 45 ec f0 00    	mov    WORD PTR [rbp-0x14],0xf0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:205
    outb(disknr+2,1);
ffff80000080f393:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f397:	83 c0 02             	add    eax,0x2
ffff80000080f39a:	0f b7 c0             	movzx  eax,ax
ffff80000080f39d:	be 01 00 00 00       	mov    esi,0x1
ffff80000080f3a2:	89 c7                	mov    edi,eax
ffff80000080f3a4:	49 89 df             	mov    r15,rbx
ffff80000080f3a7:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff80000080f3ae:	ff ff ff 
ffff80000080f3b1:	48 01 d8             	add    rax,rbx
ffff80000080f3b4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:206
    outb(disknr+3,0);
ffff80000080f3b6:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f3ba:	83 c0 03             	add    eax,0x3
ffff80000080f3bd:	0f b7 c0             	movzx  eax,ax
ffff80000080f3c0:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f3c5:	89 c7                	mov    edi,eax
ffff80000080f3c7:	49 89 df             	mov    r15,rbx
ffff80000080f3ca:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff80000080f3d1:	ff ff ff 
ffff80000080f3d4:	48 01 d8             	add    rax,rbx
ffff80000080f3d7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:207
    outb(disknr+4,0);
ffff80000080f3d9:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f3dd:	83 c0 04             	add    eax,0x4
ffff80000080f3e0:	0f b7 c0             	movzx  eax,ax
ffff80000080f3e3:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f3e8:	89 c7                	mov    edi,eax
ffff80000080f3ea:	49 89 df             	mov    r15,rbx
ffff80000080f3ed:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff80000080f3f4:	ff ff ff 
ffff80000080f3f7:	48 01 d8             	add    rax,rbx
ffff80000080f3fa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:208
    outb(disknr+5,0);
ffff80000080f3fc:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f400:	83 c0 05             	add    eax,0x5
ffff80000080f403:	0f b7 c0             	movzx  eax,ax
ffff80000080f406:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f40b:	89 c7                	mov    edi,eax
ffff80000080f40d:	49 89 df             	mov    r15,rbx
ffff80000080f410:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff80000080f417:	ff ff ff 
ffff80000080f41a:	48 01 d8             	add    rax,rbx
ffff80000080f41d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:209
    outb(disknr+6,chkcmd);//主硬盘
ffff80000080f41f:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffff80000080f423:	0f b6 d0             	movzx  edx,al
ffff80000080f426:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f42a:	83 c0 06             	add    eax,0x6
ffff80000080f42d:	0f b7 c0             	movzx  eax,ax
ffff80000080f430:	89 d6                	mov    esi,edx
ffff80000080f432:	89 c7                	mov    edi,eax
ffff80000080f434:	49 89 df             	mov    r15,rbx
ffff80000080f437:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff80000080f43e:	ff ff ff 
ffff80000080f441:	48 01 d8             	add    rax,rbx
ffff80000080f444:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:210
    outb(disknr+7,DISK_CMD_CHECK);
ffff80000080f446:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f44a:	83 c0 07             	add    eax,0x7
ffff80000080f44d:	0f b7 c0             	movzx  eax,ax
ffff80000080f450:	be 90 00 00 00       	mov    esi,0x90
ffff80000080f455:	89 c7                	mov    edi,eax
ffff80000080f457:	49 89 df             	mov    r15,rbx
ffff80000080f45a:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff80000080f461:	ff ff ff 
ffff80000080f464:	48 01 d8             	add    rax,rbx
ffff80000080f467:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:221
    //     // {
    //     //     printf("DISK ERR\n");
    //     //     return -1;
    //     // }
    // }
    return 0;
ffff80000080f469:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222
}
ffff80000080f46e:	48 83 c4 20          	add    rsp,0x20
ffff80000080f472:	5b                   	pop    rbx
ffff80000080f473:	41 5f                	pop    r15
ffff80000080f475:	5d                   	pop    rbp
ffff80000080f476:	c3                   	ret    

ffff80000080f477 <hd_do_req>:
hd_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:226

//接口函数：负责接收VFS的请求然后执行
int hd_do_req(struct request* req)
{
ffff80000080f477:	f3 0f 1e fa          	endbr64 
ffff80000080f47b:	55                   	push   rbp
ffff80000080f47c:	48 89 e5             	mov    rbp,rsp
ffff80000080f47f:	41 57                	push   r15
ffff80000080f481:	48 83 ec 28          	sub    rsp,0x28
ffff80000080f485:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f485 <hd_do_req+0xe>
ffff80000080f48c:	49 bb cb 1a 11 00 00 	movabs r11,0x111acb
ffff80000080f493:	00 00 00 
ffff80000080f496:	4c 01 d8             	add    rax,r11
ffff80000080f499:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:227
    if(!req)
ffff80000080f49d:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080f4a2:	75 0a                	jne    ffff80000080f4ae <hd_do_req+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:228
        return -1;
ffff80000080f4a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080f4a9:	e9 38 01 00 00       	jmp    ffff80000080f5e6 <hd_do_req+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:229
    start_request(req->dev);
ffff80000080f4ae:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f4b2:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080f4b5:	0f b7 d2             	movzx  edx,dx
ffff80000080f4b8:	66 89 55 ea          	mov    WORD PTR [rbp-0x16],dx
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:70
    wait_on_req(blk_devs[BLKDEV_MAJOR(dev)].current_request->waiting);
ffff80000080f4bc:	0f b7 55 ea          	movzx  edx,WORD PTR [rbp-0x16]
ffff80000080f4c0:	c1 fa 04             	sar    edx,0x4
ffff80000080f4c3:	89 d1                	mov    ecx,edx
ffff80000080f4c5:	83 e1 0f             	and    ecx,0xf
ffff80000080f4c8:	48 ba 90 ff ff ff ff 	movabs rdx,0xffffffffffffff90
ffff80000080f4cf:	ff ff ff 
ffff80000080f4d2:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080f4d6:	48 63 d1             	movsxd rdx,ecx
ffff80000080f4d9:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080f4dd:	48 01 f2             	add    rdx,rsi
ffff80000080f4e0:	48 83 c2 08          	add    rdx,0x8
ffff80000080f4e4:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f4e7:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080f4eb:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
wait_on_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:195
        if(p->stat==TASK_READY||p->stat==TASK_RUNNING)
ffff80000080f4ef:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080f4f3:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080f4f6:	83 fa 02             	cmp    edx,0x2
ffff80000080f4f9:	74 0c                	je     ffff80000080f507 <hd_do_req+0x90>
ffff80000080f4fb:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080f4ff:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080f502:	83 fa 01             	cmp    edx,0x1
ffff80000080f505:	75 0b                	jne    ffff80000080f512 <hd_do_req+0x9b>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:196
            p->stat=TASK_SUSPENDED;
ffff80000080f507:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080f50b:	c7 42 18 03 00 00 00 	mov    DWORD PTR [rdx+0x18],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:197
}
ffff80000080f512:	90                   	nop
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:71
ffff80000080f513:	90                   	nop
hd_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:230
    int diski=BLKDEV_MINOR(req->dev);
ffff80000080f514:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f518:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080f51b:	0f b7 d2             	movzx  edx,dx
ffff80000080f51e:	83 e2 0f             	and    edx,0xf
ffff80000080f521:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:233
    // for(;disks[diski]!=args->dev;diski++);

    switch (req->cmd)
ffff80000080f524:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f528:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080f52b:	83 fa 04             	cmp    edx,0x4
ffff80000080f52e:	0f 84 8d 00 00 00    	je     ffff80000080f5c1 <hd_do_req+0x14a>
ffff80000080f534:	83 fa 04             	cmp    edx,0x4
ffff80000080f537:	0f 8f 9d 00 00 00    	jg     ffff80000080f5da <hd_do_req+0x163>
ffff80000080f53d:	85 d2                	test   edx,edx
ffff80000080f53f:	74 0a                	je     ffff80000080f54b <hd_do_req+0xd4>
ffff80000080f541:	83 fa 01             	cmp    edx,0x1
ffff80000080f544:	74 40                	je     ffff80000080f586 <hd_do_req+0x10f>
ffff80000080f546:	e9 8f 00 00 00       	jmp    ffff80000080f5da <hd_do_req+0x163>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:236
    {
    case BLKDEV_REQ_READ:
        async_read_disk(diski,req->sector,req->nr_sectors,req->buffer);
ffff80000080f54b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f54f:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080f553:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080f557:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
ffff80000080f55b:	41 89 c8             	mov    r8d,ecx
ffff80000080f55e:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080f562:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
ffff80000080f566:	89 ce                	mov    esi,ecx
ffff80000080f568:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
ffff80000080f56b:	48 89 d1             	mov    rcx,rdx
ffff80000080f56e:	44 89 c2             	mov    edx,r8d
ffff80000080f571:	49 89 c7             	mov    r15,rax
ffff80000080f574:	49 b8 bf df ee ff ff 	movabs r8,0xffffffffffeedfbf
ffff80000080f57b:	ff ff ff 
ffff80000080f57e:	49 01 c0             	add    r8,rax
ffff80000080f581:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:237
        break;
ffff80000080f584:	eb 5b                	jmp    ffff80000080f5e1 <hd_do_req+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:239
    case BLKDEV_REQ_WRITE:
        async_write_disk(diski,req->sector,req->nr_sectors,req->buffer);
ffff80000080f586:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f58a:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080f58e:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080f592:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
ffff80000080f596:	41 89 c8             	mov    r8d,ecx
ffff80000080f599:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080f59d:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
ffff80000080f5a1:	89 ce                	mov    esi,ecx
ffff80000080f5a3:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
ffff80000080f5a6:	48 89 d1             	mov    rcx,rdx
ffff80000080f5a9:	44 89 c2             	mov    edx,r8d
ffff80000080f5ac:	49 89 c7             	mov    r15,rax
ffff80000080f5af:	49 b8 43 e1 ee ff ff 	movabs r8,0xffffffffffeee143
ffff80000080f5b6:	ff ff ff 
ffff80000080f5b9:	49 01 c0             	add    r8,rax
ffff80000080f5bc:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:240
        break;
ffff80000080f5bf:	eb 20                	jmp    ffff80000080f5e1 <hd_do_req+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:242
    case DRVF_CHK:
        async_check_disk(diski);
ffff80000080f5c1:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080f5c4:	89 d7                	mov    edi,edx
ffff80000080f5c6:	49 89 c7             	mov    r15,rax
ffff80000080f5c9:	48 ba ed e3 ee ff ff 	movabs rdx,0xffffffffffeee3ed
ffff80000080f5d0:	ff ff ff 
ffff80000080f5d3:	48 01 c2             	add    rdx,rax
ffff80000080f5d6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:243
        break;
ffff80000080f5d8:	eb 07                	jmp    ffff80000080f5e1 <hd_do_req+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:244
    default:return -1;
ffff80000080f5da:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080f5df:	eb 05                	jmp    ffff80000080f5e6 <hd_do_req+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:246
    }
    return 0;
ffff80000080f5e1:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:247
ffff80000080f5e6:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080f5ea:	c9                   	leave  
ffff80000080f5eb:	c3                   	ret    
ffff80000080f5ec:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffff80000080f5f0 <disk_int_handler>:
disk_int_handler():
ffff80000080f5f0:	e8 59 8b ff ff       	call   ffff80000080814e <eoi>
ffff80000080f5f5:	e8 35 f5 ff ff       	call   ffff80000080eb2f <disk_int_handler_c>
ffff80000080f5fa:	48 cf                	iretq  

ffff80000080f5fc <read_disk_asm>:
read_disk_asm():
ffff80000080f5fc:	55                   	push   rbp
ffff80000080f5fd:	48 89 e5             	mov    rbp,rsp
ffff80000080f600:	66 ba f7 01          	mov    dx,0x1f7
ffff80000080f604:	31 c9                	xor    ecx,ecx
ffff80000080f606:	48 89 f8             	mov    rax,rdi
ffff80000080f609:	48 89 f1             	mov    rcx,rsi
ffff80000080f60c:	48 89 d3             	mov    rbx,rdx
ffff80000080f60f:	48 89 c6             	mov    rsi,rax
ffff80000080f612:	66 ba f2 01          	mov    dx,0x1f2
ffff80000080f616:	88 c8                	mov    al,cl
ffff80000080f618:	ee                   	out    dx,al
ffff80000080f619:	66 ba f3 01          	mov    dx,0x1f3
ffff80000080f61d:	89 f0                	mov    eax,esi
ffff80000080f61f:	ee                   	out    dx,al
ffff80000080f620:	66 ff c2             	inc    dx
ffff80000080f623:	c1 e8 08             	shr    eax,0x8
ffff80000080f626:	ee                   	out    dx,al
ffff80000080f627:	66 ff c2             	inc    dx
ffff80000080f62a:	c1 e8 08             	shr    eax,0x8
ffff80000080f62d:	ee                   	out    dx,al
ffff80000080f62e:	66 ff c2             	inc    dx
ffff80000080f631:	66 c1 e8 08          	shr    ax,0x8
ffff80000080f635:	24 0f                	and    al,0xf
ffff80000080f637:	0c e0                	or     al,0xe0
ffff80000080f639:	ee                   	out    dx,al
ffff80000080f63a:	66 ff c2             	inc    dx
ffff80000080f63d:	b0 20                	mov    al,0x20
ffff80000080f63f:	ee                   	out    dx,al

ffff80000080f640 <read_disk_asm.wait>:
read_disk_asm.wait():
ffff80000080f640:	90                   	nop
ffff80000080f641:	ec                   	in     al,dx
ffff80000080f642:	24 88                	and    al,0x88
ffff80000080f644:	3c 08                	cmp    al,0x8
ffff80000080f646:	75 f8                	jne    ffff80000080f640 <read_disk_asm.wait>
ffff80000080f648:	66 89 d7             	mov    di,dx
ffff80000080f64b:	48 c1 e1 08          	shl    rcx,0x8
ffff80000080f64f:	66 ba f0 01          	mov    dx,0x1f0

ffff80000080f653 <read_disk_asm.read>:
read_disk_asm.read():
ffff80000080f653:	66 ed                	in     ax,dx
ffff80000080f655:	66 89 03             	mov    WORD PTR [rbx],ax
ffff80000080f658:	48 83 c3 02          	add    rbx,0x2
ffff80000080f65c:	e2 f5                	loop   ffff80000080f653 <read_disk_asm.read>
ffff80000080f65e:	c9                   	leave  
ffff80000080f65f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f664:	c3                   	ret    

ffff80000080f665 <read_disk_asm.err_disk_reading>:
read_disk_asm.err_disk_reading():
ffff80000080f665:	66 ba f1 01          	mov    dx,0x1f1
ffff80000080f669:	48 31 c0             	xor    rax,rax
ffff80000080f66c:	66 ed                	in     ax,dx
ffff80000080f66e:	c9                   	leave  
ffff80000080f66f:	c3                   	ret    

ffff80000080f670 <write_disk_asm>:
write_disk_asm():
ffff80000080f670:	55                   	push   rbp
ffff80000080f671:	48 89 e5             	mov    rbp,rsp
ffff80000080f674:	48 89 f8             	mov    rax,rdi
ffff80000080f677:	48 89 f1             	mov    rcx,rsi
ffff80000080f67a:	48 89 d3             	mov    rbx,rdx
ffff80000080f67d:	50                   	push   rax
ffff80000080f67e:	66 ba f2 01          	mov    dx,0x1f2
ffff80000080f682:	88 c8                	mov    al,cl
ffff80000080f684:	ee                   	out    dx,al
ffff80000080f685:	58                   	pop    rax
ffff80000080f686:	66 ba f3 01          	mov    dx,0x1f3
ffff80000080f68a:	ee                   	out    dx,al
ffff80000080f68b:	c1 e8 08             	shr    eax,0x8
ffff80000080f68e:	66 ba f4 01          	mov    dx,0x1f4
ffff80000080f692:	ee                   	out    dx,al
ffff80000080f693:	c1 e8 08             	shr    eax,0x8
ffff80000080f696:	66 ba f5 01          	mov    dx,0x1f5
ffff80000080f69a:	ee                   	out    dx,al
ffff80000080f69b:	c1 e8 08             	shr    eax,0x8
ffff80000080f69e:	24 0f                	and    al,0xf
ffff80000080f6a0:	0c e0                	or     al,0xe0
ffff80000080f6a2:	66 ba f6 01          	mov    dx,0x1f6
ffff80000080f6a6:	ee                   	out    dx,al
ffff80000080f6a7:	66 ba f7 01          	mov    dx,0x1f7
ffff80000080f6ab:	b0 30                	mov    al,0x30
ffff80000080f6ad:	ee                   	out    dx,al

ffff80000080f6ae <write_disk_asm.not_ready2>:
write_disk_asm.not_ready2():
ffff80000080f6ae:	90                   	nop
ffff80000080f6af:	ec                   	in     al,dx
ffff80000080f6b0:	24 88                	and    al,0x88
ffff80000080f6b2:	3c 08                	cmp    al,0x8
ffff80000080f6b4:	75 f8                	jne    ffff80000080f6ae <write_disk_asm.not_ready2>
ffff80000080f6b6:	48 c1 e1 08          	shl    rcx,0x8
ffff80000080f6ba:	66 ba f0 01          	mov    dx,0x1f0

ffff80000080f6be <write_disk_asm.go_on_write>:
write_disk_asm.go_on_write():
ffff80000080f6be:	66 8b 03             	mov    ax,WORD PTR [rbx]
ffff80000080f6c1:	66 ef                	out    dx,ax
ffff80000080f6c3:	83 c3 02             	add    ebx,0x2
ffff80000080f6c6:	e2 f6                	loop   ffff80000080f6be <write_disk_asm.go_on_write>
ffff80000080f6c8:	c9                   	leave  
ffff80000080f6c9:	c3                   	ret    

ffff80000080f6ca <DISK1_FAT32_read_FAT_Entry>:
DISK1_FAT32_read_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:14
#include "memory.h"
#include "devman.h"
#include <sys/unistd.h>

unsigned int DISK1_FAT32_read_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry)
{
ffff80000080f6ca:	f3 0f 1e fa          	endbr64 
ffff80000080f6ce:	55                   	push   rbp
ffff80000080f6cf:	48 89 e5             	mov    rbp,rsp
ffff80000080f6d2:	41 57                	push   r15
ffff80000080f6d4:	53                   	push   rbx
ffff80000080f6d5:	48 83 ec 20          	sub    rsp,0x20
ffff80000080f6d9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f6d9 <DISK1_FAT32_read_FAT_Entry+0xf>
ffff80000080f6e0:	49 bb 77 18 11 00 00 	movabs r11,0x111877
ffff80000080f6e7:	00 00 00 
ffff80000080f6ea:	4c 01 db             	add    rbx,r11
ffff80000080f6ed:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080f6f1:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:16
	unsigned int *buf;
	buffer_head *bh=bread(root_sb->dev,fsbi->FAT1_firstsector + (fat_entry >> 7));
ffff80000080f6f4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f6f8:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080f6fc:	89 c2                	mov    edx,eax
ffff80000080f6fe:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f701:	c1 e8 07             	shr    eax,0x7
ffff80000080f704:	01 d0                	add    eax,edx
ffff80000080f706:	89 c2                	mov    edx,eax
ffff80000080f708:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080f70f:	ff ff ff 
ffff80000080f712:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f716:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f719:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080f71d:	0f b7 c0             	movzx  eax,ax
ffff80000080f720:	89 d6                	mov    esi,edx
ffff80000080f722:	89 c7                	mov    edi,eax
ffff80000080f724:	49 89 df             	mov    r15,rbx
ffff80000080f727:	48 b8 9b cd ee ff ff 	movabs rax,0xffffffffffeecd9b
ffff80000080f72e:	ff ff ff 
ffff80000080f731:	48 01 d8             	add    rax,rbx
ffff80000080f734:	ff d0                	call   rax
ffff80000080f736:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:17
	buf=bh->data;
ffff80000080f73a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f73e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f741:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:18
    printf("DISK1_FAT32_read_FAT_Entry fat_entry:%x,%#010x\n",fat_entry,buf[fat_entry & 0x7f]);
ffff80000080f745:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f748:	83 e0 7f             	and    eax,0x7f
ffff80000080f74b:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080f752:	00 
ffff80000080f753:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f757:	48 01 d0             	add    rax,rdx
ffff80000080f75a:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080f75c:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f75f:	89 c6                	mov    esi,eax
ffff80000080f761:	48 b8 90 d9 ff ff ff 	movabs rax,0xffffffffffffd990
ffff80000080f768:	ff ff ff 
ffff80000080f76b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080f76f:	48 89 c7             	mov    rdi,rax
ffff80000080f772:	49 89 df             	mov    r15,rbx
ffff80000080f775:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f77a:	48 b9 71 0a ee ff ff 	movabs rcx,0xffffffffffee0a71
ffff80000080f781:	ff ff ff 
ffff80000080f784:	48 01 d9             	add    rcx,rbx
ffff80000080f787:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:19
	brelse(bh);
ffff80000080f789:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f78d:	48 89 c7             	mov    rdi,rax
ffff80000080f790:	49 89 df             	mov    r15,rbx
ffff80000080f793:	48 b8 95 d3 ee ff ff 	movabs rax,0xffffffffffeed395
ffff80000080f79a:	ff ff ff 
ffff80000080f79d:	48 01 d8             	add    rax,rbx
ffff80000080f7a0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:20
	return buf[fat_entry & 0x7f] & 0x0fffffff;
ffff80000080f7a2:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f7a5:	83 e0 7f             	and    eax,0x7f
ffff80000080f7a8:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080f7af:	00 
ffff80000080f7b0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f7b4:	48 01 d0             	add    rax,rdx
ffff80000080f7b7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080f7b9:	25 ff ff ff 0f       	and    eax,0xfffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:21
}
ffff80000080f7be:	48 83 c4 20          	add    rsp,0x20
ffff80000080f7c2:	5b                   	pop    rbx
ffff80000080f7c3:	41 5f                	pop    r15
ffff80000080f7c5:	5d                   	pop    rbp
ffff80000080f7c6:	c3                   	ret    

ffff80000080f7c7 <DISK1_FAT32_write_FAT_Entry>:
DISK1_FAT32_write_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:25


unsigned long DISK1_FAT32_write_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry,unsigned int value)
{
ffff80000080f7c7:	f3 0f 1e fa          	endbr64 
ffff80000080f7cb:	55                   	push   rbp
ffff80000080f7cc:	48 89 e5             	mov    rbp,rsp
ffff80000080f7cf:	41 57                	push   r15
ffff80000080f7d1:	53                   	push   rbx
ffff80000080f7d2:	48 83 ec 30          	sub    rsp,0x30
ffff80000080f7d6:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f7d6 <DISK1_FAT32_write_FAT_Entry+0xf>
ffff80000080f7dd:	49 bb 7a 17 11 00 00 	movabs r11,0x11177a
ffff80000080f7e4:	00 00 00 
ffff80000080f7e7:	4c 01 db             	add    rbx,r11
ffff80000080f7ea:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080f7ee:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
ffff80000080f7f1:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:29
	unsigned int *buf;
	int i;

	buffer_head *bh=bread(root_sb->dev,fsbi->FAT1_firstsector + (fat_entry >> 7));
ffff80000080f7f4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080f7f8:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080f7fc:	89 c2                	mov    edx,eax
ffff80000080f7fe:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080f801:	c1 e8 07             	shr    eax,0x7
ffff80000080f804:	01 d0                	add    eax,edx
ffff80000080f806:	89 c2                	mov    edx,eax
ffff80000080f808:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080f80f:	ff ff ff 
ffff80000080f812:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f816:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f819:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080f81d:	0f b7 c0             	movzx  eax,ax
ffff80000080f820:	89 d6                	mov    esi,edx
ffff80000080f822:	89 c7                	mov    edi,eax
ffff80000080f824:	49 89 df             	mov    r15,rbx
ffff80000080f827:	48 b8 9b cd ee ff ff 	movabs rax,0xffffffffffeecd9b
ffff80000080f82e:	ff ff ff 
ffff80000080f831:	48 01 d8             	add    rax,rbx
ffff80000080f834:	ff d0                	call   rax
ffff80000080f836:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:30
	buf=bh->data;
ffff80000080f83a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f83e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f841:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:31
    buf[fat_entry & 0x7f] = (buf[fat_entry & 0x7f] & 0xf0000000) | (value & 0x0fffffff);
ffff80000080f845:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080f848:	83 e0 7f             	and    eax,0x7f
ffff80000080f84b:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080f852:	00 
ffff80000080f853:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f857:	48 01 d0             	add    rax,rdx
ffff80000080f85a:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080f85c:	25 00 00 00 f0       	and    eax,0xf0000000
ffff80000080f861:	89 c1                	mov    ecx,eax
ffff80000080f863:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff80000080f866:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff80000080f86b:	89 c2                	mov    edx,eax
ffff80000080f86d:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080f870:	83 e0 7f             	and    eax,0x7f
ffff80000080f873:	48 8d 34 85 00 00 00 	lea    rsi,[rax*4+0x0]
ffff80000080f87a:	00 
ffff80000080f87b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f87f:	48 01 f0             	add    rax,rsi
ffff80000080f882:	09 ca                	or     edx,ecx
ffff80000080f884:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:33

	for(i = 0;i < fsbi->NumFATs;i++){
ffff80000080f886:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080f88d:	eb 70                	jmp    ffff80000080f8ff <DISK1_FAT32_write_FAT_Entry+0x138>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:34 (discriminator 3)
		off_t off=(fsbi->FAT1_firstsector + fsbi->sector_per_FAT * i + (fat_entry >> 7))*SECTOR_SIZE;
ffff80000080f88f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080f893:	48 8b 48 30          	mov    rcx,QWORD PTR [rax+0x30]
ffff80000080f897:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080f89b:	48 8b 50 38          	mov    rdx,QWORD PTR [rax+0x38]
ffff80000080f89f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f8a2:	48 98                	cdqe   
ffff80000080f8a4:	48 0f af c2          	imul   rax,rdx
ffff80000080f8a8:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080f8ac:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080f8af:	c1 e8 07             	shr    eax,0x7
ffff80000080f8b2:	89 c0                	mov    eax,eax
ffff80000080f8b4:	48 01 d0             	add    rax,rdx
ffff80000080f8b7:	48 c1 e0 09          	shl    rax,0x9
ffff80000080f8bb:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:35 (discriminator 3)
		blkdev_write(root_sb->dev,off,SECTOR_SIZE,buf);
ffff80000080f8bf:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080f8c6:	ff ff ff 
ffff80000080f8c9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f8cd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f8d0:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080f8d4:	0f b7 c0             	movzx  eax,ax
ffff80000080f8d7:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f8db:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff80000080f8df:	48 89 d1             	mov    rcx,rdx
ffff80000080f8e2:	ba 00 02 00 00       	mov    edx,0x200
ffff80000080f8e7:	89 c7                	mov    edi,eax
ffff80000080f8e9:	49 89 df             	mov    r15,rbx
ffff80000080f8ec:	48 b8 34 d2 ee ff ff 	movabs rax,0xffffffffffeed234
ffff80000080f8f3:	ff ff ff 
ffff80000080f8f6:	48 01 d8             	add    rax,rbx
ffff80000080f8f9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:33 (discriminator 3)
	for(i = 0;i < fsbi->NumFATs;i++){
ffff80000080f8fb:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:33 (discriminator 1)
ffff80000080f8ff:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f902:	48 63 d0             	movsxd rdx,eax
ffff80000080f905:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080f909:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080f90d:	48 39 c2             	cmp    rdx,rax
ffff80000080f910:	0f 82 79 ff ff ff    	jb     ffff80000080f88f <DISK1_FAT32_write_FAT_Entry+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:37
    }
	brelse(bh);
ffff80000080f916:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f91a:	48 89 c7             	mov    rdi,rax
ffff80000080f91d:	49 89 df             	mov    r15,rbx
ffff80000080f920:	48 b8 95 d3 ee ff ff 	movabs rax,0xffffffffffeed395
ffff80000080f927:	ff ff ff 
ffff80000080f92a:	48 01 d8             	add    rax,rbx
ffff80000080f92d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:38
	return 1;
ffff80000080f92f:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:39
}
ffff80000080f934:	48 83 c4 30          	add    rsp,0x30
ffff80000080f938:	5b                   	pop    rbx
ffff80000080f939:	41 5f                	pop    r15
ffff80000080f93b:	5d                   	pop    rbp
ffff80000080f93c:	c3                   	ret    

ffff80000080f93d <FAT32_open>:
FAT32_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:43


long FAT32_open(struct index_node * inode,struct file * filp)
{
ffff80000080f93d:	f3 0f 1e fa          	endbr64 
ffff80000080f941:	55                   	push   rbp
ffff80000080f942:	48 89 e5             	mov    rbp,rsp
ffff80000080f945:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f945 <FAT32_open+0x8>
ffff80000080f94c:	49 bb 0b 16 11 00 00 	movabs r11,0x11160b
ffff80000080f953:	00 00 00 
ffff80000080f956:	4c 01 d8             	add    rax,r11
ffff80000080f959:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080f95d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:44
	return 1;
ffff80000080f961:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:45
}
ffff80000080f966:	5d                   	pop    rbp
ffff80000080f967:	c3                   	ret    

ffff80000080f968 <FAT32_close>:
FAT32_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:49


long FAT32_close(struct index_node * inode,struct file * filp)
{
ffff80000080f968:	f3 0f 1e fa          	endbr64 
ffff80000080f96c:	55                   	push   rbp
ffff80000080f96d:	48 89 e5             	mov    rbp,rsp
ffff80000080f970:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f970 <FAT32_close+0x8>
ffff80000080f977:	49 bb e0 15 11 00 00 	movabs r11,0x1115e0
ffff80000080f97e:	00 00 00 
ffff80000080f981:	4c 01 d8             	add    rax,r11
ffff80000080f984:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080f988:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:50
	return 1;
ffff80000080f98c:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:51
}
ffff80000080f991:	5d                   	pop    rbp
ffff80000080f992:	c3                   	ret    

ffff80000080f993 <FAT32_read>:
FAT32_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:55


long FAT32_read(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff80000080f993:	f3 0f 1e fa          	endbr64 
ffff80000080f997:	55                   	push   rbp
ffff80000080f998:	48 89 e5             	mov    rbp,rsp
ffff80000080f99b:	41 57                	push   r15
ffff80000080f99d:	53                   	push   rbx
ffff80000080f99e:	48 83 ec 70          	sub    rsp,0x70
ffff80000080f9a2:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f9a2 <FAT32_read+0xf>
ffff80000080f9a9:	49 bb ae 15 11 00 00 	movabs r11,0x1115ae
ffff80000080f9b0:	00 00 00 
ffff80000080f9b3:	4c 01 db             	add    rbx,r11
ffff80000080f9b6:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff80000080f9ba:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffff80000080f9be:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
ffff80000080f9c2:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:56
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff80000080f9c6:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f9ca:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f9ce:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080f9d2:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080f9d6:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:57
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff80000080f9da:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f9de:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f9e2:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080f9e6:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080f9ea:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080f9ee:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:59

	unsigned long cluster = finode->first_cluster;
ffff80000080f9f2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080f9f6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f9f9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:60
	unsigned long sector = 0;
ffff80000080f9fd:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff80000080fa04:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:61
	int i,length = 0;
ffff80000080fa05:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:62
	long retval = 0;
ffff80000080fa0c:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080fa13:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:63
	int index = *position / fsbi->bytes_per_cluster;
ffff80000080fa14:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080fa18:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fa1b:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080fa1f:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff80000080fa23:	48 99                	cqo    
ffff80000080fa25:	48 f7 fe             	idiv   rsi
ffff80000080fa28:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:64
	long offset = *position % fsbi->bytes_per_cluster;
ffff80000080fa2b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080fa2f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fa32:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080fa36:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000080fa3a:	48 99                	cqo    
ffff80000080fa3c:	48 f7 f9             	idiv   rcx
ffff80000080fa3f:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:65
	char * buffer = (char *) kmallocat(0,(fsbi->bytes_per_cluster+PAGE_4K_SIZE-1)/PAGE_4K_SIZE);
ffff80000080fa43:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080fa47:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080fa4b:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080fa51:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff80000080fa58:	48 85 c0             	test   rax,rax
ffff80000080fa5b:	48 0f 48 c2          	cmovs  rax,rdx
ffff80000080fa5f:	48 c1 f8 0c          	sar    rax,0xc
ffff80000080fa63:	89 c6                	mov    esi,eax
ffff80000080fa65:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080fa6a:	49 89 df             	mov    r15,rbx
ffff80000080fa6d:	48 b8 ee 13 ee ff ff 	movabs rax,0xffffffffffee13ee
ffff80000080fa74:	ff ff ff 
ffff80000080fa77:	48 01 d8             	add    rax,rbx
ffff80000080fa7a:	ff d0                	call   rax
ffff80000080fa7c:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:67

	if(!cluster)
ffff80000080fa80:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080fa85:	75 0c                	jne    ffff80000080fa93 <FAT32_read+0x100>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:68
		return -EFAULT;
ffff80000080fa87:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080fa8e:	e9 6f 02 00 00       	jmp    ffff80000080fd02 <FAT32_read+0x36f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:69
	for(i = 0;i < index;i++)
ffff80000080fa93:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080fa9a:	eb 2b                	jmp    ffff80000080fac7 <FAT32_read+0x134>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:70 (discriminator 3)
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000080fa9c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080faa0:	89 c2                	mov    edx,eax
ffff80000080faa2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080faa6:	89 d6                	mov    esi,edx
ffff80000080faa8:	48 89 c7             	mov    rdi,rax
ffff80000080faab:	49 89 df             	mov    r15,rbx
ffff80000080faae:	48 b8 7a e7 ee ff ff 	movabs rax,0xffffffffffeee77a
ffff80000080fab5:	ff ff ff 
ffff80000080fab8:	48 01 d8             	add    rax,rbx
ffff80000080fabb:	ff d0                	call   rax
ffff80000080fabd:	89 c0                	mov    eax,eax
ffff80000080fabf:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:69 (discriminator 3)
	for(i = 0;i < index;i++)
ffff80000080fac3:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:69 (discriminator 1)
ffff80000080fac7:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080faca:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff80000080facd:	7c cd                	jl     ffff80000080fa9c <FAT32_read+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:72

	if(*position + count > filp->dentry->dir_inode->file_size)
ffff80000080facf:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080fad3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fad6:	48 89 c2             	mov    rdx,rax
ffff80000080fad9:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fadd:	48 01 c2             	add    rdx,rax
ffff80000080fae0:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080fae4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fae8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080faec:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080faef:	48 39 c2             	cmp    rdx,rax
ffff80000080faf2:	76 2c                	jbe    ffff80000080fb20 <FAT32_read+0x18d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:73
		index = count = filp->dentry->dir_inode->file_size - *position;
ffff80000080faf4:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080faf8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fafc:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fb00:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080fb03:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080fb07:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fb0a:	48 89 c1             	mov    rcx,rax
ffff80000080fb0d:	48 89 d0             	mov    rax,rdx
ffff80000080fb10:	48 29 c8             	sub    rax,rcx
ffff80000080fb13:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffff80000080fb17:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fb1b:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
ffff80000080fb1e:	eb 07                	jmp    ffff80000080fb27 <FAT32_read+0x194>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:75
	else
		index = count;
ffff80000080fb20:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fb24:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:81

//	printf("FAT32_read first_cluster:%d,size:%d,preempt_count:%d\n",finode->first_cluster,filp->dentry->dir_inode->file_size,current->preempt_count);

	do
	{
		memset(buffer,0,fsbi->bytes_per_cluster);
ffff80000080fb27:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080fb2b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080fb2f:	89 c2                	mov    edx,eax
ffff80000080fb31:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080fb35:	be 00 00 00 00       	mov    esi,0x0
ffff80000080fb3a:	48 89 c7             	mov    rdi,rax
ffff80000080fb3d:	49 89 df             	mov    r15,rbx
ffff80000080fb40:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff80000080fb47:	ff ff ff 
ffff80000080fb4a:	48 01 d8             	add    rax,rbx
ffff80000080fb4d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:82
		sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff80000080fb4f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080fb53:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff80000080fb57:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fb5b:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff80000080fb5f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080fb63:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fb67:	48 0f af c2          	imul   rax,rdx
ffff80000080fb6b:	48 01 c8             	add    rax,rcx
ffff80000080fb6e:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:83
		if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff80000080fb72:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080fb76:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fb7a:	48 c1 e0 09          	shl    rax,0x9
ffff80000080fb7e:	48 89 c7             	mov    rdi,rax
ffff80000080fb81:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080fb85:	48 c1 e0 09          	shl    rax,0x9
ffff80000080fb89:	48 89 c6             	mov    rsi,rax
ffff80000080fb8c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080fb90:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fb94:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fb98:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff80000080fb9c:	0f b7 c0             	movzx  eax,ax
ffff80000080fb9f:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080fba3:	48 89 d1             	mov    rcx,rdx
ffff80000080fba6:	48 89 fa             	mov    rdx,rdi
ffff80000080fba9:	89 c7                	mov    edi,eax
ffff80000080fbab:	49 89 df             	mov    r15,rbx
ffff80000080fbae:	48 b8 d3 d0 ee ff ff 	movabs rax,0xffffffffffeed0d3
ffff80000080fbb5:	ff ff ff 
ffff80000080fbb8:	48 01 d8             	add    rax,rbx
ffff80000080fbbb:	ff d0                	call   rax
ffff80000080fbbd:	85 c0                	test   eax,eax
ffff80000080fbbf:	79 35                	jns    ffff80000080fbf6 <FAT32_read+0x263>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:85
		{
			printf("FAT32 FS(read) read disk ERROR!!!!!!!!!!\n");
ffff80000080fbc1:	48 b8 c0 d9 ff ff ff 	movabs rax,0xffffffffffffd9c0
ffff80000080fbc8:	ff ff ff 
ffff80000080fbcb:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080fbcf:	48 89 c7             	mov    rdi,rax
ffff80000080fbd2:	49 89 df             	mov    r15,rbx
ffff80000080fbd5:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fbda:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff80000080fbe1:	ff ff ff 
ffff80000080fbe4:	48 01 da             	add    rdx,rbx
ffff80000080fbe7:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:86
			retval = -EIO;
ffff80000080fbe9:	48 c7 45 d8 e3 ff ff 	mov    QWORD PTR [rbp-0x28],0xffffffffffffffe3
ffff80000080fbf0:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:87
			break;
ffff80000080fbf1:	e9 e1 00 00 00       	jmp    ffff80000080fcd7 <FAT32_read+0x344>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:90
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
ffff80000080fbf6:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080fbf9:	48 63 d0             	movsxd rdx,eax
ffff80000080fbfc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080fc00:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080fc04:	48 2b 45 c8          	sub    rax,QWORD PTR [rbp-0x38]
ffff80000080fc08:	48 39 c2             	cmp    rdx,rax
ffff80000080fc0b:	48 0f 4e c2          	cmovle rax,rdx
ffff80000080fc0f:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:92

		if((unsigned long)buf < MAX_TASKS)
ffff80000080fc12:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fc16:	48 83 f8 1f          	cmp    rax,0x1f
ffff80000080fc1a:	77 2c                	ja     ffff80000080fc48 <FAT32_read+0x2b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:93
			memcpy(buffer + offset,buf,length);
ffff80000080fc1c:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff80000080fc1f:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080fc23:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080fc27:	48 01 c1             	add    rcx,rax
ffff80000080fc2a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fc2e:	48 89 c6             	mov    rsi,rax
ffff80000080fc31:	48 89 cf             	mov    rdi,rcx
ffff80000080fc34:	49 89 df             	mov    r15,rbx
ffff80000080fc37:	48 b8 53 21 ef ff ff 	movabs rax,0xffffffffffef2153
ffff80000080fc3e:	ff ff ff 
ffff80000080fc41:	48 01 d8             	add    rax,rbx
ffff80000080fc44:	ff d0                	call   rax
ffff80000080fc46:	eb 2a                	jmp    ffff80000080fc72 <FAT32_read+0x2df>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:95
		else
			memcpy(buffer + offset,buf,length);
ffff80000080fc48:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff80000080fc4b:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080fc4f:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080fc53:	48 01 c1             	add    rcx,rax
ffff80000080fc56:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fc5a:	48 89 c6             	mov    rsi,rax
ffff80000080fc5d:	48 89 cf             	mov    rdi,rcx
ffff80000080fc60:	49 89 df             	mov    r15,rbx
ffff80000080fc63:	48 b8 53 21 ef ff ff 	movabs rax,0xffffffffffef2153
ffff80000080fc6a:	ff ff ff 
ffff80000080fc6d:	48 01 d8             	add    rax,rbx
ffff80000080fc70:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:97

		index -= length;
ffff80000080fc72:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080fc75:	29 45 d4             	sub    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:98
		buf += length;
ffff80000080fc78:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080fc7b:	48 98                	cdqe   
ffff80000080fc7d:	48 01 45 90          	add    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:99
		offset -= offset;
ffff80000080fc81:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080fc88:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:100
		*position += length;
ffff80000080fc89:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080fc8d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080fc90:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080fc93:	48 98                	cdqe   
ffff80000080fc95:	48 01 c2             	add    rdx,rax
ffff80000080fc98:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080fc9c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:101
	}while(index && (cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster)));
ffff80000080fc9f:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffff80000080fca3:	74 32                	je     ffff80000080fcd7 <FAT32_read+0x344>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:101 (discriminator 1)
ffff80000080fca5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fca9:	89 c2                	mov    edx,eax
ffff80000080fcab:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080fcaf:	89 d6                	mov    esi,edx
ffff80000080fcb1:	48 89 c7             	mov    rdi,rax
ffff80000080fcb4:	49 89 df             	mov    r15,rbx
ffff80000080fcb7:	48 b8 7a e7 ee ff ff 	movabs rax,0xffffffffffeee77a
ffff80000080fcbe:	ff ff ff 
ffff80000080fcc1:	48 01 d8             	add    rax,rbx
ffff80000080fcc4:	ff d0                	call   rax
ffff80000080fcc6:	89 c0                	mov    eax,eax
ffff80000080fcc8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080fccc:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080fcd1:	0f 85 50 fe ff ff    	jne    ffff80000080fb27 <FAT32_read+0x194>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:103

    kmfree(buffer);
ffff80000080fcd7:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080fcdb:	48 89 c7             	mov    rdi,rax
ffff80000080fcde:	49 89 df             	mov    r15,rbx
ffff80000080fce1:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff80000080fce8:	ff ff ff 
ffff80000080fceb:	48 01 d8             	add    rax,rbx
ffff80000080fcee:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:104
	if(!index)
ffff80000080fcf0:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffff80000080fcf4:	75 08                	jne    ffff80000080fcfe <FAT32_read+0x36b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:105
		retval = count;
ffff80000080fcf6:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fcfa:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:106
	return retval;
ffff80000080fcfe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:107
}
ffff80000080fd02:	48 83 c4 70          	add    rsp,0x70
ffff80000080fd06:	5b                   	pop    rbx
ffff80000080fd07:	41 5f                	pop    r15
ffff80000080fd09:	5d                   	pop    rbp
ffff80000080fd0a:	c3                   	ret    

ffff80000080fd0b <FAT32_find_available_cluster>:
FAT32_find_available_cluster():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:111


unsigned long FAT32_find_available_cluster(struct FAT32_sb_info * fsbi)
{
ffff80000080fd0b:	f3 0f 1e fa          	endbr64 
ffff80000080fd0f:	55                   	push   rbp
ffff80000080fd10:	48 89 e5             	mov    rbp,rsp
ffff80000080fd13:	41 57                	push   r15
ffff80000080fd15:	53                   	push   rbx
ffff80000080fd16:	48 81 ec 20 02 00 00 	sub    rsp,0x220
ffff80000080fd1d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080fd1d <FAT32_find_available_cluster+0x12>
ffff80000080fd24:	49 bb 33 12 11 00 00 	movabs r11,0x111233
ffff80000080fd2b:	00 00 00 
ffff80000080fd2e:	4c 01 db             	add    rbx,r11
ffff80000080fd31:	48 89 bd d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:114
	int i,j;
	int fat_entry;
	unsigned long sector_per_fat = fsbi->sector_per_FAT;
ffff80000080fd38:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff80000080fd3f:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080fd43:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:119
	unsigned int buf[128];

//	fsbi->fat_fsinfo->FSI_Free_Count & fsbi->fat_fsinfo->FSI_Nxt_Free not exactly,so unuse

	for(i = 0;i < sector_per_fat;i++)
ffff80000080fd47:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080fd4e:	e9 b8 00 00 00       	jmp    ffff80000080fe0b <FAT32_find_available_cluster+0x100>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:121
	{
		memset(buf,0,512);
ffff80000080fd53:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff80000080fd5a:	ba 00 02 00 00       	mov    edx,0x200
ffff80000080fd5f:	be 00 00 00 00       	mov    esi,0x0
ffff80000080fd64:	48 89 c7             	mov    rdi,rax
ffff80000080fd67:	49 89 df             	mov    r15,rbx
ffff80000080fd6a:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff80000080fd71:	ff ff ff 
ffff80000080fd74:	48 01 d8             	add    rax,rbx
ffff80000080fd77:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:122
		blkdev_read(root_sb->dev,(fsbi->FAT1_firstsector + i)*SECTOR_SIZE,SECTOR_SIZE,buf);
ffff80000080fd79:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff80000080fd80:	48 8b 50 30          	mov    rdx,QWORD PTR [rax+0x30]
ffff80000080fd84:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080fd87:	48 98                	cdqe   
ffff80000080fd89:	48 01 d0             	add    rax,rdx
ffff80000080fd8c:	48 c1 e0 09          	shl    rax,0x9
ffff80000080fd90:	48 89 c6             	mov    rsi,rax
ffff80000080fd93:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080fd9a:	ff ff ff 
ffff80000080fd9d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080fda1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fda4:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080fda8:	0f b7 c0             	movzx  eax,ax
ffff80000080fdab:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff80000080fdb2:	48 89 d1             	mov    rcx,rdx
ffff80000080fdb5:	ba 00 02 00 00       	mov    edx,0x200
ffff80000080fdba:	89 c7                	mov    edi,eax
ffff80000080fdbc:	49 89 df             	mov    r15,rbx
ffff80000080fdbf:	48 b8 d3 d0 ee ff ff 	movabs rax,0xffffffffffeed0d3
ffff80000080fdc6:	ff ff ff 
ffff80000080fdc9:	48 01 d8             	add    rax,rbx
ffff80000080fdcc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:124

		for(j = 0;j < 128;j++)
ffff80000080fdce:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080fdd5:	eb 2a                	jmp    ffff80000080fe01 <FAT32_find_available_cluster+0xf6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:126
		{
			if((buf[j] & 0x0fffffff) == 0)
ffff80000080fdd7:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080fdda:	48 98                	cdqe   
ffff80000080fddc:	8b 84 85 e0 fd ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x220]
ffff80000080fde3:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff80000080fde8:	85 c0                	test   eax,eax
ffff80000080fdea:	75 11                	jne    ffff80000080fdfd <FAT32_find_available_cluster+0xf2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:127
				return (i << 7) + j;
ffff80000080fdec:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080fdef:	c1 e0 07             	shl    eax,0x7
ffff80000080fdf2:	89 c2                	mov    edx,eax
ffff80000080fdf4:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080fdf7:	01 d0                	add    eax,edx
ffff80000080fdf9:	48 98                	cdqe   
ffff80000080fdfb:	eb 22                	jmp    ffff80000080fe1f <FAT32_find_available_cluster+0x114>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:124 (discriminator 2)
		for(j = 0;j < 128;j++)
ffff80000080fdfd:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:124 (discriminator 1)
ffff80000080fe01:	83 7d e8 7f          	cmp    DWORD PTR [rbp-0x18],0x7f
ffff80000080fe05:	7e d0                	jle    ffff80000080fdd7 <FAT32_find_available_cluster+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:119 (discriminator 2)
	for(i = 0;i < sector_per_fat;i++)
ffff80000080fe07:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:119 (discriminator 1)
ffff80000080fe0b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080fe0e:	48 98                	cdqe   
ffff80000080fe10:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff80000080fe14:	0f 87 39 ff ff ff    	ja     ffff80000080fd53 <FAT32_find_available_cluster+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:130
		}
	}
	return 0;
ffff80000080fe1a:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:131 (discriminator 1)
}
ffff80000080fe1f:	48 81 c4 20 02 00 00 	add    rsp,0x220
ffff80000080fe26:	5b                   	pop    rbx
ffff80000080fe27:	41 5f                	pop    r15
ffff80000080fe29:	5d                   	pop    rbp
ffff80000080fe2a:	c3                   	ret    

ffff80000080fe2b <FAT32_write>:
FAT32_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:135


long FAT32_write(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff80000080fe2b:	f3 0f 1e fa          	endbr64 
ffff80000080fe2f:	55                   	push   rbp
ffff80000080fe30:	48 89 e5             	mov    rbp,rsp
ffff80000080fe33:	41 57                	push   r15
ffff80000080fe35:	53                   	push   rbx
ffff80000080fe36:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff80000080fe3a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080fe3a <FAT32_write+0xf>
ffff80000080fe41:	49 bb 16 11 11 00 00 	movabs r11,0x111116
ffff80000080fe48:	00 00 00 
ffff80000080fe4b:	4c 01 db             	add    rbx,r11
ffff80000080fe4e:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff80000080fe52:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffff80000080fe56:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
ffff80000080fe5d:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:136
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff80000080fe64:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fe68:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fe6c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fe70:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080fe74:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:137
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff80000080fe78:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fe7c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fe80:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fe84:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080fe88:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080fe8c:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:139

	unsigned long cluster = finode->first_cluster;
ffff80000080fe90:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080fe94:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fe97:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:140
	unsigned long next_cluster = 0;
ffff80000080fe9b:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff80000080fea2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:141
	unsigned long sector = 0;
ffff80000080fea3:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080feaa:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:142
	int i,length = 0;
ffff80000080feab:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:143
	long retval = 0;
ffff80000080feb2:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080feb9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:144
	long flags = 0;
ffff80000080feba:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080fec1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:145
	int index = *position / fsbi->bytes_per_cluster;
ffff80000080fec2:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fec9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fecc:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080fed0:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff80000080fed4:	48 99                	cqo    
ffff80000080fed6:	48 f7 fe             	idiv   rsi
ffff80000080fed9:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:146
	long offset = *position % fsbi->bytes_per_cluster;
ffff80000080fedc:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fee3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fee6:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080feea:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000080feee:	48 99                	cqo    
ffff80000080fef0:	48 f7 f9             	idiv   rcx
ffff80000080fef3:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:147
	char * buffer = (char *) kmallocat(0,TO_MPGN(fsbi->bytes_per_cluster));
ffff80000080fef7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fefb:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080feff:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080ff05:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff80000080ff0c:	48 85 c0             	test   rax,rax
ffff80000080ff0f:	48 0f 48 c2          	cmovs  rax,rdx
ffff80000080ff13:	48 c1 f8 0c          	sar    rax,0xc
ffff80000080ff17:	89 c6                	mov    esi,eax
ffff80000080ff19:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080ff1e:	49 89 df             	mov    r15,rbx
ffff80000080ff21:	48 b8 ee 13 ee ff ff 	movabs rax,0xffffffffffee13ee
ffff80000080ff28:	ff ff ff 
ffff80000080ff2b:	48 01 d8             	add    rax,rbx
ffff80000080ff2e:	ff d0                	call   rax
ffff80000080ff30:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:149

	if(!cluster)
ffff80000080ff34:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080ff39:	75 27                	jne    ffff80000080ff62 <FAT32_write+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:151
	{
		cluster = FAT32_find_available_cluster(fsbi);
ffff80000080ff3b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ff3f:	48 89 c7             	mov    rdi,rax
ffff80000080ff42:	49 89 df             	mov    r15,rbx
ffff80000080ff45:	48 b8 bb ed ee ff ff 	movabs rax,0xffffffffffeeedbb
ffff80000080ff4c:	ff ff ff 
ffff80000080ff4f:	48 01 d8             	add    rax,rbx
ffff80000080ff52:	ff d0                	call   rax
ffff80000080ff54:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:152
		flags = 1;
ffff80000080ff58:	48 c7 45 c8 01 00 00 	mov    QWORD PTR [rbp-0x38],0x1
ffff80000080ff5f:	00 
ffff80000080ff60:	eb 3c                	jmp    ffff80000080ff9e <FAT32_write+0x173>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:155
	}
	else
		for(i = 0;i < index;i++)
ffff80000080ff62:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080ff69:	eb 2b                	jmp    ffff80000080ff96 <FAT32_write+0x16b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:156 (discriminator 3)
			cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000080ff6b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ff6f:	89 c2                	mov    edx,eax
ffff80000080ff71:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ff75:	89 d6                	mov    esi,edx
ffff80000080ff77:	48 89 c7             	mov    rdi,rax
ffff80000080ff7a:	49 89 df             	mov    r15,rbx
ffff80000080ff7d:	48 b8 7a e7 ee ff ff 	movabs rax,0xffffffffffeee77a
ffff80000080ff84:	ff ff ff 
ffff80000080ff87:	48 01 d8             	add    rax,rbx
ffff80000080ff8a:	ff d0                	call   rax
ffff80000080ff8c:	89 c0                	mov    eax,eax
ffff80000080ff8e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:155 (discriminator 3)
		for(i = 0;i < index;i++)
ffff80000080ff92:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:155 (discriminator 1)
ffff80000080ff96:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080ff99:	3b 45 c4             	cmp    eax,DWORD PTR [rbp-0x3c]
ffff80000080ff9c:	7c cd                	jl     ffff80000080ff6b <FAT32_write+0x140>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:158

	if(!cluster)
ffff80000080ff9e:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080ffa3:	75 25                	jne    ffff80000080ffca <FAT32_write+0x19f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:160
	{
        kmfree(buffer);
ffff80000080ffa5:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080ffa9:	48 89 c7             	mov    rdi,rax
ffff80000080ffac:	49 89 df             	mov    r15,rbx
ffff80000080ffaf:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff80000080ffb6:	ff ff ff 
ffff80000080ffb9:	48 01 d8             	add    rax,rbx
ffff80000080ffbc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:161
		return -ENOSPC;
ffff80000080ffbe:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
ffff80000080ffc5:	e9 fb 03 00 00       	jmp    ffff8000008103c5 <FAT32_write+0x59a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:164
	}

	if(flags)
ffff80000080ffca:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080ffcf:	74 5a                	je     ffff80000081002b <FAT32_write+0x200>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:166
	{
		finode->first_cluster = cluster;
ffff80000080ffd1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080ffd5:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ffd9:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:167
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
ffff80000080ffdc:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ffe0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ffe4:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080ffe8:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080ffec:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080fff0:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080fff4:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fff8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fffc:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810000:	48 89 c7             	mov    rdi,rax
ffff800000810003:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:168
		DISK1_FAT32_write_FAT_Entry(fsbi,cluster,0x0ffffff8);
ffff800000810005:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810009:	89 c1                	mov    ecx,eax
ffff80000081000b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081000f:	ba f8 ff ff 0f       	mov    edx,0xffffff8
ffff800000810014:	89 ce                	mov    esi,ecx
ffff800000810016:	48 89 c7             	mov    rdi,rax
ffff800000810019:	49 89 df             	mov    r15,rbx
ffff80000081001c:	48 b8 77 e8 ee ff ff 	movabs rax,0xffffffffffeee877
ffff800000810023:	ff ff ff 
ffff800000810026:	48 01 d8             	add    rax,rbx
ffff800000810029:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:171
	}

	index = count;
ffff80000081002b:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000810032:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:175

	do
	{
		if(!flags)
ffff800000810035:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000081003a:	0f 85 cf 00 00 00    	jne    ffff80000081010f <FAT32_write+0x2e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:177
		{
			memset(buffer,0,fsbi->bytes_per_cluster);
ffff800000810040:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810044:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810048:	89 c2                	mov    edx,eax
ffff80000081004a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081004e:	be 00 00 00 00       	mov    esi,0x0
ffff800000810053:	48 89 c7             	mov    rdi,rax
ffff800000810056:	49 89 df             	mov    r15,rbx
ffff800000810059:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff800000810060:	ff ff ff 
ffff800000810063:	48 01 d8             	add    rax,rbx
ffff800000810066:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:178
			sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff800000810068:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081006c:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff800000810070:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810074:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff800000810078:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081007c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810080:	48 0f af c2          	imul   rax,rdx
ffff800000810084:	48 01 c8             	add    rax,rcx
ffff800000810087:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:180
			
			if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff80000081008b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081008f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810093:	48 c1 e0 09          	shl    rax,0x9
ffff800000810097:	48 89 c7             	mov    rdi,rax
ffff80000081009a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081009e:	48 c1 e0 09          	shl    rax,0x9
ffff8000008100a2:	48 89 c6             	mov    rsi,rax
ffff8000008100a5:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008100a9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008100ad:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008100b1:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff8000008100b5:	0f b7 c0             	movzx  eax,ax
ffff8000008100b8:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff8000008100bc:	48 89 d1             	mov    rcx,rdx
ffff8000008100bf:	48 89 fa             	mov    rdx,rdi
ffff8000008100c2:	89 c7                	mov    edi,eax
ffff8000008100c4:	49 89 df             	mov    r15,rbx
ffff8000008100c7:	48 b8 d3 d0 ee ff ff 	movabs rax,0xffffffffffeed0d3
ffff8000008100ce:	ff ff ff 
ffff8000008100d1:	48 01 d8             	add    rax,rbx
ffff8000008100d4:	ff d0                	call   rax
ffff8000008100d6:	85 c0                	test   eax,eax
ffff8000008100d8:	79 35                	jns    ffff80000081010f <FAT32_write+0x2e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:182
			{
				printf("FAT32 FS(write) read disk ERROR!!!!!!!!!!\n");
ffff8000008100da:	48 b8 f0 d9 ff ff ff 	movabs rax,0xffffffffffffd9f0
ffff8000008100e1:	ff ff ff 
ffff8000008100e4:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008100e8:	48 89 c7             	mov    rdi,rax
ffff8000008100eb:	49 89 df             	mov    r15,rbx
ffff8000008100ee:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008100f3:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff8000008100fa:	ff ff ff 
ffff8000008100fd:	48 01 da             	add    rdx,rbx
ffff800000810100:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:183
				retval = -EIO;
ffff800000810102:	48 c7 45 d0 e3 ff ff 	mov    QWORD PTR [rbp-0x30],0xffffffffffffffe3
ffff800000810109:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:184
				break;
ffff80000081010a:	e9 25 02 00 00       	jmp    ffff800000810334 <FAT32_write+0x509>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:188
			}
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
ffff80000081010f:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000810112:	48 63 d0             	movsxd rdx,eax
ffff800000810115:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810119:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081011d:	48 2b 45 b8          	sub    rax,QWORD PTR [rbp-0x48]
ffff800000810121:	48 39 c2             	cmp    rdx,rax
ffff800000810124:	48 0f 4e c2          	cmovle rax,rdx
ffff800000810128:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:190

		if((unsigned long)buf < MAX_TASKS)
ffff80000081012b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000081012f:	48 83 f8 1f          	cmp    rax,0x1f
ffff800000810133:	77 2c                	ja     ffff800000810161 <FAT32_write+0x336>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:191
			memcpy(buf,buffer + offset,length);
ffff800000810135:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff800000810138:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff80000081013c:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810140:	48 01 c1             	add    rcx,rax
ffff800000810143:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000810147:	48 89 ce             	mov    rsi,rcx
ffff80000081014a:	48 89 c7             	mov    rdi,rax
ffff80000081014d:	49 89 df             	mov    r15,rbx
ffff800000810150:	48 b8 53 21 ef ff ff 	movabs rax,0xffffffffffef2153
ffff800000810157:	ff ff ff 
ffff80000081015a:	48 01 d8             	add    rax,rbx
ffff80000081015d:	ff d0                	call   rax
ffff80000081015f:	eb 2a                	jmp    ffff80000081018b <FAT32_write+0x360>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:193
		else
			memcpy(buf,buffer + offset,length);
ffff800000810161:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff800000810164:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff800000810168:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081016c:	48 01 c1             	add    rcx,rax
ffff80000081016f:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000810173:	48 89 ce             	mov    rsi,rcx
ffff800000810176:	48 89 c7             	mov    rdi,rax
ffff800000810179:	49 89 df             	mov    r15,rbx
ffff80000081017c:	48 b8 53 21 ef ff ff 	movabs rax,0xffffffffffef2153
ffff800000810183:	ff ff ff 
ffff800000810186:	48 01 d8             	add    rax,rbx
ffff800000810189:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:194
        if(blkdev_write(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff80000081018b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081018f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810193:	48 c1 e0 09          	shl    rax,0x9
ffff800000810197:	48 89 c7             	mov    rdi,rax
ffff80000081019a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081019e:	48 c1 e0 09          	shl    rax,0x9
ffff8000008101a2:	48 89 c6             	mov    rsi,rax
ffff8000008101a5:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008101a9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008101ad:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008101b1:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff8000008101b5:	0f b7 c0             	movzx  eax,ax
ffff8000008101b8:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff8000008101bc:	48 89 d1             	mov    rcx,rdx
ffff8000008101bf:	48 89 fa             	mov    rdx,rdi
ffff8000008101c2:	89 c7                	mov    edi,eax
ffff8000008101c4:	49 89 df             	mov    r15,rbx
ffff8000008101c7:	48 b8 34 d2 ee ff ff 	movabs rax,0xffffffffffeed234
ffff8000008101ce:	ff ff ff 
ffff8000008101d1:	48 01 d8             	add    rax,rbx
ffff8000008101d4:	ff d0                	call   rax
ffff8000008101d6:	85 c0                	test   eax,eax
ffff8000008101d8:	79 35                	jns    ffff80000081020f <FAT32_write+0x3e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:196
		{
			printf("FAT32 FS(write) write disk ERROR!!!!!!!!!!\n");
ffff8000008101da:	48 b8 20 da ff ff ff 	movabs rax,0xffffffffffffda20
ffff8000008101e1:	ff ff ff 
ffff8000008101e4:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008101e8:	48 89 c7             	mov    rdi,rax
ffff8000008101eb:	49 89 df             	mov    r15,rbx
ffff8000008101ee:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008101f3:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff8000008101fa:	ff ff ff 
ffff8000008101fd:	48 01 da             	add    rdx,rbx
ffff800000810200:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:197
			retval = -EIO;
ffff800000810202:	48 c7 45 d0 e3 ff ff 	mov    QWORD PTR [rbp-0x30],0xffffffffffffffe3
ffff800000810209:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:198
			break;
ffff80000081020a:	e9 25 01 00 00       	jmp    ffff800000810334 <FAT32_write+0x509>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:201
		}

		index -= length;
ffff80000081020f:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000810212:	29 45 c4             	sub    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:202
		buf += length;
ffff800000810215:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000810218:	48 98                	cdqe   
ffff80000081021a:	48 01 45 80          	add    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:203
		offset -= offset;
ffff80000081021e:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff800000810225:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:204
		*position += length;
ffff800000810226:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000081022d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810230:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000810233:	48 98                	cdqe   
ffff800000810235:	48 01 c2             	add    rdx,rax
ffff800000810238:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000081023f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:206

		if(index)
ffff800000810242:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff800000810246:	0f 84 e7 00 00 00    	je     ffff800000810333 <FAT32_write+0x508>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:207
			next_cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000081024c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810250:	89 c2                	mov    edx,eax
ffff800000810252:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810256:	89 d6                	mov    esi,edx
ffff800000810258:	48 89 c7             	mov    rdi,rax
ffff80000081025b:	49 89 df             	mov    r15,rbx
ffff80000081025e:	48 b8 7a e7 ee ff ff 	movabs rax,0xffffffffffeee77a
ffff800000810265:	ff ff ff 
ffff800000810268:	48 01 d8             	add    rax,rbx
ffff80000081026b:	ff d0                	call   rax
ffff80000081026d:	89 c0                	mov    eax,eax
ffff80000081026f:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:211
		else
			break;

		if(next_cluster >= 0x0ffffff8)
ffff800000810273:	48 81 7d a0 f7 ff ff 	cmp    QWORD PTR [rbp-0x60],0xffffff7
ffff80000081027a:	0f 
ffff80000081027b:	0f 86 a6 00 00 00    	jbe    ffff800000810327 <FAT32_write+0x4fc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:213
		{
			next_cluster = FAT32_find_available_cluster(fsbi);
ffff800000810281:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810285:	48 89 c7             	mov    rdi,rax
ffff800000810288:	49 89 df             	mov    r15,rbx
ffff80000081028b:	48 b8 bb ed ee ff ff 	movabs rax,0xffffffffffeeedbb
ffff800000810292:	ff ff ff 
ffff800000810295:	48 01 d8             	add    rax,rbx
ffff800000810298:	ff d0                	call   rax
ffff80000081029a:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:214
			if(!next_cluster)
ffff80000081029e:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
ffff8000008102a3:	75 25                	jne    ffff8000008102ca <FAT32_write+0x49f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:216
			{
                kmfree(buffer);
ffff8000008102a5:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008102a9:	48 89 c7             	mov    rdi,rax
ffff8000008102ac:	49 89 df             	mov    r15,rbx
ffff8000008102af:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff8000008102b6:	ff ff ff 
ffff8000008102b9:	48 01 d8             	add    rax,rbx
ffff8000008102bc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:217
				return -ENOSPC;
ffff8000008102be:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
ffff8000008102c5:	e9 fb 00 00 00       	jmp    ffff8000008103c5 <FAT32_write+0x59a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:220
			}			
				
			DISK1_FAT32_write_FAT_Entry(fsbi,cluster,next_cluster);
ffff8000008102ca:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008102ce:	89 c2                	mov    edx,eax
ffff8000008102d0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008102d4:	89 c1                	mov    ecx,eax
ffff8000008102d6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008102da:	89 ce                	mov    esi,ecx
ffff8000008102dc:	48 89 c7             	mov    rdi,rax
ffff8000008102df:	49 89 df             	mov    r15,rbx
ffff8000008102e2:	48 b8 77 e8 ee ff ff 	movabs rax,0xffffffffffeee877
ffff8000008102e9:	ff ff ff 
ffff8000008102ec:	48 01 d8             	add    rax,rbx
ffff8000008102ef:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:221
			DISK1_FAT32_write_FAT_Entry(fsbi,next_cluster,0x0ffffff8);
ffff8000008102f1:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008102f5:	89 c1                	mov    ecx,eax
ffff8000008102f7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008102fb:	ba f8 ff ff 0f       	mov    edx,0xffffff8
ffff800000810300:	89 ce                	mov    esi,ecx
ffff800000810302:	48 89 c7             	mov    rdi,rax
ffff800000810305:	49 89 df             	mov    r15,rbx
ffff800000810308:	48 b8 77 e8 ee ff ff 	movabs rax,0xffffffffffeee877
ffff80000081030f:	ff ff ff 
ffff800000810312:	48 01 d8             	add    rax,rbx
ffff800000810315:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:222
			cluster = next_cluster;
ffff800000810317:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000081031b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:223
			flags = 1;
ffff80000081031f:	48 c7 45 c8 01 00 00 	mov    QWORD PTR [rbp-0x38],0x1
ffff800000810326:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:226
		}

	}while(index);
ffff800000810327:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff80000081032b:	0f 85 04 fd ff ff    	jne    ffff800000810035 <FAT32_write+0x20a>
ffff800000810331:	eb 01                	jmp    ffff800000810334 <FAT32_write+0x509>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:209
			break;
ffff800000810333:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:228

	if(*position > filp->dentry->dir_inode->file_size)
ffff800000810334:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000081033b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081033e:	48 89 c2             	mov    rdx,rax
ffff800000810341:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810345:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810349:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081034d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810350:	48 39 c2             	cmp    rdx,rax
ffff800000810353:	76 42                	jbe    ffff800000810397 <FAT32_write+0x56c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:230
	{
		filp->dentry->dir_inode->file_size = *position;
ffff800000810355:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000081035c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000081035f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810363:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810367:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081036b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:231
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
ffff80000081036e:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810372:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810376:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081037a:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081037e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000810382:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000810386:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081038a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081038e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810392:	48 89 c7             	mov    rdi,rax
ffff800000810395:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:234
	}

    kmfree(buffer);
ffff800000810397:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081039b:	48 89 c7             	mov    rdi,rax
ffff80000081039e:	49 89 df             	mov    r15,rbx
ffff8000008103a1:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff8000008103a8:	ff ff ff 
ffff8000008103ab:	48 01 d8             	add    rax,rbx
ffff8000008103ae:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:235
	if(!index)
ffff8000008103b0:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff8000008103b4:	75 0b                	jne    ffff8000008103c1 <FAT32_write+0x596>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:236
		retval = count;
ffff8000008103b6:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008103bd:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:237
	return retval;
ffff8000008103c1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:238
}
ffff8000008103c5:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff8000008103c9:	5b                   	pop    rbx
ffff8000008103ca:	41 5f                	pop    r15
ffff8000008103cc:	5d                   	pop    rbp
ffff8000008103cd:	c3                   	ret    

ffff8000008103ce <FAT32_lseek>:
FAT32_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:242


long FAT32_lseek(struct file * filp,long offset,long origin)
{
ffff8000008103ce:	f3 0f 1e fa          	endbr64 
ffff8000008103d2:	55                   	push   rbp
ffff8000008103d3:	48 89 e5             	mov    rbp,rsp
ffff8000008103d6:	41 57                	push   r15
ffff8000008103d8:	48 83 ec 38          	sub    rsp,0x38
ffff8000008103dc:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff8000008103dc <FAT32_lseek+0xe>
ffff8000008103e3:	49 bb 74 0b 11 00 00 	movabs r11,0x110b74
ffff8000008103ea:	00 00 00 
ffff8000008103ed:	4c 01 d9             	add    rcx,r11
ffff8000008103f0:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008103f4:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff8000008103f8:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:243
	struct index_node *inode = filp->dentry->dir_inode;
ffff8000008103fc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810400:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810404:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810408:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:244
	long pos = 0;
ffff80000081040c:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000810413:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:246

	switch(origin)
ffff800000810414:	48 83 7d c8 02       	cmp    QWORD PTR [rbp-0x38],0x2
ffff800000810419:	74 21                	je     ffff80000081043c <FAT32_lseek+0x6e>
ffff80000081041b:	48 83 7d c8 02       	cmp    QWORD PTR [rbp-0x38],0x2
ffff800000810420:	7f 4a                	jg     ffff80000081046c <FAT32_lseek+0x9e>
ffff800000810422:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff800000810427:	74 09                	je     ffff800000810432 <FAT32_lseek+0x64>
ffff800000810429:	48 83 7d c8 01       	cmp    QWORD PTR [rbp-0x38],0x1
ffff80000081042e:	74 20                	je     ffff800000810450 <FAT32_lseek+0x82>
ffff800000810430:	eb 3a                	jmp    ffff80000081046c <FAT32_lseek+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:249
	{
		case SEEK_SET:
				pos = offset;
ffff800000810432:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810436:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:250
			break;
ffff80000081043a:	eb 39                	jmp    ffff800000810475 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:253

		case SEEK_CUR:
				pos =  filp->position + offset;
ffff80000081043c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810440:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810443:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810447:	48 01 d0             	add    rax,rdx
ffff80000081044a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:254
			break;
ffff80000081044e:	eb 25                	jmp    ffff800000810475 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:257

		case SEEK_END:
				pos = filp->dentry->dir_inode->file_size + offset;
ffff800000810450:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810454:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810458:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081045c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000081045f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810463:	48 01 d0             	add    rax,rdx
ffff800000810466:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:258
			break;
ffff80000081046a:	eb 09                	jmp    ffff800000810475 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:261

		default:
			return -EINVAL;
ffff80000081046c:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff800000810473:	eb 69                	jmp    ffff8000008104de <FAT32_lseek+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:265
			break;
	}

	if(pos < 0 || pos > filp->dentry->dir_inode->file_size)
ffff800000810475:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000081047a:	78 18                	js     ffff800000810494 <FAT32_lseek+0xc6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:265 (discriminator 1)
ffff80000081047c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810480:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810484:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810488:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000081048b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081048f:	48 39 c2             	cmp    rdx,rax
ffff800000810492:	73 09                	jae    ffff80000081049d <FAT32_lseek+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:266
		return -EOVERFLOW;
ffff800000810494:	48 c7 c0 bf ff ff ff 	mov    rax,0xffffffffffffffbf
ffff80000081049b:	eb 41                	jmp    ffff8000008104de <FAT32_lseek+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:268

	filp->position = pos;
ffff80000081049d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008104a1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008104a5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:269
	printf("FAT32 FS(lseek) alert position:%d\n",filp->position);
ffff8000008104a8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008104ac:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008104af:	48 89 c6             	mov    rsi,rax
ffff8000008104b2:	48 b8 50 da ff ff ff 	movabs rax,0xffffffffffffda50
ffff8000008104b9:	ff ff ff 
ffff8000008104bc:	48 8d 04 01          	lea    rax,[rcx+rax*1]
ffff8000008104c0:	48 89 c7             	mov    rdi,rax
ffff8000008104c3:	49 89 cf             	mov    r15,rcx
ffff8000008104c6:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008104cb:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff8000008104d2:	ff ff ff 
ffff8000008104d5:	48 01 ca             	add    rdx,rcx
ffff8000008104d8:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:271

	return pos;
ffff8000008104da:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:272
}
ffff8000008104de:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008104e2:	c9                   	leave  
ffff8000008104e3:	c3                   	ret    

ffff8000008104e4 <FAT32_ioctl>:
FAT32_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:276


long FAT32_ioctl(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg)
{}
ffff8000008104e4:	f3 0f 1e fa          	endbr64 
ffff8000008104e8:	55                   	push   rbp
ffff8000008104e9:	48 89 e5             	mov    rbp,rsp
ffff8000008104ec:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008104ec <FAT32_ioctl+0x8>
ffff8000008104f3:	49 bb 64 0a 11 00 00 	movabs r11,0x110a64
ffff8000008104fa:	00 00 00 
ffff8000008104fd:	4c 01 d8             	add    rax,r11
ffff800000810500:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000810504:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000810508:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000081050c:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff800000810510:	90                   	nop
ffff800000810511:	5d                   	pop    rbp
ffff800000810512:	c3                   	ret    

ffff800000810513 <FAT32_readdir>:
FAT32_readdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:279

long FAT32_readdir(struct file * filp,void * dirent,filldir_t filler)
{
ffff800000810513:	f3 0f 1e fa          	endbr64 
ffff800000810517:	55                   	push   rbp
ffff800000810518:	48 89 e5             	mov    rbp,rsp
ffff80000081051b:	41 57                	push   r15
ffff80000081051d:	53                   	push   rbx
ffff80000081051e:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff800000810522:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810522 <FAT32_readdir+0xf>
ffff800000810529:	49 bb 2e 0a 11 00 00 	movabs r11,0x110a2e
ffff800000810530:	00 00 00 
ffff800000810533:	4c 01 db             	add    rbx,r11
ffff800000810536:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff80000081053a:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffff80000081053e:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:280
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff800000810545:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810549:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081054d:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810551:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000810555:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:281
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff800000810559:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081055d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810561:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810565:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000810569:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081056d:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:283

	unsigned int cluster = 0;
ffff800000810571:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:284
	unsigned long sector = 0;
ffff800000810578:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff80000081057f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:285
	unsigned char * buf =NULL; 
ffff800000810580:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff800000810587:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:286
	char *name = NULL;
ffff800000810588:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000081058f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:287
	int namelen = 0;
ffff800000810590:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:288
	int i = 0,j = 0,x = 0,y = 0;
ffff800000810597:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000081059e:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff8000008105a5:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff8000008105ac:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:289
	struct FAT32_Directory * tmpdentry = NULL;
ffff8000008105b3:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff8000008105ba:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:290
	struct FAT32_LongDirectory * tmpldentry = NULL;
ffff8000008105bb:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff8000008105c2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:292

	buf = kmallocat(0,TO_MPGN(fsbi->bytes_per_cluster));
ffff8000008105c3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008105c7:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008105cb:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff8000008105d1:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff8000008105d8:	48 85 c0             	test   rax,rax
ffff8000008105db:	48 0f 48 c2          	cmovs  rax,rdx
ffff8000008105df:	48 c1 f8 0c          	sar    rax,0xc
ffff8000008105e3:	89 c6                	mov    esi,eax
ffff8000008105e5:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008105ea:	49 89 df             	mov    r15,rbx
ffff8000008105ed:	48 b8 ee 13 ee ff ff 	movabs rax,0xffffffffffee13ee
ffff8000008105f4:	ff ff ff 
ffff8000008105f7:	48 01 d8             	add    rax,rbx
ffff8000008105fa:	ff d0                	call   rax
ffff8000008105fc:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:294

	cluster = finode->first_cluster;
ffff800000810600:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000810604:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810607:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:296

	j = filp->position/fsbi->bytes_per_cluster;
ffff80000081060a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081060e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810611:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000810615:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff800000810619:	48 99                	cqo    
ffff80000081061b:	48 f7 fe             	idiv   rsi
ffff80000081061e:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:298
	
	for(i = 0;i<j;i++)
ffff800000810621:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff800000810628:	eb 60                	jmp    ffff80000081068a <FAT32_readdir+0x177>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:300
	{
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000081062a:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000081062d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810631:	89 d6                	mov    esi,edx
ffff800000810633:	48 89 c7             	mov    rdi,rax
ffff800000810636:	49 89 df             	mov    r15,rbx
ffff800000810639:	48 b8 7a e7 ee ff ff 	movabs rax,0xffffffffffeee77a
ffff800000810640:	ff ff ff 
ffff800000810643:	48 01 d8             	add    rax,rbx
ffff800000810646:	ff d0                	call   rax
ffff800000810648:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:301
		if(cluster > 0x0ffffff7)
ffff80000081064b:	81 7d ec f7 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff7
ffff800000810652:	76 32                	jbe    ffff800000810686 <FAT32_readdir+0x173>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:303
		{
			printf("FAT32 FS(readdir) cluster didn`t exist\n");
ffff800000810654:	48 b8 78 da ff ff ff 	movabs rax,0xffffffffffffda78
ffff80000081065b:	ff ff ff 
ffff80000081065e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810662:	48 89 c7             	mov    rdi,rax
ffff800000810665:	49 89 df             	mov    r15,rbx
ffff800000810668:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081066d:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff800000810674:	ff ff ff 
ffff800000810677:	48 01 da             	add    rdx,rbx
ffff80000081067a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:304
			return NULL;
ffff80000081067c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810681:	e9 1e 06 00 00       	jmp    ffff800000810ca4 <FAT32_readdir+0x791>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:298 (discriminator 2)
	for(i = 0;i<j;i++)
ffff800000810686:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:298 (discriminator 1)
ffff80000081068a:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000081068d:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff800000810690:	7c 98                	jl     ffff80000081062a <FAT32_readdir+0x117>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:308
		}
	}

next_cluster:
ffff800000810692:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:309
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff800000810693:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810697:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000081069b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081069e:	83 e8 02             	sub    eax,0x2
ffff8000008106a1:	89 c1                	mov    ecx,eax
ffff8000008106a3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008106a7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008106ab:	48 0f af c1          	imul   rax,rcx
ffff8000008106af:	48 01 d0             	add    rax,rdx
ffff8000008106b2:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:310
    if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf)<0)
ffff8000008106b6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008106ba:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008106be:	48 c1 e0 09          	shl    rax,0x9
ffff8000008106c2:	48 89 c7             	mov    rdi,rax
ffff8000008106c5:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008106c9:	48 c1 e0 09          	shl    rax,0x9
ffff8000008106cd:	48 89 c6             	mov    rsi,rax
ffff8000008106d0:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008106d4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008106d8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008106dc:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff8000008106e0:	0f b7 c0             	movzx  eax,ax
ffff8000008106e3:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff8000008106e7:	48 89 d1             	mov    rcx,rdx
ffff8000008106ea:	48 89 fa             	mov    rdx,rdi
ffff8000008106ed:	89 c7                	mov    edi,eax
ffff8000008106ef:	49 89 df             	mov    r15,rbx
ffff8000008106f2:	48 b8 d3 d0 ee ff ff 	movabs rax,0xffffffffffeed0d3
ffff8000008106f9:	ff ff ff 
ffff8000008106fc:	48 01 d8             	add    rax,rbx
ffff8000008106ff:	ff d0                	call   rax
ffff800000810701:	85 c0                	test   eax,eax
ffff800000810703:	79 4b                	jns    ffff800000810750 <FAT32_readdir+0x23d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:312
	{
		printf("FAT32 FS(readdir) read disk ERROR!!!!!!!!!!\n");
ffff800000810705:	48 b8 a0 da ff ff ff 	movabs rax,0xffffffffffffdaa0
ffff80000081070c:	ff ff ff 
ffff80000081070f:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810713:	48 89 c7             	mov    rdi,rax
ffff800000810716:	49 89 df             	mov    r15,rbx
ffff800000810719:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081071e:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff800000810725:	ff ff ff 
ffff800000810728:	48 01 da             	add    rdx,rbx
ffff80000081072b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:313
        kmfree(buf);
ffff80000081072d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000810731:	48 89 c7             	mov    rdi,rax
ffff800000810734:	49 89 df             	mov    r15,rbx
ffff800000810737:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff80000081073e:	ff ff ff 
ffff800000810741:	48 01 d8             	add    rax,rbx
ffff800000810744:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:314
		return NULL;
ffff800000810746:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081074b:	e9 54 05 00 00       	jmp    ffff800000810ca4 <FAT32_readdir+0x791>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:317
	}

	tmpdentry = (struct FAT32_Directory *)(buf + filp->position%fsbi->bytes_per_cluster);
ffff800000810750:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810754:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810757:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000081075b:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000081075f:	48 99                	cqo    
ffff800000810761:	48 f7 f9             	idiv   rcx
ffff800000810764:	48 89 d0             	mov    rax,rdx
ffff800000810767:	48 89 c2             	mov    rdx,rax
ffff80000081076a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000081076e:	48 01 d0             	add    rax,rdx
ffff800000810771:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:319

	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
ffff800000810775:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810779:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081077c:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000810780:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff800000810784:	48 99                	cqo    
ffff800000810786:	48 f7 f9             	idiv   rcx
ffff800000810789:	48 89 d0             	mov    rax,rdx
ffff80000081078c:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
ffff80000081078f:	e9 6c 04 00 00       	jmp    ffff800000810c00 <FAT32_readdir+0x6ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:321
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
ffff800000810794:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810798:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff80000081079c:	3c 0f                	cmp    al,0xf
ffff80000081079e:	0f 84 3d 04 00 00    	je     ffff800000810be1 <FAT32_readdir+0x6ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:323
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
ffff8000008107a4:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008107a8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008107ab:	3c e5                	cmp    al,0xe5
ffff8000008107ad:	0f 84 31 04 00 00    	je     ffff800000810be4 <FAT32_readdir+0x6d1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:323 (discriminator 2)
ffff8000008107b3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008107b7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008107ba:	84 c0                	test   al,al
ffff8000008107bc:	0f 84 22 04 00 00    	je     ffff800000810be4 <FAT32_readdir+0x6d1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:323 (discriminator 4)
ffff8000008107c2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008107c6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008107c9:	3c 05                	cmp    al,0x5
ffff8000008107cb:	0f 84 13 04 00 00    	je     ffff800000810be4 <FAT32_readdir+0x6d1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:326
			continue;

		namelen = 0;
ffff8000008107d1:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:327
		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff8000008107d8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008107dc:	48 83 e8 20          	sub    rax,0x20
ffff8000008107e0:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:329

		if(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff8000008107e4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008107e8:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff8000008107ec:	3c 0f                	cmp    al,0xf
ffff8000008107ee:	0f 85 4f 02 00 00    	jne    ffff800000810a43 <FAT32_readdir+0x530>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:329 (discriminator 1)
ffff8000008107f4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008107f8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008107fb:	3c e5                	cmp    al,0xe5
ffff8000008107fd:	0f 84 40 02 00 00    	je     ffff800000810a43 <FAT32_readdir+0x530>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:329 (discriminator 2)
ffff800000810803:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810807:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081080a:	84 c0                	test   al,al
ffff80000081080c:	0f 84 31 02 00 00    	je     ffff800000810a43 <FAT32_readdir+0x530>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:329 (discriminator 3)
ffff800000810812:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810816:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810819:	3c 05                	cmp    al,0x5
ffff80000081081b:	0f 84 22 02 00 00    	je     ffff800000810a43 <FAT32_readdir+0x530>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:331
		{
			j = 0;
ffff800000810821:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:333
			//long file/dir name read
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff800000810828:	eb 1a                	jmp    ffff800000810844 <FAT32_readdir+0x331>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:335
			{
				j++;
ffff80000081082a:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336
				if(tmpldentry->LDIR_Ord & 0x40)
ffff80000081082e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810832:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810835:	0f b6 c0             	movzx  eax,al
ffff800000810838:	83 e0 40             	and    eax,0x40
ffff80000081083b:	85 c0                	test   eax,eax
ffff80000081083d:	75 34                	jne    ffff800000810873 <FAT32_readdir+0x360>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:338
					break;
				tmpldentry --;
ffff80000081083f:	48 83 6d b8 20       	sub    QWORD PTR [rbp-0x48],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:333
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff800000810844:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810848:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff80000081084c:	3c 0f                	cmp    al,0xf
ffff80000081084e:	75 24                	jne    ffff800000810874 <FAT32_readdir+0x361>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:333 (discriminator 1)
ffff800000810850:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810854:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810857:	3c e5                	cmp    al,0xe5
ffff800000810859:	74 19                	je     ffff800000810874 <FAT32_readdir+0x361>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:333 (discriminator 2)
ffff80000081085b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081085f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810862:	84 c0                	test   al,al
ffff800000810864:	74 0e                	je     ffff800000810874 <FAT32_readdir+0x361>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:333 (discriminator 3)
ffff800000810866:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081086a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081086d:	3c 05                	cmp    al,0x5
ffff80000081086f:	75 b9                	jne    ffff80000081082a <FAT32_readdir+0x317>
ffff800000810871:	eb 01                	jmp    ffff800000810874 <FAT32_readdir+0x361>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:337
					break;
ffff800000810873:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:341
			}

			name = kmallocat(0,TO_MPGN(j * 13 + 1));
ffff800000810874:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff800000810877:	89 d0                	mov    eax,edx
ffff800000810879:	01 c0                	add    eax,eax
ffff80000081087b:	01 d0                	add    eax,edx
ffff80000081087d:	c1 e0 02             	shl    eax,0x2
ffff800000810880:	01 d0                	add    eax,edx
ffff800000810882:	05 00 10 00 00       	add    eax,0x1000
ffff800000810887:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff80000081088d:	85 c0                	test   eax,eax
ffff80000081088f:	0f 48 c2             	cmovs  eax,edx
ffff800000810892:	c1 f8 0c             	sar    eax,0xc
ffff800000810895:	89 c6                	mov    esi,eax
ffff800000810897:	bf 00 00 00 00       	mov    edi,0x0
ffff80000081089c:	49 89 df             	mov    r15,rbx
ffff80000081089f:	48 b8 ee 13 ee ff ff 	movabs rax,0xffffffffffee13ee
ffff8000008108a6:	ff ff ff 
ffff8000008108a9:	48 01 d8             	add    rax,rbx
ffff8000008108ac:	ff d0                	call   rax
ffff8000008108ae:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:342
			memset(name,0,j*13+1);
ffff8000008108b2:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff8000008108b5:	89 d0                	mov    eax,edx
ffff8000008108b7:	01 c0                	add    eax,eax
ffff8000008108b9:	01 d0                	add    eax,edx
ffff8000008108bb:	c1 e0 02             	shl    eax,0x2
ffff8000008108be:	01 d0                	add    eax,edx
ffff8000008108c0:	83 c0 01             	add    eax,0x1
ffff8000008108c3:	89 c2                	mov    edx,eax
ffff8000008108c5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008108c9:	be 00 00 00 00       	mov    esi,0x0
ffff8000008108ce:	48 89 c7             	mov    rdi,rax
ffff8000008108d1:	49 89 df             	mov    r15,rbx
ffff8000008108d4:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff8000008108db:	ff ff ff 
ffff8000008108de:	48 01 d8             	add    rax,rbx
ffff8000008108e1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:343
			tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff8000008108e3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008108e7:	48 83 e8 20          	sub    rax,0x20
ffff8000008108eb:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:345

			for(x = 0;x<j;x++,tmpldentry --)
ffff8000008108ef:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff8000008108f6:	e9 37 01 00 00       	jmp    ffff800000810a32 <FAT32_readdir+0x51f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:347
			{
				for(y = 0;y<5;y++)
ffff8000008108fb:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000810902:	eb 53                	jmp    ffff800000810957 <FAT32_readdir+0x444>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348
					if(tmpldentry->LDIR_Name1[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff800000810904:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810908:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000081090b:	48 63 d2             	movsxd rdx,edx
ffff80000081090e:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000810913:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810917:	74 3a                	je     ffff800000810953 <FAT32_readdir+0x440>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348 (discriminator 1)
ffff800000810919:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081091d:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810920:	48 63 d2             	movsxd rdx,edx
ffff800000810923:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000810928:	66 85 c0             	test   ax,ax
ffff80000081092b:	74 26                	je     ffff800000810953 <FAT32_readdir+0x440>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:349
						name[namelen++] = (char)tmpldentry->LDIR_Name1[y];
ffff80000081092d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810931:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810934:	48 63 d2             	movsxd rdx,edx
ffff800000810937:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
ffff80000081093c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081093f:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810942:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810945:	48 63 d0             	movsxd rdx,eax
ffff800000810948:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081094c:	48 01 d0             	add    rax,rdx
ffff80000081094f:	89 ca                	mov    edx,ecx
ffff800000810951:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:347 (discriminator 2)
				for(y = 0;y<5;y++)
ffff800000810953:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:347 (discriminator 1)
ffff800000810957:	83 7d cc 04          	cmp    DWORD PTR [rbp-0x34],0x4
ffff80000081095b:	7e a7                	jle    ffff800000810904 <FAT32_readdir+0x3f1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:351

				for(y = 0;y<6;y++)
ffff80000081095d:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000810964:	eb 53                	jmp    ffff8000008109b9 <FAT32_readdir+0x4a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352
					if(tmpldentry->LDIR_Name2[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff800000810966:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081096a:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000081096d:	48 63 d2             	movsxd rdx,edx
ffff800000810970:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
ffff800000810975:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810979:	74 3a                	je     ffff8000008109b5 <FAT32_readdir+0x4a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352 (discriminator 1)
ffff80000081097b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081097f:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810982:	48 63 d2             	movsxd rdx,edx
ffff800000810985:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff80000081098a:	66 85 c0             	test   ax,ax
ffff80000081098d:	74 26                	je     ffff8000008109b5 <FAT32_readdir+0x4a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:353
						name[namelen++] = (char)tmpldentry->LDIR_Name2[y];
ffff80000081098f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810993:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810996:	48 63 d2             	movsxd rdx,edx
ffff800000810999:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
ffff80000081099e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008109a1:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008109a4:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff8000008109a7:	48 63 d0             	movsxd rdx,eax
ffff8000008109aa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008109ae:	48 01 d0             	add    rax,rdx
ffff8000008109b1:	89 ca                	mov    edx,ecx
ffff8000008109b3:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:351 (discriminator 2)
				for(y = 0;y<6;y++)
ffff8000008109b5:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:351 (discriminator 1)
ffff8000008109b9:	83 7d cc 05          	cmp    DWORD PTR [rbp-0x34],0x5
ffff8000008109bd:	7e a7                	jle    ffff800000810966 <FAT32_readdir+0x453>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:355

				for(y = 0;y<2;y++)
ffff8000008109bf:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff8000008109c6:	eb 5b                	jmp    ffff800000810a23 <FAT32_readdir+0x510>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356
					if(tmpldentry->LDIR_Name3[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff8000008109c8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008109cc:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008109cf:	48 63 d2             	movsxd rdx,edx
ffff8000008109d2:	48 83 c2 08          	add    rdx,0x8
ffff8000008109d6:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
ffff8000008109db:	66 83 f8 ff          	cmp    ax,0xffff
ffff8000008109df:	74 3e                	je     ffff800000810a1f <FAT32_readdir+0x50c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356 (discriminator 1)
ffff8000008109e1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008109e5:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008109e8:	48 63 d2             	movsxd rdx,edx
ffff8000008109eb:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff8000008109f0:	66 85 c0             	test   ax,ax
ffff8000008109f3:	74 2a                	je     ffff800000810a1f <FAT32_readdir+0x50c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:357
						name[namelen++] = (char)tmpldentry->LDIR_Name3[y];
ffff8000008109f5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008109f9:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008109fc:	48 63 d2             	movsxd rdx,edx
ffff8000008109ff:	48 83 c2 08          	add    rdx,0x8
ffff800000810a03:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
ffff800000810a08:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810a0b:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810a0e:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810a11:	48 63 d0             	movsxd rdx,eax
ffff800000810a14:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810a18:	48 01 d0             	add    rax,rdx
ffff800000810a1b:	89 ca                	mov    edx,ecx
ffff800000810a1d:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:355 (discriminator 2)
				for(y = 0;y<2;y++)
ffff800000810a1f:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:355 (discriminator 1)
ffff800000810a23:	83 7d cc 01          	cmp    DWORD PTR [rbp-0x34],0x1
ffff800000810a27:	7e 9f                	jle    ffff8000008109c8 <FAT32_readdir+0x4b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:345 (discriminator 2)
			for(x = 0;x<j;x++,tmpldentry --)
ffff800000810a29:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
ffff800000810a2d:	48 83 6d b8 20       	sub    QWORD PTR [rbp-0x48],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:345 (discriminator 1)
ffff800000810a32:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810a35:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff800000810a38:	0f 8c bd fe ff ff    	jl     ffff8000008108fb <FAT32_readdir+0x3e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:359
			}
			goto find_lookup_success;
ffff800000810a3e:	e9 27 02 00 00       	jmp    ffff800000810c6a <FAT32_readdir+0x757>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:362
		}

		name = kmallocat(0,TO_MPGN(15));
ffff800000810a43:	be 01 00 00 00       	mov    esi,0x1
ffff800000810a48:	bf 00 00 00 00       	mov    edi,0x0
ffff800000810a4d:	49 89 df             	mov    r15,rbx
ffff800000810a50:	48 b8 ee 13 ee ff ff 	movabs rax,0xffffffffffee13ee
ffff800000810a57:	ff ff ff 
ffff800000810a5a:	48 01 d8             	add    rax,rbx
ffff800000810a5d:	ff d0                	call   rax
ffff800000810a5f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:363
		memset(name,0,15);
ffff800000810a63:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810a67:	ba 0f 00 00 00       	mov    edx,0xf
ffff800000810a6c:	be 00 00 00 00       	mov    esi,0x0
ffff800000810a71:	48 89 c7             	mov    rdi,rax
ffff800000810a74:	49 89 df             	mov    r15,rbx
ffff800000810a77:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff800000810a7e:	ff ff ff 
ffff800000810a81:	48 01 d8             	add    rax,rbx
ffff800000810a84:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:365
		//short file/dir base name compare
		for(x=0;x<8;x++)
ffff800000810a86:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff800000810a8d:	eb 74                	jmp    ffff800000810b03 <FAT32_readdir+0x5f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:367
		{
			if(tmpdentry->DIR_Name[x] == ' ')
ffff800000810a8f:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000810a93:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810a96:	48 98                	cdqe   
ffff800000810a98:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810a9c:	3c 20                	cmp    al,0x20
ffff800000810a9e:	74 6b                	je     ffff800000810b0b <FAT32_readdir+0x5f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:369
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
ffff800000810aa0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810aa4:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000810aa8:	0f b6 c0             	movzx  eax,al
ffff800000810aab:	83 e0 08             	and    eax,0x8
ffff800000810aae:	85 c0                	test   eax,eax
ffff800000810ab0:	74 29                	je     ffff800000810adb <FAT32_readdir+0x5c8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:370
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
ffff800000810ab2:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000810ab6:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810ab9:	48 98                	cdqe   
ffff800000810abb:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810abf:	8d 48 20             	lea    ecx,[rax+0x20]
ffff800000810ac2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810ac5:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810ac8:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810acb:	48 63 d0             	movsxd rdx,eax
ffff800000810ace:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810ad2:	48 01 d0             	add    rax,rdx
ffff800000810ad5:	89 ca                	mov    edx,ecx
ffff800000810ad7:	88 10                	mov    BYTE PTR [rax],dl
ffff800000810ad9:	eb 24                	jmp    ffff800000810aff <FAT32_readdir+0x5ec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:372
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
ffff800000810adb:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000810adf:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810ae2:	48 98                	cdqe   
ffff800000810ae4:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
ffff800000810ae8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810aeb:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810aee:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810af1:	48 63 d0             	movsxd rdx,eax
ffff800000810af4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810af8:	48 01 d0             	add    rax,rdx
ffff800000810afb:	89 ca                	mov    edx,ecx
ffff800000810afd:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:365 (discriminator 2)
		for(x=0;x<8;x++)
ffff800000810aff:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:365 (discriminator 1)
ffff800000810b03:	83 7d d0 07          	cmp    DWORD PTR [rbp-0x30],0x7
ffff800000810b07:	7e 86                	jle    ffff800000810a8f <FAT32_readdir+0x57c>
ffff800000810b09:	eb 01                	jmp    ffff800000810b0c <FAT32_readdir+0x5f9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:368
				break;
ffff800000810b0b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:375
		}

		if(tmpdentry->DIR_Attr & ATTR_DIRECTORY)
ffff800000810b0c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810b10:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810b14:	0f b6 c0             	movzx  eax,al
ffff800000810b17:	83 e0 10             	and    eax,0x10
ffff800000810b1a:	85 c0                	test   eax,eax
ffff800000810b1c:	0f 85 44 01 00 00    	jne    ffff800000810c66 <FAT32_readdir+0x753>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:378
			goto find_lookup_success;

		name[namelen++] = '.';
ffff800000810b22:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810b25:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810b28:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810b2b:	48 63 d0             	movsxd rdx,eax
ffff800000810b2e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810b32:	48 01 d0             	add    rax,rdx
ffff800000810b35:	c6 00 2e             	mov    BYTE PTR [rax],0x2e
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:381

		//short file ext name compare
		for(x=8;x<11;x++)
ffff800000810b38:	c7 45 d0 08 00 00 00 	mov    DWORD PTR [rbp-0x30],0x8
ffff800000810b3f:	eb 74                	jmp    ffff800000810bb5 <FAT32_readdir+0x6a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:383
		{
			if(tmpdentry->DIR_Name[x] == ' ')
ffff800000810b41:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000810b45:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810b48:	48 98                	cdqe   
ffff800000810b4a:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810b4e:	3c 20                	cmp    al,0x20
ffff800000810b50:	74 6b                	je     ffff800000810bbd <FAT32_readdir+0x6aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:385
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
ffff800000810b52:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810b56:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000810b5a:	0f b6 c0             	movzx  eax,al
ffff800000810b5d:	83 e0 10             	and    eax,0x10
ffff800000810b60:	85 c0                	test   eax,eax
ffff800000810b62:	74 29                	je     ffff800000810b8d <FAT32_readdir+0x67a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:386
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
ffff800000810b64:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000810b68:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810b6b:	48 98                	cdqe   
ffff800000810b6d:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810b71:	8d 48 20             	lea    ecx,[rax+0x20]
ffff800000810b74:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810b77:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810b7a:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810b7d:	48 63 d0             	movsxd rdx,eax
ffff800000810b80:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810b84:	48 01 d0             	add    rax,rdx
ffff800000810b87:	89 ca                	mov    edx,ecx
ffff800000810b89:	88 10                	mov    BYTE PTR [rax],dl
ffff800000810b8b:	eb 24                	jmp    ffff800000810bb1 <FAT32_readdir+0x69e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:388
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
ffff800000810b8d:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000810b91:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810b94:	48 98                	cdqe   
ffff800000810b96:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
ffff800000810b9a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810b9d:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810ba0:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810ba3:	48 63 d0             	movsxd rdx,eax
ffff800000810ba6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810baa:	48 01 d0             	add    rax,rdx
ffff800000810bad:	89 ca                	mov    edx,ecx
ffff800000810baf:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:381 (discriminator 2)
		for(x=8;x<11;x++)
ffff800000810bb1:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:381 (discriminator 1)
ffff800000810bb5:	83 7d d0 0a          	cmp    DWORD PTR [rbp-0x30],0xa
ffff800000810bb9:	7e 86                	jle    ffff800000810b41 <FAT32_readdir+0x62e>
ffff800000810bbb:	eb 01                	jmp    ffff800000810bbe <FAT32_readdir+0x6ab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:384
				break;
ffff800000810bbd:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:390
		}
		if(x == 8)
ffff800000810bbe:	83 7d d0 08          	cmp    DWORD PTR [rbp-0x30],0x8
ffff800000810bc2:	0f 85 a1 00 00 00    	jne    ffff800000810c69 <FAT32_readdir+0x756>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:391
			name[--namelen] = 0;
ffff800000810bc8:	83 6d dc 01          	sub    DWORD PTR [rbp-0x24],0x1
ffff800000810bcc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810bcf:	48 63 d0             	movsxd rdx,eax
ffff800000810bd2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810bd6:	48 01 d0             	add    rax,rdx
ffff800000810bd9:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:392
		goto find_lookup_success;
ffff800000810bdc:	e9 88 00 00 00       	jmp    ffff800000810c69 <FAT32_readdir+0x756>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:322
			continue;
ffff800000810be1:	90                   	nop
ffff800000810be2:	eb 01                	jmp    ffff800000810be5 <FAT32_readdir+0x6d2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:324
			continue;
ffff800000810be4:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:319 (discriminator 2)
	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
ffff800000810be5:	83 45 d8 20          	add    DWORD PTR [rbp-0x28],0x20
ffff800000810be9:	48 83 45 c0 20       	add    QWORD PTR [rbp-0x40],0x20
ffff800000810bee:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810bf2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810bf5:	48 8d 50 20          	lea    rdx,[rax+0x20]
ffff800000810bf9:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810bfd:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:319 (discriminator 1)
ffff800000810c00:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000810c03:	48 63 d0             	movsxd rdx,eax
ffff800000810c06:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810c0a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810c0e:	48 39 c2             	cmp    rdx,rax
ffff800000810c11:	0f 8c 7d fb ff ff    	jl     ffff800000810794 <FAT32_readdir+0x281>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:395
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000810c17:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000810c1a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810c1e:	89 d6                	mov    esi,edx
ffff800000810c20:	48 89 c7             	mov    rdi,rax
ffff800000810c23:	49 89 df             	mov    r15,rbx
ffff800000810c26:	48 b8 7a e7 ee ff ff 	movabs rax,0xffffffffffeee77a
ffff800000810c2d:	ff ff ff 
ffff800000810c30:	48 01 d8             	add    rax,rbx
ffff800000810c33:	ff d0                	call   rax
ffff800000810c35:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:396
	if(cluster < 0x0ffffff7)
ffff800000810c38:	81 7d ec f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff6
ffff800000810c3f:	77 05                	ja     ffff800000810c46 <FAT32_readdir+0x733>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:397
		goto next_cluster;
ffff800000810c41:	e9 4d fa ff ff       	jmp    ffff800000810693 <FAT32_readdir+0x180>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:399

    kmfree(buf);
ffff800000810c46:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000810c4a:	48 89 c7             	mov    rdi,rax
ffff800000810c4d:	49 89 df             	mov    r15,rbx
ffff800000810c50:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff800000810c57:	ff ff ff 
ffff800000810c5a:	48 01 d8             	add    rax,rbx
ffff800000810c5d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:400
	return NULL;
ffff800000810c5f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810c64:	eb 3e                	jmp    ffff800000810ca4 <FAT32_readdir+0x791>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:376
			goto find_lookup_success;
ffff800000810c66:	90                   	nop
ffff800000810c67:	eb 01                	jmp    ffff800000810c6a <FAT32_readdir+0x757>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:392
		goto find_lookup_success;
ffff800000810c69:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:404

find_lookup_success:

	filp->position += 32;
ffff800000810c6a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810c6e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810c71:	48 8d 50 20          	lea    rdx,[rax+0x20]
ffff800000810c75:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810c79:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:405
	return filler(dirent,name,namelen,0,0);
ffff800000810c7c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810c7f:	48 63 d0             	movsxd rdx,eax
ffff800000810c82:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff800000810c86:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000810c8a:	4c 8b 8d 78 ff ff ff 	mov    r9,QWORD PTR [rbp-0x88]
ffff800000810c91:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff800000810c97:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000810c9c:	48 89 c7             	mov    rdi,rax
ffff800000810c9f:	41 ff d1             	call   r9
ffff800000810ca2:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:406
}
ffff800000810ca4:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff800000810ca8:	5b                   	pop    rbx
ffff800000810ca9:	41 5f                	pop    r15
ffff800000810cab:	5d                   	pop    rbp
ffff800000810cac:	c3                   	ret    

ffff800000810cad <FAT32_create>:
FAT32_create():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:423
	.readdir = FAT32_readdir,
};


long FAT32_create(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
ffff800000810cad:	f3 0f 1e fa          	endbr64 
ffff800000810cb1:	55                   	push   rbp
ffff800000810cb2:	48 89 e5             	mov    rbp,rsp
ffff800000810cb5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000810cb5 <FAT32_create+0x8>
ffff800000810cbc:	49 bb 9b 02 11 00 00 	movabs r11,0x11029b
ffff800000810cc3:	00 00 00 
ffff800000810cc6:	4c 01 d8             	add    rax,r11
ffff800000810cc9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000810ccd:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000810cd1:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff800000810cd4:	90                   	nop
ffff800000810cd5:	5d                   	pop    rbp
ffff800000810cd6:	c3                   	ret    

ffff800000810cd7 <FAT32_lookup>:
FAT32_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:427


struct dir_entry * FAT32_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry)
{
ffff800000810cd7:	f3 0f 1e fa          	endbr64 
ffff800000810cdb:	55                   	push   rbp
ffff800000810cdc:	48 89 e5             	mov    rbp,rsp
ffff800000810cdf:	41 57                	push   r15
ffff800000810ce1:	53                   	push   rbx
ffff800000810ce2:	48 83 ec 60          	sub    rsp,0x60
ffff800000810ce6:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810ce6 <FAT32_lookup+0xf>
ffff800000810ced:	49 bb 6a 02 11 00 00 	movabs r11,0x11026a
ffff800000810cf4:	00 00 00 
ffff800000810cf7:	4c 01 db             	add    rbx,r11
ffff800000810cfa:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff800000810cfe:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:428
	struct FAT32_inode_info * finode = parent_inode->private_index_info;
ffff800000810d02:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000810d06:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000810d0a:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:429
	struct FAT32_sb_info * fsbi = parent_inode->sb->private_sb_info;
ffff800000810d0e:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000810d12:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000810d16:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000810d1a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:431

	unsigned int cluster = 0;
ffff800000810d1e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:432
	unsigned long sector = 0;
ffff800000810d25:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff800000810d2c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:433
	unsigned char * buf =NULL; 
ffff800000810d2d:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff800000810d34:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:434
	int i = 0,j = 0,x = 0;
ffff800000810d35:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000810d3c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000810d43:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:435
	struct FAT32_Directory * tmpdentry = NULL;
ffff800000810d4a:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000810d51:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:436
	struct FAT32_LongDirectory * tmpldentry = NULL;
ffff800000810d52:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff800000810d59:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:437
	struct index_node * p = NULL;
ffff800000810d5a:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff800000810d61:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:439

	buf = kmallocat(0,TO_MPGN(fsbi->bytes_per_cluster));
ffff800000810d62:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810d66:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810d6a:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff800000810d70:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff800000810d77:	48 85 c0             	test   rax,rax
ffff800000810d7a:	48 0f 48 c2          	cmovs  rax,rdx
ffff800000810d7e:	48 c1 f8 0c          	sar    rax,0xc
ffff800000810d82:	89 c6                	mov    esi,eax
ffff800000810d84:	bf 00 00 00 00       	mov    edi,0x0
ffff800000810d89:	49 89 df             	mov    r15,rbx
ffff800000810d8c:	48 b8 ee 13 ee ff ff 	movabs rax,0xffffffffffee13ee
ffff800000810d93:	ff ff ff 
ffff800000810d96:	48 01 d8             	add    rax,rbx
ffff800000810d99:	ff d0                	call   rax
ffff800000810d9b:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:441

	cluster = finode->first_cluster;
ffff800000810d9f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000810da3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810da6:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:444

next_cluster:
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff800000810da9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810dad:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff800000810db1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000810db4:	83 e8 02             	sub    eax,0x2
ffff800000810db7:	89 c1                	mov    ecx,eax
ffff800000810db9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810dbd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810dc1:	48 0f af c1          	imul   rax,rcx
ffff800000810dc5:	48 01 d0             	add    rax,rdx
ffff800000810dc8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:445
	printf("lookup cluster:0x%x,sector:0x%x\r\n",cluster,sector);
ffff800000810dcc:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000810dd0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000810dd3:	89 c6                	mov    esi,eax
ffff800000810dd5:	48 b8 d0 da ff ff ff 	movabs rax,0xffffffffffffdad0
ffff800000810ddc:	ff ff ff 
ffff800000810ddf:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810de3:	48 89 c7             	mov    rdi,rax
ffff800000810de6:	49 89 df             	mov    r15,rbx
ffff800000810de9:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810dee:	48 b9 71 0a ee ff ff 	movabs rcx,0xffffffffffee0a71
ffff800000810df5:	ff ff ff 
ffff800000810df8:	48 01 d9             	add    rcx,rbx
ffff800000810dfb:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:446
    if(blkdev_read(parent_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf)<0)
ffff800000810dfd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810e01:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810e05:	48 c1 e0 09          	shl    rax,0x9
ffff800000810e09:	48 89 c7             	mov    rdi,rax
ffff800000810e0c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810e10:	48 c1 e0 09          	shl    rax,0x9
ffff800000810e14:	48 89 c6             	mov    rsi,rax
ffff800000810e17:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000810e1b:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff800000810e1f:	0f b7 c0             	movzx  eax,ax
ffff800000810e22:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000810e26:	48 89 d1             	mov    rcx,rdx
ffff800000810e29:	48 89 fa             	mov    rdx,rdi
ffff800000810e2c:	89 c7                	mov    edi,eax
ffff800000810e2e:	49 89 df             	mov    r15,rbx
ffff800000810e31:	48 b8 d3 d0 ee ff ff 	movabs rax,0xffffffffffeed0d3
ffff800000810e38:	ff ff ff 
ffff800000810e3b:	48 01 d8             	add    rax,rbx
ffff800000810e3e:	ff d0                	call   rax
ffff800000810e40:	85 c0                	test   eax,eax
ffff800000810e42:	79 4b                	jns    ffff800000810e8f <FAT32_lookup+0x1b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:448
	{
		printf("FAT32 FS(lookup) read disk ERROR!!!!!!!!!!\n");
ffff800000810e44:	48 b8 f8 da ff ff ff 	movabs rax,0xffffffffffffdaf8
ffff800000810e4b:	ff ff ff 
ffff800000810e4e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810e52:	48 89 c7             	mov    rdi,rax
ffff800000810e55:	49 89 df             	mov    r15,rbx
ffff800000810e58:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810e5d:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff800000810e64:	ff ff ff 
ffff800000810e67:	48 01 da             	add    rdx,rbx
ffff800000810e6a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:449
        kmfree(buf);
ffff800000810e6c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000810e70:	48 89 c7             	mov    rdi,rax
ffff800000810e73:	49 89 df             	mov    r15,rbx
ffff800000810e76:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff800000810e7d:	ff ff ff 
ffff800000810e80:	48 01 d8             	add    rax,rbx
ffff800000810e83:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:450
		return NULL;
ffff800000810e85:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810e8a:	e9 55 08 00 00       	jmp    ffff8000008116e4 <FAT32_lookup+0xa0d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:453
	}

	tmpdentry = (struct FAT32_Directory *)buf;
ffff800000810e8f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000810e93:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:455

	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
ffff800000810e97:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000810e9e:	e9 9d 05 00 00       	jmp    ffff800000811440 <FAT32_lookup+0x769>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:457
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
ffff800000810ea3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810ea7:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810eab:	3c 0f                	cmp    al,0xf
ffff800000810ead:	0f 84 59 05 00 00    	je     ffff80000081140c <FAT32_lookup+0x735>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
ffff800000810eb3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810eb7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810eba:	3c e5                	cmp    al,0xe5
ffff800000810ebc:	0f 84 4d 05 00 00    	je     ffff80000081140f <FAT32_lookup+0x738>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459 (discriminator 2)
ffff800000810ec2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810ec6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810ec9:	84 c0                	test   al,al
ffff800000810ecb:	0f 84 3e 05 00 00    	je     ffff80000081140f <FAT32_lookup+0x738>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459 (discriminator 4)
ffff800000810ed1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810ed5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810ed8:	3c 05                	cmp    al,0x5
ffff800000810eda:	0f 84 2f 05 00 00    	je     ffff80000081140f <FAT32_lookup+0x738>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:462
			continue;

		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff800000810ee0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810ee4:	48 83 e8 20          	sub    rax,0x20
ffff800000810ee8:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:463
		j = 0;
ffff800000810eec:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:466

		//long file/dir name compare
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
ffff800000810ef3:	e9 88 01 00 00       	jmp    ffff800000811080 <FAT32_lookup+0x3a9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:468
		{
			for(x=0;x<5;x++)
ffff800000810ef8:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000810eff:	eb 6a                	jmp    ffff800000810f6b <FAT32_lookup+0x294>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:470
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name1[x] == 0xffff)
ffff800000810f01:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810f05:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810f08:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810f0b:	7e 15                	jle    ffff800000810f22 <FAT32_lookup+0x24b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:470 (discriminator 1)
ffff800000810f0d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810f11:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810f14:	48 63 d2             	movsxd rdx,edx
ffff800000810f17:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000810f1c:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810f20:	74 44                	je     ffff800000810f66 <FAT32_lookup+0x28f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:472
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name1[x] != (unsigned short)(dest_dentry->name[j++]))
ffff800000810f22:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810f26:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810f29:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810f2c:	0f 8f e0 04 00 00    	jg     ffff800000811412 <FAT32_lookup+0x73b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:472 (discriminator 1)
ffff800000810f32:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810f36:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810f39:	48 63 d2             	movsxd rdx,edx
ffff800000810f3c:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
ffff800000810f41:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810f45:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000810f48:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810f4b:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810f4e:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000810f51:	48 98                	cdqe   
ffff800000810f53:	48 01 f0             	add    rax,rsi
ffff800000810f56:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810f59:	66 98                	cbw    
ffff800000810f5b:	66 39 c1             	cmp    cx,ax
ffff800000810f5e:	0f 85 ae 04 00 00    	jne    ffff800000811412 <FAT32_lookup+0x73b>
ffff800000810f64:	eb 01                	jmp    ffff800000810f67 <FAT32_lookup+0x290>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:471
					continue;
ffff800000810f66:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:468 (discriminator 2)
			for(x=0;x<5;x++)
ffff800000810f67:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:468 (discriminator 1)
ffff800000810f6b:	83 7d e0 04          	cmp    DWORD PTR [rbp-0x20],0x4
ffff800000810f6f:	7e 90                	jle    ffff800000810f01 <FAT32_lookup+0x22a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:475
					goto continue_cmp_fail;
			}
			for(x=0;x<6;x++)
ffff800000810f71:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000810f78:	eb 6a                	jmp    ffff800000810fe4 <FAT32_lookup+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:477
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name2[x] == 0xffff)
ffff800000810f7a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810f7e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810f81:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810f84:	7e 15                	jle    ffff800000810f9b <FAT32_lookup+0x2c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:477 (discriminator 1)
ffff800000810f86:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810f8a:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810f8d:	48 63 d2             	movsxd rdx,edx
ffff800000810f90:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
ffff800000810f95:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810f99:	74 44                	je     ffff800000810fdf <FAT32_lookup+0x308>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:479
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name2[x] != (unsigned short)(dest_dentry->name[j++]))
ffff800000810f9b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810f9f:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810fa2:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810fa5:	0f 8f 6a 04 00 00    	jg     ffff800000811415 <FAT32_lookup+0x73e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:479 (discriminator 1)
ffff800000810fab:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810faf:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810fb2:	48 63 d2             	movsxd rdx,edx
ffff800000810fb5:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
ffff800000810fba:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810fbe:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000810fc1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810fc4:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810fc7:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000810fca:	48 98                	cdqe   
ffff800000810fcc:	48 01 f0             	add    rax,rsi
ffff800000810fcf:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810fd2:	66 98                	cbw    
ffff800000810fd4:	66 39 c1             	cmp    cx,ax
ffff800000810fd7:	0f 85 38 04 00 00    	jne    ffff800000811415 <FAT32_lookup+0x73e>
ffff800000810fdd:	eb 01                	jmp    ffff800000810fe0 <FAT32_lookup+0x309>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:478
					continue;
ffff800000810fdf:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:475 (discriminator 2)
			for(x=0;x<6;x++)
ffff800000810fe0:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:475 (discriminator 1)
ffff800000810fe4:	83 7d e0 05          	cmp    DWORD PTR [rbp-0x20],0x5
ffff800000810fe8:	7e 90                	jle    ffff800000810f7a <FAT32_lookup+0x2a3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:482
					goto continue_cmp_fail;
			}
			for(x=0;x<2;x++)
ffff800000810fea:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000810ff1:	eb 72                	jmp    ffff800000811065 <FAT32_lookup+0x38e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:484
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name3[x] == 0xffff)
ffff800000810ff3:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810ff7:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810ffa:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810ffd:	7e 19                	jle    ffff800000811018 <FAT32_lookup+0x341>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:484 (discriminator 1)
ffff800000810fff:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811003:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000811006:	48 63 d2             	movsxd rdx,edx
ffff800000811009:	48 83 c2 08          	add    rdx,0x8
ffff80000081100d:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
ffff800000811012:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000811016:	74 48                	je     ffff800000811060 <FAT32_lookup+0x389>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:486
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name3[x] != (unsigned short)(dest_dentry->name[j++]))
ffff800000811018:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081101c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000081101f:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811022:	0f 8f f0 03 00 00    	jg     ffff800000811418 <FAT32_lookup+0x741>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:486 (discriminator 1)
ffff800000811028:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081102c:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff80000081102f:	48 63 d2             	movsxd rdx,edx
ffff800000811032:	48 83 c2 08          	add    rdx,0x8
ffff800000811036:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
ffff80000081103b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081103f:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000811042:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811045:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000811048:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff80000081104b:	48 98                	cdqe   
ffff80000081104d:	48 01 f0             	add    rax,rsi
ffff800000811050:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811053:	66 98                	cbw    
ffff800000811055:	66 39 c1             	cmp    cx,ax
ffff800000811058:	0f 85 ba 03 00 00    	jne    ffff800000811418 <FAT32_lookup+0x741>
ffff80000081105e:	eb 01                	jmp    ffff800000811061 <FAT32_lookup+0x38a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:485
					continue;
ffff800000811060:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:482 (discriminator 2)
			for(x=0;x<2;x++)
ffff800000811061:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:482 (discriminator 1)
ffff800000811065:	83 7d e0 01          	cmp    DWORD PTR [rbp-0x20],0x1
ffff800000811069:	7e 88                	jle    ffff800000810ff3 <FAT32_lookup+0x31c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:490
					goto continue_cmp_fail;
			}

			if(j >= dest_dentry->name_length)
ffff80000081106b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081106f:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811072:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811075:	0f 8d 2e 04 00 00    	jge    ffff8000008114a9 <FAT32_lookup+0x7d2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:495
			{
				goto find_lookup_success;
			}

			tmpldentry --;
ffff80000081107b:	48 83 6d d0 20       	sub    QWORD PTR [rbp-0x30],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:466
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
ffff800000811080:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811084:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000811088:	3c 0f                	cmp    al,0xf
ffff80000081108a:	75 0f                	jne    ffff80000081109b <FAT32_lookup+0x3c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:466 (discriminator 1)
ffff80000081108c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811090:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811093:	3c e5                	cmp    al,0xe5
ffff800000811095:	0f 85 5d fe ff ff    	jne    ffff800000810ef8 <FAT32_lookup+0x221>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:499
		}

		//short file/dir base name compare
		j = 0;
ffff80000081109b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:500
		for(x=0;x<8;x++)
ffff8000008110a2:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff8000008110a9:	e9 f4 01 00 00       	jmp    ffff8000008112a2 <FAT32_lookup+0x5cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:502
		{
			switch(tmpdentry->DIR_Name[x])
ffff8000008110ae:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008110b2:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008110b5:	48 98                	cdqe   
ffff8000008110b7:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008110bb:	0f b6 c0             	movzx  eax,al
ffff8000008110be:	83 f8 7a             	cmp    eax,0x7a
ffff8000008110c1:	0f 8f d0 01 00 00    	jg     ffff800000811297 <FAT32_lookup+0x5c0>
ffff8000008110c7:	83 f8 61             	cmp    eax,0x61
ffff8000008110ca:	0f 8d e6 00 00 00    	jge    ffff8000008111b6 <FAT32_lookup+0x4df>
ffff8000008110d0:	83 f8 5a             	cmp    eax,0x5a
ffff8000008110d3:	0f 8f be 01 00 00    	jg     ffff800000811297 <FAT32_lookup+0x5c0>
ffff8000008110d9:	83 f8 41             	cmp    eax,0x41
ffff8000008110dc:	0f 8d d4 00 00 00    	jge    ffff8000008111b6 <FAT32_lookup+0x4df>
ffff8000008110e2:	83 f8 20             	cmp    eax,0x20
ffff8000008110e5:	74 1a                	je     ffff800000811101 <FAT32_lookup+0x42a>
ffff8000008110e7:	83 f8 20             	cmp    eax,0x20
ffff8000008110ea:	0f 8c a7 01 00 00    	jl     ffff800000811297 <FAT32_lookup+0x5c0>
ffff8000008110f0:	83 e8 30             	sub    eax,0x30
ffff8000008110f3:	83 f8 09             	cmp    eax,0x9
ffff8000008110f6:	0f 87 9b 01 00 00    	ja     ffff800000811297 <FAT32_lookup+0x5c0>
ffff8000008110fc:	e9 53 01 00 00       	jmp    ffff800000811254 <FAT32_lookup+0x57d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:505
			{
				case ' ':
					if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
ffff800000811101:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811105:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000811109:	0f b6 c0             	movzx  eax,al
ffff80000081110c:	83 e0 10             	and    eax,0x10
ffff80000081110f:	85 c0                	test   eax,eax
ffff800000811111:	75 50                	jne    ffff800000811163 <FAT32_lookup+0x48c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:507
					{
						if(dest_dentry->name[j]=='.')
ffff800000811113:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811117:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000081111a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000081111d:	48 98                	cdqe   
ffff80000081111f:	48 01 d0             	add    rax,rdx
ffff800000811122:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811125:	3c 2e                	cmp    al,0x2e
ffff800000811127:	0f 84 70 01 00 00    	je     ffff80000081129d <FAT32_lookup+0x5c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:509
							continue;
						else if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff80000081112d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811131:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811134:	48 98                	cdqe   
ffff800000811136:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000081113a:	0f b6 d0             	movzx  edx,al
ffff80000081113d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811141:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811144:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811147:	48 98                	cdqe   
ffff800000811149:	48 01 c8             	add    rax,rcx
ffff80000081114c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081114f:	0f be c0             	movsx  eax,al
ffff800000811152:	39 c2                	cmp    edx,eax
ffff800000811154:	0f 85 c1 02 00 00    	jne    ffff80000081141b <FAT32_lookup+0x744>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:511
						{
							j++;
ffff80000081115a:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:512
							break;
ffff80000081115e:	e9 3b 01 00 00       	jmp    ffff80000081129e <FAT32_lookup+0x5c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:519
						else
							goto continue_cmp_fail;
					}
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000811163:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811167:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000081116a:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000081116d:	7d 32                	jge    ffff8000008111a1 <FAT32_lookup+0x4ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:519 (discriminator 1)
ffff80000081116f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811173:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811176:	48 98                	cdqe   
ffff800000811178:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000081117c:	0f b6 d0             	movzx  edx,al
ffff80000081117f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811183:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811186:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811189:	48 98                	cdqe   
ffff80000081118b:	48 01 c8             	add    rax,rcx
ffff80000081118e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811191:	0f be c0             	movsx  eax,al
ffff800000811194:	39 c2                	cmp    edx,eax
ffff800000811196:	75 09                	jne    ffff8000008111a1 <FAT32_lookup+0x4ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:521
						{
							j++;
ffff800000811198:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:522
							break;
ffff80000081119c:	e9 fd 00 00 00       	jmp    ffff80000081129e <FAT32_lookup+0x5c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:524
						}
						else if(j == dest_dentry->name_length)
ffff8000008111a1:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008111a5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008111a8:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008111ab:	0f 85 6d 02 00 00    	jne    ffff80000081141e <FAT32_lookup+0x747>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:525
							continue;
ffff8000008111b1:	e9 e8 00 00 00       	jmp    ffff80000081129e <FAT32_lookup+0x5c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:532
							goto continue_cmp_fail;
					}

				case 'A' ... 'Z':
				case 'a' ... 'z':
					if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
ffff8000008111b6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008111ba:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff8000008111be:	0f b6 c0             	movzx  eax,al
ffff8000008111c1:	83 e0 08             	and    eax,0x8
ffff8000008111c4:	85 c0                	test   eax,eax
ffff8000008111c6:	74 49                	je     ffff800000811211 <FAT32_lookup+0x53a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:533
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
ffff8000008111c8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008111cc:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008111cf:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008111d2:	0f 8d 49 02 00 00    	jge    ffff800000811421 <FAT32_lookup+0x74a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:533 (discriminator 1)
ffff8000008111d8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008111dc:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008111df:	48 98                	cdqe   
ffff8000008111e1:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008111e5:	0f b6 c0             	movzx  eax,al
ffff8000008111e8:	8d 50 20             	lea    edx,[rax+0x20]
ffff8000008111eb:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008111ef:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008111f2:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008111f5:	48 98                	cdqe   
ffff8000008111f7:	48 01 c8             	add    rax,rcx
ffff8000008111fa:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008111fd:	0f be c0             	movsx  eax,al
ffff800000811200:	39 c2                	cmp    edx,eax
ffff800000811202:	0f 85 19 02 00 00    	jne    ffff800000811421 <FAT32_lookup+0x74a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:535
						{
							j++;
ffff800000811208:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:536
							break;
ffff80000081120c:	e9 8d 00 00 00       	jmp    ffff80000081129e <FAT32_lookup+0x5c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:542
						}
						else
							goto continue_cmp_fail;
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000811211:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811215:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811218:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000081121b:	0f 8d 03 02 00 00    	jge    ffff800000811424 <FAT32_lookup+0x74d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:542 (discriminator 1)
ffff800000811221:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811225:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811228:	48 98                	cdqe   
ffff80000081122a:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000081122e:	0f b6 d0             	movzx  edx,al
ffff800000811231:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811235:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811238:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000081123b:	48 98                	cdqe   
ffff80000081123d:	48 01 c8             	add    rax,rcx
ffff800000811240:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811243:	0f be c0             	movsx  eax,al
ffff800000811246:	39 c2                	cmp    edx,eax
ffff800000811248:	0f 85 d6 01 00 00    	jne    ffff800000811424 <FAT32_lookup+0x74d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:544
						{
							j++;
ffff80000081124e:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:545
							break;
ffff800000811252:	eb 4a                	jmp    ffff80000081129e <FAT32_lookup+0x5c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:552
						else
							goto continue_cmp_fail;
					}

				case '0' ... '9':
					if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000811254:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811258:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000081125b:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000081125e:	0f 8d c3 01 00 00    	jge    ffff800000811427 <FAT32_lookup+0x750>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:552 (discriminator 1)
ffff800000811264:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811268:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000081126b:	48 98                	cdqe   
ffff80000081126d:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811271:	0f b6 d0             	movzx  edx,al
ffff800000811274:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811278:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000081127b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000081127e:	48 98                	cdqe   
ffff800000811280:	48 01 c8             	add    rax,rcx
ffff800000811283:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811286:	0f be c0             	movsx  eax,al
ffff800000811289:	39 c2                	cmp    edx,eax
ffff80000081128b:	0f 85 96 01 00 00    	jne    ffff800000811427 <FAT32_lookup+0x750>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:554
					{
						j++;
ffff800000811291:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:555
						break;
ffff800000811295:	eb 07                	jmp    ffff80000081129e <FAT32_lookup+0x5c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:561
					}
					else
						goto continue_cmp_fail;

				default :
					j++;
ffff800000811297:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:562
					break;
ffff80000081129b:	eb 01                	jmp    ffff80000081129e <FAT32_lookup+0x5c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:508
							continue;
ffff80000081129d:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:500 (discriminator 2)
		for(x=0;x<8;x++)
ffff80000081129e:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:500 (discriminator 1)
ffff8000008112a2:	83 7d e0 07          	cmp    DWORD PTR [rbp-0x20],0x7
ffff8000008112a6:	0f 8e 02 fe ff ff    	jle    ffff8000008110ae <FAT32_lookup+0x3d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:566
			}
		}
		//short file ext name compare
		if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
ffff8000008112ac:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008112b0:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff8000008112b4:	0f b6 c0             	movzx  eax,al
ffff8000008112b7:	83 e0 10             	and    eax,0x10
ffff8000008112ba:	85 c0                	test   eax,eax
ffff8000008112bc:	0f 85 ea 01 00 00    	jne    ffff8000008114ac <FAT32_lookup+0x7d5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:568
		{
			j++;
ffff8000008112c2:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:569
			for(x=8;x<11;x++)
ffff8000008112c6:	c7 45 e0 08 00 00 00 	mov    DWORD PTR [rbp-0x20],0x8
ffff8000008112cd:	e9 2b 01 00 00       	jmp    ffff8000008113fd <FAT32_lookup+0x726>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:571
			{
				switch(tmpdentry->DIR_Name[x])
ffff8000008112d2:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008112d6:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008112d9:	48 98                	cdqe   
ffff8000008112db:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008112df:	0f b6 c0             	movzx  eax,al
ffff8000008112e2:	83 f8 7a             	cmp    eax,0x7a
ffff8000008112e5:	0f 8f 3f 01 00 00    	jg     ffff80000081142a <FAT32_lookup+0x753>
ffff8000008112eb:	83 f8 61             	cmp    eax,0x61
ffff8000008112ee:	7d 2e                	jge    ffff80000081131e <FAT32_lookup+0x647>
ffff8000008112f0:	83 f8 5a             	cmp    eax,0x5a
ffff8000008112f3:	0f 8f 31 01 00 00    	jg     ffff80000081142a <FAT32_lookup+0x753>
ffff8000008112f9:	83 f8 41             	cmp    eax,0x41
ffff8000008112fc:	7d 20                	jge    ffff80000081131e <FAT32_lookup+0x647>
ffff8000008112fe:	83 f8 20             	cmp    eax,0x20
ffff800000811301:	0f 84 c4 00 00 00    	je     ffff8000008113cb <FAT32_lookup+0x6f4>
ffff800000811307:	83 f8 20             	cmp    eax,0x20
ffff80000081130a:	0f 8c 1a 01 00 00    	jl     ffff80000081142a <FAT32_lookup+0x753>
ffff800000811310:	83 e8 30             	sub    eax,0x30
ffff800000811313:	83 f8 09             	cmp    eax,0x9
ffff800000811316:	0f 87 0e 01 00 00    	ja     ffff80000081142a <FAT32_lookup+0x753>
ffff80000081131c:	eb 7e                	jmp    ffff80000081139c <FAT32_lookup+0x6c5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:575
				{
					case 'A' ... 'Z':
					case 'a' ... 'z':
						if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
ffff80000081131e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811322:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000811326:	0f b6 c0             	movzx  eax,al
ffff800000811329:	83 e0 10             	and    eax,0x10
ffff80000081132c:	85 c0                	test   eax,eax
ffff80000081132e:	74 39                	je     ffff800000811369 <FAT32_lookup+0x692>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:576
							if(tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
ffff800000811330:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811334:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811337:	48 98                	cdqe   
ffff800000811339:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000081133d:	0f b6 c0             	movzx  eax,al
ffff800000811340:	8d 50 20             	lea    edx,[rax+0x20]
ffff800000811343:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811347:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000081134a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000081134d:	48 98                	cdqe   
ffff80000081134f:	48 01 c8             	add    rax,rcx
ffff800000811352:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811355:	0f be c0             	movsx  eax,al
ffff800000811358:	39 c2                	cmp    edx,eax
ffff80000081135a:	0f 85 cd 00 00 00    	jne    ffff80000081142d <FAT32_lookup+0x756>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:578
							{
								j++;
ffff800000811360:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:579
								break;
ffff800000811364:	e9 90 00 00 00       	jmp    ffff8000008113f9 <FAT32_lookup+0x722>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:585
							}
							else
								goto continue_cmp_fail;
						else
						{
							if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000811369:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000081136d:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811370:	48 98                	cdqe   
ffff800000811372:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811376:	0f b6 d0             	movzx  edx,al
ffff800000811379:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081137d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811380:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811383:	48 98                	cdqe   
ffff800000811385:	48 01 c8             	add    rax,rcx
ffff800000811388:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081138b:	0f be c0             	movsx  eax,al
ffff80000081138e:	39 c2                	cmp    edx,eax
ffff800000811390:	0f 85 9a 00 00 00    	jne    ffff800000811430 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:587
							{
								j++;
ffff800000811396:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:588
								break;
ffff80000081139a:	eb 5d                	jmp    ffff8000008113f9 <FAT32_lookup+0x722>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:595
							else
								goto continue_cmp_fail;
						}

					case '0' ... '9':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff80000081139c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008113a0:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008113a3:	48 98                	cdqe   
ffff8000008113a5:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008113a9:	0f b6 d0             	movzx  edx,al
ffff8000008113ac:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008113b0:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008113b3:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008113b6:	48 98                	cdqe   
ffff8000008113b8:	48 01 c8             	add    rax,rcx
ffff8000008113bb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008113be:	0f be c0             	movsx  eax,al
ffff8000008113c1:	39 c2                	cmp    edx,eax
ffff8000008113c3:	75 6e                	jne    ffff800000811433 <FAT32_lookup+0x75c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:597
						{
							j++;
ffff8000008113c5:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:598
							break;
ffff8000008113c9:	eb 2e                	jmp    ffff8000008113f9 <FAT32_lookup+0x722>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:604
						}
						else
							goto continue_cmp_fail;

					case ' ':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff8000008113cb:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008113cf:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008113d2:	48 98                	cdqe   
ffff8000008113d4:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008113d8:	0f b6 d0             	movzx  edx,al
ffff8000008113db:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008113df:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008113e2:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008113e5:	48 98                	cdqe   
ffff8000008113e7:	48 01 c8             	add    rax,rcx
ffff8000008113ea:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008113ed:	0f be c0             	movsx  eax,al
ffff8000008113f0:	39 c2                	cmp    edx,eax
ffff8000008113f2:	75 42                	jne    ffff800000811436 <FAT32_lookup+0x75f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:606
						{
							j++;
ffff8000008113f4:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:607
							break;
ffff8000008113f8:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:569 (discriminator 2)
			for(x=8;x<11;x++)
ffff8000008113f9:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:569 (discriminator 1)
ffff8000008113fd:	83 7d e0 0a          	cmp    DWORD PTR [rbp-0x20],0xa
ffff800000811401:	0f 8e cb fe ff ff    	jle    ffff8000008112d2 <FAT32_lookup+0x5fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:617
					default :
						goto continue_cmp_fail;
				}
			}
		}
		goto find_lookup_success;
ffff800000811407:	e9 a0 00 00 00       	jmp    ffff8000008114ac <FAT32_lookup+0x7d5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:458
			continue;
ffff80000081140c:	90                   	nop
ffff80000081140d:	eb 28                	jmp    ffff800000811437 <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:460
			continue;
ffff80000081140f:	90                   	nop
ffff800000811410:	eb 25                	jmp    ffff800000811437 <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:473
					goto continue_cmp_fail;
ffff800000811412:	90                   	nop
ffff800000811413:	eb 22                	jmp    ffff800000811437 <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:480
					goto continue_cmp_fail;
ffff800000811415:	90                   	nop
ffff800000811416:	eb 1f                	jmp    ffff800000811437 <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:487
					goto continue_cmp_fail;
ffff800000811418:	90                   	nop
ffff800000811419:	eb 1c                	jmp    ffff800000811437 <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:515
							goto continue_cmp_fail;
ffff80000081141b:	90                   	nop
ffff80000081141c:	eb 19                	jmp    ffff800000811437 <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:527
							goto continue_cmp_fail;
ffff80000081141e:	90                   	nop
ffff80000081141f:	eb 16                	jmp    ffff800000811437 <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:539
							goto continue_cmp_fail;
ffff800000811421:	90                   	nop
ffff800000811422:	eb 13                	jmp    ffff800000811437 <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:548
							goto continue_cmp_fail;
ffff800000811424:	90                   	nop
ffff800000811425:	eb 10                	jmp    ffff800000811437 <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:558
						goto continue_cmp_fail;
ffff800000811427:	90                   	nop
ffff800000811428:	eb 0d                	jmp    ffff800000811437 <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:613
						goto continue_cmp_fail;
ffff80000081142a:	90                   	nop
ffff80000081142b:	eb 0a                	jmp    ffff800000811437 <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:582
								goto continue_cmp_fail;
ffff80000081142d:	90                   	nop
ffff80000081142e:	eb 07                	jmp    ffff800000811437 <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:591
								goto continue_cmp_fail;
ffff800000811430:	90                   	nop
ffff800000811431:	eb 04                	jmp    ffff800000811437 <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:601
							goto continue_cmp_fail;
ffff800000811433:	90                   	nop
ffff800000811434:	eb 01                	jmp    ffff800000811437 <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:610
							goto continue_cmp_fail;
ffff800000811436:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:455 (discriminator 2)
	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
ffff800000811437:	83 45 e8 20          	add    DWORD PTR [rbp-0x18],0x20
ffff80000081143b:	48 83 45 d8 20       	add    QWORD PTR [rbp-0x28],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:455 (discriminator 1)
ffff800000811440:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000811443:	48 63 d0             	movsxd rdx,eax
ffff800000811446:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081144a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081144e:	48 39 c2             	cmp    rdx,rax
ffff800000811451:	0f 8c 4c fa ff ff    	jl     ffff800000810ea3 <FAT32_lookup+0x1cc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:622

continue_cmp_fail:;
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000811457:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000081145a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081145e:	89 d6                	mov    esi,edx
ffff800000811460:	48 89 c7             	mov    rdi,rax
ffff800000811463:	49 89 df             	mov    r15,rbx
ffff800000811466:	48 b8 7a e7 ee ff ff 	movabs rax,0xffffffffffeee77a
ffff80000081146d:	ff ff ff 
ffff800000811470:	48 01 d8             	add    rax,rbx
ffff800000811473:	ff d0                	call   rax
ffff800000811475:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:623
	if(cluster < 0x0ffffff7)
ffff800000811478:	81 7d ec f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff6
ffff80000081147f:	77 05                	ja     ffff800000811486 <FAT32_lookup+0x7af>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:624
		goto next_cluster;
ffff800000811481:	e9 23 f9 ff ff       	jmp    ffff800000810da9 <FAT32_lookup+0xd2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:626

    kmfree(buf);
ffff800000811486:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000081148a:	48 89 c7             	mov    rdi,rax
ffff80000081148d:	49 89 df             	mov    r15,rbx
ffff800000811490:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff800000811497:	ff ff ff 
ffff80000081149a:	48 01 d8             	add    rax,rbx
ffff80000081149d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:627
	return NULL;
ffff80000081149f:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008114a4:	e9 3b 02 00 00       	jmp    ffff8000008116e4 <FAT32_lookup+0xa0d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:492
				goto find_lookup_success;
ffff8000008114a9:	90                   	nop
ffff8000008114aa:	eb 01                	jmp    ffff8000008114ad <FAT32_lookup+0x7d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:617
		goto find_lookup_success;
ffff8000008114ac:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:630

find_lookup_success:
	p = (struct index_node *) kmallocat(0,TO_MPGN(sizeof(struct index_node)));
ffff8000008114ad:	be 01 00 00 00       	mov    esi,0x1
ffff8000008114b2:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008114b7:	49 89 df             	mov    r15,rbx
ffff8000008114ba:	48 b8 ee 13 ee ff ff 	movabs rax,0xffffffffffee13ee
ffff8000008114c1:	ff ff ff 
ffff8000008114c4:	48 01 d8             	add    rax,rbx
ffff8000008114c7:	ff d0                	call   rax
ffff8000008114c9:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:631
	memset(p,0,sizeof(struct index_node));
ffff8000008114cd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008114d1:	ba 40 00 00 00       	mov    edx,0x40
ffff8000008114d6:	be 00 00 00 00       	mov    esi,0x0
ffff8000008114db:	48 89 c7             	mov    rdi,rax
ffff8000008114de:	49 89 df             	mov    r15,rbx
ffff8000008114e1:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff8000008114e8:	ff ff ff 
ffff8000008114eb:	48 01 d8             	add    rax,rbx
ffff8000008114ee:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:632
	p->file_size = tmpdentry->DIR_FileSize;
ffff8000008114f0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008114f4:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff8000008114f7:	89 c2                	mov    edx,eax
ffff8000008114f9:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008114fd:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:633
	p->blocks = (p->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
ffff800000811500:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811504:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000811507:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081150b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081150f:	48 01 d0             	add    rax,rdx
ffff800000811512:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000811516:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081151a:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081151e:	48 89 c1             	mov    rcx,rax
ffff800000811521:	48 89 d0             	mov    rax,rdx
ffff800000811524:	ba 00 00 00 00       	mov    edx,0x0
ffff800000811529:	48 f7 f1             	div    rcx
ffff80000081152c:	48 89 c2             	mov    rdx,rax
ffff80000081152f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811533:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:634
	p->attribute = (tmpdentry->DIR_Attr & ATTR_DIRECTORY) ? FS_ATTR_DIR : FS_ATTR_FILE;
ffff800000811537:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081153b:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff80000081153f:	0f b6 c0             	movzx  eax,al
ffff800000811542:	83 e0 10             	and    eax,0x10
ffff800000811545:	85 c0                	test   eax,eax
ffff800000811547:	74 07                	je     ffff800000811550 <FAT32_lookup+0x879>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:634 (discriminator 1)
ffff800000811549:	ba 02 00 00 00       	mov    edx,0x2
ffff80000081154e:	eb 05                	jmp    ffff800000811555 <FAT32_lookup+0x87e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:634 (discriminator 2)
ffff800000811550:	ba 01 00 00 00       	mov    edx,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:634 (discriminator 4)
ffff800000811555:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811559:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:635 (discriminator 4)
	p->sb = parent_inode->sb;
ffff80000081155d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000811561:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff800000811565:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811569:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:636 (discriminator 4)
	p->f_ops = &FAT32_file_ops;
ffff80000081156d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811571:	48 ba 00 fe ff ff ff 	movabs rdx,0xfffffffffffffe00
ffff800000811578:	ff ff ff 
ffff80000081157b:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000081157f:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:637 (discriminator 4)
	p->inode_ops = &FAT32_inode_ops;
ffff800000811583:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811587:	48 ba 38 ff ff ff ff 	movabs rdx,0xffffffffffffff38
ffff80000081158e:	ff ff ff 
ffff800000811591:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811595:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:639 (discriminator 4)

	p->private_index_info = (struct FAT32_inode_info *) kmallocat(0,TO_MPGN(sizeof(struct FAT32_inode_info)));
ffff800000811599:	be 01 00 00 00       	mov    esi,0x1
ffff80000081159e:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008115a3:	49 89 df             	mov    r15,rbx
ffff8000008115a6:	48 b8 ee 13 ee ff ff 	movabs rax,0xffffffffffee13ee
ffff8000008115ad:	ff ff ff 
ffff8000008115b0:	48 01 d8             	add    rax,rbx
ffff8000008115b3:	ff d0                	call   rax
ffff8000008115b5:	48 89 c2             	mov    rdx,rax
ffff8000008115b8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008115bc:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:640 (discriminator 4)
	memset(p->private_index_info,0,sizeof(struct FAT32_inode_info));
ffff8000008115c0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008115c4:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff8000008115c8:	ba 20 00 00 00       	mov    edx,0x20
ffff8000008115cd:	be 00 00 00 00       	mov    esi,0x0
ffff8000008115d2:	48 89 c7             	mov    rdi,rax
ffff8000008115d5:	49 89 df             	mov    r15,rbx
ffff8000008115d8:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff8000008115df:	ff ff ff 
ffff8000008115e2:	48 01 d8             	add    rax,rbx
ffff8000008115e5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:641 (discriminator 4)
	finode = p->private_index_info;
ffff8000008115e7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008115eb:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff8000008115ef:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:643 (discriminator 4)

	finode->first_cluster = (tmpdentry->DIR_FstClusHI<< 16 | tmpdentry->DIR_FstClusLO) & 0x0fffffff;
ffff8000008115f3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008115f7:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff8000008115fb:	0f b7 c0             	movzx  eax,ax
ffff8000008115fe:	c1 e0 10             	shl    eax,0x10
ffff800000811601:	89 c2                	mov    edx,eax
ffff800000811603:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811607:	0f b7 40 1a          	movzx  eax,WORD PTR [rax+0x1a]
ffff80000081160b:	0f b7 c0             	movzx  eax,ax
ffff80000081160e:	09 d0                	or     eax,edx
ffff800000811610:	48 98                	cdqe   
ffff800000811612:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff800000811617:	48 89 c2             	mov    rdx,rax
ffff80000081161a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081161e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:644 (discriminator 4)
	finode->dentry_location = cluster;
ffff800000811621:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000811624:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811628:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:645 (discriminator 4)
	finode->dentry_position = tmpdentry - (struct FAT32_Directory *)buf;
ffff80000081162c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811630:	48 2b 45 b0          	sub    rax,QWORD PTR [rbp-0x50]
ffff800000811634:	48 c1 f8 05          	sar    rax,0x5
ffff800000811638:	48 89 c2             	mov    rdx,rax
ffff80000081163b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081163f:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:646 (discriminator 4)
	finode->create_date = tmpdentry->DIR_CrtTime;
ffff800000811643:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811647:	0f b7 50 0e          	movzx  edx,WORD PTR [rax+0xe]
ffff80000081164b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081164f:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:647 (discriminator 4)
	finode->create_time = tmpdentry->DIR_CrtDate;
ffff800000811653:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811657:	0f b7 50 10          	movzx  edx,WORD PTR [rax+0x10]
ffff80000081165b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081165f:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:648 (discriminator 4)
	finode->write_date = tmpdentry->DIR_WrtTime;
ffff800000811663:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811667:	0f b7 50 16          	movzx  edx,WORD PTR [rax+0x16]
ffff80000081166b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081166f:	66 89 50 1c          	mov    WORD PTR [rax+0x1c],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:649 (discriminator 4)
	finode->write_time = tmpdentry->DIR_WrtDate;
ffff800000811673:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811677:	0f b7 50 18          	movzx  edx,WORD PTR [rax+0x18]
ffff80000081167b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081167f:	66 89 50 1e          	mov    WORD PTR [rax+0x1e],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:651 (discriminator 4)

	if((tmpdentry->DIR_FstClusHI >> 12) && (p->attribute & FS_ATTR_FILE))
ffff800000811683:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811687:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff80000081168b:	66 c1 e8 0c          	shr    ax,0xc
ffff80000081168f:	66 85 c0             	test   ax,ax
ffff800000811692:	74 27                	je     ffff8000008116bb <FAT32_lookup+0x9e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:651 (discriminator 1)
ffff800000811694:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811698:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081169c:	83 e0 01             	and    eax,0x1
ffff80000081169f:	48 85 c0             	test   rax,rax
ffff8000008116a2:	74 17                	je     ffff8000008116bb <FAT32_lookup+0x9e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:653
	{
		p->attribute |= FS_ATTR_DEVICE;
ffff8000008116a4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008116a8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008116ac:	48 83 c8 04          	or     rax,0x4
ffff8000008116b0:	48 89 c2             	mov    rdx,rax
ffff8000008116b3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008116b7:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:656
	}

	dest_dentry->dir_inode = p;
ffff8000008116bb:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008116bf:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff8000008116c3:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:657
    kmfree(buf);
ffff8000008116c7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008116cb:	48 89 c7             	mov    rdi,rax
ffff8000008116ce:	49 89 df             	mov    r15,rbx
ffff8000008116d1:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff8000008116d8:	ff ff ff 
ffff8000008116db:	48 01 d8             	add    rax,rbx
ffff8000008116de:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:658
	return dest_dentry;	
ffff8000008116e0:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:659
}
ffff8000008116e4:	48 83 c4 60          	add    rsp,0x60
ffff8000008116e8:	5b                   	pop    rbx
ffff8000008116e9:	41 5f                	pop    r15
ffff8000008116eb:	5d                   	pop    rbp
ffff8000008116ec:	c3                   	ret    

ffff8000008116ed <FAT32_mkdir>:
FAT32_mkdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:663


long FAT32_mkdir(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
ffff8000008116ed:	f3 0f 1e fa          	endbr64 
ffff8000008116f1:	55                   	push   rbp
ffff8000008116f2:	48 89 e5             	mov    rbp,rsp
ffff8000008116f5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008116f5 <FAT32_mkdir+0x8>
ffff8000008116fc:	49 bb 5b f8 10 00 00 	movabs r11,0x10f85b
ffff800000811703:	00 00 00 
ffff800000811706:	4c 01 d8             	add    rax,r11
ffff800000811709:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081170d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811711:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff800000811714:	90                   	nop
ffff800000811715:	5d                   	pop    rbp
ffff800000811716:	c3                   	ret    

ffff800000811717 <FAT32_rmdir>:
FAT32_rmdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:667


long FAT32_rmdir(struct index_node * inode,struct dir_entry * dentry)
{}
ffff800000811717:	f3 0f 1e fa          	endbr64 
ffff80000081171b:	55                   	push   rbp
ffff80000081171c:	48 89 e5             	mov    rbp,rsp
ffff80000081171f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081171f <FAT32_rmdir+0x8>
ffff800000811726:	49 bb 31 f8 10 00 00 	movabs r11,0x10f831
ffff80000081172d:	00 00 00 
ffff800000811730:	4c 01 d8             	add    rax,r11
ffff800000811733:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811737:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081173b:	90                   	nop
ffff80000081173c:	5d                   	pop    rbp
ffff80000081173d:	c3                   	ret    

ffff80000081173e <FAT32_rename>:
FAT32_rename():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:670

long FAT32_rename(struct index_node * old_inode,struct dir_entry * old_dentry,struct index_node * new_inode,struct dir_entry * new_dentry)
{}
ffff80000081173e:	f3 0f 1e fa          	endbr64 
ffff800000811742:	55                   	push   rbp
ffff800000811743:	48 89 e5             	mov    rbp,rsp
ffff800000811746:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811746 <FAT32_rename+0x8>
ffff80000081174d:	49 bb 0a f8 10 00 00 	movabs r11,0x10f80a
ffff800000811754:	00 00 00 
ffff800000811757:	4c 01 d8             	add    rax,r11
ffff80000081175a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081175e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811762:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000811766:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff80000081176a:	90                   	nop
ffff80000081176b:	5d                   	pop    rbp
ffff80000081176c:	c3                   	ret    

ffff80000081176d <FAT32_getattr>:
FAT32_getattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:673

long FAT32_getattr(struct dir_entry * dentry,unsigned long * attr)
{}
ffff80000081176d:	f3 0f 1e fa          	endbr64 
ffff800000811771:	55                   	push   rbp
ffff800000811772:	48 89 e5             	mov    rbp,rsp
ffff800000811775:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811775 <FAT32_getattr+0x8>
ffff80000081177c:	49 bb db f7 10 00 00 	movabs r11,0x10f7db
ffff800000811783:	00 00 00 
ffff800000811786:	4c 01 d8             	add    rax,r11
ffff800000811789:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081178d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811791:	90                   	nop
ffff800000811792:	5d                   	pop    rbp
ffff800000811793:	c3                   	ret    

ffff800000811794 <FAT32_setattr>:
FAT32_setattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:676

long FAT32_setattr(struct dir_entry * dentry,unsigned long * attr)
{}
ffff800000811794:	f3 0f 1e fa          	endbr64 
ffff800000811798:	55                   	push   rbp
ffff800000811799:	48 89 e5             	mov    rbp,rsp
ffff80000081179c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081179c <FAT32_setattr+0x8>
ffff8000008117a3:	49 bb b4 f7 10 00 00 	movabs r11,0x10f7b4
ffff8000008117aa:	00 00 00 
ffff8000008117ad:	4c 01 d8             	add    rax,r11
ffff8000008117b0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008117b4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008117b8:	90                   	nop
ffff8000008117b9:	5d                   	pop    rbp
ffff8000008117ba:	c3                   	ret    

ffff8000008117bb <FAT32_compare>:
FAT32_compare():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:691
	.setattr = FAT32_setattr,
};


//// these operation need cache and list
long FAT32_compare(struct dir_entry * parent_dentry,char * source_filename,char * destination_filename){}
ffff8000008117bb:	f3 0f 1e fa          	endbr64 
ffff8000008117bf:	55                   	push   rbp
ffff8000008117c0:	48 89 e5             	mov    rbp,rsp
ffff8000008117c3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008117c3 <FAT32_compare+0x8>
ffff8000008117ca:	49 bb 8d f7 10 00 00 	movabs r11,0x10f78d
ffff8000008117d1:	00 00 00 
ffff8000008117d4:	4c 01 d8             	add    rax,r11
ffff8000008117d7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008117db:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008117df:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff8000008117e3:	90                   	nop
ffff8000008117e4:	5d                   	pop    rbp
ffff8000008117e5:	c3                   	ret    

ffff8000008117e6 <FAT32_hash>:
FAT32_hash():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:692
long FAT32_hash(struct dir_entry * dentry,char * filename){}
ffff8000008117e6:	f3 0f 1e fa          	endbr64 
ffff8000008117ea:	55                   	push   rbp
ffff8000008117eb:	48 89 e5             	mov    rbp,rsp
ffff8000008117ee:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008117ee <FAT32_hash+0x8>
ffff8000008117f5:	49 bb 62 f7 10 00 00 	movabs r11,0x10f762
ffff8000008117fc:	00 00 00 
ffff8000008117ff:	4c 01 d8             	add    rax,r11
ffff800000811802:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811806:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081180a:	90                   	nop
ffff80000081180b:	5d                   	pop    rbp
ffff80000081180c:	c3                   	ret    

ffff80000081180d <FAT32_release>:
FAT32_release():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:693
long FAT32_release(struct dir_entry * dentry){}
ffff80000081180d:	f3 0f 1e fa          	endbr64 
ffff800000811811:	55                   	push   rbp
ffff800000811812:	48 89 e5             	mov    rbp,rsp
ffff800000811815:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811815 <FAT32_release+0x8>
ffff80000081181c:	49 bb 3b f7 10 00 00 	movabs r11,0x10f73b
ffff800000811823:	00 00 00 
ffff800000811826:	4c 01 d8             	add    rax,r11
ffff800000811829:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081182d:	90                   	nop
ffff80000081182e:	5d                   	pop    rbp
ffff80000081182f:	c3                   	ret    

ffff800000811830 <FAT32_iput>:
FAT32_iput():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:694
long FAT32_iput(struct dir_entry * dentry,struct index_node * inode){}
ffff800000811830:	f3 0f 1e fa          	endbr64 
ffff800000811834:	55                   	push   rbp
ffff800000811835:	48 89 e5             	mov    rbp,rsp
ffff800000811838:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811838 <FAT32_iput+0x8>
ffff80000081183f:	49 bb 18 f7 10 00 00 	movabs r11,0x10f718
ffff800000811846:	00 00 00 
ffff800000811849:	4c 01 d8             	add    rax,r11
ffff80000081184c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811850:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811854:	90                   	nop
ffff800000811855:	5d                   	pop    rbp
ffff800000811856:	c3                   	ret    

ffff800000811857 <fat32_write_superblock>:
fat32_write_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:706
	.release = FAT32_release,
	.iput = FAT32_iput,
};


void fat32_write_superblock(struct super_block * sb){}
ffff800000811857:	f3 0f 1e fa          	endbr64 
ffff80000081185b:	55                   	push   rbp
ffff80000081185c:	48 89 e5             	mov    rbp,rsp
ffff80000081185f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081185f <fat32_write_superblock+0x8>
ffff800000811866:	49 bb f1 f6 10 00 00 	movabs r11,0x10f6f1
ffff80000081186d:	00 00 00 
ffff800000811870:	4c 01 d8             	add    rax,r11
ffff800000811873:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811877:	90                   	nop
ffff800000811878:	5d                   	pop    rbp
ffff800000811879:	c3                   	ret    

ffff80000081187a <fat32_put_superblock>:
fat32_put_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:709

void fat32_put_superblock(struct super_block * sb)
{
ffff80000081187a:	f3 0f 1e fa          	endbr64 
ffff80000081187e:	55                   	push   rbp
ffff80000081187f:	48 89 e5             	mov    rbp,rsp
ffff800000811882:	41 57                	push   r15
ffff800000811884:	53                   	push   rbx
ffff800000811885:	48 83 ec 10          	sub    rsp,0x10
ffff800000811889:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811889 <fat32_put_superblock+0xf>
ffff800000811890:	49 bb c7 f6 10 00 00 	movabs r11,0x10f6c7
ffff800000811897:	00 00 00 
ffff80000081189a:	4c 01 db             	add    rbx,r11
ffff80000081189d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:710
    kmfree(sb->private_sb_info);
ffff8000008118a1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008118a5:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008118a9:	48 89 c7             	mov    rdi,rax
ffff8000008118ac:	49 89 df             	mov    r15,rbx
ffff8000008118af:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff8000008118b6:	ff ff ff 
ffff8000008118b9:	48 01 d8             	add    rax,rbx
ffff8000008118bc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:711
    kmfree(sb->root->dir_inode->private_index_info);
ffff8000008118be:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008118c2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008118c5:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008118c9:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff8000008118cd:	48 89 c7             	mov    rdi,rax
ffff8000008118d0:	49 89 df             	mov    r15,rbx
ffff8000008118d3:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff8000008118da:	ff ff ff 
ffff8000008118dd:	48 01 d8             	add    rax,rbx
ffff8000008118e0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:712
    kmfree(sb->root->dir_inode);
ffff8000008118e2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008118e6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008118e9:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008118ed:	48 89 c7             	mov    rdi,rax
ffff8000008118f0:	49 89 df             	mov    r15,rbx
ffff8000008118f3:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff8000008118fa:	ff ff ff 
ffff8000008118fd:	48 01 d8             	add    rax,rbx
ffff800000811900:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:713
    kmfree(sb->root);
ffff800000811902:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811906:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811909:	48 89 c7             	mov    rdi,rax
ffff80000081190c:	49 89 df             	mov    r15,rbx
ffff80000081190f:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff800000811916:	ff ff ff 
ffff800000811919:	48 01 d8             	add    rax,rbx
ffff80000081191c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:714
    kmfree(sb);
ffff80000081191e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811922:	48 89 c7             	mov    rdi,rax
ffff800000811925:	49 89 df             	mov    r15,rbx
ffff800000811928:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff80000081192f:	ff ff ff 
ffff800000811932:	48 01 d8             	add    rax,rbx
ffff800000811935:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:715
}
ffff800000811937:	90                   	nop
ffff800000811938:	48 83 c4 10          	add    rsp,0x10
ffff80000081193c:	5b                   	pop    rbx
ffff80000081193d:	41 5f                	pop    r15
ffff80000081193f:	5d                   	pop    rbp
ffff800000811940:	c3                   	ret    

ffff800000811941 <fat32_write_inode>:
fat32_write_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:718

void fat32_write_inode(struct index_node * inode)
{
ffff800000811941:	f3 0f 1e fa          	endbr64 
ffff800000811945:	55                   	push   rbp
ffff800000811946:	48 89 e5             	mov    rbp,rsp
ffff800000811949:	41 57                	push   r15
ffff80000081194b:	53                   	push   rbx
ffff80000081194c:	48 83 ec 40          	sub    rsp,0x40
ffff800000811950:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811950 <fat32_write_inode+0xf>
ffff800000811957:	49 bb 00 f6 10 00 00 	movabs r11,0x10f600
ffff80000081195e:	00 00 00 
ffff800000811961:	4c 01 db             	add    rbx,r11
ffff800000811964:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:719
	struct FAT32_Directory * fdentry = NULL;
ffff800000811968:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000081196f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:720
	struct FAT32_Directory * buf = NULL;
ffff800000811970:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000811977:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:721
	struct FAT32_inode_info * finode = inode->private_index_info;
ffff800000811978:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081197c:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000811980:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:722
	struct FAT32_sb_info * fsbi = inode->sb->private_sb_info;
ffff800000811984:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811988:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081198c:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811990:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:723
	unsigned long sector = 0;
ffff800000811994:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000081199b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:725

	if(finode->dentry_location == 0)
ffff80000081199c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008119a0:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008119a4:	48 85 c0             	test   rax,rax
ffff8000008119a7:	75 2d                	jne    ffff8000008119d6 <fat32_write_inode+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:727
	{
		printf("FS ERROR:write root inode!\n");	
ffff8000008119a9:	48 b8 24 db ff ff ff 	movabs rax,0xffffffffffffdb24
ffff8000008119b0:	ff ff ff 
ffff8000008119b3:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008119b7:	48 89 c7             	mov    rdi,rax
ffff8000008119ba:	49 89 df             	mov    r15,rbx
ffff8000008119bd:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008119c2:	48 ba 71 0a ee ff ff 	movabs rdx,0xffffffffffee0a71
ffff8000008119c9:	ff ff ff 
ffff8000008119cc:	48 01 da             	add    rdx,rbx
ffff8000008119cf:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:728
		return ;
ffff8000008119d1:	e9 89 01 00 00       	jmp    ffff800000811b5f <fat32_write_inode+0x21e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:731
	}

	sector = fsbi->Data_firstsector + (finode->dentry_location - 2) * fsbi->sector_per_cluster;
ffff8000008119d6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008119da:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff8000008119de:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008119e2:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008119e6:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff8000008119ea:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008119ee:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008119f2:	48 0f af c2          	imul   rax,rdx
ffff8000008119f6:	48 01 c8             	add    rax,rcx
ffff8000008119f9:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:732
	buf = (struct FAT32_Directory *) kmallocat(0,TO_MPGN(fsbi->bytes_per_cluster));
ffff8000008119fd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811a01:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811a05:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff800000811a0b:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff800000811a12:	48 85 c0             	test   rax,rax
ffff800000811a15:	48 0f 48 c2          	cmovs  rax,rdx
ffff800000811a19:	48 c1 f8 0c          	sar    rax,0xc
ffff800000811a1d:	89 c6                	mov    esi,eax
ffff800000811a1f:	bf 00 00 00 00       	mov    edi,0x0
ffff800000811a24:	49 89 df             	mov    r15,rbx
ffff800000811a27:	48 b8 ee 13 ee ff ff 	movabs rax,0xffffffffffee13ee
ffff800000811a2e:	ff ff ff 
ffff800000811a31:	48 01 d8             	add    rax,rbx
ffff800000811a34:	ff d0                	call   rax
ffff800000811a36:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:733
	memset(buf,0,fsbi->bytes_per_cluster);
ffff800000811a3a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811a3e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811a42:	89 c2                	mov    edx,eax
ffff800000811a44:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811a48:	be 00 00 00 00       	mov    esi,0x0
ffff800000811a4d:	48 89 c7             	mov    rdi,rax
ffff800000811a50:	49 89 df             	mov    r15,rbx
ffff800000811a53:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff800000811a5a:	ff ff ff 
ffff800000811a5d:	48 01 d8             	add    rax,rbx
ffff800000811a60:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:734
	blkdev_read(inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf);
ffff800000811a62:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811a66:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811a6a:	48 c1 e0 09          	shl    rax,0x9
ffff800000811a6e:	48 89 c7             	mov    rdi,rax
ffff800000811a71:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811a75:	48 c1 e0 09          	shl    rax,0x9
ffff800000811a79:	48 89 c6             	mov    rsi,rax
ffff800000811a7c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811a80:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff800000811a84:	0f b7 c0             	movzx  eax,ax
ffff800000811a87:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000811a8b:	48 89 d1             	mov    rcx,rdx
ffff800000811a8e:	48 89 fa             	mov    rdx,rdi
ffff800000811a91:	89 c7                	mov    edi,eax
ffff800000811a93:	49 89 df             	mov    r15,rbx
ffff800000811a96:	48 b8 d3 d0 ee ff ff 	movabs rax,0xffffffffffeed0d3
ffff800000811a9d:	ff ff ff 
ffff800000811aa0:	48 01 d8             	add    rax,rbx
ffff800000811aa3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:735
    fdentry = buf+finode->dentry_position;
ffff800000811aa5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811aa9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811aad:	48 c1 e0 05          	shl    rax,0x5
ffff800000811ab1:	48 89 c2             	mov    rdx,rax
ffff800000811ab4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811ab8:	48 01 d0             	add    rax,rdx
ffff800000811abb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:738

	////alert fat32 dentry data
	fdentry->DIR_FileSize = inode->file_size;
ffff800000811abf:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811ac3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811ac6:	89 c2                	mov    edx,eax
ffff800000811ac8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811acc:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:739
	fdentry->DIR_FstClusLO = finode->first_cluster & 0xffff;
ffff800000811acf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811ad3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811ad6:	89 c2                	mov    edx,eax
ffff800000811ad8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811adc:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:740
	fdentry->DIR_FstClusHI = (fdentry->DIR_FstClusHI & 0xf000) | (finode->first_cluster >> 16);
ffff800000811ae0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811ae4:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff800000811ae8:	66 25 00 f0          	and    ax,0xf000
ffff800000811aec:	89 c2                	mov    edx,eax
ffff800000811aee:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811af2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811af5:	48 c1 e8 10          	shr    rax,0x10
ffff800000811af9:	09 c2                	or     edx,eax
ffff800000811afb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811aff:	66 89 50 14          	mov    WORD PTR [rax+0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:742
	
	blkdev_write(inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf);
ffff800000811b03:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811b07:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811b0b:	48 c1 e0 09          	shl    rax,0x9
ffff800000811b0f:	48 89 c7             	mov    rdi,rax
ffff800000811b12:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811b16:	48 c1 e0 09          	shl    rax,0x9
ffff800000811b1a:	48 89 c6             	mov    rsi,rax
ffff800000811b1d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811b21:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff800000811b25:	0f b7 c0             	movzx  eax,ax
ffff800000811b28:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000811b2c:	48 89 d1             	mov    rcx,rdx
ffff800000811b2f:	48 89 fa             	mov    rdx,rdi
ffff800000811b32:	89 c7                	mov    edi,eax
ffff800000811b34:	49 89 df             	mov    r15,rbx
ffff800000811b37:	48 b8 34 d2 ee ff ff 	movabs rax,0xffffffffffeed234
ffff800000811b3e:	ff ff ff 
ffff800000811b41:	48 01 d8             	add    rax,rbx
ffff800000811b44:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:743
    kmfree(buf);
ffff800000811b46:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811b4a:	48 89 c7             	mov    rdi,rax
ffff800000811b4d:	49 89 df             	mov    r15,rbx
ffff800000811b50:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff800000811b57:	ff ff ff 
ffff800000811b5a:	48 01 d8             	add    rax,rbx
ffff800000811b5d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:744
}
ffff800000811b5f:	48 83 c4 40          	add    rsp,0x40
ffff800000811b63:	5b                   	pop    rbx
ffff800000811b64:	41 5f                	pop    r15
ffff800000811b66:	5d                   	pop    rbp
ffff800000811b67:	c3                   	ret    

ffff800000811b68 <fat32_read_superblock>:
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:755

	.write_inode = fat32_write_inode,
};

struct super_block * fat32_read_superblock(struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
ffff800000811b68:	f3 0f 1e fa          	endbr64 
ffff800000811b6c:	55                   	push   rbp
ffff800000811b6d:	48 89 e5             	mov    rbp,rsp
ffff800000811b70:	41 57                	push   r15
ffff800000811b72:	53                   	push   rbx
ffff800000811b73:	48 83 ec 40          	sub    rsp,0x40
ffff800000811b77:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811b77 <fat32_read_superblock+0xf>
ffff800000811b7e:	49 bb d9 f3 10 00 00 	movabs r11,0x10f3d9
ffff800000811b85:	00 00 00 
ffff800000811b88:	4c 01 db             	add    rbx,r11
ffff800000811b8b:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff800000811b8f:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:756
	struct super_block * sbp = NULL;
ffff800000811b93:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000811b9a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:757
	struct FAT32_inode_info * finode = NULL;
ffff800000811b9b:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000811ba2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:758
	struct FAT32_BootSector * fbs = NULL;
ffff800000811ba3:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000811baa:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:759
	struct FAT32_sb_info * fsbi = NULL;
ffff800000811bab:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff800000811bb2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:762

	////super block
	sbp = (struct super_block *) kmallocat(0,TO_MPGN(sizeof(struct super_block)));
ffff800000811bb3:	be 01 00 00 00       	mov    esi,0x1
ffff800000811bb8:	bf 00 00 00 00       	mov    edi,0x0
ffff800000811bbd:	49 89 df             	mov    r15,rbx
ffff800000811bc0:	48 b8 ee 13 ee ff ff 	movabs rax,0xffffffffffee13ee
ffff800000811bc7:	ff ff ff 
ffff800000811bca:	48 01 d8             	add    rax,rbx
ffff800000811bcd:	ff d0                	call   rax
ffff800000811bcf:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:763
	memset(sbp,0,sizeof(struct super_block));
ffff800000811bd3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811bd7:	ba 28 00 00 00       	mov    edx,0x28
ffff800000811bdc:	be 00 00 00 00       	mov    esi,0x0
ffff800000811be1:	48 89 c7             	mov    rdi,rax
ffff800000811be4:	49 89 df             	mov    r15,rbx
ffff800000811be7:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff800000811bee:	ff ff ff 
ffff800000811bf1:	48 01 d8             	add    rax,rbx
ffff800000811bf4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:765

	sbp->sb_ops = &FAT32_sb_ops;
ffff800000811bf6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811bfa:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff800000811c01:	ff ff ff 
ffff800000811c04:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811c08:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:766
	sbp->private_sb_info = (struct FAT32_sb_info *) kmallocat(0,TO_MPGN(sizeof(struct FAT32_sb_info)));
ffff800000811c0c:	be 01 00 00 00       	mov    esi,0x1
ffff800000811c11:	bf 00 00 00 00       	mov    edi,0x0
ffff800000811c16:	49 89 df             	mov    r15,rbx
ffff800000811c19:	48 b8 ee 13 ee ff ff 	movabs rax,0xffffffffffee13ee
ffff800000811c20:	ff ff ff 
ffff800000811c23:	48 01 d8             	add    rax,rbx
ffff800000811c26:	ff d0                	call   rax
ffff800000811c28:	48 89 c2             	mov    rdx,rax
ffff800000811c2b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811c2f:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:767
	memset(sbp->private_sb_info,0,sizeof(struct FAT32_sb_info));
ffff800000811c33:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811c37:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811c3b:	ba 60 00 00 00       	mov    edx,0x60
ffff800000811c40:	be 00 00 00 00       	mov    esi,0x0
ffff800000811c45:	48 89 c7             	mov    rdi,rax
ffff800000811c48:	49 89 df             	mov    r15,rbx
ffff800000811c4b:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff800000811c52:	ff ff ff 
ffff800000811c55:	48 01 d8             	add    rax,rbx
ffff800000811c58:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:770

	////fat32 boot sector
	fbs = (struct FAT32_BootSector *)buf;
ffff800000811c5a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000811c5e:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:771
 	fsbi = sbp->private_sb_info;
ffff800000811c62:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811c66:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811c6a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:772
	fsbi->start_sector = DPTE->start_LBA;
ffff800000811c6e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811c72:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811c75:	89 c2                	mov    edx,eax
ffff800000811c77:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811c7b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:773
	fsbi->sector_count = DPTE->sectors_limit;
ffff800000811c7e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811c82:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000811c85:	89 c2                	mov    edx,eax
ffff800000811c87:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811c8b:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:774
	fsbi->sector_per_cluster = fbs->BPB_SecPerClus;
ffff800000811c8f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811c93:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
ffff800000811c97:	0f b6 d0             	movzx  edx,al
ffff800000811c9a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811c9e:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:775
	fsbi->bytes_per_cluster = fbs->BPB_SecPerClus * fbs->BPB_BytesPerSec;
ffff800000811ca2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811ca6:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
ffff800000811caa:	0f b6 d0             	movzx  edx,al
ffff800000811cad:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811cb1:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
ffff800000811cb5:	0f b7 c0             	movzx  eax,ax
ffff800000811cb8:	0f af c2             	imul   eax,edx
ffff800000811cbb:	48 63 d0             	movsxd rdx,eax
ffff800000811cbe:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811cc2:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:776
	fsbi->bytes_per_sector = fbs->BPB_BytesPerSec;
ffff800000811cc6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811cca:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
ffff800000811cce:	0f b7 d0             	movzx  edx,ax
ffff800000811cd1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811cd5:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:777
	fsbi->Data_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt + fbs->BPB_FATSz32 * fbs->BPB_NumFATs;
ffff800000811cd9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811cdd:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000811ce0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811ce4:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
ffff800000811ce8:	0f b7 c0             	movzx  eax,ax
ffff800000811ceb:	8d 0c 02             	lea    ecx,[rdx+rax*1]
ffff800000811cee:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811cf2:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff800000811cf5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811cf9:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff800000811cfd:	0f b6 c0             	movzx  eax,al
ffff800000811d00:	0f af c2             	imul   eax,edx
ffff800000811d03:	01 c8                	add    eax,ecx
ffff800000811d05:	89 c2                	mov    edx,eax
ffff800000811d07:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811d0b:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:778
	fsbi->FAT1_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt;
ffff800000811d0f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811d13:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000811d16:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811d1a:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
ffff800000811d1e:	0f b7 c0             	movzx  eax,ax
ffff800000811d21:	01 d0                	add    eax,edx
ffff800000811d23:	89 c2                	mov    edx,eax
ffff800000811d25:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811d29:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:779
	fsbi->sector_per_FAT = fbs->BPB_FATSz32;
ffff800000811d2d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811d31:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff800000811d34:	89 c2                	mov    edx,eax
ffff800000811d36:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811d3a:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:780
	fsbi->NumFATs = fbs->BPB_NumFATs;
ffff800000811d3e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811d42:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff800000811d46:	0f b6 d0             	movzx  edx,al
ffff800000811d49:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811d4d:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:781
	fsbi->fsinfo_sector_infat = fbs->BPB_FSInfo;
ffff800000811d51:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811d55:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff800000811d59:	0f b7 d0             	movzx  edx,ax
ffff800000811d5c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811d60:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:782
	fsbi->bootsector_bk_infat = fbs->BPB_BkBootSec;	
ffff800000811d64:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811d68:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
ffff800000811d6c:	0f b7 d0             	movzx  edx,ax
ffff800000811d6f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811d73:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:784
	
	printf("FAT32 Boot Sector\n\tBPB_FSInfo:%x\n\tBPB_BkBootSec:%x\n\tBPB_TotSec32:%x\n",fbs->BPB_FSInfo,fbs->BPB_BkBootSec,fbs->BPB_TotSec32);
ffff800000811d77:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811d7b:	8b 48 20             	mov    ecx,DWORD PTR [rax+0x20]
ffff800000811d7e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811d82:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
ffff800000811d86:	0f b7 d0             	movzx  edx,ax
ffff800000811d89:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811d8d:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff800000811d91:	0f b7 c0             	movzx  eax,ax
ffff800000811d94:	89 c6                	mov    esi,eax
ffff800000811d96:	48 b8 40 db ff ff ff 	movabs rax,0xffffffffffffdb40
ffff800000811d9d:	ff ff ff 
ffff800000811da0:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811da4:	48 89 c7             	mov    rdi,rax
ffff800000811da7:	49 89 df             	mov    r15,rbx
ffff800000811daa:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811daf:	49 b8 71 0a ee ff ff 	movabs r8,0xffffffffffee0a71
ffff800000811db6:	ff ff ff 
ffff800000811db9:	49 01 d8             	add    r8,rbx
ffff800000811dbc:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:787
	
	////fat32 fsinfo sector
	fsbi->fat_fsinfo = (struct FAT32_FSInfo *) kmallocat(0,TO_MPGN(sizeof(struct FAT32_FSInfo)));
ffff800000811dbf:	be 01 00 00 00       	mov    esi,0x1
ffff800000811dc4:	bf 00 00 00 00       	mov    edi,0x0
ffff800000811dc9:	49 89 df             	mov    r15,rbx
ffff800000811dcc:	48 b8 ee 13 ee ff ff 	movabs rax,0xffffffffffee13ee
ffff800000811dd3:	ff ff ff 
ffff800000811dd6:	48 01 d8             	add    rax,rbx
ffff800000811dd9:	ff d0                	call   rax
ffff800000811ddb:	48 89 c2             	mov    rdx,rax
ffff800000811dde:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811de2:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:788
	memset(fsbi->fat_fsinfo,0,512);
ffff800000811de6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811dea:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000811dee:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811df3:	be 00 00 00 00       	mov    esi,0x0
ffff800000811df8:	48 89 c7             	mov    rdi,rax
ffff800000811dfb:	49 89 df             	mov    r15,rbx
ffff800000811dfe:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff800000811e05:	ff ff ff 
ffff800000811e08:	48 01 d8             	add    rax,rbx
ffff800000811e0b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:789
	blkdev_read(root_sb->dev,(DPTE->start_LBA + fbs->BPB_FSInfo)*SECTOR_SIZE,SECTOR_SIZE,(unsigned char *)fsbi->fat_fsinfo);
ffff800000811e0d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811e11:	48 8b 50 58          	mov    rdx,QWORD PTR [rax+0x58]
ffff800000811e15:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811e19:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffff800000811e1c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811e20:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff800000811e24:	0f b7 c0             	movzx  eax,ax
ffff800000811e27:	01 c8                	add    eax,ecx
ffff800000811e29:	c1 e0 09             	shl    eax,0x9
ffff800000811e2c:	89 c6                	mov    esi,eax
ffff800000811e2e:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff800000811e35:	ff ff ff 
ffff800000811e38:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000811e3c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811e3f:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000811e43:	0f b7 c0             	movzx  eax,ax
ffff800000811e46:	48 89 d1             	mov    rcx,rdx
ffff800000811e49:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811e4e:	89 c7                	mov    edi,eax
ffff800000811e50:	49 89 df             	mov    r15,rbx
ffff800000811e53:	48 b8 d3 d0 ee ff ff 	movabs rax,0xffffffffffeed0d3
ffff800000811e5a:	ff ff ff 
ffff800000811e5d:	48 01 d8             	add    rax,rbx
ffff800000811e60:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:790
	printf("FAT32 FSInfo\n\tFSI_LeadSig:%x\n\tFSI_StrucSig:%x\n\tFSI_Free_Count:%x\n",fsbi->fat_fsinfo->FSI_LeadSig,fsbi->fat_fsinfo->FSI_StrucSig,fsbi->fat_fsinfo->FSI_Free_Count);
ffff800000811e62:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811e66:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000811e6a:	8b 88 e8 01 00 00    	mov    ecx,DWORD PTR [rax+0x1e8]
ffff800000811e70:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811e74:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000811e78:	8b 90 e4 01 00 00    	mov    edx,DWORD PTR [rax+0x1e4]
ffff800000811e7e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811e82:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000811e86:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000811e88:	89 c6                	mov    esi,eax
ffff800000811e8a:	48 b8 88 db ff ff ff 	movabs rax,0xffffffffffffdb88
ffff800000811e91:	ff ff ff 
ffff800000811e94:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811e98:	48 89 c7             	mov    rdi,rax
ffff800000811e9b:	49 89 df             	mov    r15,rbx
ffff800000811e9e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811ea3:	49 b8 71 0a ee ff ff 	movabs r8,0xffffffffffee0a71
ffff800000811eaa:	ff ff ff 
ffff800000811ead:	49 01 d8             	add    r8,rbx
ffff800000811eb0:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:793
	
	////directory entry
	sbp->root = (struct dir_entry *) kmallocat(0,TO_MPGN(sizeof(struct dir_entry)));
ffff800000811eb3:	be 01 00 00 00       	mov    esi,0x1
ffff800000811eb8:	bf 00 00 00 00       	mov    edi,0x0
ffff800000811ebd:	49 89 df             	mov    r15,rbx
ffff800000811ec0:	48 b8 ee 13 ee ff ff 	movabs rax,0xffffffffffee13ee
ffff800000811ec7:	ff ff ff 
ffff800000811eca:	48 01 d8             	add    rax,rbx
ffff800000811ecd:	ff d0                	call   rax
ffff800000811ecf:	48 89 c2             	mov    rdx,rax
ffff800000811ed2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811ed6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:794
	memset(sbp->root,0,sizeof(struct dir_entry));
ffff800000811ed9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811edd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811ee0:	ba 60 00 00 00       	mov    edx,0x60
ffff800000811ee5:	be 00 00 00 00       	mov    esi,0x0
ffff800000811eea:	48 89 c7             	mov    rdi,rax
ffff800000811eed:	49 89 df             	mov    r15,rbx
ffff800000811ef0:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff800000811ef7:	ff ff ff 
ffff800000811efa:	48 01 d8             	add    rax,rbx
ffff800000811efd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:796

	list_init(&sbp->root->child_node);
ffff800000811eff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811f03:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811f06:	48 83 c0 10          	add    rax,0x10
ffff800000811f0a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff800000811f0e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811f12:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff800000811f19:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811f1d:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000811f24:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff800000811f25:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:797
	list_init(&sbp->root->subdirs_list);
ffff800000811f26:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811f2a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811f2d:	48 83 c0 28          	add    rax,0x28
ffff800000811f31:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->prev = NULL;
ffff800000811f35:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811f39:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
    list->next = NULL;
ffff800000811f40:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811f44:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000811f4b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:22
}
ffff800000811f4c:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:798
	sbp->root->parent = sbp->root;
ffff800000811f4d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811f51:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811f54:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000811f58:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000811f5b:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:799
	sbp->root->dir_ops = &FAT32_dentry_ops;
ffff800000811f5f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811f63:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811f66:	48 ba 28 ff ff ff ff 	movabs rdx,0xffffffffffffff28
ffff800000811f6d:	ff ff ff 
ffff800000811f70:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811f74:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:800
	sbp->root->name = (char *) kmallocat(0,TO_MPGN(2));
ffff800000811f78:	be 01 00 00 00       	mov    esi,0x1
ffff800000811f7d:	bf 00 00 00 00       	mov    edi,0x0
ffff800000811f82:	49 89 df             	mov    r15,rbx
ffff800000811f85:	48 b8 ee 13 ee ff ff 	movabs rax,0xffffffffffee13ee
ffff800000811f8c:	ff ff ff 
ffff800000811f8f:	48 01 d8             	add    rax,rbx
ffff800000811f92:	ff d0                	call   rax
ffff800000811f94:	48 89 c2             	mov    rdx,rax
ffff800000811f97:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811f9b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811f9e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:801
	sbp->root->name[0] = '/';
ffff800000811fa1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811fa5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811fa8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811fab:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:802
	sbp->root->name_length = 1;
ffff800000811fae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811fb2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811fb5:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:805

	////index node
	sbp->root->dir_inode = (struct index_node *) kmallocat(0,TO_MPGN(sizeof(struct index_node)));
ffff800000811fbc:	be 01 00 00 00       	mov    esi,0x1
ffff800000811fc1:	bf 00 00 00 00       	mov    edi,0x0
ffff800000811fc6:	49 89 df             	mov    r15,rbx
ffff800000811fc9:	48 b8 ee 13 ee ff ff 	movabs rax,0xffffffffffee13ee
ffff800000811fd0:	ff ff ff 
ffff800000811fd3:	48 01 d8             	add    rax,rbx
ffff800000811fd6:	ff d0                	call   rax
ffff800000811fd8:	48 89 c2             	mov    rdx,rax
ffff800000811fdb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811fdf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811fe2:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:806
	memset(sbp->root->dir_inode,0,sizeof(struct index_node));
ffff800000811fe6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811fea:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811fed:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811ff1:	ba 40 00 00 00       	mov    edx,0x40
ffff800000811ff6:	be 00 00 00 00       	mov    esi,0x0
ffff800000811ffb:	48 89 c7             	mov    rdi,rax
ffff800000811ffe:	49 89 df             	mov    r15,rbx
ffff800000812001:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff800000812008:	ff ff ff 
ffff80000081200b:	48 01 d8             	add    rax,rbx
ffff80000081200e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:807
	sbp->root->dir_inode->inode_ops = &FAT32_inode_ops;
ffff800000812010:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812014:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812017:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081201b:	48 ba 38 ff ff ff ff 	movabs rdx,0xffffffffffffff38
ffff800000812022:	ff ff ff 
ffff800000812025:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000812029:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:808
	sbp->root->dir_inode->f_ops = &FAT32_file_ops;
ffff80000081202d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812031:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812034:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812038:	48 ba 00 fe ff ff ff 	movabs rdx,0xfffffffffffffe00
ffff80000081203f:	ff ff ff 
ffff800000812042:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000812046:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:809
	sbp->root->dir_inode->file_size = 0;
ffff80000081204a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081204e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812051:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812055:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:810
	sbp->root->dir_inode->blocks = (sbp->root->dir_inode->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
ffff80000081205c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812060:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812063:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812067:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000081206a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081206e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000812072:	48 01 d0             	add    rax,rdx
ffff800000812075:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000812079:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081207d:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812081:	48 89 c6             	mov    rsi,rax
ffff800000812084:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812088:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081208b:	48 8b 48 40          	mov    rcx,QWORD PTR [rax+0x40]
ffff80000081208f:	48 89 d0             	mov    rax,rdx
ffff800000812092:	ba 00 00 00 00       	mov    edx,0x0
ffff800000812097:	48 f7 f6             	div    rsi
ffff80000081209a:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:811
	sbp->root->dir_inode->attribute = FS_ATTR_DIR;
ffff80000081209e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008120a2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008120a5:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008120a9:	48 c7 40 10 02 00 00 	mov    QWORD PTR [rax+0x10],0x2
ffff8000008120b0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:812
	sbp->root->dir_inode->sb = sbp;
ffff8000008120b1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008120b5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008120b8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008120bc:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008120c0:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:815

	////fat32 root inode
	sbp->root->dir_inode->private_index_info = (struct FAT32_inode_info *) kmallocat(0,TO_MPGN(sizeof(struct FAT32_inode_info)));
ffff8000008120c4:	be 01 00 00 00       	mov    esi,0x1
ffff8000008120c9:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008120ce:	49 89 df             	mov    r15,rbx
ffff8000008120d1:	48 b8 ee 13 ee ff ff 	movabs rax,0xffffffffffee13ee
ffff8000008120d8:	ff ff ff 
ffff8000008120db:	48 01 d8             	add    rax,rbx
ffff8000008120de:	ff d0                	call   rax
ffff8000008120e0:	48 89 c2             	mov    rdx,rax
ffff8000008120e3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008120e7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008120ea:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008120ee:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:816
	memset(sbp->root->dir_inode->private_index_info,0,sizeof(struct FAT32_inode_info));
ffff8000008120f2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008120f6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008120f9:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008120fd:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000812101:	ba 20 00 00 00       	mov    edx,0x20
ffff800000812106:	be 00 00 00 00       	mov    esi,0x0
ffff80000081210b:	48 89 c7             	mov    rdi,rax
ffff80000081210e:	49 89 df             	mov    r15,rbx
ffff800000812111:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff800000812118:	ff ff ff 
ffff80000081211b:	48 01 d8             	add    rax,rbx
ffff80000081211e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:817
	finode = (struct FAT32_inode_info *)sbp->root->dir_inode->private_index_info;
ffff800000812120:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812124:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812127:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081212b:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000081212f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:818
	finode->first_cluster = fbs->BPB_RootClus;
ffff800000812133:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812137:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
ffff80000081213a:	89 c2                	mov    edx,eax
ffff80000081213c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812140:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:819
	finode->dentry_location = 0;
ffff800000812143:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812147:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff80000081214e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:820
	finode->dentry_position = 0; 
ffff80000081214f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812153:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000081215a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:821
	finode->create_date = 0;
ffff80000081215b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081215f:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:822
	finode->create_time = 0;
ffff800000812165:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812169:	66 c7 40 1a 00 00    	mov    WORD PTR [rax+0x1a],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:823
	finode->write_date = 0;
ffff80000081216f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812173:	66 c7 40 1c 00 00    	mov    WORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:824
	finode->write_time = 0;
ffff800000812179:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081217d:	66 c7 40 1e 00 00    	mov    WORD PTR [rax+0x1e],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:826

	return sbp;
ffff800000812183:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:827
}
ffff800000812187:	48 83 c4 40          	add    rsp,0x40
ffff80000081218b:	5b                   	pop    rbx
ffff80000081218c:	41 5f                	pop    r15
ffff80000081218e:	5d                   	pop    rbp
ffff80000081218f:	c3                   	ret    

ffff800000812190 <DISK1_FAT32_FS_init>:
DISK1_FAT32_FS_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:839
	.read_superblock = fat32_read_superblock,
	.next = NULL,
};

void DISK1_FAT32_FS_init()
{
ffff800000812190:	f3 0f 1e fa          	endbr64 
ffff800000812194:	55                   	push   rbp
ffff800000812195:	48 89 e5             	mov    rbp,rsp
ffff800000812198:	41 57                	push   r15
ffff80000081219a:	53                   	push   rbx
ffff80000081219b:	48 81 ec 10 04 00 00 	sub    rsp,0x410
ffff8000008121a2:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008121a2 <DISK1_FAT32_FS_init+0x12>
ffff8000008121a9:	49 bb ae ed 10 00 00 	movabs r11,0x10edae
ffff8000008121b0:	00 00 00 
ffff8000008121b3:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:842
	int i;
	unsigned char buf[512];
	struct dir_entry * dentry = NULL;
ffff8000008121b6:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff8000008121bd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:843
	struct Disk_Partition_Table DPT = {0};
ffff8000008121be:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
ffff8000008121c5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008121ca:	b9 40 00 00 00       	mov    ecx,0x40
ffff8000008121cf:	48 89 d7             	mov    rdi,rdx
ffff8000008121d2:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:845

	register_filesystem(&FAT32_fs_type);
ffff8000008121d5:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff8000008121dc:	ff ff ff 
ffff8000008121df:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008121e3:	48 89 c7             	mov    rdi,rax
ffff8000008121e6:	49 89 df             	mov    r15,rbx
ffff8000008121e9:	48 b8 bb a8 ee ff ff 	movabs rax,0xffffffffffeea8bb
ffff8000008121f0:	ff ff ff 
ffff8000008121f3:	48 01 d8             	add    rax,rbx
ffff8000008121f6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:847
	
	memset(buf,0,512);
ffff8000008121f8:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff8000008121ff:	ba 00 02 00 00       	mov    edx,0x200
ffff800000812204:	be 00 00 00 00       	mov    esi,0x0
ffff800000812209:	48 89 c7             	mov    rdi,rax
ffff80000081220c:	49 89 df             	mov    r15,rbx
ffff80000081220f:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff800000812216:	ff ff ff 
ffff800000812219:	48 01 d8             	add    rax,rbx
ffff80000081221c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:849

	blkdev_read(root_sb->dev,0,512,buf);
ffff80000081221e:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff800000812225:	ff ff ff 
ffff800000812228:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000081222c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081222f:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000812233:	0f b7 c0             	movzx  eax,ax
ffff800000812236:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff80000081223d:	48 89 d1             	mov    rcx,rdx
ffff800000812240:	ba 00 02 00 00       	mov    edx,0x200
ffff800000812245:	be 00 00 00 00       	mov    esi,0x0
ffff80000081224a:	89 c7                	mov    edi,eax
ffff80000081224c:	49 89 df             	mov    r15,rbx
ffff80000081224f:	48 b8 d3 d0 ee ff ff 	movabs rax,0xffffffffffeed0d3
ffff800000812256:	ff ff ff 
ffff800000812259:	48 01 d8             	add    rax,rbx
ffff80000081225c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:852
    // read_disk(DISK_MAJOR_MAJOR, 0, 1, buf);/*rint r= equest(DISK_MAJOR_MAJOR,DISKREQ_READ,0x0,1,(unsigned char *)buf);
    // chk_result(r);
    DPT = *(struct Disk_Partition_Table *)buf;
ffff80000081225e:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000812265:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
ffff80000081226c:	48 89 d6             	mov    rsi,rdx
ffff80000081226f:	ba 40 00 00 00       	mov    edx,0x40
ffff800000812274:	48 89 c7             	mov    rdi,rax
ffff800000812277:	48 89 d1             	mov    rcx,rdx
ffff80000081227a:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:853
	printf("DPTE[0] start_LBA:%x\ttype:%x\n",DPT.DPTE[0].start_LBA,DPT.DPTE[0].type);
ffff80000081227d:	0f b6 85 a2 fd ff ff 	movzx  eax,BYTE PTR [rbp-0x25e]
ffff800000812284:	0f b6 d0             	movzx  edx,al
ffff800000812287:	8b 85 a6 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25a]
ffff80000081228d:	89 c6                	mov    esi,eax
ffff80000081228f:	48 b8 d0 db ff ff ff 	movabs rax,0xffffffffffffdbd0
ffff800000812296:	ff ff ff 
ffff800000812299:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081229d:	48 89 c7             	mov    rdi,rax
ffff8000008122a0:	49 89 df             	mov    r15,rbx
ffff8000008122a3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008122a8:	48 b9 71 0a ee ff ff 	movabs rcx,0xffffffffffee0a71
ffff8000008122af:	ff ff ff 
ffff8000008122b2:	48 01 d9             	add    rcx,rbx
ffff8000008122b5:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:855

	memset(buf,0,512);
ffff8000008122b7:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff8000008122be:	ba 00 02 00 00       	mov    edx,0x200
ffff8000008122c3:	be 00 00 00 00       	mov    esi,0x0
ffff8000008122c8:	48 89 c7             	mov    rdi,rax
ffff8000008122cb:	49 89 df             	mov    r15,rbx
ffff8000008122ce:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff8000008122d5:	ff ff ff 
ffff8000008122d8:	48 01 d8             	add    rax,rbx
ffff8000008122db:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:856
	blkdev_read(root_sb->dev,DPT.DPTE[0].start_LBA*512,512,buf);
ffff8000008122dd:	8b 85 a6 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25a]
ffff8000008122e3:	c1 e0 09             	shl    eax,0x9
ffff8000008122e6:	89 c6                	mov    esi,eax
ffff8000008122e8:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff8000008122ef:	ff ff ff 
ffff8000008122f2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008122f6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008122f9:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff8000008122fd:	0f b7 c0             	movzx  eax,ax
ffff800000812300:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000812307:	48 89 d1             	mov    rcx,rdx
ffff80000081230a:	ba 00 02 00 00       	mov    edx,0x200
ffff80000081230f:	89 c7                	mov    edi,eax
ffff800000812311:	49 89 df             	mov    r15,rbx
ffff800000812314:	48 b8 d3 d0 ee ff ff 	movabs rax,0xffffffffffeed0d3
ffff80000081231b:	ff ff ff 
ffff80000081231e:	48 01 d8             	add    rax,rbx
ffff800000812321:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:859

    //挂载新文件系统到/mnt
	struct super_block *fat32_sb= mount_fs("FAT32",&DPT.DPTE[0],buf);	//not dev node
ffff800000812323:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff80000081232a:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
ffff800000812331:	48 8d 8a be 01 00 00 	lea    rcx,[rdx+0x1be]
ffff800000812338:	48 89 c2             	mov    rdx,rax
ffff80000081233b:	48 89 ce             	mov    rsi,rcx
ffff80000081233e:	48 b8 ca db ff ff ff 	movabs rax,0xffffffffffffdbca
ffff800000812345:	ff ff ff 
ffff800000812348:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081234c:	48 89 c7             	mov    rdi,rax
ffff80000081234f:	49 89 df             	mov    r15,rbx
ffff800000812352:	48 b8 d6 a6 ee ff ff 	movabs rax,0xffffffffffeea6d6
ffff800000812359:	ff ff ff 
ffff80000081235c:	48 01 d8             	add    rax,rbx
ffff80000081235f:	ff d0                	call   rax
ffff800000812361:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:860
	mount_fs_on(dmnt,fat32_sb);//挂载到/mnt上
ffff800000812365:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff80000081236c:	ff ff ff 
ffff80000081236f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000812373:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812376:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081237a:	48 89 d6             	mov    rsi,rdx
ffff80000081237d:	48 89 c7             	mov    rdi,rax
ffff800000812380:	49 89 df             	mov    r15,rbx
ffff800000812383:	48 b8 83 a7 ee ff ff 	movabs rax,0xffffffffffeea783
ffff80000081238a:	ff ff ff 
ffff80000081238d:	48 01 d8             	add    rax,rbx
ffff800000812390:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:861
}
ffff800000812392:	90                   	nop
ffff800000812393:	48 81 c4 10 04 00 00 	add    rsp,0x410
ffff80000081239a:	5b                   	pop    rbx
ffff80000081239b:	41 5f                	pop    r15
ffff80000081239d:	5d                   	pop    rbp
ffff80000081239e:	c3                   	ret    

ffff80000081239f <close_tty>:
close_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:12
int stdd=0;
struct file_operations tty_fops={
        .open=init_tty, .close=close_tty,.write=write_tty,.read=read_tty,.ioctl=ioctl_tty
};

long close_tty(struct index_node * inode,struct file * filp){
ffff80000081239f:	f3 0f 1e fa          	endbr64 
ffff8000008123a3:	55                   	push   rbp
ffff8000008123a4:	48 89 e5             	mov    rbp,rsp
ffff8000008123a7:	41 57                	push   r15
ffff8000008123a9:	53                   	push   rbx
ffff8000008123aa:	48 83 ec 30          	sub    rsp,0x30
ffff8000008123ae:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008123ae <close_tty+0xf>
ffff8000008123b5:	49 bb a2 eb 10 00 00 	movabs r11,0x10eba2
ffff8000008123bc:	00 00 00 
ffff8000008123bf:	4c 01 db             	add    rbx,r11
ffff8000008123c2:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff8000008123c6:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:13
    stdbuf_t * bi=&((tty_t*)filp->private_data)->stdin_buf;
ffff8000008123ca:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008123ce:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008123d2:	48 83 c0 18          	add    rax,0x18
ffff8000008123d6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:14
    stdbuf_t * bo=&((tty_t*)filp->private_data)->stdout_buf;
ffff8000008123da:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008123de:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008123e2:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:15
    stdbuf_t * be=&((tty_t*)filp->private_data)->stderr_buf;
ffff8000008123e6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008123ea:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008123ee:	48 83 c0 30          	add    rax,0x30
ffff8000008123f2:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:16
    kmfree((addr_t) bi);
ffff8000008123f6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008123fa:	48 89 c7             	mov    rdi,rax
ffff8000008123fd:	49 89 df             	mov    r15,rbx
ffff800000812400:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff800000812407:	ff ff ff 
ffff80000081240a:	48 01 d8             	add    rax,rbx
ffff80000081240d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:17
    kmfree((addr_t) bo);
ffff80000081240f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812413:	48 89 c7             	mov    rdi,rax
ffff800000812416:	49 89 df             	mov    r15,rbx
ffff800000812419:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff800000812420:	ff ff ff 
ffff800000812423:	48 01 d8             	add    rax,rbx
ffff800000812426:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:18
    kmfree((addr_t) be);
ffff800000812428:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081242c:	48 89 c7             	mov    rdi,rax
ffff80000081242f:	49 89 df             	mov    r15,rbx
ffff800000812432:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff800000812439:	ff ff ff 
ffff80000081243c:	48 01 d8             	add    rax,rbx
ffff80000081243f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:19
    kmfree((addr_t) filp->private_data);
ffff800000812441:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812445:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812449:	48 89 c7             	mov    rdi,rax
ffff80000081244c:	49 89 df             	mov    r15,rbx
ffff80000081244f:	48 b8 63 16 ee ff ff 	movabs rax,0xffffffffffee1663
ffff800000812456:	ff ff ff 
ffff800000812459:	48 01 d8             	add    rax,rbx
ffff80000081245c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:20
    return 0;
ffff80000081245e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:21
}
ffff800000812463:	48 83 c4 30          	add    rsp,0x30
ffff800000812467:	5b                   	pop    rbx
ffff800000812468:	41 5f                	pop    r15
ffff80000081246a:	5d                   	pop    rbp
ffff80000081246b:	c3                   	ret    

ffff80000081246c <init_tty>:
init_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:24
//打开文件
long init_tty(struct index_node * inode,struct file * filp)
{
ffff80000081246c:	f3 0f 1e fa          	endbr64 
ffff800000812470:	55                   	push   rbp
ffff800000812471:	48 89 e5             	mov    rbp,rsp
ffff800000812474:	41 57                	push   r15
ffff800000812476:	53                   	push   rbx
ffff800000812477:	48 83 ec 20          	sub    rsp,0x20
ffff80000081247b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000081247b <init_tty+0xf>
ffff800000812482:	49 bb d5 ea 10 00 00 	movabs r11,0x10ead5
ffff800000812489:	00 00 00 
ffff80000081248c:	4c 01 db             	add    rbx,r11
ffff80000081248f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000812493:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:25
    tty_t *ntty=(tty_t*) kmalloc();
ffff800000812497:	49 89 df             	mov    r15,rbx
ffff80000081249a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081249f:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff8000008124a6:	ff ff ff 
ffff8000008124a9:	48 01 da             	add    rdx,rbx
ffff8000008124ac:	ff d2                	call   rdx
ffff8000008124ae:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:27
    //创建三个缓冲区
    ntty->stdin_buf.data= (char*) kmalloc();
ffff8000008124b2:	49 89 df             	mov    r15,rbx
ffff8000008124b5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008124ba:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff8000008124c1:	ff ff ff 
ffff8000008124c4:	48 01 da             	add    rdx,rbx
ffff8000008124c7:	ff d2                	call   rdx
ffff8000008124c9:	48 89 c2             	mov    rdx,rax
ffff8000008124cc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008124d0:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:28
    ntty->stdout_buf.data=(char*) kmalloc();
ffff8000008124d4:	49 89 df             	mov    r15,rbx
ffff8000008124d7:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008124dc:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff8000008124e3:	ff ff ff 
ffff8000008124e6:	48 01 da             	add    rdx,rbx
ffff8000008124e9:	ff d2                	call   rdx
ffff8000008124eb:	48 89 c2             	mov    rdx,rax
ffff8000008124ee:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008124f2:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:29
    ntty->stderr_buf.data=(char*) kmalloc();
ffff8000008124f5:	49 89 df             	mov    r15,rbx
ffff8000008124f8:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008124fd:	48 ba f4 12 ee ff ff 	movabs rdx,0xffffffffffee12f4
ffff800000812504:	ff ff ff 
ffff800000812507:	48 01 da             	add    rdx,rbx
ffff80000081250a:	ff d2                	call   rdx
ffff80000081250c:	48 89 c2             	mov    rdx,rax
ffff80000081250f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812513:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:30
    ntty->stdin_buf. wptr= 0;
ffff800000812517:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081251b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:31
    ntty->stdout_buf.wptr= 0;
ffff800000812522:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812526:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:32
    ntty->stderr_buf.wptr= 0;
ffff80000081252d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812531:	c7 40 38 00 00 00 00 	mov    DWORD PTR [rax+0x38],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:33
    ntty->stdin_buf. rptr= 0;
ffff800000812538:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081253c:	c7 40 24 00 00 00 00 	mov    DWORD PTR [rax+0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:34
    ntty->stdout_buf.rptr= 0;
ffff800000812543:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812547:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:35
    ntty->stderr_buf.rptr= 0;
ffff80000081254e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812552:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [rax+0x3c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:36
    ntty->stdin_buf.size= PAGE_4K_SIZE;
ffff800000812559:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081255d:	c7 40 28 00 10 00 00 	mov    DWORD PTR [rax+0x28],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:37
    ntty->stdout_buf.size= PAGE_4K_SIZE;
ffff800000812564:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812568:	c7 40 10 00 10 00 00 	mov    DWORD PTR [rax+0x10],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:38
    ntty->stderr_buf.size= PAGE_4K_SIZE;
ffff80000081256f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812573:	c7 40 40 00 10 00 00 	mov    DWORD PTR [rax+0x40],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:40
    //设置inode文件操作方式为tty方式
    inode->f_ops=&tty_fops;
ffff80000081257a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081257e:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000812585:	ff ff ff 
ffff800000812588:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000081258c:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:41
    filp->f_ops=&tty_fops;
ffff800000812590:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812594:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000081259b:	ff ff ff 
ffff80000081259e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008125a2:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:42
    filp->private_data=ntty;
ffff8000008125a6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008125aa:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008125ae:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:43
    return 0;
ffff8000008125b2:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:44
}
ffff8000008125b7:	48 83 c4 20          	add    rsp,0x20
ffff8000008125bb:	5b                   	pop    rbx
ffff8000008125bc:	41 5f                	pop    r15
ffff8000008125be:	5d                   	pop    rbp
ffff8000008125bf:	c3                   	ret    

ffff8000008125c0 <read_tty>:
read_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:47

long read_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff8000008125c0:	f3 0f 1e fa          	endbr64 
ffff8000008125c4:	55                   	push   rbp
ffff8000008125c5:	48 89 e5             	mov    rbp,rsp
ffff8000008125c8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008125c8 <read_tty+0x8>
ffff8000008125cf:	49 bb 88 e9 10 00 00 	movabs r11,0x10e988
ffff8000008125d6:	00 00 00 
ffff8000008125d9:	4c 01 d8             	add    rax,r11
ffff8000008125dc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff8000008125e0:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff8000008125e4:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff8000008125e8:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:48
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdin_buf;
ffff8000008125ec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008125f0:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008125f4:	48 83 c0 18          	add    rax,0x18
ffff8000008125f8:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:49
    int i=0;
ffff8000008125fc:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
ffff800000812603:	eb 6e                	jmp    ffff800000812673 <read_tty+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:51
        if(b->rptr==b->size)
ffff800000812605:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812609:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff80000081260c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812610:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000812613:	39 c2                	cmp    edx,eax
ffff800000812615:	75 0b                	jne    ffff800000812622 <read_tty+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:52
            b->rptr=0;
ffff800000812617:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081261b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53
        if(b->rptr==b->wptr)continue;
ffff800000812622:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812626:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff800000812629:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081262d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000812630:	39 c2                	cmp    edx,eax
ffff800000812632:	75 02                	jne    ffff800000812636 <read_tty+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53 (discriminator 1)
ffff800000812634:	eb 3d                	jmp    ffff800000812673 <read_tty+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:54
        buf[i++]=b->data[b->rptr];
ffff800000812636:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081263a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000081263d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812641:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000812644:	48 98                	cdqe   
ffff800000812646:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000081264a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081264d:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812650:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000812653:	48 63 d0             	movsxd rdx,eax
ffff800000812656:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081265a:	48 01 c2             	add    rdx,rax
ffff80000081265d:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
ffff800000812660:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:55
        b->rptr++;
ffff800000812662:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812666:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000812669:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081266c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812670:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
ffff800000812673:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000812676:	48 98                	cdqe   
ffff800000812678:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000081267c:	77 87                	ja     ffff800000812605 <read_tty+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:57
    }
}
ffff80000081267e:	90                   	nop
ffff80000081267f:	5d                   	pop    rbp
ffff800000812680:	c3                   	ret    

ffff800000812681 <write_tty>:
write_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:59
long write_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff800000812681:	f3 0f 1e fa          	endbr64 
ffff800000812685:	55                   	push   rbp
ffff800000812686:	48 89 e5             	mov    rbp,rsp
ffff800000812689:	41 57                	push   r15
ffff80000081268b:	48 83 ec 48          	sub    rsp,0x48
ffff80000081268f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081268f <write_tty+0xe>
ffff800000812696:	49 bb c1 e8 10 00 00 	movabs r11,0x10e8c1
ffff80000081269d:	00 00 00 
ffff8000008126a0:	4c 01 d8             	add    rax,r11
ffff8000008126a3:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff8000008126a7:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff8000008126ab:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff8000008126af:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:60
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdout_buf;
ffff8000008126b3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008126b7:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008126bb:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:61
    int i=0;
ffff8000008126bf:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:62
    int saved_wptr=b->wptr;
ffff8000008126c6:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008126ca:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008126cd:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
ffff8000008126d0:	eb 5b                	jmp    ffff80000081272d <write_tty+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:64
        if(b->wptr==b->size)
ffff8000008126d2:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008126d6:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff8000008126d9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008126dd:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff8000008126e0:	39 d1                	cmp    ecx,edx
ffff8000008126e2:	75 0b                	jne    ffff8000008126ef <write_tty+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:65
            b->wptr=0;
ffff8000008126e4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008126e8:	c7 42 08 00 00 00 00 	mov    DWORD PTR [rdx+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:66
        b->data[b->wptr]=buf[i++];
ffff8000008126ef:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008126f2:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff8000008126f5:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffff8000008126f8:	48 63 ca             	movsxd rcx,edx
ffff8000008126fb:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008126ff:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff800000812703:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812707:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000081270a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081270e:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000812711:	48 63 d2             	movsxd rdx,edx
ffff800000812714:	48 01 d1             	add    rcx,rdx
ffff800000812717:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff80000081271a:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:67
        b->wptr++;
ffff80000081271c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812720:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000812723:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff800000812726:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081272a:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
ffff80000081272d:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000812730:	48 63 d2             	movsxd rdx,edx
ffff800000812733:	48 39 55 b8          	cmp    QWORD PTR [rbp-0x48],rdx
ffff800000812737:	77 99                	ja     ffff8000008126d2 <write_tty+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:70
    }
    //刷新到framebuffer
    write_framebuffer(filp,b->data+saved_wptr,count,0);
ffff800000812739:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081273d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000812740:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000812743:	48 63 d2             	movsxd rdx,edx
ffff800000812746:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000081274a:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000081274e:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
ffff800000812752:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000812757:	49 89 c7             	mov    r15,rax
ffff80000081275a:	49 b8 59 a1 ee ff ff 	movabs r8,0xffffffffffeea159
ffff800000812761:	ff ff ff 
ffff800000812764:	49 01 c0             	add    r8,rax
ffff800000812767:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:71
}
ffff80000081276a:	90                   	nop
ffff80000081276b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000081276f:	c9                   	leave  
ffff800000812770:	c3                   	ret    

ffff800000812771 <ioctl_tty>:
ioctl_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:81
 * TTY_CONNECT:尝试连接到dev/console,这样会成为controlling terminal,里面的数据才能输出到屏幕上，
 * 因为除了特殊指定的进程都会有一个自己的天tty。
 * 成功返回0。
 * */
long ioctl_tty(struct index_node * inode, struct file * filp, unsigned long cmd, unsigned long arg)
{
ffff800000812771:	f3 0f 1e fa          	endbr64 
ffff800000812775:	55                   	push   rbp
ffff800000812776:	48 89 e5             	mov    rbp,rsp
ffff800000812779:	41 57                	push   r15
ffff80000081277b:	48 83 ec 58          	sub    rsp,0x58
ffff80000081277f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081277f <ioctl_tty+0xe>
ffff800000812786:	49 bb d1 e7 10 00 00 	movabs r11,0x10e7d1
ffff80000081278d:	00 00 00 
ffff800000812790:	4c 01 d8             	add    rax,r11
ffff800000812793:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff800000812797:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff80000081279b:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
ffff80000081279f:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:82
    stdbuf_t * b=&((tty_t*)filp->private_data)->stderr_buf;
ffff8000008127a3:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff8000008127a7:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008127ab:	48 83 c2 30          	add    rdx,0x30
ffff8000008127af:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:83
    stdbuf_t * ib=&((tty_t*)filp->private_data)->stdin_buf;
ffff8000008127b3:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff8000008127b7:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008127bb:	48 83 c2 18          	add    rdx,0x18
ffff8000008127bf:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:84
    int i=0;
ffff8000008127c3:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:85
    char* buf=*((char**)arg);
ffff8000008127ca:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff8000008127ce:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008127d1:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:86
    unsigned long count=*((unsigned long*)(arg+8));
ffff8000008127d5:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff8000008127d9:	48 83 c2 08          	add    rdx,0x8
ffff8000008127dd:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008127e0:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:87
    int saved_wptr=b->wptr;
ffff8000008127e4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008127e8:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008127eb:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:88
    int fd=-1;
ffff8000008127ee:	c7 45 c0 ff ff ff ff 	mov    DWORD PTR [rbp-0x40],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:89
    switch (cmd)
ffff8000008127f5:	48 83 7d a8 03       	cmp    QWORD PTR [rbp-0x58],0x3
ffff8000008127fa:	0f 84 b8 01 00 00    	je     ffff8000008129b8 <ioctl_tty+0x247>
ffff800000812800:	48 83 7d a8 03       	cmp    QWORD PTR [rbp-0x58],0x3
ffff800000812805:	0f 87 b8 01 00 00    	ja     ffff8000008129c3 <ioctl_tty+0x252>
ffff80000081280b:	48 83 7d a8 02       	cmp    QWORD PTR [rbp-0x58],0x2
ffff800000812810:	0f 84 0f 01 00 00    	je     ffff800000812925 <ioctl_tty+0x1b4>
ffff800000812816:	48 83 7d a8 02       	cmp    QWORD PTR [rbp-0x58],0x2
ffff80000081281b:	0f 87 a2 01 00 00    	ja     ffff8000008129c3 <ioctl_tty+0x252>
ffff800000812821:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff800000812826:	74 6b                	je     ffff800000812893 <ioctl_tty+0x122>
ffff800000812828:	48 83 7d a8 01       	cmp    QWORD PTR [rbp-0x58],0x1
ffff80000081282d:	0f 84 a2 00 00 00    	je     ffff8000008128d5 <ioctl_tty+0x164>
ffff800000812833:	e9 8b 01 00 00       	jmp    ffff8000008129c3 <ioctl_tty+0x252>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:93
    {
        case TTY_WSTDERR:
            while (i<count){
                if(b->wptr==b->size)
ffff800000812838:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081283c:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff80000081283f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812843:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff800000812846:	39 d1                	cmp    ecx,edx
ffff800000812848:	75 0b                	jne    ffff800000812855 <ioctl_tty+0xe4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:94
                    b->wptr=0;
ffff80000081284a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081284e:	c7 42 08 00 00 00 00 	mov    DWORD PTR [rdx+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:95
                b->data[b->wptr]=buf[i++];
ffff800000812855:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000812858:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff80000081285b:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffff80000081285e:	48 63 ca             	movsxd rcx,edx
ffff800000812861:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000812865:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff800000812869:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081286d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000812870:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812874:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000812877:	48 63 d2             	movsxd rdx,edx
ffff80000081287a:	48 01 d1             	add    rcx,rdx
ffff80000081287d:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff800000812880:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:96
                b->wptr++;
ffff800000812882:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812886:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000812889:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff80000081288c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812890:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:92
            while (i<count){
ffff800000812893:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000812896:	48 63 d2             	movsxd rdx,edx
ffff800000812899:	48 39 55 c8          	cmp    QWORD PTR [rbp-0x38],rdx
ffff80000081289d:	77 99                	ja     ffff800000812838 <ioctl_tty+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:99
            }
            //刷新到framebuffer
            write_framebuffer(filp,b->data+saved_wptr,count,0);
ffff80000081289f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008128a3:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008128a6:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff8000008128a9:	48 63 d2             	movsxd rdx,edx
ffff8000008128ac:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff8000008128b0:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008128b4:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
ffff8000008128b8:	b9 00 00 00 00       	mov    ecx,0x0
ffff8000008128bd:	49 89 c7             	mov    r15,rax
ffff8000008128c0:	49 b8 59 a1 ee ff ff 	movabs r8,0xffffffffffeea159
ffff8000008128c7:	ff ff ff 
ffff8000008128ca:	49 01 c0             	add    r8,rax
ffff8000008128cd:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:100
        break;
ffff8000008128d0:	e9 f7 00 00 00       	jmp    ffff8000008129cc <ioctl_tty+0x25b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:102
        case TTY_CONNECT:
            fd=sys_open("dev/console",O_WRONLY|O_CREAT|O_EXCL);
ffff8000008128d5:	be c1 00 00 00       	mov    esi,0xc1
ffff8000008128da:	48 ba ee db ff ff ff 	movabs rdx,0xffffffffffffdbee
ffff8000008128e1:	ff ff ff 
ffff8000008128e4:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff8000008128e8:	48 89 d7             	mov    rdi,rdx
ffff8000008128eb:	49 89 c7             	mov    r15,rax
ffff8000008128ee:	48 ba f0 ad ee ff ff 	movabs rdx,0xffffffffffeeadf0
ffff8000008128f5:	ff ff ff 
ffff8000008128f8:	48 01 c2             	add    rdx,rax
ffff8000008128fb:	ff d2                	call   rdx
ffff8000008128fd:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103
            if(fd==-1)return -1;
ffff800000812900:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
ffff800000812904:	75 0c                	jne    ffff800000812912 <ioctl_tty+0x1a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103 (discriminator 1)
ffff800000812906:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000081290d:	e9 bf 00 00 00       	jmp    ffff8000008129d1 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:104
            ((tty_t*)filp->private_data)->console_fd=fd;
ffff800000812912:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000812916:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081291a:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff80000081291d:	89 50 48             	mov    DWORD PTR [rax+0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:105
            break;
ffff800000812920:	e9 a7 00 00 00       	jmp    ffff8000008129cc <ioctl_tty+0x25b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:107
        case TTY_DISCONNECT:
            fd=((tty_t*)filp->private_data)->console_fd;
ffff800000812925:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000812929:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000081292d:	8b 52 48             	mov    edx,DWORD PTR [rdx+0x48]
ffff800000812930:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108
            if(fd==-1)return -1;
ffff800000812933:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
ffff800000812937:	75 0c                	jne    ffff800000812945 <ioctl_tty+0x1d4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108 (discriminator 1)
ffff800000812939:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000812940:	e9 8c 00 00 00       	jmp    ffff8000008129d1 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:109
            sys_close(fd);
ffff800000812945:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff800000812948:	89 d7                	mov    edi,edx
ffff80000081294a:	49 89 c7             	mov    r15,rax
ffff80000081294d:	48 ba 1a b4 ee ff ff 	movabs rdx,0xffffffffffeeb41a
ffff800000812954:	ff ff ff 
ffff800000812957:	48 01 c2             	add    rdx,rax
ffff80000081295a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
        case TTY_WSTDIN:
            while (i<count){
ffff80000081295c:	eb 5a                	jmp    ffff8000008129b8 <ioctl_tty+0x247>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:112
                if(ib->wptr==ib->size)
ffff80000081295e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812962:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000812965:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812969:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000081296c:	39 c2                	cmp    edx,eax
ffff80000081296e:	75 0b                	jne    ffff80000081297b <ioctl_tty+0x20a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:113
                    ib->wptr=0;
ffff800000812970:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812974:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:114
                ib->data[ib->wptr]=buf[i++];
ffff80000081297b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081297e:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812981:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff800000812984:	48 63 d0             	movsxd rdx,eax
ffff800000812987:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081298b:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000081298f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812993:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000812996:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081299a:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000081299d:	48 98                	cdqe   
ffff80000081299f:	48 01 c2             	add    rdx,rax
ffff8000008129a2:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
ffff8000008129a5:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:115
                ib->wptr++;
ffff8000008129a7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008129ab:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008129ae:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008129b1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008129b5:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
            while (i<count){
ffff8000008129b8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008129bb:	48 98                	cdqe   
ffff8000008129bd:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffff8000008129c1:	77 9b                	ja     ffff80000081295e <ioctl_tty+0x1ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:117
            }
    default:return -1;
ffff8000008129c3:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff8000008129ca:	eb 05                	jmp    ffff8000008129d1 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:119
    }
    return 0;
ffff8000008129cc:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:120
}
ffff8000008129d1:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008129d5:	c9                   	leave  
ffff8000008129d6:	c3                   	ret    

ffff8000008129d7 <init_com>:
init_com():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:12
#include "str.h"
#include "memory.h"
#include "mem.h"

char combuf[1024];
void init_com(int base_port){
ffff8000008129d7:	f3 0f 1e fa          	endbr64 
ffff8000008129db:	55                   	push   rbp
ffff8000008129dc:	48 89 e5             	mov    rbp,rsp
ffff8000008129df:	41 57                	push   r15
ffff8000008129e1:	53                   	push   rbx
ffff8000008129e2:	48 83 ec 10          	sub    rsp,0x10
ffff8000008129e6:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008129e6 <init_com+0xf>
ffff8000008129ed:	49 bb 6a e5 10 00 00 	movabs r11,0x10e56a
ffff8000008129f4:	00 00 00 
ffff8000008129f7:	4c 01 db             	add    rbx,r11
ffff8000008129fa:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:14
    /* disable all interrupts */
    outb(base_port + COM_REG_IER, 0x00);
ffff8000008129fd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812a00:	83 c0 01             	add    eax,0x1
ffff800000812a03:	0f b7 c0             	movzx  eax,ax
ffff800000812a06:	be 00 00 00 00       	mov    esi,0x0
ffff800000812a0b:	89 c7                	mov    edi,eax
ffff800000812a0d:	49 89 df             	mov    r15,rbx
ffff800000812a10:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff800000812a17:	ff ff ff 
ffff800000812a1a:	48 01 d8             	add    rax,rbx
ffff800000812a1d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:17
    
    /* enable DLAB to set bound rate divisor */
    outb(base_port + COM_REG_LCR, 0x80);
ffff800000812a1f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812a22:	83 c0 03             	add    eax,0x3
ffff800000812a25:	0f b7 c0             	movzx  eax,ax
ffff800000812a28:	be 80 00 00 00       	mov    esi,0x80
ffff800000812a2d:	89 c7                	mov    edi,eax
ffff800000812a2f:	49 89 df             	mov    r15,rbx
ffff800000812a32:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff800000812a39:	ff ff ff 
ffff800000812a3c:	48 01 d8             	add    rax,rbx
ffff800000812a3f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:20
    
    /* set divisor to 38400 baud */
    outb(base_port + COM_REG_DLL, 0x03);
ffff800000812a41:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812a44:	0f b7 c0             	movzx  eax,ax
ffff800000812a47:	be 03 00 00 00       	mov    esi,0x3
ffff800000812a4c:	89 c7                	mov    edi,eax
ffff800000812a4e:	49 89 df             	mov    r15,rbx
ffff800000812a51:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff800000812a58:	ff ff ff 
ffff800000812a5b:	48 01 d8             	add    rax,rbx
ffff800000812a5e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:21
    outb(base_port + COM_REG_DLM, 0x00);
ffff800000812a60:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812a63:	83 c0 01             	add    eax,0x1
ffff800000812a66:	0f b7 c0             	movzx  eax,ax
ffff800000812a69:	be 00 00 00 00       	mov    esi,0x0
ffff800000812a6e:	89 c7                	mov    edi,eax
ffff800000812a70:	49 89 df             	mov    r15,rbx
ffff800000812a73:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff800000812a7a:	ff ff ff 
ffff800000812a7d:	48 01 d8             	add    rax,rbx
ffff800000812a80:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:24
    
    /* 8 data bits, parity off, 1 stop bit, DLAB latch off */
    outb(base_port + COM_REG_LCR, 0x03);
ffff800000812a82:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812a85:	83 c0 03             	add    eax,0x3
ffff800000812a88:	0f b7 c0             	movzx  eax,ax
ffff800000812a8b:	be 03 00 00 00       	mov    esi,0x3
ffff800000812a90:	89 c7                	mov    edi,eax
ffff800000812a92:	49 89 df             	mov    r15,rbx
ffff800000812a95:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff800000812a9c:	ff ff ff 
ffff800000812a9f:	48 01 d8             	add    rax,rbx
ffff800000812aa2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:27
    
    /* enable FIFO */
    outb(base_port + COM_REG_FCR, 0x87);//0xc7
ffff800000812aa4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812aa7:	83 c0 02             	add    eax,0x2
ffff800000812aaa:	0f b7 c0             	movzx  eax,ax
ffff800000812aad:	be 87 00 00 00       	mov    esi,0x87
ffff800000812ab2:	89 c7                	mov    edi,eax
ffff800000812ab4:	49 89 df             	mov    r15,rbx
ffff800000812ab7:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff800000812abe:	ff ff ff 
ffff800000812ac1:	48 01 d8             	add    rax,rbx
ffff800000812ac4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:30

    /* enable IRQs, set RTS/DSR */
    outb(base_port + COM_REG_MCR, 0x0B);
ffff800000812ac6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812ac9:	83 c0 04             	add    eax,0x4
ffff800000812acc:	0f b7 c0             	movzx  eax,ax
ffff800000812acf:	be 0b 00 00 00       	mov    esi,0xb
ffff800000812ad4:	89 c7                	mov    edi,eax
ffff800000812ad6:	49 89 df             	mov    r15,rbx
ffff800000812ad9:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff800000812ae0:	ff ff ff 
ffff800000812ae3:	48 01 d8             	add    rax,rbx
ffff800000812ae6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:44
//    if (inb(base_port + COM_REG_RX) != 0xae) {
//        return;
//    }
    
    /* set in normal mode */
    outb(base_port + COM_REG_MCR, 0x0F);
ffff800000812ae8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812aeb:	83 c0 04             	add    eax,0x4
ffff800000812aee:	0f b7 c0             	movzx  eax,ax
ffff800000812af1:	be 0f 00 00 00       	mov    esi,0xf
ffff800000812af6:	89 c7                	mov    edi,eax
ffff800000812af8:	49 89 df             	mov    r15,rbx
ffff800000812afb:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff800000812b02:	ff ff ff 
ffff800000812b05:	48 01 d8             	add    rax,rbx
ffff800000812b08:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:45
}
ffff800000812b0a:	90                   	nop
ffff800000812b0b:	48 83 c4 10          	add    rsp,0x10
ffff800000812b0f:	5b                   	pop    rbx
ffff800000812b10:	41 5f                	pop    r15
ffff800000812b12:	5d                   	pop    rbp
ffff800000812b13:	c3                   	ret    

ffff800000812b14 <com_putchar>:
com_putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:47
void com_putchar(unsigned short ch,int com_base)
{
ffff800000812b14:	f3 0f 1e fa          	endbr64 
ffff800000812b18:	55                   	push   rbp
ffff800000812b19:	48 89 e5             	mov    rbp,rsp
ffff800000812b1c:	41 57                	push   r15
ffff800000812b1e:	53                   	push   rbx
ffff800000812b1f:	48 83 ec 20          	sub    rsp,0x20
ffff800000812b23:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812b23 <com_putchar+0xf>
ffff800000812b2a:	49 bb 2d e4 10 00 00 	movabs r11,0x10e42d
ffff800000812b31:	00 00 00 
ffff800000812b34:	4c 01 db             	add    rbx,r11
ffff800000812b37:	89 f8                	mov    eax,edi
ffff800000812b39:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff800000812b3c:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:51 (discriminator 1)
    unsigned char res;
    /* wait for the port to be ready */
    do {
        res = inb(com_base + COM_REG_LSR);
ffff800000812b40:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000812b43:	83 c0 05             	add    eax,0x5
ffff800000812b46:	0f b6 c0             	movzx  eax,al
ffff800000812b49:	89 c7                	mov    edi,eax
ffff800000812b4b:	49 89 df             	mov    r15,rbx
ffff800000812b4e:	48 b8 e9 71 ee ff ff 	movabs rax,0xffffffffffee71e9
ffff800000812b55:	ff ff ff 
ffff800000812b58:	48 01 d8             	add    rax,rbx
ffff800000812b5b:	ff d0                	call   rax
ffff800000812b5d:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:52 (discriminator 1)
        res &= 0x20;
ffff800000812b60:	80 65 ef 20          	and    BYTE PTR [rbp-0x11],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:53 (discriminator 1)
    } while (res == 0);
ffff800000812b64:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffff800000812b68:	74 d6                	je     ffff800000812b40 <com_putchar+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:54
    outb(com_base, ch);
ffff800000812b6a:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff800000812b6e:	0f b6 d0             	movzx  edx,al
ffff800000812b71:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000812b74:	0f b7 c0             	movzx  eax,ax
ffff800000812b77:	89 d6                	mov    esi,edx
ffff800000812b79:	89 c7                	mov    edi,eax
ffff800000812b7b:	49 89 df             	mov    r15,rbx
ffff800000812b7e:	48 b8 d0 71 ee ff ff 	movabs rax,0xffffffffffee71d0
ffff800000812b85:	ff ff ff 
ffff800000812b88:	48 01 d8             	add    rax,rbx
ffff800000812b8b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:55
}
ffff800000812b8d:	90                   	nop
ffff800000812b8e:	48 83 c4 20          	add    rsp,0x20
ffff800000812b92:	5b                   	pop    rbx
ffff800000812b93:	41 5f                	pop    r15
ffff800000812b95:	5d                   	pop    rbp
ffff800000812b96:	c3                   	ret    

ffff800000812b97 <com_puts>:
com_puts():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:57

void com_puts(char* s,int com_port){
ffff800000812b97:	f3 0f 1e fa          	endbr64 
ffff800000812b9b:	55                   	push   rbp
ffff800000812b9c:	48 89 e5             	mov    rbp,rsp
ffff800000812b9f:	41 57                	push   r15
ffff800000812ba1:	53                   	push   rbx
ffff800000812ba2:	48 83 ec 10          	sub    rsp,0x10
ffff800000812ba6:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812ba6 <com_puts+0xf>
ffff800000812bad:	49 bb aa e3 10 00 00 	movabs r11,0x10e3aa
ffff800000812bb4:	00 00 00 
ffff800000812bb7:	4c 01 db             	add    rbx,r11
ffff800000812bba:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000812bbe:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58
    for(;*s;s++){
ffff800000812bc1:	eb 2a                	jmp    ffff800000812bed <com_puts+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:59 (discriminator 2)
        com_putchar(*s,com_port);
ffff800000812bc3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812bc7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812bca:	66 98                	cbw    
ffff800000812bcc:	0f b7 c0             	movzx  eax,ax
ffff800000812bcf:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff800000812bd2:	89 d6                	mov    esi,edx
ffff800000812bd4:	89 c7                	mov    edi,eax
ffff800000812bd6:	49 89 df             	mov    r15,rbx
ffff800000812bd9:	48 b8 c4 1b ef ff ff 	movabs rax,0xffffffffffef1bc4
ffff800000812be0:	ff ff ff 
ffff800000812be3:	48 01 d8             	add    rax,rbx
ffff800000812be6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 2)
    for(;*s;s++){
ffff800000812be8:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 1)
ffff800000812bed:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812bf1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812bf4:	84 c0                	test   al,al
ffff800000812bf6:	75 cb                	jne    ffff800000812bc3 <com_puts+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:61
    }
}
ffff800000812bf8:	90                   	nop
ffff800000812bf9:	90                   	nop
ffff800000812bfa:	48 83 c4 10          	add    rsp,0x10
ffff800000812bfe:	5b                   	pop    rbx
ffff800000812bff:	41 5f                	pop    r15
ffff800000812c01:	5d                   	pop    rbp
ffff800000812c02:	c3                   	ret    

ffff800000812c03 <comprintf>:
comprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:63

void comprintf(char* fmt,...){
ffff800000812c03:	f3 0f 1e fa          	endbr64 
ffff800000812c07:	55                   	push   rbp
ffff800000812c08:	48 89 e5             	mov    rbp,rsp
ffff800000812c0b:	41 57                	push   r15
ffff800000812c0d:	53                   	push   rbx
ffff800000812c0e:	48 81 ec 10 01 00 00 	sub    rsp,0x110
ffff800000812c15:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812c15 <comprintf+0x12>
ffff800000812c1c:	49 bb 3b e3 10 00 00 	movabs r11,0x10e33b
ffff800000812c23:	00 00 00 
ffff800000812c26:	4c 01 db             	add    rbx,r11
ffff800000812c29:	48 89 bd e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdi
ffff800000812c30:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffff800000812c37:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffff800000812c3e:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffff800000812c45:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffff800000812c4c:	4c 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r9
ffff800000812c53:	84 c0                	test   al,al
ffff800000812c55:	74 23                	je     ffff800000812c7a <comprintf+0x77>
ffff800000812c57:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
ffff800000812c5e:	0f 29 4d 80          	movaps XMMWORD PTR [rbp-0x80],xmm1
ffff800000812c62:	0f 29 55 90          	movaps XMMWORD PTR [rbp-0x70],xmm2
ffff800000812c66:	0f 29 5d a0          	movaps XMMWORD PTR [rbp-0x60],xmm3
ffff800000812c6a:	0f 29 65 b0          	movaps XMMWORD PTR [rbp-0x50],xmm4
ffff800000812c6e:	0f 29 6d c0          	movaps XMMWORD PTR [rbp-0x40],xmm5
ffff800000812c72:	0f 29 75 d0          	movaps XMMWORD PTR [rbp-0x30],xmm6
ffff800000812c76:	0f 29 7d e0          	movaps XMMWORD PTR [rbp-0x20],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:64
    if(strlen(fmt)>=1024)
ffff800000812c7a:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000812c81:	48 89 c7             	mov    rdi,rax
ffff800000812c84:	49 89 df             	mov    r15,rbx
ffff800000812c87:	48 b8 24 25 ef ff ff 	movabs rax,0xffffffffffef2524
ffff800000812c8e:	ff ff ff 
ffff800000812c91:	48 01 d8             	add    rax,rbx
ffff800000812c94:	ff d0                	call   rax
ffff800000812c96:	3d ff 03 00 00       	cmp    eax,0x3ff
ffff800000812c9b:	0f 8f f5 03 00 00    	jg     ffff800000813096 <comprintf+0x493>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:67
        return;//一次性输出不了太长
    //这里不使用kmalloc
    char* tmp=combuf;
ffff800000812ca1:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff800000812ca8:	ff ff ff 
ffff800000812cab:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000812caf:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:68
    memset(tmp,0, sizeof(combuf));
ffff800000812cb6:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812cbd:	ba 00 04 00 00       	mov    edx,0x400
ffff800000812cc2:	be 00 00 00 00       	mov    esi,0x0
ffff800000812cc7:	48 89 c7             	mov    rdi,rax
ffff800000812cca:	49 89 df             	mov    r15,rbx
ffff800000812ccd:	48 b8 02 22 ef ff ff 	movabs rax,0xffffffffffef2202
ffff800000812cd4:	ff ff ff 
ffff800000812cd7:	48 01 d8             	add    rax,rbx
ffff800000812cda:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:70
    //count num of args
    char *pstr=fmt;
ffff800000812cdc:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000812ce3:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:71
    char *prev=fmt;
ffff800000812cea:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000812cf1:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:74

    va_list vargs;
    va_start(vargs,fmt);
ffff800000812cf8:	c7 85 f0 fe ff ff 08 	mov    DWORD PTR [rbp-0x110],0x8
ffff800000812cff:	00 00 00 
ffff800000812d02:	c7 85 f4 fe ff ff 30 	mov    DWORD PTR [rbp-0x10c],0x30
ffff800000812d09:	00 00 00 
ffff800000812d0c:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff800000812d10:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffff800000812d17:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffff800000812d1e:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:75
    pstr=fmt;
ffff800000812d25:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000812d2c:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
ffff800000812d33:	e9 29 03 00 00       	jmp    ffff800000813061 <comprintf+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff800000812d38:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812d3f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812d42:	3c 25                	cmp    al,0x25
ffff800000812d44:	0f 85 e4 02 00 00    	jne    ffff80000081302e <comprintf+0x42b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77 (discriminator 1)
ffff800000812d4a:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812d51:	48 83 c0 01          	add    rax,0x1
ffff800000812d55:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812d58:	84 c0                	test   al,al
ffff800000812d5a:	0f 84 ce 02 00 00    	je     ffff80000081302e <comprintf+0x42b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:78
            pstr++;
ffff800000812d60:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000812d67:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:79
            if(*pstr=='x'){
ffff800000812d68:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812d6f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812d72:	3c 78                	cmp    al,0x78
ffff800000812d74:	75 70                	jne    ffff800000812de6 <comprintf+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:80
                int v=va_arg(vargs,int);
ffff800000812d76:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000812d7c:	83 f8 2f             	cmp    eax,0x2f
ffff800000812d7f:	77 23                	ja     ffff800000812da4 <comprintf+0x1a1>
ffff800000812d81:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000812d88:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812d8e:	89 d2                	mov    edx,edx
ffff800000812d90:	48 01 d0             	add    rax,rdx
ffff800000812d93:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812d99:	83 c2 08             	add    edx,0x8
ffff800000812d9c:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000812da2:	eb 12                	jmp    ffff800000812db6 <comprintf+0x1b3>
ffff800000812da4:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000812dab:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000812daf:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000812db6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812db8:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:81
                sprint_hex(tmp,v);
ffff800000812dbe:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff800000812dc4:	48 63 d0             	movsxd rdx,eax
ffff800000812dc7:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812dce:	48 89 d6             	mov    rsi,rdx
ffff800000812dd1:	48 89 c7             	mov    rdi,rax
ffff800000812dd4:	49 89 df             	mov    r15,rbx
ffff800000812dd7:	48 b8 77 29 ef ff ff 	movabs rax,0xffffffffffef2977
ffff800000812dde:	ff ff ff 
ffff800000812de1:	48 01 d8             	add    rax,rbx
ffff800000812de4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000812de6:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812ded:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812df0:	3c 6c                	cmp    al,0x6c
ffff800000812df2:	75 75                	jne    ffff800000812e69 <comprintf+0x266>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:83
                unsigned long long v=va_arg(vargs,unsigned long long);
ffff800000812df4:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000812dfa:	83 f8 2f             	cmp    eax,0x2f
ffff800000812dfd:	77 23                	ja     ffff800000812e22 <comprintf+0x21f>
ffff800000812dff:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000812e06:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812e0c:	89 d2                	mov    edx,edx
ffff800000812e0e:	48 01 d0             	add    rax,rdx
ffff800000812e11:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812e17:	83 c2 08             	add    edx,0x8
ffff800000812e1a:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000812e20:	eb 12                	jmp    ffff800000812e34 <comprintf+0x231>
ffff800000812e22:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000812e29:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000812e2d:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000812e34:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812e37:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:84
                sprint_hex(tmp,v);
ffff800000812e3e:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
ffff800000812e45:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812e4c:	48 89 d6             	mov    rsi,rdx
ffff800000812e4f:	48 89 c7             	mov    rdi,rax
ffff800000812e52:	49 89 df             	mov    r15,rbx
ffff800000812e55:	48 b8 77 29 ef ff ff 	movabs rax,0xffffffffffef2977
ffff800000812e5c:	ff ff ff 
ffff800000812e5f:	48 01 d8             	add    rax,rbx
ffff800000812e62:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000812e64:	e9 f0 01 00 00       	jmp    ffff800000813059 <comprintf+0x456>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:85
            }else if(*pstr=='s'){
ffff800000812e69:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812e70:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812e73:	3c 73                	cmp    al,0x73
ffff800000812e75:	75 75                	jne    ffff800000812eec <comprintf+0x2e9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:86
                char* v=va_arg(vargs,char*);
ffff800000812e77:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000812e7d:	83 f8 2f             	cmp    eax,0x2f
ffff800000812e80:	77 23                	ja     ffff800000812ea5 <comprintf+0x2a2>
ffff800000812e82:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000812e89:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812e8f:	89 d2                	mov    edx,edx
ffff800000812e91:	48 01 d0             	add    rax,rdx
ffff800000812e94:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812e9a:	83 c2 08             	add    edx,0x8
ffff800000812e9d:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000812ea3:	eb 12                	jmp    ffff800000812eb7 <comprintf+0x2b4>
ffff800000812ea5:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000812eac:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000812eb0:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000812eb7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812eba:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:87
                sprintn(tmp,v);
ffff800000812ec1:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
ffff800000812ec8:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812ecf:	48 89 d6             	mov    rsi,rdx
ffff800000812ed2:	48 89 c7             	mov    rdi,rax
ffff800000812ed5:	49 89 df             	mov    r15,rbx
ffff800000812ed8:	48 b8 05 2a ef ff ff 	movabs rax,0xffffffffffef2a05
ffff800000812edf:	ff ff ff 
ffff800000812ee2:	48 01 d8             	add    rax,rbx
ffff800000812ee5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000812ee7:	e9 6d 01 00 00       	jmp    ffff800000813059 <comprintf+0x456>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:88
            }else if(*pstr=='d'){
ffff800000812eec:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812ef3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812ef6:	3c 64                	cmp    al,0x64
ffff800000812ef8:	75 76                	jne    ffff800000812f70 <comprintf+0x36d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:89
                char* v=va_arg(vargs,char*);
ffff800000812efa:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000812f00:	83 f8 2f             	cmp    eax,0x2f
ffff800000812f03:	77 23                	ja     ffff800000812f28 <comprintf+0x325>
ffff800000812f05:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000812f0c:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812f12:	89 d2                	mov    edx,edx
ffff800000812f14:	48 01 d0             	add    rax,rdx
ffff800000812f17:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812f1d:	83 c2 08             	add    edx,0x8
ffff800000812f20:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000812f26:	eb 12                	jmp    ffff800000812f3a <comprintf+0x337>
ffff800000812f28:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000812f2f:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000812f33:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000812f3a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812f3d:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:90
                sprint_decimal(tmp,v);
ffff800000812f44:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000812f4b:	89 c2                	mov    edx,eax
ffff800000812f4d:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812f54:	89 d6                	mov    esi,edx
ffff800000812f56:	48 89 c7             	mov    rdi,rax
ffff800000812f59:	49 89 df             	mov    r15,rbx
ffff800000812f5c:	48 b8 bc 28 ef ff ff 	movabs rax,0xffffffffffef28bc
ffff800000812f63:	ff ff ff 
ffff800000812f66:	48 01 d8             	add    rax,rbx
ffff800000812f69:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000812f6b:	e9 e9 00 00 00       	jmp    ffff800000813059 <comprintf+0x456>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:91
            }else if(*pstr=='c'){
ffff800000812f70:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812f77:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812f7a:	3c 63                	cmp    al,0x63
ffff800000812f7c:	75 02                	jne    ffff800000812f80 <comprintf+0x37d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:92
                char v=va_arg(vargs,char);
ffff800000812f7e:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:94
                sprintchar(tmp,v);
            }else if(*pstr=='p') {
ffff800000812f80:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812f87:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812f8a:	3c 70                	cmp    al,0x70
ffff800000812f8c:	75 73                	jne    ffff800000813001 <comprintf+0x3fe>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:95
                int v=va_arg(vargs,addr_t);
ffff800000812f8e:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000812f94:	83 f8 2f             	cmp    eax,0x2f
ffff800000812f97:	77 23                	ja     ffff800000812fbc <comprintf+0x3b9>
ffff800000812f99:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000812fa0:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812fa6:	89 d2                	mov    edx,edx
ffff800000812fa8:	48 01 d0             	add    rax,rdx
ffff800000812fab:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812fb1:	83 c2 08             	add    edx,0x8
ffff800000812fb4:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000812fba:	eb 12                	jmp    ffff800000812fce <comprintf+0x3cb>
ffff800000812fbc:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000812fc3:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000812fc7:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000812fce:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812fd1:	89 85 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:96
                sprint_hex(tmp,v);
ffff800000812fd7:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
ffff800000812fdd:	48 63 d0             	movsxd rdx,eax
ffff800000812fe0:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812fe7:	48 89 d6             	mov    rsi,rdx
ffff800000812fea:	48 89 c7             	mov    rdi,rax
ffff800000812fed:	49 89 df             	mov    r15,rbx
ffff800000812ff0:	48 b8 77 29 ef ff ff 	movabs rax,0xffffffffffef2977
ffff800000812ff7:	ff ff ff 
ffff800000812ffa:	48 01 d8             	add    rax,rbx
ffff800000812ffd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000812fff:	eb 58                	jmp    ffff800000813059 <comprintf+0x456>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:98
            }else{
                    sprintchar(tmp,*pstr);
ffff800000813001:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813008:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081300b:	0f be d0             	movsx  edx,al
ffff80000081300e:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000813015:	89 d6                	mov    esi,edx
ffff800000813017:	48 89 c7             	mov    rdi,rax
ffff80000081301a:	49 89 df             	mov    r15,rbx
ffff80000081301d:	48 b8 7d 28 ef ff ff 	movabs rax,0xffffffffffef287d
ffff800000813024:	ff ff ff 
ffff800000813027:	48 01 d8             	add    rax,rbx
ffff80000081302a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff80000081302c:	eb 2b                	jmp    ffff800000813059 <comprintf+0x456>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:101
                }
        }else{
            sprintchar(tmp,*pstr);
ffff80000081302e:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813035:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813038:	0f be d0             	movsx  edx,al
ffff80000081303b:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000813042:	89 d6                	mov    esi,edx
ffff800000813044:	48 89 c7             	mov    rdi,rax
ffff800000813047:	49 89 df             	mov    r15,rbx
ffff80000081304a:	48 b8 7d 28 ef ff ff 	movabs rax,0xffffffffffef287d
ffff800000813051:	ff ff ff 
ffff800000813054:	48 01 d8             	add    rax,rbx
ffff800000813057:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
ffff800000813059:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000813060:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76 (discriminator 1)
ffff800000813061:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813068:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081306b:	84 c0                	test   al,al
ffff80000081306d:	0f 85 c5 fc ff ff    	jne    ffff800000812d38 <comprintf+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:105
        }
    }
    va_end(vargs);
    com_puts(tmp,PORT_COM1);
ffff800000813073:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000081307a:	be f8 03 00 00       	mov    esi,0x3f8
ffff80000081307f:	48 89 c7             	mov    rdi,rax
ffff800000813082:	49 89 df             	mov    r15,rbx
ffff800000813085:	48 b8 47 1c ef ff ff 	movabs rax,0xffffffffffef1c47
ffff80000081308c:	ff ff ff 
ffff80000081308f:	48 01 d8             	add    rax,rbx
ffff800000813092:	ff d0                	call   rax
ffff800000813094:	eb 01                	jmp    ffff800000813097 <comprintf+0x494>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:65
        return;//一次性输出不了太长
ffff800000813096:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:106
ffff800000813097:	48 81 c4 10 01 00 00 	add    rsp,0x110
ffff80000081309e:	5b                   	pop    rbx
ffff80000081309f:	41 5f                	pop    r15
ffff8000008130a1:	5d                   	pop    rbp
ffff8000008130a2:	c3                   	ret    

ffff8000008130a3 <memcpy>:
memcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:5
#include "mem.h"
#include "typename.h"
static u32 mem_end;
static u32 usr_mem_base;
void memcpy(u8* dest, u8 *src,u32 size){
ffff8000008130a3:	f3 0f 1e fa          	endbr64 
ffff8000008130a7:	55                   	push   rbp
ffff8000008130a8:	48 89 e5             	mov    rbp,rsp
ffff8000008130ab:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff8000008130af:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff8000008130b3:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:6
    *dest=0xff;//如果页内存还没分配，这样就可以先激发缺页异常分配了，之后写数据就会完整不会少开头第一个字节。
ffff8000008130b6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008130ba:	c6 00 ff             	mov    BYTE PTR [rax],0xff
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7
    for(int i=0;i<size;i++){
ffff8000008130bd:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008130c4:	eb 1b                	jmp    ffff8000008130e1 <memcpy+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:8 (discriminator 3)
        *(dest)=*(src);
ffff8000008130c6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008130ca:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff8000008130cd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008130d1:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:9 (discriminator 3)
        dest++;
ffff8000008130d3:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:10 (discriminator 3)
        src++;
ffff8000008130d8:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 3)
    for(int i=0;i<size;i++){
ffff8000008130dd:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 1)
ffff8000008130e1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008130e4:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff8000008130e7:	77 dd                	ja     ffff8000008130c6 <memcpy+0x23>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:12
    }
}
ffff8000008130e9:	90                   	nop
ffff8000008130ea:	90                   	nop
ffff8000008130eb:	5d                   	pop    rbp
ffff8000008130ec:	c3                   	ret    

ffff8000008130ed <memcmp>:
memcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:14
int memcmp(u8 *a,u8* b,int len)
{
ffff8000008130ed:	f3 0f 1e fa          	endbr64 
ffff8000008130f1:	55                   	push   rbp
ffff8000008130f2:	48 89 e5             	mov    rbp,rsp
ffff8000008130f5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff8000008130f9:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff8000008130fd:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15
    for(int i=0;i<len;i++)
ffff800000813100:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000813107:	eb 3a                	jmp    ffff800000813143 <memcmp+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:17
    {
        if(*a!=*b)
ffff800000813109:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081310d:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000813110:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813114:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813117:	38 c2                	cmp    dl,al
ffff800000813119:	74 1a                	je     ffff800000813135 <memcmp+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:18
            return *a-*b;
ffff80000081311b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081311f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813122:	0f b6 d0             	movzx  edx,al
ffff800000813125:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813129:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081312c:	0f b6 c8             	movzx  ecx,al
ffff80000081312f:	89 d0                	mov    eax,edx
ffff800000813131:	29 c8                	sub    eax,ecx
ffff800000813133:	eb 1b                	jmp    ffff800000813150 <memcmp+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:19 (discriminator 2)
        a++;
ffff800000813135:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:20 (discriminator 2)
        b++;
ffff80000081313a:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 2)
    for(int i=0;i<len;i++)
ffff80000081313f:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 1)
ffff800000813143:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000813146:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
ffff800000813149:	7c be                	jl     ffff800000813109 <memcmp+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:22
    }
    return 0;
ffff80000081314b:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:23
}
ffff800000813150:	5d                   	pop    rbp
ffff800000813151:	c3                   	ret    

ffff800000813152 <memset>:
memset():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:24
void memset(u8 *buf,u8 value,u32 size){
ffff800000813152:	f3 0f 1e fa          	endbr64 
ffff800000813156:	55                   	push   rbp
ffff800000813157:	48 89 e5             	mov    rbp,rsp
ffff80000081315a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000081315e:	89 f0                	mov    eax,esi
ffff800000813160:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffff800000813163:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25
    for(u32 i=0;i<size;i++){
ffff800000813166:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000081316d:	eb 16                	jmp    ffff800000813185 <memset+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:26 (discriminator 3)
        *(buf++)=value;
ffff80000081316f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813173:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000813177:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000081317b:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffff80000081317f:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 3)
    for(u32 i=0;i<size;i++){
ffff800000813181:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 1)
ffff800000813185:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000813188:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
ffff80000081318b:	72 e2                	jb     ffff80000081316f <memset+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:28
    }
}
ffff80000081318d:	90                   	nop
ffff80000081318e:	90                   	nop
ffff80000081318f:	5d                   	pop    rbp
ffff800000813190:	c3                   	ret    

ffff800000813191 <get_mem_size>:
get_mem_size():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:30

u32 get_mem_size(){
ffff800000813191:	f3 0f 1e fa          	endbr64 
ffff800000813195:	55                   	push   rbp
ffff800000813196:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:31
    return mem_end;
ffff800000813199:	48 b8 a0 ab 41 00 00 	movabs rax,0xffff80000041aba0
ffff8000008131a0:	80 ff ff 
ffff8000008131a3:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:32
}
ffff8000008131a5:	5d                   	pop    rbp
ffff8000008131a6:	c3                   	ret    

ffff8000008131a7 <strcpy>:
strcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:3
#include "str.h"
#include <stdarg.h>
void strcpy(unsigned char* dest, unsigned char *buf){
ffff8000008131a7:	f3 0f 1e fa          	endbr64 
ffff8000008131ab:	55                   	push   rbp
ffff8000008131ac:	48 89 e5             	mov    rbp,rsp
ffff8000008131af:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008131b3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
ffff8000008131b7:	eb 1d                	jmp    ffff8000008131d6 <strcpy+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:5
        *(dest++)=*(buf++);
ffff8000008131b9:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff8000008131bd:	48 8d 42 01          	lea    rax,[rdx+0x1]
ffff8000008131c1:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffff8000008131c5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008131c9:	48 8d 48 01          	lea    rcx,[rax+0x1]
ffff8000008131cd:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
ffff8000008131d1:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff8000008131d4:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
ffff8000008131d6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008131da:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008131dd:	84 c0                	test   al,al
ffff8000008131df:	75 d8                	jne    ffff8000008131b9 <strcpy+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:7
    }
    *dest='\0';
ffff8000008131e1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008131e5:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:8
}
ffff8000008131e8:	90                   	nop
ffff8000008131e9:	5d                   	pop    rbp
ffff8000008131ea:	c3                   	ret    

ffff8000008131eb <strtok>:
strtok():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:12
static char strtokkee[512],*strtokkeeptr=strtokkee;
static int tokptr=0;
static char retbuf[512],*retbptr=retbuf;
char* strtok(char *str,char splitter){
ffff8000008131eb:	f3 0f 1e fa          	endbr64 
ffff8000008131ef:	55                   	push   rbp
ffff8000008131f0:	48 89 e5             	mov    rbp,rsp
ffff8000008131f3:	48 83 ec 30          	sub    rsp,0x30
ffff8000008131f7:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008131fb:	89 f0                	mov    eax,esi
ffff8000008131fd:	88 45 d4             	mov    BYTE PTR [rbp-0x2c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:14
    //limit: cannot cut string longer than 512
    if(str!=(void*)0){
ffff800000813200:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000813205:	0f 84 fa 00 00 00    	je     ffff800000813305 <strtok+0x11a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:16
        //cut for the first time
        strcpy(strtokkee,str);
ffff80000081320b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081320f:	48 89 c6             	mov    rsi,rax
ffff800000813212:	48 b8 c0 ab 41 00 00 	movabs rax,0xffff80000041abc0
ffff800000813219:	80 ff ff 
ffff80000081321c:	48 89 c7             	mov    rdi,rax
ffff80000081321f:	48 b8 a7 31 81 00 00 	movabs rax,0xffff8000008131a7
ffff800000813226:	80 ff ff 
ffff800000813229:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:17
        char* ptr=strtokkee;
ffff80000081322b:	48 b8 c0 ab 41 00 00 	movabs rax,0xffff80000041abc0
ffff800000813232:	80 ff ff 
ffff800000813235:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18
        for(tokptr=0;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512);
ffff800000813239:	48 b8 c0 ad 41 00 00 	movabs rax,0xffff80000041adc0
ffff800000813240:	80 ff ff 
ffff800000813243:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
ffff800000813249:	eb 2a                	jmp    ffff800000813275 <strtok+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 4)
ffff80000081324b:	48 b8 c0 ad 41 00 00 	movabs rax,0xffff80000041adc0
ffff800000813252:	80 ff ff 
ffff800000813255:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813257:	83 c0 01             	add    eax,0x1
ffff80000081325a:	99                   	cdq    
ffff80000081325b:	c1 ea 17             	shr    edx,0x17
ffff80000081325e:	01 d0                	add    eax,edx
ffff800000813260:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000813265:	29 d0                	sub    eax,edx
ffff800000813267:	89 c2                	mov    edx,eax
ffff800000813269:	48 b8 c0 ad 41 00 00 	movabs rax,0xffff80000041adc0
ffff800000813270:	80 ff ff 
ffff800000813273:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 1)
ffff800000813275:	48 b8 c0 ad 41 00 00 	movabs rax,0xffff80000041adc0
ffff80000081327c:	80 ff ff 
ffff80000081327f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813281:	48 ba c0 ab 41 00 00 	movabs rdx,0xffff80000041abc0
ffff800000813288:	80 ff ff 
ffff80000081328b:	48 98                	cdqe   
ffff80000081328d:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000813291:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
ffff800000813294:	74 20                	je     ffff8000008132b6 <strtok+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 3)
ffff800000813296:	48 b8 c0 ad 41 00 00 	movabs rax,0xffff80000041adc0
ffff80000081329d:	80 ff ff 
ffff8000008132a0:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008132a2:	48 ba c0 ab 41 00 00 	movabs rdx,0xffff80000041abc0
ffff8000008132a9:	80 ff ff 
ffff8000008132ac:	48 98                	cdqe   
ffff8000008132ae:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008132b2:	84 c0                	test   al,al
ffff8000008132b4:	75 95                	jne    ffff80000081324b <strtok+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:19
        strtokkee[tokptr]='\0';
ffff8000008132b6:	48 b8 c0 ad 41 00 00 	movabs rax,0xffff80000041adc0
ffff8000008132bd:	80 ff ff 
ffff8000008132c0:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008132c2:	48 ba c0 ab 41 00 00 	movabs rdx,0xffff80000041abc0
ffff8000008132c9:	80 ff ff 
ffff8000008132cc:	48 98                	cdqe   
ffff8000008132ce:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:20
        tokptr=(tokptr+1)%512;
ffff8000008132d2:	48 b8 c0 ad 41 00 00 	movabs rax,0xffff80000041adc0
ffff8000008132d9:	80 ff ff 
ffff8000008132dc:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008132de:	83 c0 01             	add    eax,0x1
ffff8000008132e1:	99                   	cdq    
ffff8000008132e2:	c1 ea 17             	shr    edx,0x17
ffff8000008132e5:	01 d0                	add    eax,edx
ffff8000008132e7:	25 ff 01 00 00       	and    eax,0x1ff
ffff8000008132ec:	29 d0                	sub    eax,edx
ffff8000008132ee:	89 c2                	mov    edx,eax
ffff8000008132f0:	48 b8 c0 ad 41 00 00 	movabs rax,0xffff80000041adc0
ffff8000008132f7:	80 ff ff 
ffff8000008132fa:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:21
        return ptr;
ffff8000008132fc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813300:	e9 ee 00 00 00       	jmp    ffff8000008133f3 <strtok+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:24
    }
    //go on cutting
    int c=0;
ffff800000813305:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:25
    char* ptr=strtokkee+tokptr;
ffff80000081330c:	48 b8 c0 ad 41 00 00 	movabs rax,0xffff80000041adc0
ffff800000813313:	80 ff ff 
ffff800000813316:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813318:	48 98                	cdqe   
ffff80000081331a:	48 ba c0 ab 41 00 00 	movabs rdx,0xffff80000041abc0
ffff800000813321:	80 ff ff 
ffff800000813324:	48 01 d0             	add    rax,rdx
ffff800000813327:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26
    for(;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512,c++);
ffff80000081332b:	eb 2e                	jmp    ffff80000081335b <strtok+0x170>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 3)
ffff80000081332d:	48 b8 c0 ad 41 00 00 	movabs rax,0xffff80000041adc0
ffff800000813334:	80 ff ff 
ffff800000813337:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813339:	83 c0 01             	add    eax,0x1
ffff80000081333c:	99                   	cdq    
ffff80000081333d:	c1 ea 17             	shr    edx,0x17
ffff800000813340:	01 d0                	add    eax,edx
ffff800000813342:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000813347:	29 d0                	sub    eax,edx
ffff800000813349:	89 c2                	mov    edx,eax
ffff80000081334b:	48 b8 c0 ad 41 00 00 	movabs rax,0xffff80000041adc0
ffff800000813352:	80 ff ff 
ffff800000813355:	89 10                	mov    DWORD PTR [rax],edx
ffff800000813357:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 1)
ffff80000081335b:	48 b8 c0 ad 41 00 00 	movabs rax,0xffff80000041adc0
ffff800000813362:	80 ff ff 
ffff800000813365:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813367:	48 ba c0 ab 41 00 00 	movabs rdx,0xffff80000041abc0
ffff80000081336e:	80 ff ff 
ffff800000813371:	48 98                	cdqe   
ffff800000813373:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000813377:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
ffff80000081337a:	74 20                	je     ffff80000081339c <strtok+0x1b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 2)
ffff80000081337c:	48 b8 c0 ad 41 00 00 	movabs rax,0xffff80000041adc0
ffff800000813383:	80 ff ff 
ffff800000813386:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813388:	48 ba c0 ab 41 00 00 	movabs rdx,0xffff80000041abc0
ffff80000081338f:	80 ff ff 
ffff800000813392:	48 98                	cdqe   
ffff800000813394:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000813398:	84 c0                	test   al,al
ffff80000081339a:	75 91                	jne    ffff80000081332d <strtok+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:27
    strtokkee[tokptr]='\0';
ffff80000081339c:	48 b8 c0 ad 41 00 00 	movabs rax,0xffff80000041adc0
ffff8000008133a3:	80 ff ff 
ffff8000008133a6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008133a8:	48 ba c0 ab 41 00 00 	movabs rdx,0xffff80000041abc0
ffff8000008133af:	80 ff ff 
ffff8000008133b2:	48 98                	cdqe   
ffff8000008133b4:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:28
    tokptr=(tokptr+1)%512;
ffff8000008133b8:	48 b8 c0 ad 41 00 00 	movabs rax,0xffff80000041adc0
ffff8000008133bf:	80 ff ff 
ffff8000008133c2:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008133c4:	83 c0 01             	add    eax,0x1
ffff8000008133c7:	99                   	cdq    
ffff8000008133c8:	c1 ea 17             	shr    edx,0x17
ffff8000008133cb:	01 d0                	add    eax,edx
ffff8000008133cd:	25 ff 01 00 00       	and    eax,0x1ff
ffff8000008133d2:	29 d0                	sub    eax,edx
ffff8000008133d4:	89 c2                	mov    edx,eax
ffff8000008133d6:	48 b8 c0 ad 41 00 00 	movabs rax,0xffff80000041adc0
ffff8000008133dd:	80 ff ff 
ffff8000008133e0:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:29
    if(c)
ffff8000008133e2:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff8000008133e6:	74 06                	je     ffff8000008133ee <strtok+0x203>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:30
        return ptr;
ffff8000008133e8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008133ec:	eb 05                	jmp    ffff8000008133f3 <strtok+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:32
    else
        return (void*)0;
ffff8000008133ee:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:33
}
ffff8000008133f3:	c9                   	leave  
ffff8000008133f4:	c3                   	ret    

ffff8000008133f5 <strcmp>:
strcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:35
int strcmp(char *s1,char *s2)
{
ffff8000008133f5:	f3 0f 1e fa          	endbr64 
ffff8000008133f9:	55                   	push   rbp
ffff8000008133fa:	48 89 e5             	mov    rbp,rsp
ffff8000008133fd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000813401:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
ffff800000813405:	eb 3c                	jmp    ffff800000813443 <strcmp+0x4e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:37
		if(*s1>*s2)
ffff800000813407:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000081340b:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff80000081340e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813412:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813415:	38 c2                	cmp    dl,al
ffff800000813417:	7e 07                	jle    ffff800000813420 <strcmp+0x2b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:38
			return 1;
ffff800000813419:	b8 01 00 00 00       	mov    eax,0x1
ffff80000081341e:	eb 52                	jmp    ffff800000813472 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:39
		else if(*s1<*s2)
ffff800000813420:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813424:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000813427:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081342b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081342e:	38 c2                	cmp    dl,al
ffff800000813430:	7d 07                	jge    ffff800000813439 <strcmp+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:40
			return -1;
ffff800000813432:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000813437:	eb 39                	jmp    ffff800000813472 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:41
		s1++;
ffff800000813439:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:42
		s2++;
ffff80000081343e:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
ffff800000813443:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813447:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081344a:	84 c0                	test   al,al
ffff80000081344c:	74 0b                	je     ffff800000813459 <strcmp+0x64>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36 (discriminator 1)
ffff80000081344e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813452:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813455:	84 c0                	test   al,al
ffff800000813457:	75 ae                	jne    ffff800000813407 <strcmp+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:44
	}
	if(*s1==*s2)
ffff800000813459:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000081345d:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000813460:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813464:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813467:	38 c2                	cmp    dl,al
ffff800000813469:	75 07                	jne    ffff800000813472 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:45
		return 0;
ffff80000081346b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000813470:	eb 00                	jmp    ffff800000813472 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:46
}
ffff800000813472:	5d                   	pop    rbp
ffff800000813473:	c3                   	ret    

ffff800000813474 <strlen>:
strlen():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:49

int strlen(char *str)
{
ffff800000813474:	f3 0f 1e fa          	endbr64 
ffff800000813478:	55                   	push   rbp
ffff800000813479:	48 89 e5             	mov    rbp,rsp
ffff80000081347c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:50
    int l=0;
ffff800000813480:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51
    for(;*str!='\0';str++,l++);
ffff800000813487:	eb 09                	jmp    ffff800000813492 <strlen+0x1e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 2)
ffff800000813489:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
ffff80000081348e:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 1)
ffff800000813492:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813496:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813499:	84 c0                	test   al,al
ffff80000081349b:	75 ec                	jne    ffff800000813489 <strlen+0x15>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:52
    return l;
ffff80000081349d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:53
}
ffff8000008134a0:	5d                   	pop    rbp
ffff8000008134a1:	c3                   	ret    

ffff8000008134a2 <sprintf>:
sprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:56

void sprintf(char *dist, char *str,...)
{
ffff8000008134a2:	f3 0f 1e fa          	endbr64 
ffff8000008134a6:	55                   	push   rbp
ffff8000008134a7:	48 89 e5             	mov    rbp,rsp
ffff8000008134aa:	48 81 ec 10 01 00 00 	sub    rsp,0x110
ffff8000008134b1:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
ffff8000008134b8:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
ffff8000008134bf:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
ffff8000008134c6:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
ffff8000008134cd:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
ffff8000008134d4:	4c 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r9
ffff8000008134db:	84 c0                	test   al,al
ffff8000008134dd:	74 20                	je     ffff8000008134ff <sprintf+0x5d>
ffff8000008134df:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
ffff8000008134e3:	0f 29 4d 90          	movaps XMMWORD PTR [rbp-0x70],xmm1
ffff8000008134e7:	0f 29 55 a0          	movaps XMMWORD PTR [rbp-0x60],xmm2
ffff8000008134eb:	0f 29 5d b0          	movaps XMMWORD PTR [rbp-0x50],xmm3
ffff8000008134ef:	0f 29 65 c0          	movaps XMMWORD PTR [rbp-0x40],xmm4
ffff8000008134f3:	0f 29 6d d0          	movaps XMMWORD PTR [rbp-0x30],xmm5
ffff8000008134f7:	0f 29 75 e0          	movaps XMMWORD PTR [rbp-0x20],xmm6
ffff8000008134fb:	0f 29 7d f0          	movaps XMMWORD PTR [rbp-0x10],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:59

    //count num of args
    char *pstr=str;
ffff8000008134ff:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000813506:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:60
    char *prev=str;
ffff80000081350d:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000813514:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:61
    int argnum=0;
ffff80000081351b:	c7 85 3c ff ff ff 00 	mov    DWORD PTR [rbp-0xc4],0x0
ffff800000813522:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
ffff800000813525:	eb 39                	jmp    ffff800000813560 <sprintf+0xbe>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64
    {
        if(*pstr=='%'&&*prev!='%')
ffff800000813527:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081352e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813531:	3c 25                	cmp    al,0x25
ffff800000813533:	75 15                	jne    ffff80000081354a <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64 (discriminator 1)
ffff800000813535:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff80000081353c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081353f:	3c 25                	cmp    al,0x25
ffff800000813541:	74 07                	je     ffff80000081354a <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:65
            argnum++;
ffff800000813543:	83 85 3c ff ff ff 01 	add    DWORD PTR [rbp-0xc4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:66
        prev=pstr;
ffff80000081354a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813551:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:67
        pstr++;
ffff800000813558:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff80000081355f:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
ffff800000813560:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813567:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081356a:	3c 0a                	cmp    al,0xa
ffff80000081356c:	75 b9                	jne    ffff800000813527 <sprintf+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:71
    }

    va_list vargs;
    va_start(vargs,str);
ffff80000081356e:	c7 85 08 ff ff ff 10 	mov    DWORD PTR [rbp-0xf8],0x10
ffff800000813575:	00 00 00 
ffff800000813578:	c7 85 0c ff ff ff 30 	mov    DWORD PTR [rbp-0xf4],0x30
ffff80000081357f:	00 00 00 
ffff800000813582:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff800000813586:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffff80000081358d:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
ffff800000813594:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:72
    pstr=str;
ffff80000081359b:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff8000008135a2:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
ffff8000008135a9:	e9 09 02 00 00       	jmp    ffff8000008137b7 <sprintf+0x315>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff8000008135ae:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008135b5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008135b8:	3c 25                	cmp    al,0x25
ffff8000008135ba:	0f 85 ca 01 00 00    	jne    ffff80000081378a <sprintf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74 (discriminator 1)
ffff8000008135c0:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008135c7:	48 83 c0 01          	add    rax,0x1
ffff8000008135cb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008135ce:	84 c0                	test   al,al
ffff8000008135d0:	0f 84 b4 01 00 00    	je     ffff80000081378a <sprintf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:75
            pstr++;
ffff8000008135d6:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff8000008135dd:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff8000008135de:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008135e5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008135e8:	3c 78                	cmp    al,0x78
ffff8000008135ea:	75 6f                	jne    ffff80000081365b <sprintf+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:77
                int v=va_arg(vargs,int);
ffff8000008135ec:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff8000008135f2:	83 f8 2f             	cmp    eax,0x2f
ffff8000008135f5:	77 23                	ja     ffff80000081361a <sprintf+0x178>
ffff8000008135f7:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff8000008135fe:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000813604:	89 d2                	mov    edx,edx
ffff800000813606:	48 01 d0             	add    rax,rdx
ffff800000813609:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff80000081360f:	83 c2 08             	add    edx,0x8
ffff800000813612:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff800000813618:	eb 12                	jmp    ffff80000081362c <sprintf+0x18a>
ffff80000081361a:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000813621:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000813625:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff80000081362c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000081362e:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:78
                sprint_hex(dist,v);
ffff800000813634:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff80000081363a:	48 63 d0             	movsxd rdx,eax
ffff80000081363d:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000813644:	48 89 d6             	mov    rsi,rdx
ffff800000813647:	48 89 c7             	mov    rdi,rax
ffff80000081364a:	48 b8 c7 38 81 00 00 	movabs rax,0xffff8000008138c7
ffff800000813651:	80 ff ff 
ffff800000813654:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000813656:	e9 54 01 00 00       	jmp    ffff8000008137af <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:79
            }else if(*pstr=='s'){
ffff80000081365b:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813662:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813665:	3c 73                	cmp    al,0x73
ffff800000813667:	75 6f                	jne    ffff8000008136d8 <sprintf+0x236>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:80
                char* v=va_arg(vargs,char*);
ffff800000813669:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff80000081366f:	83 f8 2f             	cmp    eax,0x2f
ffff800000813672:	77 23                	ja     ffff800000813697 <sprintf+0x1f5>
ffff800000813674:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff80000081367b:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000813681:	89 d2                	mov    edx,edx
ffff800000813683:	48 01 d0             	add    rax,rdx
ffff800000813686:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff80000081368c:	83 c2 08             	add    edx,0x8
ffff80000081368f:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff800000813695:	eb 12                	jmp    ffff8000008136a9 <sprintf+0x207>
ffff800000813697:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000081369e:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008136a2:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff8000008136a9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008136ac:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:81
                sprintn(dist,v);
ffff8000008136b3:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
ffff8000008136ba:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008136c1:	48 89 d6             	mov    rsi,rdx
ffff8000008136c4:	48 89 c7             	mov    rdi,rax
ffff8000008136c7:	48 b8 55 39 81 00 00 	movabs rax,0xffff800000813955
ffff8000008136ce:	80 ff ff 
ffff8000008136d1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff8000008136d3:	e9 d7 00 00 00       	jmp    ffff8000008137af <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:82
            }else if(*pstr=='d'){
ffff8000008136d8:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008136df:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008136e2:	3c 64                	cmp    al,0x64
ffff8000008136e4:	75 6d                	jne    ffff800000813753 <sprintf+0x2b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:83
                char* v=va_arg(vargs,char*);
ffff8000008136e6:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff8000008136ec:	83 f8 2f             	cmp    eax,0x2f
ffff8000008136ef:	77 23                	ja     ffff800000813714 <sprintf+0x272>
ffff8000008136f1:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff8000008136f8:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff8000008136fe:	89 d2                	mov    edx,edx
ffff800000813700:	48 01 d0             	add    rax,rdx
ffff800000813703:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000813709:	83 c2 08             	add    edx,0x8
ffff80000081370c:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff800000813712:	eb 12                	jmp    ffff800000813726 <sprintf+0x284>
ffff800000813714:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000081371b:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff80000081371f:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff800000813726:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813729:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:84
                sprint_decimal(dist,v);
ffff800000813730:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000813737:	89 c2                	mov    edx,eax
ffff800000813739:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000813740:	89 d6                	mov    esi,edx
ffff800000813742:	48 89 c7             	mov    rdi,rax
ffff800000813745:	48 b8 0c 38 81 00 00 	movabs rax,0xffff80000081380c
ffff80000081374c:	80 ff ff 
ffff80000081374f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000813751:	eb 5c                	jmp    ffff8000008137af <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:85
            }else if(*pstr=='c'){
ffff800000813753:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081375a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081375d:	3c 63                	cmp    al,0x63
ffff80000081375f:	75 02                	jne    ffff800000813763 <sprintf+0x2c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:86
                char v=va_arg(vargs,char);
ffff800000813761:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:89
                sprintchar(dist,v);
            }else{
                sprintchar(dist,*pstr);
ffff800000813763:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081376a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081376d:	0f be d0             	movsx  edx,al
ffff800000813770:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000813777:	89 d6                	mov    esi,edx
ffff800000813779:	48 89 c7             	mov    rdi,rax
ffff80000081377c:	48 b8 cd 37 81 00 00 	movabs rax,0xffff8000008137cd
ffff800000813783:	80 ff ff 
ffff800000813786:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000813788:	eb 25                	jmp    ffff8000008137af <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:92
            }
        }else{
            sprintchar(dist,*pstr);
ffff80000081378a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813791:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813794:	0f be d0             	movsx  edx,al
ffff800000813797:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000081379e:	89 d6                	mov    esi,edx
ffff8000008137a0:	48 89 c7             	mov    rdi,rax
ffff8000008137a3:	48 b8 cd 37 81 00 00 	movabs rax,0xffff8000008137cd
ffff8000008137aa:	80 ff ff 
ffff8000008137ad:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
ffff8000008137af:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff8000008137b6:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73 (discriminator 1)
ffff8000008137b7:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008137be:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008137c1:	84 c0                	test   al,al
ffff8000008137c3:	0f 85 e5 fd ff ff    	jne    ffff8000008135ae <sprintf+0x10c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:96
        }
    }
    va_end(vargs);
}
ffff8000008137c9:	90                   	nop
ffff8000008137ca:	90                   	nop
ffff8000008137cb:	c9                   	leave  
ffff8000008137cc:	c3                   	ret    

ffff8000008137cd <sprintchar>:
sprintchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:98
void sprintchar(char *dist,char c)
{
ffff8000008137cd:	f3 0f 1e fa          	endbr64 
ffff8000008137d1:	55                   	push   rbp
ffff8000008137d2:	48 89 e5             	mov    rbp,rsp
ffff8000008137d5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008137d9:	89 f0                	mov    eax,esi
ffff8000008137db:	88 45 f4             	mov    BYTE PTR [rbp-0xc],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
ffff8000008137de:	eb 05                	jmp    ffff8000008137e5 <sprintchar+0x18>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:100
        dist++;
ffff8000008137e0:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
ffff8000008137e5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008137e9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008137ec:	84 c0                	test   al,al
ffff8000008137ee:	75 f0                	jne    ffff8000008137e0 <sprintchar+0x13>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:101
    *dist++=c;
ffff8000008137f0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008137f4:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff8000008137f8:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff8000008137fc:	0f b6 55 f4          	movzx  edx,BYTE PTR [rbp-0xc]
ffff800000813800:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:102
    *dist='\0';
ffff800000813802:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813806:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:103
}
ffff800000813809:	90                   	nop
ffff80000081380a:	5d                   	pop    rbp
ffff80000081380b:	c3                   	ret    

ffff80000081380c <sprint_decimal>:
sprint_decimal():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:105
void sprint_decimal(char *dist,int c)
{
ffff80000081380c:	f3 0f 1e fa          	endbr64 
ffff800000813810:	55                   	push   rbp
ffff800000813811:	48 89 e5             	mov    rbp,rsp
ffff800000813814:	48 83 ec 30          	sub    rsp,0x30
ffff800000813818:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000081381c:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:107
    unsigned char st[22];
    int p=0;
ffff80000081381f:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
ffff800000813826:	eb 65                	jmp    ffff80000081388d <sprint_decimal+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:109
        unsigned char a=c%10+'0';
ffff800000813828:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000081382b:	48 63 c2             	movsxd rax,edx
ffff80000081382e:	48 69 c0 67 66 66 66 	imul   rax,rax,0x66666667
ffff800000813835:	48 c1 e8 20          	shr    rax,0x20
ffff800000813839:	c1 f8 02             	sar    eax,0x2
ffff80000081383c:	89 d6                	mov    esi,edx
ffff80000081383e:	c1 fe 1f             	sar    esi,0x1f
ffff800000813841:	29 f0                	sub    eax,esi
ffff800000813843:	89 c1                	mov    ecx,eax
ffff800000813845:	89 c8                	mov    eax,ecx
ffff800000813847:	c1 e0 02             	shl    eax,0x2
ffff80000081384a:	01 c8                	add    eax,ecx
ffff80000081384c:	01 c0                	add    eax,eax
ffff80000081384e:	89 d1                	mov    ecx,edx
ffff800000813850:	29 c1                	sub    ecx,eax
ffff800000813852:	89 c8                	mov    eax,ecx
ffff800000813854:	83 c0 30             	add    eax,0x30
ffff800000813857:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:110
        st[p++]=a;
ffff80000081385a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081385d:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000813860:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000813863:	48 98                	cdqe   
ffff800000813865:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
ffff800000813869:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:111
        c/=10;
ffff80000081386d:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000813870:	48 63 d0             	movsxd rdx,eax
ffff800000813873:	48 69 d2 67 66 66 66 	imul   rdx,rdx,0x66666667
ffff80000081387a:	48 c1 ea 20          	shr    rdx,0x20
ffff80000081387e:	c1 fa 02             	sar    edx,0x2
ffff800000813881:	c1 f8 1f             	sar    eax,0x1f
ffff800000813884:	89 c1                	mov    ecx,eax
ffff800000813886:	89 d0                	mov    eax,edx
ffff800000813888:	29 c8                	sub    eax,ecx
ffff80000081388a:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
ffff80000081388d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000813890:	83 f8 0f             	cmp    eax,0xf
ffff800000813893:	76 93                	jbe    ffff800000813828 <sprint_decimal+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    }
    while(p>0)
ffff800000813895:	eb 26                	jmp    ffff8000008138bd <sprint_decimal+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:115
    {
        sprintchar(dist,st[--p]);
ffff800000813897:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffff80000081389b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081389e:	48 98                	cdqe   
ffff8000008138a0:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
ffff8000008138a5:	0f be d0             	movsx  edx,al
ffff8000008138a8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008138ac:	89 d6                	mov    esi,edx
ffff8000008138ae:	48 89 c7             	mov    rdi,rax
ffff8000008138b1:	48 b8 cd 37 81 00 00 	movabs rax,0xffff8000008137cd
ffff8000008138b8:	80 ff ff 
ffff8000008138bb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    while(p>0)
ffff8000008138bd:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff8000008138c1:	7f d4                	jg     ffff800000813897 <sprint_decimal+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:117
    }
}
ffff8000008138c3:	90                   	nop
ffff8000008138c4:	90                   	nop
ffff8000008138c5:	c9                   	leave  
ffff8000008138c6:	c3                   	ret    

ffff8000008138c7 <sprint_hex>:
sprint_hex():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:119
void sprint_hex(char *dist,unsigned long long c)
{
ffff8000008138c7:	f3 0f 1e fa          	endbr64 
ffff8000008138cb:	55                   	push   rbp
ffff8000008138cc:	48 89 e5             	mov    rbp,rsp
ffff8000008138cf:	48 83 ec 30          	sub    rsp,0x30
ffff8000008138d3:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008138d7:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:121
    unsigned char st[17];
    int p=0;
ffff8000008138db:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<17){
ffff8000008138e2:	eb 39                	jmp    ffff80000081391d <sprint_hex+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:123
        unsigned char a=c%16;
ffff8000008138e4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008138e8:	83 e0 0f             	and    eax,0xf
ffff8000008138eb:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124
        if(a>9)a+='a'-10;
ffff8000008138ee:	80 7d fb 09          	cmp    BYTE PTR [rbp-0x5],0x9
ffff8000008138f2:	76 06                	jbe    ffff8000008138fa <sprint_hex+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124 (discriminator 1)
ffff8000008138f4:	80 45 fb 57          	add    BYTE PTR [rbp-0x5],0x57
ffff8000008138f8:	eb 04                	jmp    ffff8000008138fe <sprint_hex+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:125
        else a+='0';
ffff8000008138fa:	80 45 fb 30          	add    BYTE PTR [rbp-0x5],0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:126
        st[p++]=a;
ffff8000008138fe:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000813901:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000813904:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000813907:	48 98                	cdqe   
ffff800000813909:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
ffff80000081390d:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:127
        c/=16;
ffff800000813911:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813915:	48 c1 e8 04          	shr    rax,0x4
ffff800000813919:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<17){
ffff80000081391d:	83 7d fc 10          	cmp    DWORD PTR [rbp-0x4],0x10
ffff800000813921:	7e c1                	jle    ffff8000008138e4 <sprint_hex+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    }
    while(p>0)
ffff800000813923:	eb 26                	jmp    ffff80000081394b <sprint_hex+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:131
    {
        sprintchar(dist,st[--p]);
ffff800000813925:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffff800000813929:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081392c:	48 98                	cdqe   
ffff80000081392e:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
ffff800000813933:	0f be d0             	movsx  edx,al
ffff800000813936:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081393a:	89 d6                	mov    esi,edx
ffff80000081393c:	48 89 c7             	mov    rdi,rax
ffff80000081393f:	48 b8 cd 37 81 00 00 	movabs rax,0xffff8000008137cd
ffff800000813946:	80 ff ff 
ffff800000813949:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    while(p>0)
ffff80000081394b:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff80000081394f:	7f d4                	jg     ffff800000813925 <sprint_hex+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:133
    }
}
ffff800000813951:	90                   	nop
ffff800000813952:	90                   	nop
ffff800000813953:	c9                   	leave  
ffff800000813954:	c3                   	ret    

ffff800000813955 <sprintn>:
sprintn():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:135
void sprintn(char *dist,char *str)
{
ffff800000813955:	f3 0f 1e fa          	endbr64 
ffff800000813959:	55                   	push   rbp
ffff80000081395a:	48 89 e5             	mov    rbp,rsp
ffff80000081395d:	48 83 ec 10          	sub    rsp,0x10
ffff800000813961:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000813965:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
ffff800000813969:	eb 27                	jmp    ffff800000813992 <sprintn+0x3d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:138
    {
        sprintchar(dist,*str++);
ffff80000081396b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081396f:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000813973:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff800000813977:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081397a:	0f be d0             	movsx  edx,al
ffff80000081397d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813981:	89 d6                	mov    esi,edx
ffff800000813983:	48 89 c7             	mov    rdi,rax
ffff800000813986:	48 b8 cd 37 81 00 00 	movabs rax,0xffff8000008137cd
ffff80000081398d:	80 ff ff 
ffff800000813990:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
ffff800000813992:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813996:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813999:	84 c0                	test   al,al
ffff80000081399b:	75 ce                	jne    ffff80000081396b <sprintn+0x16>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:140
    }
ffff80000081399d:	90                   	nop
ffff80000081399e:	90                   	nop
ffff80000081399f:	c9                   	leave  
ffff8000008139a0:	c3                   	ret    
ffff8000008139a1:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff8000008139a8:	00 00 00 
ffff8000008139ab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffff8000008139b0 <create_zero>:
create_zero():
ffff8000008139b0:	e8 08 15 ff ff       	call   ffff800000804ebd <req_proc>
ffff8000008139b5:	83 f8 ff             	cmp    eax,0xffffffff
ffff8000008139b8:	74 0c                	je     ffff8000008139c6 <create_zero.retu>
ffff8000008139ba:	e8 4f 16 ff ff       	call   ffff80000080500e <set_proc>
ffff8000008139bf:	67 8b 04 24          	mov    eax,DWORD PTR [esp]
ffff8000008139c3:	83 c4 40             	add    esp,0x40

ffff8000008139c6 <create_zero.retu>:
create_zero.retu():
ffff8000008139c6:	c3                   	ret    

ffff8000008139c7 <save_context>:
switch_proc_asm():
ffff8000008139c7:	55                   	push   rbp
ffff8000008139c8:	48 89 e6             	mov    rsi,rsp
ffff8000008139cb:	48 89 f7             	mov    rdi,rsi
ffff8000008139ce:	48 83 c7 18          	add    rdi,0x18
ffff8000008139d2:	e8 bd 1c ff ff       	call   ffff800000805694 <save_context_c>
ffff8000008139d7:	c3                   	ret    

ffff8000008139d8 <discard_context>:
discard_context():
ffff8000008139d8:	c3                   	ret    

ffff8000008139d9 <desc>:
	...

ffff8000008139e1 <ret_sys_call>:
ret_sys_call():
ffff8000008139e1:	58                   	pop    rax
ffff8000008139e2:	8e d8                	mov    ds,eax
ffff8000008139e4:	58                   	pop    rax
ffff8000008139e5:	8e c0                	mov    es,eax
ffff8000008139e7:	41 5f                	pop    r15
ffff8000008139e9:	41 5e                	pop    r14
ffff8000008139eb:	41 5d                	pop    r13
ffff8000008139ed:	41 5c                	pop    r12
ffff8000008139ef:	41 5b                	pop    r11
ffff8000008139f1:	41 5a                	pop    r10
ffff8000008139f3:	41 59                	pop    r9
ffff8000008139f5:	41 58                	pop    r8
ffff8000008139f7:	5e                   	pop    rsi
ffff8000008139f8:	5f                   	pop    rdi
ffff8000008139f9:	5a                   	pop    rdx
ffff8000008139fa:	59                   	pop    rcx
ffff8000008139fb:	5b                   	pop    rbx
ffff8000008139fc:	58                   	pop    rax

ffff8000008139fd <tmp>:
tmp():
ffff8000008139fd:	48 0f 07             	sysretq 

ffff800000813a00 <ret_normal_proc>:
ret_normal_proc():
ffff800000813a00:	58                   	pop    rax
ffff800000813a01:	8e d8                	mov    ds,eax
ffff800000813a03:	58                   	pop    rax
ffff800000813a04:	8e c0                	mov    es,eax
ffff800000813a06:	41 5f                	pop    r15
ffff800000813a08:	41 5e                	pop    r14
ffff800000813a0a:	41 5d                	pop    r13
ffff800000813a0c:	41 5c                	pop    r12
ffff800000813a0e:	41 5b                	pop    r11
ffff800000813a10:	41 5a                	pop    r10
ffff800000813a12:	41 59                	pop    r9
ffff800000813a14:	41 58                	pop    r8
ffff800000813a16:	5e                   	pop    rsi
ffff800000813a17:	5f                   	pop    rdi
ffff800000813a18:	5a                   	pop    rdx
ffff800000813a19:	59                   	pop    rcx
ffff800000813a1a:	5b                   	pop    rbx
ffff800000813a1b:	58                   	pop    rax
ffff800000813a1c:	c3                   	ret    

ffff800000813a1d <move_to_user_mode>:
move_to_user_mode():
ffff800000813a1d:	48 b9 2d 3a 81 00 00 	movabs rcx,0xffff800000813a2d
ffff800000813a24:	80 ff ff 
ffff800000813a27:	9c                   	pushf  
ffff800000813a28:	41 5b                	pop    r11
ffff800000813a2a:	48 0f 07             	sysretq 

ffff800000813a2d <move_to_user_mode.result>:
move_to_user_mode.result():
ffff800000813a2d:	b8 2b 00 00 00       	mov    eax,0x2b
ffff800000813a32:	8e c0                	mov    es,eax
ffff800000813a34:	8e d8                	mov    ds,eax
ffff800000813a36:	8e e0                	mov    fs,eax
ffff800000813a38:	8e e8                	mov    gs,eax
ffff800000813a3a:	c3                   	ret    
