
bin/gmsknl.elf:     file format elf64-x86-64


Disassembly of section .text:

ffff800000800000 <init_int>:
init_int():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:12
#include "syscall.h"
#include "kb.h"
#pragma pack(1)
gate *idt= (gate *) (KNL_BASE+IDT_ADDR);
extern int disk_int_handler();
void init_int(){
ffff800000800000:	f3 0f 1e fa          	endbr64 
ffff800000800004:	55                   	push   rbp
ffff800000800005:	48 89 e5             	mov    rbp,rsp
ffff800000800008:	41 57                	push   r15
ffff80000080000a:	53                   	push   rbx
ffff80000080000b:	48 83 ec 10          	sub    rsp,0x10
ffff80000080000f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080000f <init_int+0xf>
ffff800000800016:	49 bb c1 da 11 00 00 	movabs r11,0x11dac1
ffff80000080001d:	00 00 00 
ffff800000800020:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:14
    //asm volatile("sidt %0"::"m"(idt));
    set_gate(0,(addr_t)divide_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800023:	48 b8 30 ff ff ff ff 	movabs rax,0xffffffffffffff30
ffff80000080002a:	ff ff ff 
ffff80000080002d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800031:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800036:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080003b:	48 89 c6             	mov    rsi,rax
ffff80000080003e:	bf 00 00 00 00       	mov    edi,0x0
ffff800000800043:	49 89 df             	mov    r15,rbx
ffff800000800046:	48 b8 02 2b ee ff ff 	movabs rax,0xffffffffffee2b02
ffff80000080004d:	ff ff ff 
ffff800000800050:	48 01 d8             	add    rax,rbx
ffff800000800053:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:15
    set_gate(1,(addr_t)debug,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800055:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080005c:	ff ff ff 
ffff80000080005f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800063:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800068:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080006d:	48 89 c6             	mov    rsi,rax
ffff800000800070:	bf 01 00 00 00       	mov    edi,0x1
ffff800000800075:	49 89 df             	mov    r15,rbx
ffff800000800078:	48 b8 02 2b ee ff ff 	movabs rax,0xffffffffffee2b02
ffff80000080007f:	ff ff ff 
ffff800000800082:	48 01 d8             	add    rax,rbx
ffff800000800085:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:16
    set_gate(2,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800087:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff80000080008e:	ff ff ff 
ffff800000800091:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800095:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080009a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080009f:	48 89 c6             	mov    rsi,rax
ffff8000008000a2:	bf 02 00 00 00       	mov    edi,0x2
ffff8000008000a7:	49 89 df             	mov    r15,rbx
ffff8000008000aa:	48 b8 02 2b ee ff ff 	movabs rax,0xffffffffffee2b02
ffff8000008000b1:	ff ff ff 
ffff8000008000b4:	48 01 d8             	add    rax,rbx
ffff8000008000b7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:17
    set_gate(3,(addr_t)breakpoint,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008000b9:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff8000008000c0:	ff ff ff 
ffff8000008000c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008000c7:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008000cc:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008000d1:	48 89 c6             	mov    rsi,rax
ffff8000008000d4:	bf 03 00 00 00       	mov    edi,0x3
ffff8000008000d9:	49 89 df             	mov    r15,rbx
ffff8000008000dc:	48 b8 02 2b ee ff ff 	movabs rax,0xffffffffffee2b02
ffff8000008000e3:	ff ff ff 
ffff8000008000e6:	48 01 d8             	add    rax,rbx
ffff8000008000e9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:18
    set_gate(4,(addr_t)overflow,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008000eb:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff8000008000f2:	ff ff ff 
ffff8000008000f5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008000f9:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008000fe:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800103:	48 89 c6             	mov    rsi,rax
ffff800000800106:	bf 04 00 00 00       	mov    edi,0x4
ffff80000080010b:	49 89 df             	mov    r15,rbx
ffff80000080010e:	48 b8 02 2b ee ff ff 	movabs rax,0xffffffffffee2b02
ffff800000800115:	ff ff ff 
ffff800000800118:	48 01 d8             	add    rax,rbx
ffff80000080011b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:19
    set_gate(5,(addr_t)bounds,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff80000080011d:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000800124:	ff ff ff 
ffff800000800127:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080012b:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800130:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800135:	48 89 c6             	mov    rsi,rax
ffff800000800138:	bf 05 00 00 00       	mov    edi,0x5
ffff80000080013d:	49 89 df             	mov    r15,rbx
ffff800000800140:	48 b8 02 2b ee ff ff 	movabs rax,0xffffffffffee2b02
ffff800000800147:	ff ff ff 
ffff80000080014a:	48 01 d8             	add    rax,rbx
ffff80000080014d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:20
    set_gate(6,(addr_t)undefined_operator,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff80000080014f:	48 b8 60 ff ff ff ff 	movabs rax,0xffffffffffffff60
ffff800000800156:	ff ff ff 
ffff800000800159:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080015d:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800162:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800167:	48 89 c6             	mov    rsi,rax
ffff80000080016a:	bf 06 00 00 00       	mov    edi,0x6
ffff80000080016f:	49 89 df             	mov    r15,rbx
ffff800000800172:	48 b8 02 2b ee ff ff 	movabs rax,0xffffffffffee2b02
ffff800000800179:	ff ff ff 
ffff80000080017c:	48 01 d8             	add    rax,rbx
ffff80000080017f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:21
    set_gate(7,(addr_t)coprocessor_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800181:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000800188:	ff ff ff 
ffff80000080018b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080018f:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800194:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800199:	48 89 c6             	mov    rsi,rax
ffff80000080019c:	bf 07 00 00 00       	mov    edi,0x7
ffff8000008001a1:	49 89 df             	mov    r15,rbx
ffff8000008001a4:	48 b8 02 2b ee ff ff 	movabs rax,0xffffffffffee2b02
ffff8000008001ab:	ff ff ff 
ffff8000008001ae:	48 01 d8             	add    rax,rbx
ffff8000008001b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:22
    set_gate(8,(addr_t)double_ints,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//double_ints
ffff8000008001b3:	48 b8 68 fe ff ff ff 	movabs rax,0xfffffffffffffe68
ffff8000008001ba:	ff ff ff 
ffff8000008001bd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008001c1:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008001c6:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008001cb:	48 89 c6             	mov    rsi,rax
ffff8000008001ce:	bf 08 00 00 00       	mov    edi,0x8
ffff8000008001d3:	49 89 df             	mov    r15,rbx
ffff8000008001d6:	48 b8 02 2b ee ff ff 	movabs rax,0xffffffffffee2b02
ffff8000008001dd:	ff ff ff 
ffff8000008001e0:	48 01 d8             	add    rax,rbx
ffff8000008001e3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:23
    set_gate(9,(addr_t)coprocessor_seg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008001e5:	48 b8 20 fe ff ff ff 	movabs rax,0xfffffffffffffe20
ffff8000008001ec:	ff ff ff 
ffff8000008001ef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008001f3:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008001f8:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008001fd:	48 89 c6             	mov    rsi,rax
ffff800000800200:	bf 09 00 00 00       	mov    edi,0x9
ffff800000800205:	49 89 df             	mov    r15,rbx
ffff800000800208:	48 b8 02 2b ee ff ff 	movabs rax,0xffffffffffee2b02
ffff80000080020f:	ff ff ff 
ffff800000800212:	48 01 d8             	add    rax,rbx
ffff800000800215:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:24
    set_gate(10,(addr_t)invalid_tss,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800217:	48 b8 d0 ff ff ff ff 	movabs rax,0xffffffffffffffd0
ffff80000080021e:	ff ff ff 
ffff800000800221:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800225:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080022a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080022f:	48 89 c6             	mov    rsi,rax
ffff800000800232:	bf 0a 00 00 00       	mov    edi,0xa
ffff800000800237:	49 89 df             	mov    r15,rbx
ffff80000080023a:	48 b8 02 2b ee ff ff 	movabs rax,0xffffffffffee2b02
ffff800000800241:	ff ff ff 
ffff800000800244:	48 01 d8             	add    rax,rbx
ffff800000800247:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:25
    set_gate(11,(addr_t)segment_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800249:	48 b8 e0 ff ff ff ff 	movabs rax,0xffffffffffffffe0
ffff800000800250:	ff ff ff 
ffff800000800253:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800257:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080025c:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800261:	48 89 c6             	mov    rsi,rax
ffff800000800264:	bf 0b 00 00 00       	mov    edi,0xb
ffff800000800269:	49 89 df             	mov    r15,rbx
ffff80000080026c:	48 b8 02 2b ee ff ff 	movabs rax,0xffffffffffee2b02
ffff800000800273:	ff ff ff 
ffff800000800276:	48 01 d8             	add    rax,rbx
ffff800000800279:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:26
    set_gate(12,(addr_t)stackseg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//
ffff80000080027b:	48 b8 b8 ff ff ff ff 	movabs rax,0xffffffffffffffb8
ffff800000800282:	ff ff ff 
ffff800000800285:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800289:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080028e:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800293:	48 89 c6             	mov    rsi,rax
ffff800000800296:	bf 0c 00 00 00       	mov    edi,0xc
ffff80000080029b:	49 89 df             	mov    r15,rbx
ffff80000080029e:	48 b8 02 2b ee ff ff 	movabs rax,0xffffffffffee2b02
ffff8000008002a5:	ff ff ff 
ffff8000008002a8:	48 01 d8             	add    rax,rbx
ffff8000008002ab:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:27
    set_gate(13,(addr_t)general_protect,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008002ad:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff8000008002b4:	ff ff ff 
ffff8000008002b7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008002bb:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008002c0:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008002c5:	48 89 c6             	mov    rsi,rax
ffff8000008002c8:	bf 0d 00 00 00       	mov    edi,0xd
ffff8000008002cd:	49 89 df             	mov    r15,rbx
ffff8000008002d0:	48 b8 02 2b ee ff ff 	movabs rax,0xffffffffffee2b02
ffff8000008002d7:	ff ff ff 
ffff8000008002da:	48 01 d8             	add    rax,rbx
ffff8000008002dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:28
    set_gate(14,(addr_t)page_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008002df:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff8000008002e6:	ff ff ff 
ffff8000008002e9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008002ed:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008002f2:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008002f7:	48 89 c6             	mov    rsi,rax
ffff8000008002fa:	bf 0e 00 00 00       	mov    edi,0xe
ffff8000008002ff:	49 89 df             	mov    r15,rbx
ffff800000800302:	48 b8 02 2b ee ff ff 	movabs rax,0xffffffffffee2b02
ffff800000800309:	ff ff ff 
ffff80000080030c:	48 01 d8             	add    rax,rbx
ffff80000080030f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:29
    set_gate(15,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800311:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000800318:	ff ff ff 
ffff80000080031b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080031f:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800324:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800329:	48 89 c6             	mov    rsi,rax
ffff80000080032c:	bf 0f 00 00 00       	mov    edi,0xf
ffff800000800331:	49 89 df             	mov    r15,rbx
ffff800000800334:	48 b8 02 2b ee ff ff 	movabs rax,0xffffffffffee2b02
ffff80000080033b:	ff ff ff 
ffff80000080033e:	48 01 d8             	add    rax,rbx
ffff800000800341:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:30
    set_gate(16,(addr_t)coprocessor_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800343:	48 b8 68 ff ff ff ff 	movabs rax,0xffffffffffffff68
ffff80000080034a:	ff ff ff 
ffff80000080034d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800351:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800356:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080035b:	48 89 c6             	mov    rsi,rax
ffff80000080035e:	bf 10 00 00 00       	mov    edi,0x10
ffff800000800363:	49 89 df             	mov    r15,rbx
ffff800000800366:	48 b8 02 2b ee ff ff 	movabs rax,0xffffffffffee2b02
ffff80000080036d:	ff ff ff 
ffff800000800370:	48 01 d8             	add    rax,rbx
ffff800000800373:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:31
    for (int i=17;i<48;i++)
ffff800000800375:	c7 45 ec 11 00 00 00 	mov    DWORD PTR [rbp-0x14],0x11
ffff80000080037c:	eb 39                	jmp    ffff8000008003b7 <init_int+0x3b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32 (discriminator 3)
        set_gate(i,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff80000080037e:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000800385:	ff ff ff 
ffff800000800388:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080038c:	48 89 c6             	mov    rsi,rax
ffff80000080038f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000800392:	0f b6 c0             	movzx  eax,al
ffff800000800395:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff80000080039a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080039f:	89 c7                	mov    edi,eax
ffff8000008003a1:	49 89 df             	mov    r15,rbx
ffff8000008003a4:	48 b8 02 2b ee ff ff 	movabs rax,0xffffffffffee2b02
ffff8000008003ab:	ff ff ff 
ffff8000008003ae:	48 01 d8             	add    rax,rbx
ffff8000008003b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:31 (discriminator 3)
    for (int i=17;i<48;i++)
ffff8000008003b3:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:31 (discriminator 1)
ffff8000008003b7:	83 7d ec 2f          	cmp    DWORD PTR [rbp-0x14],0x2f
ffff8000008003bb:	7e c1                	jle    ffff80000080037e <init_int+0x37e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:33
	set_gate(0x21,(addr_t)key_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff8000008003bd:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff8000008003c4:	ff ff ff 
ffff8000008003c7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008003cb:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff8000008003d0:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008003d5:	48 89 c6             	mov    rsi,rax
ffff8000008003d8:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008003dd:	49 89 df             	mov    r15,rbx
ffff8000008003e0:	48 b8 02 2b ee ff ff 	movabs rax,0xffffffffffee2b02
ffff8000008003e7:	ff ff ff 
ffff8000008003ea:	48 01 d8             	add    rax,rbx
ffff8000008003ed:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:34
	set_gate(0x20,(addr_t)clock,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff8000008003ef:	48 b8 d8 ff ff ff ff 	movabs rax,0xffffffffffffffd8
ffff8000008003f6:	ff ff ff 
ffff8000008003f9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008003fd:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800402:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800407:	48 89 c6             	mov    rsi,rax
ffff80000080040a:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080040f:	49 89 df             	mov    r15,rbx
ffff800000800412:	48 b8 02 2b ee ff ff 	movabs rax,0xffffffffffee2b02
ffff800000800419:	ff ff ff 
ffff80000080041c:	48 01 d8             	add    rax,rbx
ffff80000080041f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:35
	set_gate(0x2e,(addr_t)disk_int_handler,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff800000800421:	48 b8 f8 ff ff ff ff 	movabs rax,0xfffffffffffffff8
ffff800000800428:	ff ff ff 
ffff80000080042b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080042f:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800434:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800439:	48 89 c6             	mov    rsi,rax
ffff80000080043c:	bf 2e 00 00 00       	mov    edi,0x2e
ffff800000800441:	49 89 df             	mov    r15,rbx
ffff800000800444:	48 b8 02 2b ee ff ff 	movabs rax,0xffffffffffee2b02
ffff80000080044b:	ff ff ff 
ffff80000080044e:	48 01 d8             	add    rax,rbx
ffff800000800451:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:36
    set_gate(0x80,(addr_t)_syscall,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);//
ffff800000800453:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff80000080045a:	ff ff ff 
ffff80000080045d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800461:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800466:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080046b:	48 89 c6             	mov    rsi,rax
ffff80000080046e:	bf 80 00 00 00       	mov    edi,0x80
ffff800000800473:	49 89 df             	mov    r15,rbx
ffff800000800476:	48 b8 02 2b ee ff ff 	movabs rax,0xffffffffffee2b02
ffff80000080047d:	ff ff ff 
ffff800000800480:	48 01 d8             	add    rax,rbx
ffff800000800483:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:41
    //set_gate(0x2c,mouse_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
    //启动8259A
    
	//ICW1
	outb(0x20,0x11);
ffff800000800485:	be 11 00 00 00       	mov    esi,0x11
ffff80000080048a:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080048f:	49 89 df             	mov    r15,rbx
ffff800000800492:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff800000800499:	ff ff ff 
ffff80000080049c:	48 01 d8             	add    rax,rbx
ffff80000080049f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:42
	outb(0xA0,0x11);
ffff8000008004a1:	be 11 00 00 00       	mov    esi,0x11
ffff8000008004a6:	bf a0 00 00 00       	mov    edi,0xa0
ffff8000008004ab:	49 89 df             	mov    r15,rbx
ffff8000008004ae:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff8000008004b5:	ff ff ff 
ffff8000008004b8:	48 01 d8             	add    rax,rbx
ffff8000008004bb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:44
	//ICW2
	outb(0x21,0x20);//former 0x20,0x20
ffff8000008004bd:	be 20 00 00 00       	mov    esi,0x20
ffff8000008004c2:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008004c7:	49 89 df             	mov    r15,rbx
ffff8000008004ca:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff8000008004d1:	ff ff ff 
ffff8000008004d4:	48 01 d8             	add    rax,rbx
ffff8000008004d7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:45
	outb(0xA1,0x28);
ffff8000008004d9:	be 28 00 00 00       	mov    esi,0x28
ffff8000008004de:	bf a1 00 00 00       	mov    edi,0xa1
ffff8000008004e3:	49 89 df             	mov    r15,rbx
ffff8000008004e6:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff8000008004ed:	ff ff ff 
ffff8000008004f0:	48 01 d8             	add    rax,rbx
ffff8000008004f3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:47
	//ICW3
	outb(0x21,0x04);
ffff8000008004f5:	be 04 00 00 00       	mov    esi,0x4
ffff8000008004fa:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008004ff:	49 89 df             	mov    r15,rbx
ffff800000800502:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff800000800509:	ff ff ff 
ffff80000080050c:	48 01 d8             	add    rax,rbx
ffff80000080050f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:48
	outb(0xA1,0x02);
ffff800000800511:	be 02 00 00 00       	mov    esi,0x2
ffff800000800516:	bf a1 00 00 00       	mov    edi,0xa1
ffff80000080051b:	49 89 df             	mov    r15,rbx
ffff80000080051e:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff800000800525:	ff ff ff 
ffff800000800528:	48 01 d8             	add    rax,rbx
ffff80000080052b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:50
	//ICW4
	outb(0x21,0x01);
ffff80000080052d:	be 01 00 00 00       	mov    esi,0x1
ffff800000800532:	bf 21 00 00 00       	mov    edi,0x21
ffff800000800537:	49 89 df             	mov    r15,rbx
ffff80000080053a:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff800000800541:	ff ff ff 
ffff800000800544:	48 01 d8             	add    rax,rbx
ffff800000800547:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:51
	outb(0xA1,0x01);
ffff800000800549:	be 01 00 00 00       	mov    esi,0x1
ffff80000080054e:	bf a1 00 00 00       	mov    edi,0xa1
ffff800000800553:	49 89 df             	mov    r15,rbx
ffff800000800556:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff80000080055d:	ff ff ff 
ffff800000800560:	48 01 d8             	add    rax,rbx
ffff800000800563:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:53

    turn_on_int();
ffff800000800565:	49 89 df             	mov    r15,rbx
ffff800000800568:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080056d:	48 ba ca a2 ee ff ff 	movabs rdx,0xffffffffffeea2ca
ffff800000800574:	ff ff ff 
ffff800000800577:	48 01 da             	add    rdx,rbx
ffff80000080057a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:57


    //设置IA32_LSTAR,为syscall做设置
    wrmsr(0xc0000082, _syscall);
ffff80000080057c:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff800000800583:	ff ff ff 
ffff800000800586:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080058a:	48 89 c6             	mov    rsi,rax
ffff80000080058d:	b8 82 00 00 c0       	mov    eax,0xc0000082
ffff800000800592:	48 89 c7             	mov    rdi,rax
ffff800000800595:	49 89 df             	mov    r15,rbx
ffff800000800598:	48 b8 97 33 ee ff ff 	movabs rax,0xffffffffffee3397
ffff80000080059f:	ff ff ff 
ffff8000008005a2:	48 01 d8             	add    rax,rbx
ffff8000008005a5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:59
    //设置IA32_FMASK,为syscall做设置
    wrmsr(0xc0000084, -1);
ffff8000008005a7:	48 c7 c6 ff ff ff ff 	mov    rsi,0xffffffffffffffff
ffff8000008005ae:	b8 84 00 00 c0       	mov    eax,0xc0000084
ffff8000008005b3:	48 89 c7             	mov    rdi,rax
ffff8000008005b6:	49 89 df             	mov    r15,rbx
ffff8000008005b9:	48 b8 97 33 ee ff ff 	movabs rax,0xffffffffffee3397
ffff8000008005c0:	ff ff ff 
ffff8000008005c3:	48 01 d8             	add    rax,rbx
ffff8000008005c6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:60
}
ffff8000008005c8:	90                   	nop
ffff8000008005c9:	48 83 c4 10          	add    rsp,0x10
ffff8000008005cd:	5b                   	pop    rbx
ffff8000008005ce:	41 5f                	pop    r15
ffff8000008005d0:	5d                   	pop    rbp
ffff8000008005d1:	c3                   	ret    

ffff8000008005d2 <set_gate>:
set_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:62
void set_gate(u8 index,addr_t offset,u16 selector,u16 attr)
{
ffff8000008005d2:	f3 0f 1e fa          	endbr64 
ffff8000008005d6:	55                   	push   rbp
ffff8000008005d7:	48 89 e5             	mov    rbp,rsp
ffff8000008005da:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008005da <set_gate+0x8>
ffff8000008005e1:	49 bb f6 d4 11 00 00 	movabs r11,0x11d4f6
ffff8000008005e8:	00 00 00 
ffff8000008005eb:	4c 01 d8             	add    rax,r11
ffff8000008005ee:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008005f2:	89 d6                	mov    esi,edx
ffff8000008005f4:	89 ca                	mov    edx,ecx
ffff8000008005f6:	89 f9                	mov    ecx,edi
ffff8000008005f8:	88 4d fc             	mov    BYTE PTR [rbp-0x4],cl
ffff8000008005fb:	89 f1                	mov    ecx,esi
ffff8000008005fd:	66 89 4d f8          	mov    WORD PTR [rbp-0x8],cx
ffff800000800601:	66 89 55 ec          	mov    WORD PTR [rbp-0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:69
    /* idt[index].offset_low=offset&0xffffu;
    idt[index].offset_high=(offset>>16)&0xffffu;
    idt[index].attr=attr;
    idt[index].selector=selector; */
#else
    offset|=KNL_BASE;//中断必须在内核空间
ffff800000800605:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff80000080060c:	80 ff ff 
ffff80000080060f:	48 09 55 f0          	or     QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:70
    idt[index].offset_low=offset&0xffff;
ffff800000800613:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff80000080061a:	ff ff ff 
ffff80000080061d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800621:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000800624:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800628:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080062c:	48 01 ca             	add    rdx,rcx
ffff80000080062f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000800633:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:71
    idt[index].offset_mid=(offset>>16)&0xffff;
ffff800000800636:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080063a:	48 89 d1             	mov    rcx,rdx
ffff80000080063d:	48 c1 e9 10          	shr    rcx,0x10
ffff800000800641:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff800000800648:	ff ff ff 
ffff80000080064b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080064f:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000800652:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800656:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080065a:	48 01 f2             	add    rdx,rsi
ffff80000080065d:	66 89 4a 06          	mov    WORD PTR [rdx+0x6],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:72
    idt[index].offset_high=(offset>>32);//0x0000ffff;
ffff800000800661:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000800665:	48 89 d1             	mov    rcx,rdx
ffff800000800668:	48 c1 e9 20          	shr    rcx,0x20
ffff80000080066c:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff800000800673:	ff ff ff 
ffff800000800676:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080067a:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080067d:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800681:	48 c1 e2 04          	shl    rdx,0x4
ffff800000800685:	48 01 f2             	add    rdx,rsi
ffff800000800688:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:73
    idt[index].attr=attr|1;//1是ist索引
ffff80000080068b:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff800000800692:	ff ff ff 
ffff800000800695:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800699:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080069c:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff8000008006a0:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008006a4:	48 01 ca             	add    rdx,rcx
ffff8000008006a7:	0f b7 4d ec          	movzx  ecx,WORD PTR [rbp-0x14]
ffff8000008006ab:	83 c9 01             	or     ecx,0x1
ffff8000008006ae:	66 89 4a 04          	mov    WORD PTR [rdx+0x4],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:74
    idt[index].selector=selector;
ffff8000008006b2:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff8000008006b9:	ff ff ff 
ffff8000008006bc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008006c0:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008006c3:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff8000008006c7:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008006cb:	48 01 d1             	add    rcx,rdx
ffff8000008006ce:	0f b7 55 f8          	movzx  edx,WORD PTR [rbp-0x8]
ffff8000008006d2:	66 89 51 02          	mov    WORD PTR [rcx+0x2],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:75
    idt[index].rsvd=0;
ffff8000008006d6:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff8000008006dd:	ff ff ff 
ffff8000008006e0:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008006e4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008006e7:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
ffff8000008006eb:	48 c1 e0 04          	shl    rax,0x4
ffff8000008006ef:	48 01 d0             	add    rax,rdx
ffff8000008006f2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:77
#endif
}
ffff8000008006f9:	90                   	nop
ffff8000008006fa:	5d                   	pop    rbp
ffff8000008006fb:	c3                   	ret    

ffff8000008006fc <divide_err>:
divide_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:79

void divide_err(){
ffff8000008006fc:	f3 0f 1e fa          	endbr64 
ffff800000800700:	55                   	push   rbp
ffff800000800701:	48 89 e5             	mov    rbp,rsp
ffff800000800704:	41 57                	push   r15
ffff800000800706:	48 83 ec 08          	sub    rsp,0x8
ffff80000080070a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080070a <divide_err+0xe>
ffff800000800711:	49 bb c6 d3 11 00 00 	movabs r11,0x11d3c6
ffff800000800718:	00 00 00 
ffff80000080071b:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:80
    asm("cli");
ffff80000080071e:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:82
    //puts("divide err");
    eoi();
ffff80000080071f:	49 89 d7             	mov    r15,rdx
ffff800000800722:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800727:	48 b9 be a2 ee ff ff 	movabs rcx,0xffffffffffeea2be
ffff80000080072e:	ff ff ff 
ffff800000800731:	48 01 d1             	add    rcx,rdx
ffff800000800734:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:83
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800736:	fb                   	sti    
ffff800000800737:	c9                   	leave  
ffff800000800738:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:84
}
ffff80000080073a:	90                   	nop
ffff80000080073b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080073f:	c9                   	leave  
ffff800000800740:	c3                   	ret    

ffff800000800741 <debug>:
debug():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:86

void debug(){
ffff800000800741:	f3 0f 1e fa          	endbr64 
ffff800000800745:	55                   	push   rbp
ffff800000800746:	48 89 e5             	mov    rbp,rsp
ffff800000800749:	41 57                	push   r15
ffff80000080074b:	48 83 ec 08          	sub    rsp,0x8
ffff80000080074f:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080074f <debug+0xe>
ffff800000800756:	49 bb 81 d3 11 00 00 	movabs r11,0x11d381
ffff80000080075d:	00 00 00 
ffff800000800760:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:87
    asm("cli");
ffff800000800763:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:89
    //puts("debug");
    eoi();
ffff800000800764:	49 89 d7             	mov    r15,rdx
ffff800000800767:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080076c:	48 b9 be a2 ee ff ff 	movabs rcx,0xffffffffffeea2be
ffff800000800773:	ff ff ff 
ffff800000800776:	48 01 d1             	add    rcx,rdx
ffff800000800779:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:90
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080077b:	fb                   	sti    
ffff80000080077c:	c9                   	leave  
ffff80000080077d:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:91
}
ffff80000080077f:	90                   	nop
ffff800000800780:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800784:	c9                   	leave  
ffff800000800785:	c3                   	ret    

ffff800000800786 <default_int_proc>:
default_int_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:92
void default_int_proc(){
ffff800000800786:	f3 0f 1e fa          	endbr64 
ffff80000080078a:	55                   	push   rbp
ffff80000080078b:	48 89 e5             	mov    rbp,rsp
ffff80000080078e:	41 57                	push   r15
ffff800000800790:	48 83 ec 08          	sub    rsp,0x8
ffff800000800794:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800794 <default_int_proc+0xe>
ffff80000080079b:	49 bb 3c d3 11 00 00 	movabs r11,0x11d33c
ffff8000008007a2:	00 00 00 
ffff8000008007a5:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:93
    asm("cli");
ffff8000008007a8:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:95
    //puts("default_int_proc");
    eoi();
ffff8000008007a9:	49 89 d7             	mov    r15,rdx
ffff8000008007ac:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008007b1:	48 b9 be a2 ee ff ff 	movabs rcx,0xffffffffffeea2be
ffff8000008007b8:	ff ff ff 
ffff8000008007bb:	48 01 d1             	add    rcx,rdx
ffff8000008007be:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:96
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff8000008007c0:	fb                   	sti    
ffff8000008007c1:	c9                   	leave  
ffff8000008007c2:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:97
}
ffff8000008007c4:	90                   	nop
ffff8000008007c5:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008007c9:	c9                   	leave  
ffff8000008007ca:	c3                   	ret    

ffff8000008007cb <breakpoint>:
breakpoint():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:98
void breakpoint(){
ffff8000008007cb:	f3 0f 1e fa          	endbr64 
ffff8000008007cf:	55                   	push   rbp
ffff8000008007d0:	48 89 e5             	mov    rbp,rsp
ffff8000008007d3:	41 57                	push   r15
ffff8000008007d5:	48 83 ec 08          	sub    rsp,0x8
ffff8000008007d9:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008007d9 <breakpoint+0xe>
ffff8000008007e0:	49 bb f7 d2 11 00 00 	movabs r11,0x11d2f7
ffff8000008007e7:	00 00 00 
ffff8000008007ea:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:99
    asm("cli");
ffff8000008007ed:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:101
    //puts("breakpoint");
    eoi();
ffff8000008007ee:	49 89 d7             	mov    r15,rdx
ffff8000008007f1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008007f6:	48 b9 be a2 ee ff ff 	movabs rcx,0xffffffffffeea2be
ffff8000008007fd:	ff ff ff 
ffff800000800800:	48 01 d1             	add    rcx,rdx
ffff800000800803:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:102
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800805:	fb                   	sti    
ffff800000800806:	c9                   	leave  
ffff800000800807:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:103
}
ffff800000800809:	90                   	nop
ffff80000080080a:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080080e:	c9                   	leave  
ffff80000080080f:	c3                   	ret    

ffff800000800810 <overflow>:
overflow():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:104
void overflow(){
ffff800000800810:	f3 0f 1e fa          	endbr64 
ffff800000800814:	55                   	push   rbp
ffff800000800815:	48 89 e5             	mov    rbp,rsp
ffff800000800818:	41 57                	push   r15
ffff80000080081a:	48 83 ec 08          	sub    rsp,0x8
ffff80000080081e:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080081e <overflow+0xe>
ffff800000800825:	49 bb b2 d2 11 00 00 	movabs r11,0x11d2b2
ffff80000080082c:	00 00 00 
ffff80000080082f:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:105
    asm("cli");
ffff800000800832:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:107
    //puts("overflow");
    eoi();
ffff800000800833:	49 89 d7             	mov    r15,rdx
ffff800000800836:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080083b:	48 b9 be a2 ee ff ff 	movabs rcx,0xffffffffffeea2be
ffff800000800842:	ff ff ff 
ffff800000800845:	48 01 d1             	add    rcx,rdx
ffff800000800848:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:108
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080084a:	fb                   	sti    
ffff80000080084b:	c9                   	leave  
ffff80000080084c:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:109
}
ffff80000080084e:	90                   	nop
ffff80000080084f:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800853:	c9                   	leave  
ffff800000800854:	c3                   	ret    

ffff800000800855 <bounds>:
bounds():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:110
void bounds(){
ffff800000800855:	f3 0f 1e fa          	endbr64 
ffff800000800859:	55                   	push   rbp
ffff80000080085a:	48 89 e5             	mov    rbp,rsp
ffff80000080085d:	41 57                	push   r15
ffff80000080085f:	48 83 ec 08          	sub    rsp,0x8
ffff800000800863:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800863 <bounds+0xe>
ffff80000080086a:	49 bb 6d d2 11 00 00 	movabs r11,0x11d26d
ffff800000800871:	00 00 00 
ffff800000800874:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:111
    asm("cli");
ffff800000800877:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:113
    //puts("bounds");
    eoi();
ffff800000800878:	49 89 d7             	mov    r15,rdx
ffff80000080087b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800880:	48 b9 be a2 ee ff ff 	movabs rcx,0xffffffffffeea2be
ffff800000800887:	ff ff ff 
ffff80000080088a:	48 01 d1             	add    rcx,rdx
ffff80000080088d:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:114
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080088f:	fb                   	sti    
ffff800000800890:	c9                   	leave  
ffff800000800891:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:115
}
ffff800000800893:	90                   	nop
ffff800000800894:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800898:	c9                   	leave  
ffff800000800899:	c3                   	ret    

ffff80000080089a <undefined_operator>:
undefined_operator():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:116
void undefined_operator(){
ffff80000080089a:	f3 0f 1e fa          	endbr64 
ffff80000080089e:	55                   	push   rbp
ffff80000080089f:	48 89 e5             	mov    rbp,rsp
ffff8000008008a2:	41 57                	push   r15
ffff8000008008a4:	53                   	push   rbx
ffff8000008008a5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008008a5 <undefined_operator+0xb>
ffff8000008008ac:	49 bb 2b d2 11 00 00 	movabs r11,0x11d22b
ffff8000008008b3:	00 00 00 
ffff8000008008b6:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:118
    //puts("undef operator");
    eoi();
ffff8000008008b9:	49 89 df             	mov    r15,rbx
ffff8000008008bc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008008c1:	48 ba be a2 ee ff ff 	movabs rdx,0xffffffffffeea2be
ffff8000008008c8:	ff ff ff 
ffff8000008008cb:	48 01 da             	add    rdx,rbx
ffff8000008008ce:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:119
    report_back_trace_of_err();
ffff8000008008d0:	49 89 df             	mov    r15,rbx
ffff8000008008d3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008008d8:	48 ba ee a2 ee ff ff 	movabs rdx,0xffffffffffeea2ee
ffff8000008008df:	ff ff ff 
ffff8000008008e2:	48 01 da             	add    rdx,rbx
ffff8000008008e5:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:120
    __asm__ volatile ("jmp .\r\n leave \r\n iretq");
ffff8000008008e7:	eb fe                	jmp    ffff8000008008e7 <undefined_operator+0x4d>
ffff8000008008e9:	c9                   	leave  
ffff8000008008ea:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:121
}
ffff8000008008ec:	90                   	nop
ffff8000008008ed:	5b                   	pop    rbx
ffff8000008008ee:	41 5f                	pop    r15
ffff8000008008f0:	5d                   	pop    rbp
ffff8000008008f1:	c3                   	ret    

ffff8000008008f2 <coprocessor_notexist>:
coprocessor_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:122
void coprocessor_notexist(){
ffff8000008008f2:	f3 0f 1e fa          	endbr64 
ffff8000008008f6:	55                   	push   rbp
ffff8000008008f7:	48 89 e5             	mov    rbp,rsp
ffff8000008008fa:	41 57                	push   r15
ffff8000008008fc:	48 83 ec 08          	sub    rsp,0x8
ffff800000800900:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800900 <coprocessor_notexist+0xe>
ffff800000800907:	49 bb d0 d1 11 00 00 	movabs r11,0x11d1d0
ffff80000080090e:	00 00 00 
ffff800000800911:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:123
    asm("cli");
ffff800000800914:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:125
    //puts("coprocessor doesnt exist");
    eoi();
ffff800000800915:	49 89 d7             	mov    r15,rdx
ffff800000800918:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080091d:	48 b9 be a2 ee ff ff 	movabs rcx,0xffffffffffeea2be
ffff800000800924:	ff ff ff 
ffff800000800927:	48 01 d1             	add    rcx,rdx
ffff80000080092a:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:126
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080092c:	fb                   	sti    
ffff80000080092d:	c9                   	leave  
ffff80000080092e:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:127
}
ffff800000800930:	90                   	nop
ffff800000800931:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800935:	c9                   	leave  
ffff800000800936:	c3                   	ret    

ffff800000800937 <double_ints>:
double_ints():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:128
void double_ints(){
ffff800000800937:	f3 0f 1e fa          	endbr64 
ffff80000080093b:	55                   	push   rbp
ffff80000080093c:	48 89 e5             	mov    rbp,rsp
ffff80000080093f:	41 57                	push   r15
ffff800000800941:	48 83 ec 08          	sub    rsp,0x8
ffff800000800945:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800945 <double_ints+0xe>
ffff80000080094c:	49 bb 8b d1 11 00 00 	movabs r11,0x11d18b
ffff800000800953:	00 00 00 
ffff800000800956:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:129
    asm("cli");
ffff800000800959:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:131
    //puts("double interrupts");
    eoi();
ffff80000080095a:	49 89 d7             	mov    r15,rdx
ffff80000080095d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800962:	48 b9 be a2 ee ff ff 	movabs rcx,0xffffffffffeea2be
ffff800000800969:	ff ff ff 
ffff80000080096c:	48 01 d1             	add    rcx,rdx
ffff80000080096f:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:132
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800971:	fb                   	sti    
ffff800000800972:	c9                   	leave  
ffff800000800973:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:133
}
ffff800000800975:	90                   	nop
ffff800000800976:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080097a:	c9                   	leave  
ffff80000080097b:	c3                   	ret    

ffff80000080097c <coprocessor_seg_overbound>:
coprocessor_seg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:134
void coprocessor_seg_overbound(){
ffff80000080097c:	f3 0f 1e fa          	endbr64 
ffff800000800980:	55                   	push   rbp
ffff800000800981:	48 89 e5             	mov    rbp,rsp
ffff800000800984:	41 57                	push   r15
ffff800000800986:	48 83 ec 08          	sub    rsp,0x8
ffff80000080098a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080098a <coprocessor_seg_overbound+0xe>
ffff800000800991:	49 bb 46 d1 11 00 00 	movabs r11,0x11d146
ffff800000800998:	00 00 00 
ffff80000080099b:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:136
    //puts("coprocessfor seg overdound");
    eoi();
ffff80000080099e:	49 89 d7             	mov    r15,rdx
ffff8000008009a1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008009a6:	48 b9 be a2 ee ff ff 	movabs rcx,0xffffffffffeea2be
ffff8000008009ad:	ff ff ff 
ffff8000008009b0:	48 01 d1             	add    rcx,rdx
ffff8000008009b3:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:137
    __asm__ volatile ("leave \r\n iretq");
ffff8000008009b5:	c9                   	leave  
ffff8000008009b6:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:138
}
ffff8000008009b8:	90                   	nop
ffff8000008009b9:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008009bd:	c9                   	leave  
ffff8000008009be:	c3                   	ret    

ffff8000008009bf <invalid_tss>:
invalid_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:139
void invalid_tss(){
ffff8000008009bf:	f3 0f 1e fa          	endbr64 
ffff8000008009c3:	55                   	push   rbp
ffff8000008009c4:	48 89 e5             	mov    rbp,rsp
ffff8000008009c7:	41 57                	push   r15
ffff8000008009c9:	48 83 ec 08          	sub    rsp,0x8
ffff8000008009cd:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008009cd <invalid_tss+0xe>
ffff8000008009d4:	49 bb 03 d1 11 00 00 	movabs r11,0x11d103
ffff8000008009db:	00 00 00 
ffff8000008009de:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:140
    asm("cli");
ffff8000008009e1:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:142
    //puts("invalid tss");
    eoi();
ffff8000008009e2:	49 89 d7             	mov    r15,rdx
ffff8000008009e5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008009ea:	48 b9 be a2 ee ff ff 	movabs rcx,0xffffffffffeea2be
ffff8000008009f1:	ff ff ff 
ffff8000008009f4:	48 01 d1             	add    rcx,rdx
ffff8000008009f7:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:143
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff8000008009f9:	fb                   	sti    
ffff8000008009fa:	c9                   	leave  
ffff8000008009fb:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:144
}
ffff8000008009fd:	90                   	nop
ffff8000008009fe:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a02:	c9                   	leave  
ffff800000800a03:	c3                   	ret    

ffff800000800a04 <segment_notexist>:
segment_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:145
void segment_notexist(){
ffff800000800a04:	f3 0f 1e fa          	endbr64 
ffff800000800a08:	55                   	push   rbp
ffff800000800a09:	48 89 e5             	mov    rbp,rsp
ffff800000800a0c:	41 57                	push   r15
ffff800000800a0e:	48 83 ec 08          	sub    rsp,0x8
ffff800000800a12:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a12 <segment_notexist+0xe>
ffff800000800a19:	49 bb be d0 11 00 00 	movabs r11,0x11d0be
ffff800000800a20:	00 00 00 
ffff800000800a23:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:146
    asm("cli");
ffff800000800a26:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:148
    //puts("seg nonexistent");
    eoi();
ffff800000800a27:	49 89 d7             	mov    r15,rdx
ffff800000800a2a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a2f:	48 b9 be a2 ee ff ff 	movabs rcx,0xffffffffffeea2be
ffff800000800a36:	ff ff ff 
ffff800000800a39:	48 01 d1             	add    rcx,rdx
ffff800000800a3c:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:149
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800a3e:	fb                   	sti    
ffff800000800a3f:	c9                   	leave  
ffff800000800a40:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:150
}
ffff800000800a42:	90                   	nop
ffff800000800a43:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a47:	c9                   	leave  
ffff800000800a48:	c3                   	ret    

ffff800000800a49 <stackseg_overbound>:
stackseg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:151
void stackseg_overbound(){
ffff800000800a49:	f3 0f 1e fa          	endbr64 
ffff800000800a4d:	55                   	push   rbp
ffff800000800a4e:	48 89 e5             	mov    rbp,rsp
ffff800000800a51:	41 57                	push   r15
ffff800000800a53:	48 83 ec 08          	sub    rsp,0x8
ffff800000800a57:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a57 <stackseg_overbound+0xe>
ffff800000800a5e:	49 bb 79 d0 11 00 00 	movabs r11,0x11d079
ffff800000800a65:	00 00 00 
ffff800000800a68:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:152
    asm("cli");
ffff800000800a6b:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:154
    //puts("stack seg overbound");
    eoi();
ffff800000800a6c:	49 89 d7             	mov    r15,rdx
ffff800000800a6f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a74:	48 b9 be a2 ee ff ff 	movabs rcx,0xffffffffffeea2be
ffff800000800a7b:	ff ff ff 
ffff800000800a7e:	48 01 d1             	add    rcx,rdx
ffff800000800a81:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:155
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800a83:	fb                   	sti    
ffff800000800a84:	c9                   	leave  
ffff800000800a85:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:156
}
ffff800000800a87:	90                   	nop
ffff800000800a88:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a8c:	c9                   	leave  
ffff800000800a8d:	c3                   	ret    

ffff800000800a8e <general_protect>:
general_protect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:157
void general_protect(){
ffff800000800a8e:	f3 0f 1e fa          	endbr64 
ffff800000800a92:	55                   	push   rbp
ffff800000800a93:	48 89 e5             	mov    rbp,rsp
ffff800000800a96:	41 57                	push   r15
ffff800000800a98:	48 83 ec 18          	sub    rsp,0x18
ffff800000800a9c:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a9c <general_protect+0xe>
ffff800000800aa3:	49 bb 34 d0 11 00 00 	movabs r11,0x11d034
ffff800000800aaa:	00 00 00 
ffff800000800aad:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:159
    //print("general protect.");
    int err_code=0;
ffff800000800ab0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:177
    //杀死问题进程
    del_proc(cur_proc);
    printf("killed the problem process.\n");
	printf("shell:>");
    switch_proc_tss(0); */
    eoi();
ffff800000800ab7:	49 89 d7             	mov    r15,rdx
ffff800000800aba:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800abf:	48 b9 be a2 ee ff ff 	movabs rcx,0xffffffffffeea2be
ffff800000800ac6:	ff ff ff 
ffff800000800ac9:	48 01 d1             	add    rcx,rdx
ffff800000800acc:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:178
    __asm__ volatile ("leave\r\n add $8,%rsp \r\n iretq");
ffff800000800ace:	c9                   	leave  
ffff800000800acf:	48 83 c4 08          	add    rsp,0x8
ffff800000800ad3:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:179
}
ffff800000800ad5:	90                   	nop
ffff800000800ad6:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800ada:	c9                   	leave  
ffff800000800adb:	c3                   	ret    

ffff800000800adc <coprocessor_err>:
coprocessor_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:181

void coprocessor_err(){
ffff800000800adc:	f3 0f 1e fa          	endbr64 
ffff800000800ae0:	55                   	push   rbp
ffff800000800ae1:	48 89 e5             	mov    rbp,rsp
ffff800000800ae4:	41 57                	push   r15
ffff800000800ae6:	48 83 ec 08          	sub    rsp,0x8
ffff800000800aea:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800aea <coprocessor_err+0xe>
ffff800000800af1:	49 bb e6 cf 11 00 00 	movabs r11,0x11cfe6
ffff800000800af8:	00 00 00 
ffff800000800afb:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:182
    asm("cli");
ffff800000800afe:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:184
    //puts("coprocessor err");
    eoi();
ffff800000800aff:	49 89 d7             	mov    r15,rdx
ffff800000800b02:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800b07:	48 b9 be a2 ee ff ff 	movabs rcx,0xffffffffffeea2be
ffff800000800b0e:	ff ff ff 
ffff800000800b11:	48 01 d1             	add    rcx,rdx
ffff800000800b14:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:185
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800b16:	fb                   	sti    
ffff800000800b17:	c9                   	leave  
ffff800000800b18:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:186
}
ffff800000800b1a:	90                   	nop
ffff800000800b1b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800b1f:	c9                   	leave  
ffff800000800b20:	c3                   	ret    

ffff800000800b21 <syscall>:
syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:205

xchg rcx to r10

*/
int syscall(long a, long b, long c, long d, long e, long f)
{
ffff800000800b21:	f3 0f 1e fa          	endbr64 
ffff800000800b25:	55                   	push   rbp
ffff800000800b26:	48 89 e5             	mov    rbp,rsp
ffff800000800b29:	41 57                	push   r15
ffff800000800b2b:	53                   	push   rbx
ffff800000800b2c:	48 83 ec 40          	sub    rsp,0x40
ffff800000800b30:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000800b30 <syscall+0xf>
ffff800000800b37:	49 bb a0 cf 11 00 00 	movabs r11,0x11cfa0
ffff800000800b3e:	00 00 00 
ffff800000800b41:	4c 01 db             	add    rbx,r11
ffff800000800b44:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000800b48:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff800000800b4c:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff800000800b50:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffff800000800b54:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
ffff800000800b58:	4c 89 4d b0          	mov    QWORD PTR [rbp-0x50],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:207
    unsigned long num;
    asm volatile("":"=a"(num));//这样rax中存的参数就到这了
ffff800000800b5c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:208
    switch (num)
ffff800000800b60:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800b64:	48 83 e8 05          	sub    rax,0x5
ffff800000800b68:	48 83 f8 5f          	cmp    rax,0x5f
ffff800000800b6c:	0f 87 ec 02 00 00    	ja     ffff800000800e5e <syscall+0x33d>
ffff800000800b72:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000800b79:	00 
ffff800000800b7a:	48 8d 05 3f a1 11 00 	lea    rax,[rip+0x11a13f]        # ffff80000091acc0 <filesystem+0x20>
ffff800000800b81:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000800b85:	48 8d 15 34 a1 11 00 	lea    rdx,[rip+0x11a134]        # ffff80000091acc0 <filesystem+0x20>
ffff800000800b8c:	48 01 d0             	add    rax,rdx
ffff800000800b8f:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:215
        // case 0:return reg_device(a);
        // case 1:return dispose_device(a);
        // case 2:return reg_driver(a);
        // case 3:return dispose_driver(a);
        // case 4:return call_drv_func(a,b,c);
        case 5:return req_page_at(a,b);
ffff800000800b92:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800b96:	89 c2                	mov    edx,eax
ffff800000800b98:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800b9c:	89 d6                	mov    esi,edx
ffff800000800b9e:	48 89 c7             	mov    rdi,rax
ffff800000800ba1:	49 89 df             	mov    r15,rbx
ffff800000800ba4:	48 b8 db 53 ee ff ff 	movabs rax,0xffffffffffee53db
ffff800000800bab:	ff ff ff 
ffff800000800bae:	48 01 d8             	add    rax,rbx
ffff800000800bb1:	ff d0                	call   rax
ffff800000800bb3:	e9 a6 02 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:216
        case 6:return free_page(a);
ffff800000800bb8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800bbc:	48 89 c7             	mov    rdi,rax
ffff800000800bbf:	49 89 df             	mov    r15,rbx
ffff800000800bc2:	48 b8 cf 50 ee ff ff 	movabs rax,0xffffffffffee50cf
ffff800000800bc9:	ff ff ff 
ffff800000800bcc:	48 01 d8             	add    rax,rbx
ffff800000800bcf:	ff d0                	call   rax
ffff800000800bd1:	e9 88 02 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:217
        case 7:return reg_proc(a, b, c);
ffff800000800bd6:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800bda:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff800000800bde:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800be2:	48 89 ce             	mov    rsi,rcx
ffff800000800be5:	48 89 c7             	mov    rdi,rax
ffff800000800be8:	49 89 df             	mov    r15,rbx
ffff800000800beb:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800bf0:	48 b9 81 80 ee ff ff 	movabs rcx,0xffffffffffee8081
ffff800000800bf7:	ff ff ff 
ffff800000800bfa:	48 01 d9             	add    rcx,rbx
ffff800000800bfd:	ff d1                	call   rcx
ffff800000800bff:	e9 5a 02 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:218
        case 8:del_proc(a);
ffff800000800c04:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c08:	89 c7                	mov    edi,eax
ffff800000800c0a:	49 89 df             	mov    r15,rbx
ffff800000800c0d:	48 b8 32 7d ee ff ff 	movabs rax,0xffffffffffee7d32
ffff800000800c14:	ff ff ff 
ffff800000800c17:	48 01 d8             	add    rax,rbx
ffff800000800c1a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:219
        case 10:chk_vm(a,b);
ffff800000800c1c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800c20:	89 c2                	mov    edx,eax
ffff800000800c22:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c26:	89 d6                	mov    esi,edx
ffff800000800c28:	89 c7                	mov    edi,eax
ffff800000800c2a:	49 89 df             	mov    r15,rbx
ffff800000800c2d:	48 b8 0d 55 ee ff ff 	movabs rax,0xffffffffffee550d
ffff800000800c34:	ff ff ff 
ffff800000800c37:	48 01 d8             	add    rax,rbx
ffff800000800c3a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:220
        case 11:return sys_open(a,b);
ffff800000800c3c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800c40:	89 c2                	mov    edx,eax
ffff800000800c42:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c46:	89 d6                	mov    esi,edx
ffff800000800c48:	48 89 c7             	mov    rdi,rax
ffff800000800c4b:	49 89 df             	mov    r15,rbx
ffff800000800c4e:	48 b8 e3 dc ee ff ff 	movabs rax,0xffffffffffeedce3
ffff800000800c55:	ff ff ff 
ffff800000800c58:	48 01 d8             	add    rax,rbx
ffff800000800c5b:	ff d0                	call   rax
ffff800000800c5d:	e9 fc 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:221
        case 12:return sys_close(a);
ffff800000800c62:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c66:	89 c7                	mov    edi,eax
ffff800000800c68:	49 89 df             	mov    r15,rbx
ffff800000800c6b:	48 b8 83 e3 ee ff ff 	movabs rax,0xffffffffffeee383
ffff800000800c72:	ff ff ff 
ffff800000800c75:	48 01 d8             	add    rax,rbx
ffff800000800c78:	ff d0                	call   rax
ffff800000800c7a:	e9 df 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:222
        case 13:return sys_read(a,b,c);
ffff800000800c7f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800c83:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800c87:	89 d1                	mov    ecx,edx
ffff800000800c89:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800c8d:	48 89 c6             	mov    rsi,rax
ffff800000800c90:	89 cf                	mov    edi,ecx
ffff800000800c92:	49 89 df             	mov    r15,rbx
ffff800000800c95:	48 b8 7a e4 ee ff ff 	movabs rax,0xffffffffffeee47a
ffff800000800c9c:	ff ff ff 
ffff800000800c9f:	48 01 d8             	add    rax,rbx
ffff800000800ca2:	ff d0                	call   rax
ffff800000800ca4:	e9 b5 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:223
        case 14:return sys_write(a,b,c);
ffff800000800ca9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800cad:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800cb1:	89 d1                	mov    ecx,edx
ffff800000800cb3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800cb7:	48 89 c6             	mov    rsi,rax
ffff800000800cba:	89 cf                	mov    edi,ecx
ffff800000800cbc:	49 89 df             	mov    r15,rbx
ffff800000800cbf:	48 b8 48 e5 ee ff ff 	movabs rax,0xffffffffffeee548
ffff800000800cc6:	ff ff ff 
ffff800000800cc9:	48 01 d8             	add    rax,rbx
ffff800000800ccc:	ff d0                	call   rax
ffff800000800cce:	e9 8b 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:224
        case 15:return sys_lseek(a,b,c);
ffff800000800cd3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800cd7:	89 c2                	mov    edx,eax
ffff800000800cd9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800cdd:	89 c1                	mov    ecx,eax
ffff800000800cdf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800ce3:	48 89 c6             	mov    rsi,rax
ffff800000800ce6:	89 cf                	mov    edi,ecx
ffff800000800ce8:	49 89 df             	mov    r15,rbx
ffff800000800ceb:	48 b8 16 e6 ee ff ff 	movabs rax,0xffffffffffeee616
ffff800000800cf2:	ff ff ff 
ffff800000800cf5:	48 01 d8             	add    rax,rbx
ffff800000800cf8:	ff d0                	call   rax
ffff800000800cfa:	e9 5f 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:228
        // case 16:return sys_tell(a);
        // case 17:return reg_vol(a,b,c);
        // case 18:return free_vol(a);
        case 19:return execute(a, NULL);
ffff800000800cff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d03:	be 00 00 00 00       	mov    esi,0x0
ffff800000800d08:	48 89 c7             	mov    rdi,rax
ffff800000800d0b:	49 89 df             	mov    r15,rbx
ffff800000800d0e:	48 b8 34 a6 ee ff ff 	movabs rax,0xffffffffffeea634
ffff800000800d15:	ff ff ff 
ffff800000800d18:	48 01 d8             	add    rax,rbx
ffff800000800d1b:	ff d0                	call   rax
ffff800000800d1d:	e9 3c 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:229
        case SYSCALL_EXIT:return sys_exit(a);
ffff800000800d22:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d26:	89 c7                	mov    edi,eax
ffff800000800d28:	49 89 df             	mov    r15,rbx
ffff800000800d2b:	48 b8 07 80 ee ff ff 	movabs rax,0xffffffffffee8007
ffff800000800d32:	ff ff ff 
ffff800000800d35:	48 01 d8             	add    rax,rbx
ffff800000800d38:	ff d0                	call   rax
ffff800000800d3a:	e9 1f 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:230
        case SYSCALL_CALL:return exec_call(a);
ffff800000800d3f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d43:	48 89 c7             	mov    rdi,rax
ffff800000800d46:	49 89 df             	mov    r15,rbx
ffff800000800d49:	48 b8 37 aa ee ff ff 	movabs rax,0xffffffffffeeaa37
ffff800000800d50:	ff ff ff 
ffff800000800d53:	48 01 d8             	add    rax,rbx
ffff800000800d56:	ff d0                	call   rax
ffff800000800d58:	e9 01 01 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:232
        // case SYSCALL_MKFIFO:return sys_mkfifo(a);
        case SYSCALL_MALLOC:return sys_malloc(a);
ffff800000800d5d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d61:	48 89 c7             	mov    rdi,rax
ffff800000800d64:	49 89 df             	mov    r15,rbx
ffff800000800d67:	48 b8 65 83 ee ff ff 	movabs rax,0xffffffffffee8365
ffff800000800d6e:	ff ff ff 
ffff800000800d71:	48 01 d8             	add    rax,rbx
ffff800000800d74:	ff d0                	call   rax
ffff800000800d76:	e9 e3 00 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:233
        case SYSCALL_FREE:return sys_free(a);
ffff800000800d7b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d7f:	89 c7                	mov    edi,eax
ffff800000800d81:	49 89 df             	mov    r15,rbx
ffff800000800d84:	48 b8 52 85 ee ff ff 	movabs rax,0xffffffffffee8552
ffff800000800d8b:	ff ff ff 
ffff800000800d8e:	48 01 d8             	add    rax,rbx
ffff800000800d91:	ff d0                	call   rax
ffff800000800d93:	e9 c6 00 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:234
        case SYSCALL_KB_READC:return sys_analyse_key();
ffff800000800d98:	49 89 df             	mov    r15,rbx
ffff800000800d9b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800da0:	48 ba 08 09 ef ff ff 	movabs rdx,0xffffffffffef0908
ffff800000800da7:	ff ff ff 
ffff800000800daa:	48 01 da             	add    rdx,rbx
ffff800000800dad:	ff d2                	call   rdx
ffff800000800daf:	0f be c0             	movsx  eax,al
ffff800000800db2:	e9 a7 00 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:236
        // case SYSCALL_FIND_DEV:return sys_find_dev(a);
        case SYSCALL_FORK:return sys_fork();
ffff800000800db7:	49 89 df             	mov    r15,rbx
ffff800000800dba:	48 b8 79 89 ee ff ff 	movabs rax,0xffffffffffee8979
ffff800000800dc1:	ff ff ff 
ffff800000800dc4:	48 01 d8             	add    rax,rbx
ffff800000800dc7:	ff d0                	call   rax
ffff800000800dc9:	e9 90 00 00 00       	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:237
        case SYSCALL_EXECVE:return sys_execve(a, b, c);
ffff800000800dce:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800dd2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800dd6:	89 c1                	mov    ecx,eax
ffff800000800dd8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800ddc:	89 ce                	mov    esi,ecx
ffff800000800dde:	48 89 c7             	mov    rdi,rax
ffff800000800de1:	49 89 df             	mov    r15,rbx
ffff800000800de4:	48 b8 28 a7 ee ff ff 	movabs rax,0xffffffffffeea728
ffff800000800deb:	ff ff ff 
ffff800000800dee:	48 01 d8             	add    rax,rbx
ffff800000800df1:	ff d0                	call   rax
ffff800000800df3:	eb 69                	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:239
        // case SYSCALL_OPERATE_DEV:return sys_operate_dev(a,b,c);
        case SYSCALL_WAIT:return sys_wait(a,b,c);
ffff800000800df5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800df9:	89 c6                	mov    esi,eax
ffff800000800dfb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800dff:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800e03:	89 d1                	mov    ecx,edx
ffff800000800e05:	89 f2                	mov    edx,esi
ffff800000800e07:	48 89 c6             	mov    rsi,rax
ffff800000800e0a:	89 cf                	mov    edi,ecx
ffff800000800e0c:	49 89 df             	mov    r15,rbx
ffff800000800e0f:	48 b8 5f e7 ee ff ff 	movabs rax,0xffffffffffeee75f
ffff800000800e16:	ff ff ff 
ffff800000800e19:	48 01 d8             	add    rax,rbx
ffff800000800e1c:	ff d0                	call   rax
ffff800000800e1e:	eb 3e                	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:240
        case SYSCALL_MMAP:return sys_mmap(a,b,c,d,e,f);
ffff800000800e20:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000800e24:	41 89 c0             	mov    r8d,eax
ffff800000800e27:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000800e2b:	89 c7                	mov    edi,eax
ffff800000800e2d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000800e31:	89 c1                	mov    ecx,eax
ffff800000800e33:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800e37:	89 c2                	mov    edx,eax
ffff800000800e39:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000800e3d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800e41:	45 89 c1             	mov    r9d,r8d
ffff800000800e44:	41 89 f8             	mov    r8d,edi
ffff800000800e47:	48 89 c7             	mov    rdi,rax
ffff800000800e4a:	49 89 df             	mov    r15,rbx
ffff800000800e4d:	48 b8 7a ed ee ff ff 	movabs rax,0xffffffffffeeed7a
ffff800000800e54:	ff ff ff 
ffff800000800e57:	48 01 d8             	add    rax,rbx
ffff800000800e5a:	ff d0                	call   rax
ffff800000800e5c:	eb 00                	jmp    ffff800000800e5e <syscall+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:246
    }
    // __asm__ volatile("mov %0,%%eax\r\n mov %1,%%ebx\r\n mov %2,%%ecx\r\n mov %3,%%edx\r\n mov %4,%%esi\r\n mov %5,%%edi"\
    // ::"m"(func),"m"(a),"m"(b),"m"(c),"m"(d),"m"(e));
    // __asm__ volatile("int $0x80\r\n leave\r\n ret");

}
ffff800000800e5e:	48 83 c4 40          	add    rsp,0x40
ffff800000800e62:	5b                   	pop    rbx
ffff800000800e63:	41 5f                	pop    r15
ffff800000800e65:	5d                   	pop    rbp
ffff800000800e66:	c3                   	ret    

ffff800000800e67 <wrmsr>:
wrmsr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:248
void wrmsr(unsigned long address,unsigned long value)
{
ffff800000800e67:	f3 0f 1e fa          	endbr64 
ffff800000800e6b:	55                   	push   rbp
ffff800000800e6c:	48 89 e5             	mov    rbp,rsp
ffff800000800e6f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000800e6f <wrmsr+0x8>
ffff800000800e76:	49 bb 61 cc 11 00 00 	movabs r11,0x11cc61
ffff800000800e7d:	00 00 00 
ffff800000800e80:	4c 01 d8             	add    rax,r11
ffff800000800e83:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000800e87:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:249
    __asm__ __volatile__	("wrmsr	\n\t"::"d"(value >> 32),"a"(value & 0xffffffff),"c"(address):"memory");
ffff800000800e8b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000800e8f:	48 c1 e8 20          	shr    rax,0x20
ffff800000800e93:	48 89 c2             	mov    rdx,rax
ffff800000800e96:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000800e9a:	89 c0                	mov    eax,eax
ffff800000800e9c:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff800000800ea0:	0f 30                	wrmsr  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:250
ffff800000800ea2:	90                   	nop
ffff800000800ea3:	5d                   	pop    rbp
ffff800000800ea4:	c3                   	ret    

ffff800000800ea5 <main>:
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:24
#include "ramdisk.h"
#include "ramfs.h"

int manage_proc_lock=1;
void main(unsigned int magic,void* addr)
{
ffff800000800ea5:	f3 0f 1e fa          	endbr64 
ffff800000800ea9:	55                   	push   rbp
ffff800000800eaa:	48 89 e5             	mov    rbp,rsp
ffff800000800ead:	41 57                	push   r15
ffff800000800eaf:	53                   	push   rbx
ffff800000800eb0:	48 81 ec 00 01 00 00 	sub    rsp,0x100
ffff800000800eb7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000800eb7 <main+0x12>
ffff800000800ebe:	49 bb 19 cc 11 00 00 	movabs r11,0x11cc19
ffff800000800ec5:	00 00 00 
ffff800000800ec8:	4c 01 db             	add    rbx,r11
ffff800000800ecb:	89 bd fc fe ff ff    	mov    DWORD PTR [rbp-0x104],edi
ffff800000800ed1:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:26

    struct multiboot_header* mbi=0ul;
ffff800000800ed8:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff800000800edf:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:27
    mbi=(struct multiboot_header*)addr;
ffff800000800ee0:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000800ee7:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:28
    init_logging();
ffff800000800eeb:	49 89 df             	mov    r15,rbx
ffff800000800eee:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800ef3:	48 ba 56 3a ee ff ff 	movabs rdx,0xffffffffffee3a56
ffff800000800efa:	ff ff ff 
ffff800000800efd:	48 01 da             	add    rdx,rbx
ffff800000800f00:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:38
    }
    //获取tags
    struct multiboot_tag *tag;

    //先初始化串口，保证输出最基本的调试信息
    init_com(PORT_COM1);
ffff800000800f02:	bf f8 03 00 00       	mov    edi,0x3f8
ffff800000800f07:	49 89 df             	mov    r15,rbx
ffff800000800f0a:	48 b8 f7 49 ef ff ff 	movabs rax,0xffffffffffef49f7
ffff800000800f11:	ff ff ff 
ffff800000800f14:	48 01 d8             	add    rax,rbx
ffff800000800f17:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:39
    comprintf("\rgamessis os loaded.\r\n");
ffff800000800f19:	48 b8 f0 d4 ff ff ff 	movabs rax,0xffffffffffffd4f0
ffff800000800f20:	ff ff ff 
ffff800000800f23:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000800f27:	48 89 c7             	mov    rdi,rax
ffff800000800f2a:	49 89 df             	mov    r15,rbx
ffff800000800f2d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800f32:	48 ba 23 4c ef ff ff 	movabs rdx,0xffffffffffef4c23
ffff800000800f39:	ff ff ff 
ffff800000800f3c:	48 01 da             	add    rdx,rbx
ffff800000800f3f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:41
	unsigned size;
    size = *(unsigned long*)addr;
ffff800000800f41:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000800f48:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000800f4b:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:43
//    //printf("Announced mbi size 0x%x\n", size);
	for (tag = (struct multiboot_tag *)(addr + 8);
ffff800000800f4e:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000800f55:	48 83 c0 08          	add    rax,0x8
ffff800000800f59:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff800000800f5d:	e9 93 02 00 00       	jmp    ffff8000008011f5 <main+0x350>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:48
		 tag->type != MULTIBOOT_TAG_TYPE_END;
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
	{
		//printf("Tag 0x%x, Size 0x%x\n", tag->type, tag->size);
		switch (tag->type)
ffff800000800f62:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800f66:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000800f68:	83 f8 08             	cmp    eax,0x8
ffff800000800f6b:	0f 87 71 02 00 00    	ja     ffff8000008011e2 <main+0x33d>
ffff800000800f71:	89 c0                	mov    eax,eax
ffff800000800f73:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000800f7a:	00 
ffff800000800f7b:	48 8d 05 9e a0 11 00 	lea    rax,[rip+0x11a09e]        # ffff80000091b020 <.LC4+0x11>
ffff800000800f82:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000800f86:	48 8d 15 93 a0 11 00 	lea    rdx,[rip+0x11a093]        # ffff80000091b020 <.LC4+0x11>
ffff800000800f8d:	48 01 d0             	add    rax,rdx
ffff800000800f90:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:66
			break;
		case MULTIBOOT_TAG_TYPE_BASIC_MEMINFO:
			//printf("mem_lower = %uKB, mem_upper = %uKB\n",
//				   ((struct multiboot_tag_basic_meminfo *)tag)->mem_lower,
//				   ((struct multiboot_tag_basic_meminfo *)tag)->mem_upper);
			set_high_mem_base(((struct multiboot_tag_basic_meminfo *)tag)->mem_lower);
ffff800000800f93:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800f97:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000800f9a:	89 c7                	mov    edi,eax
ffff800000800f9c:	49 89 df             	mov    r15,rbx
ffff800000800f9f:	48 b8 40 43 ee ff ff 	movabs rax,0xffffffffffee4340
ffff800000800fa6:	ff ff ff 
ffff800000800fa9:	48 01 d8             	add    rax,rbx
ffff800000800fac:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:67
			break;
ffff800000800fae:	e9 2f 02 00 00       	jmp    ffff8000008011e2 <main+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:80

			break;
		case MULTIBOOT_TAG_TYPE_MMAP:
		{
			//printf("mmap\n");
            for (multiboot_memory_map_t * mmap = ((struct multiboot_tag_mmap *)tag)->entries;
ffff800000800fb3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800fb7:	48 83 c0 10          	add    rax,0x10
ffff800000800fbb:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff800000800fbf:	eb 44                	jmp    ffff800000801005 <main+0x160>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:84
                    (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
                    mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
            {
                set_mem_area(mmap->addr,mmap->len,mmap->type);
ffff800000800fc1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000800fc5:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000800fc8:	89 c2                	mov    edx,eax
ffff800000800fca:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000800fce:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff800000800fd2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000800fd6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000800fd9:	48 89 ce             	mov    rsi,rcx
ffff800000800fdc:	48 89 c7             	mov    rdi,rax
ffff800000800fdf:	49 89 df             	mov    r15,rbx
ffff800000800fe2:	48 b8 75 43 ee ff ff 	movabs rax,0xffffffffffee4375
ffff800000800fe9:	ff ff ff 
ffff800000800fec:	48 01 d8             	add    rax,rbx
ffff800000800fef:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:82
                    mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
ffff800000800ff1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800ff5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000800ff8:	89 c2                	mov    edx,eax
ffff800000800ffa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000800ffe:	48 01 d0             	add    rax,rdx
ffff800000801001:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:81
                    (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
ffff800000801005:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801009:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080100c:	89 c2                	mov    edx,eax
ffff80000080100e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801012:	48 01 d0             	add    rax,rdx
ffff800000801015:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff800000801019:	72 a6                	jb     ffff800000800fc1 <main+0x11c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:88
            }

		}
		break;
ffff80000080101b:	e9 c2 01 00 00       	jmp    ffff8000008011e2 <main+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:93
		case MULTIBOOT_TAG_TYPE_FRAMEBUFFER:
		{
			multiboot_uint32_t color;
			unsigned i;
			struct multiboot_tag_framebuffer *tagfb = (struct multiboot_tag_framebuffer *)tag;
ffff800000801020:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801024:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:94
			void *fb = (void *) FRAMEBUFFER_ADDR;
ffff800000801028:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080102f:	80 ff ff 
ffff800000801032:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:95
			set_framebuffer(*tagfb);
ffff800000801036:	48 83 ec 08          	sub    rsp,0x8
ffff80000080103a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080103e:	ff 70 20             	push   QWORD PTR [rax+0x20]
ffff800000801041:	ff 70 18             	push   QWORD PTR [rax+0x18]
ffff800000801044:	ff 70 10             	push   QWORD PTR [rax+0x10]
ffff800000801047:	ff 70 08             	push   QWORD PTR [rax+0x8]
ffff80000080104a:	ff 30                	push   QWORD PTR [rax]
ffff80000080104c:	49 89 df             	mov    r15,rbx
ffff80000080104f:	48 b8 3a ca ee ff ff 	movabs rax,0xffffffffffeeca3a
ffff800000801056:	ff ff ff 
ffff800000801059:	48 01 d8             	add    rax,rbx
ffff80000080105c:	ff d0                	call   rax
ffff80000080105e:	48 83 c4 30          	add    rsp,0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:97

			switch (tagfb->common.framebuffer_type)
ffff800000801062:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801066:	0f b6 40 1d          	movzx  eax,BYTE PTR [rax+0x1d]
ffff80000080106a:	0f b6 c0             	movzx  eax,al
ffff80000080106d:	83 f8 02             	cmp    eax,0x2
ffff800000801070:	0f 84 5a 01 00 00    	je     ffff8000008011d0 <main+0x32b>
ffff800000801076:	83 f8 02             	cmp    eax,0x2
ffff800000801079:	0f 8f 5a 01 00 00    	jg     ffff8000008011d9 <main+0x334>
ffff80000080107f:	85 c0                	test   eax,eax
ffff800000801081:	74 0e                	je     ffff800000801091 <main+0x1ec>
ffff800000801083:	83 f8 01             	cmp    eax,0x1
ffff800000801086:	0f 84 15 01 00 00    	je     ffff8000008011a1 <main+0x2fc>
ffff80000080108c:	e9 48 01 00 00       	jmp    ffff8000008011d9 <main+0x334>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:104
			case MULTIBOOT_FRAMEBUFFER_TYPE_INDEXED:
			{
				unsigned best_distance, distance;
				struct multiboot_color *palette;

				palette = tagfb->framebuffer_palette;
ffff800000801091:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801095:	48 83 c0 22          	add    rax,0x22
ffff800000801099:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:106

				color = 0;
ffff80000080109d:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:107
				best_distance = 4 * 256 * 256;
ffff8000008010a4:	c7 45 d8 00 00 04 00 	mov    DWORD PTR [rbp-0x28],0x40000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109

				for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
ffff8000008010ab:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff8000008010b2:	e9 d4 00 00 00       	jmp    ffff80000080118b <main+0x2e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:111
				{
					distance = (0xff - palette[i].blue) * (0xff - palette[i].blue) + palette[i].red * palette[i].red + palette[i].green * palette[i].green;
ffff8000008010b7:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008010ba:	48 89 d0             	mov    rax,rdx
ffff8000008010bd:	48 01 c0             	add    rax,rax
ffff8000008010c0:	48 01 c2             	add    rdx,rax
ffff8000008010c3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008010c7:	48 01 d0             	add    rax,rdx
ffff8000008010ca:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffff8000008010ce:	0f b6 c0             	movzx  eax,al
ffff8000008010d1:	ba ff 00 00 00       	mov    edx,0xff
ffff8000008010d6:	89 d1                	mov    ecx,edx
ffff8000008010d8:	29 c1                	sub    ecx,eax
ffff8000008010da:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008010dd:	48 89 d0             	mov    rax,rdx
ffff8000008010e0:	48 01 c0             	add    rax,rax
ffff8000008010e3:	48 01 c2             	add    rdx,rax
ffff8000008010e6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008010ea:	48 01 d0             	add    rax,rdx
ffff8000008010ed:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffff8000008010f1:	0f b6 d0             	movzx  edx,al
ffff8000008010f4:	b8 ff 00 00 00       	mov    eax,0xff
ffff8000008010f9:	29 d0                	sub    eax,edx
ffff8000008010fb:	89 ce                	mov    esi,ecx
ffff8000008010fd:	0f af f0             	imul   esi,eax
ffff800000801100:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801103:	48 89 d0             	mov    rax,rdx
ffff800000801106:	48 01 c0             	add    rax,rax
ffff800000801109:	48 01 c2             	add    rdx,rax
ffff80000080110c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801110:	48 01 d0             	add    rax,rdx
ffff800000801113:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801116:	0f b6 c8             	movzx  ecx,al
ffff800000801119:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080111c:	48 89 d0             	mov    rax,rdx
ffff80000080111f:	48 01 c0             	add    rax,rax
ffff800000801122:	48 01 c2             	add    rdx,rax
ffff800000801125:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801129:	48 01 d0             	add    rax,rdx
ffff80000080112c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080112f:	0f b6 c0             	movzx  eax,al
ffff800000801132:	0f af c1             	imul   eax,ecx
ffff800000801135:	01 c6                	add    esi,eax
ffff800000801137:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080113a:	48 89 d0             	mov    rax,rdx
ffff80000080113d:	48 01 c0             	add    rax,rax
ffff800000801140:	48 01 c2             	add    rdx,rax
ffff800000801143:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801147:	48 01 d0             	add    rax,rdx
ffff80000080114a:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffff80000080114e:	0f b6 c8             	movzx  ecx,al
ffff800000801151:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801154:	48 89 d0             	mov    rax,rdx
ffff800000801157:	48 01 c0             	add    rax,rax
ffff80000080115a:	48 01 c2             	add    rdx,rax
ffff80000080115d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801161:	48 01 d0             	add    rax,rdx
ffff800000801164:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffff800000801168:	0f b6 c0             	movzx  eax,al
ffff80000080116b:	0f af c1             	imul   eax,ecx
ffff80000080116e:	01 f0                	add    eax,esi
ffff800000801170:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:112
					if (distance < best_distance)
ffff800000801173:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000801176:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000801179:	73 0c                	jae    ffff800000801187 <main+0x2e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:114
					{
						color = i;
ffff80000080117b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080117e:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:115
						best_distance = distance;
ffff800000801181:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000801184:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109 (discriminator 2)
				for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
ffff800000801187:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109 (discriminator 1)
ffff80000080118b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080118f:	0f b7 40 20          	movzx  eax,WORD PTR [rax+0x20]
ffff800000801193:	0f b7 c0             	movzx  eax,ax
ffff800000801196:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000801199:	0f 82 18 ff ff ff    	jb     ffff8000008010b7 <main+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:119
					}
				}
			}
			break;
ffff80000080119f:	eb 40                	jmp    ffff8000008011e1 <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:122

			case MULTIBOOT_FRAMEBUFFER_TYPE_RGB:
				color = ((1 << tagfb->framebuffer_blue_mask_size) - 1) << tagfb->framebuffer_blue_field_position;
ffff8000008011a1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008011a5:	0f b6 40 25          	movzx  eax,BYTE PTR [rax+0x25]
ffff8000008011a9:	0f b6 c0             	movzx  eax,al
ffff8000008011ac:	ba 01 00 00 00       	mov    edx,0x1
ffff8000008011b1:	89 c1                	mov    ecx,eax
ffff8000008011b3:	d3 e2                	shl    edx,cl
ffff8000008011b5:	89 d0                	mov    eax,edx
ffff8000008011b7:	8d 50 ff             	lea    edx,[rax-0x1]
ffff8000008011ba:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008011be:	0f b6 40 24          	movzx  eax,BYTE PTR [rax+0x24]
ffff8000008011c2:	0f b6 c0             	movzx  eax,al
ffff8000008011c5:	89 c1                	mov    ecx,eax
ffff8000008011c7:	d3 e2                	shl    edx,cl
ffff8000008011c9:	89 d0                	mov    eax,edx
ffff8000008011cb:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:123
				break;
ffff8000008011ce:	eb 11                	jmp    ffff8000008011e1 <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:126

			case MULTIBOOT_FRAMEBUFFER_TYPE_EGA_TEXT:
				color = '\\' | 0x0100;
ffff8000008011d0:	c7 45 b4 5c 01 00 00 	mov    DWORD PTR [rbp-0x4c],0x15c
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:127
				break;
ffff8000008011d7:	eb 08                	jmp    ffff8000008011e1 <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:130

			default:
				color = 0xffffffff;
ffff8000008011d9:	c7 45 b4 ff ff ff ff 	mov    DWORD PTR [rbp-0x4c],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:131
				break;
ffff8000008011e0:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:134 (discriminator 1)
			}

			break;
ffff8000008011e1:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:45
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
ffff8000008011e2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008011e6:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008011e9:	83 c0 07             	add    eax,0x7
ffff8000008011ec:	89 c0                	mov    eax,eax
ffff8000008011ee:	83 e0 f8             	and    eax,0xfffffff8
ffff8000008011f1:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:44
		 tag->type != MULTIBOOT_TAG_TYPE_END;
ffff8000008011f5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008011f9:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008011fb:	85 c0                	test   eax,eax
ffff8000008011fd:	0f 85 5f fd ff ff    	jne    ffff800000800f62 <main+0xbd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:138
		}
		}
	}
	tag = (struct multiboot_tag *)((multiboot_uint8_t *)tag + ((tag->size + 7) & ~7));
ffff800000801203:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801207:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080120a:	83 c0 07             	add    eax,0x7
ffff80000080120d:	89 c0                	mov    eax,eax
ffff80000080120f:	83 e0 f8             	and    eax,0xfffffff8
ffff800000801212:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:139
    init_memory();
ffff800000801216:	49 89 df             	mov    r15,rbx
ffff800000801219:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080121e:	48 ba c5 4a ee ff ff 	movabs rdx,0xffffffffffee4ac5
ffff800000801225:	ff ff ff 
ffff800000801228:	48 01 da             	add    rdx,rbx
ffff80000080122b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:140
    init_framebuffer();
ffff80000080122d:	49 89 df             	mov    r15,rbx
ffff800000801230:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801235:	48 ba 54 c7 ee ff ff 	movabs rdx,0xffffffffffeec754
ffff80000080123c:	ff ff ff 
ffff80000080123f:	48 01 da             	add    rdx,rbx
ffff800000801242:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:142
	//printf("Total mbi size 0x%x\n", (unsigned)tag - addr);
	char disk_count=*(char*)0x475;
ffff800000801244:	b8 75 04 00 00       	mov    eax,0x475
ffff800000801249:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080124c:	88 45 cb             	mov    BYTE PTR [rbp-0x35],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:144
	//printf("disk count:%d\n",disk_count);
    init_font();
ffff80000080124f:	49 89 df             	mov    r15,rbx
ffff800000801252:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801257:	48 ba 85 c8 ee ff ff 	movabs rdx,0xffffffffffeec885
ffff80000080125e:	ff ff ff 
ffff800000801261:	48 01 da             	add    rdx,rbx
ffff800000801264:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:147
    //初始化区域
    //fill_rect(0,0,100,100,255);
    print("gamessis os loaded.\nkernel:>");
ffff800000801266:	48 b8 07 d5 ff ff ff 	movabs rax,0xffffffffffffd507
ffff80000080126d:	ff ff ff 
ffff800000801270:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801274:	48 89 c7             	mov    rdi,rax
ffff800000801277:	49 89 df             	mov    r15,rbx
ffff80000080127a:	48 b8 a1 cf ee ff ff 	movabs rax,0xffffffffffeecfa1
ffff800000801281:	ff ff ff 
ffff800000801284:	48 01 d8             	add    rax,rbx
ffff800000801287:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:148
    init_int();
ffff800000801289:	49 89 df             	mov    r15,rbx
ffff80000080128c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801291:	48 ba 30 25 ee ff ff 	movabs rdx,0xffffffffffee2530
ffff800000801298:	ff ff ff 
ffff80000080129b:	48 01 da             	add    rdx,rbx
ffff80000080129e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:149
    print("int loaded.\n");
ffff8000008012a0:	48 b8 24 d5 ff ff ff 	movabs rax,0xffffffffffffd524
ffff8000008012a7:	ff ff ff 
ffff8000008012aa:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008012ae:	48 89 c7             	mov    rdi,rax
ffff8000008012b1:	49 89 df             	mov    r15,rbx
ffff8000008012b4:	48 b8 a1 cf ee ff ff 	movabs rax,0xffffffffffeecfa1
ffff8000008012bb:	ff ff ff 
ffff8000008012be:	48 01 d8             	add    rax,rbx
ffff8000008012c1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:151
//    set_tss(0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000);
	init_paging();
ffff8000008012c3:	49 89 df             	mov    r15,rbx
ffff8000008012c6:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008012cb:	48 ba 09 43 ee ff ff 	movabs rdx,0xffffffffffee4309
ffff8000008012d2:	ff ff ff 
ffff8000008012d5:	48 01 da             	add    rdx,rbx
ffff8000008012d8:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:152
 	init_gdt();
ffff8000008012da:	49 89 df             	mov    r15,rbx
ffff8000008012dd:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008012e2:	48 ba 0d a3 ee ff ff 	movabs rdx,0xffffffffffeea30d
ffff8000008012e9:	ff ff ff 
ffff8000008012ec:	48 01 da             	add    rdx,rbx
ffff8000008012ef:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:154

	init_blkdev();
ffff8000008012f1:	49 89 df             	mov    r15,rbx
ffff8000008012f4:	48 b8 e8 f9 ee ff ff 	movabs rax,0xffffffffffeef9e8
ffff8000008012fb:	ff ff ff 
ffff8000008012fe:	48 01 d8             	add    rax,rbx
ffff800000801301:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:155
	init_blkbuf();
ffff800000801303:	49 89 df             	mov    r15,rbx
ffff800000801306:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080130b:	48 ba 3b fa ee ff ff 	movabs rdx,0xffffffffffeefa3b
ffff800000801312:	ff ff ff 
ffff800000801315:	48 01 da             	add    rdx,rbx
ffff800000801318:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:157
	// init_disk();
    init_ramdisk();
ffff80000080131a:	49 89 df             	mov    r15,rbx
ffff80000080131d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801322:	48 ba a6 f4 ee ff ff 	movabs rdx,0xffffffffffeef4a6
ffff800000801329:	ff ff ff 
ffff80000080132c:	48 01 da             	add    rdx,rbx
ffff80000080132f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:158
    init_rootfs();
ffff800000801331:	49 89 df             	mov    r15,rbx
ffff800000801334:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801339:	48 ba fc d9 ee ff ff 	movabs rdx,0xffffffffffeed9fc
ffff800000801340:	ff ff ff 
ffff800000801343:	48 01 da             	add    rdx,rbx
ffff800000801346:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:159
    init_devfs();
ffff800000801348:	49 89 df             	mov    r15,rbx
ffff80000080134b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801350:	48 ba c0 5a ee ff ff 	movabs rdx,0xffffffffffee5ac0
ffff800000801357:	ff ff ff 
ffff80000080135a:	48 01 da             	add    rdx,rbx
ffff80000080135d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:161

    init_proc();
ffff80000080135f:	49 89 df             	mov    r15,rbx
ffff800000801362:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801367:	48 ba 2e 68 ee ff ff 	movabs rdx,0xffffffffffee682e
ffff80000080136e:	ff ff ff 
ffff800000801371:	48 01 da             	add    rdx,rbx
ffff800000801374:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:163
	// init_ramfs();
  	DISK1_FAT32_FS_init();
ffff800000801376:	49 89 df             	mov    r15,rbx
ffff800000801379:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080137e:	48 ba c5 41 ef ff ff 	movabs rdx,0xffffffffffef41c5
ffff800000801385:	ff ff ff 
ffff800000801388:	48 01 da             	add    rdx,rbx
ffff80000080138b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:167

    //自带驱动
    //init_tty();
    init_kb();
ffff80000080138d:	49 89 df             	mov    r15,rbx
ffff800000801390:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801395:	48 ba a5 06 ef ff ff 	movabs rdx,0xffffffffffef06a5
ffff80000080139c:	ff ff ff 
ffff80000080139f:	48 01 da             	add    rdx,rbx
ffff8000008013a2:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:169
//    init_disk();
    sti();
ffff8000008013a4:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:170
    manage_proc_lock=0;
ffff8000008013a5:	48 b8 38 fd ff ff ff 	movabs rax,0xfffffffffffffd38
ffff8000008013ac:	ff ff ff 
ffff8000008013af:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008013b3:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:173


    move_to_user_mode();
ffff8000008013b9:	49 89 df             	mov    r15,rbx
ffff8000008013bc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008013c1:	48 ba 5c 5a ef ff ff 	movabs rdx,0xffffffffffef5a5c
ffff8000008013c8:	ff ff ff 
ffff8000008013cb:	48 01 da             	add    rdx,rbx
ffff8000008013ce:	ff d2                	call   rdx
ffff8000008013d0:	48 c7 45 98 1b 00 00 	mov    QWORD PTR [rbp-0x68],0x1b
ffff8000008013d7:	00 
ffff8000008013d8:	48 c7 45 90 00 00 00 	mov    QWORD PTR [rbp-0x70],0x0
ffff8000008013df:	00 
ffff8000008013e0:	48 c7 45 88 00 00 00 	mov    QWORD PTR [rbp-0x78],0x0
ffff8000008013e7:	00 
ffff8000008013e8:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
ffff8000008013ef:	00 
ffff8000008013f0:	48 c7 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],0x0
ffff8000008013f7:	00 00 00 00 
ffff8000008013fb:	48 c7 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],0x0
ffff800000801402:	00 00 00 00 
ffff800000801406:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x0
ffff80000080140d:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:63

#define	SYSTEM_REBOOT	(1UL << 0)
#define	SYSTEM_POWEROFF	(1UL << 1)

__attribute__((__always_inline__))inline int do_syscall(long func,long a1,long a2,long a3,long a4,long a5,long a6){
        asm volatile(".byte 0x48\n"
ffff800000801411:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000801415:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
ffff800000801419:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
ffff80000080141d:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff800000801421:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
ffff800000801428:	4c 8b 85 70 ff ff ff 	mov    r8,QWORD PTR [rbp-0x90]
ffff80000080142f:	4c 8b 8d 68 ff ff ff 	mov    r9,QWORD PTR [rbp-0x98]
ffff800000801436:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:65
                 "syscall"::"a"(func),"D"(a1),"S"(a2),"d"(a3),"c"(a4),"r"(a5),"r"(a6));
        long ret=0;
ffff800000801439:	48 c7 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],0x0
ffff800000801440:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:66
        asm volatile("mov %%rax,%0"::"m"(ret));
ffff800000801444:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:67
        return ret;
ffff80000080144b:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:174
    if(do_syscall(SYSCALL_FORK,0,0,0,0,0,0)==0){
ffff800000801452:	85 c0                	test   eax,eax
ffff800000801454:	0f 85 ca 00 00 00    	jne    ffff800000801524 <main+0x67f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:175
        char *argv[]={"/mnt/test.elf","gamessis os"};
ffff80000080145a:	48 b8 31 d5 ff ff ff 	movabs rax,0xffffffffffffd531
ffff800000801461:	ff ff ff 
ffff800000801464:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801468:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffff80000080146f:	48 b8 3f d5 ff ff ff 	movabs rax,0xffffffffffffd53f
ffff800000801476:	ff ff ff 
ffff800000801479:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080147d:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:176
        do_syscall(SYSCALL_EXECVE, (long) "/mnt/test.elf", 2, (long) &argv[0], 0, 0, 0);
ffff800000801484:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
ffff80000080148b:	48 ba 31 d5 ff ff ff 	movabs rdx,0xffffffffffffd531
ffff800000801492:	ff ff ff 
ffff800000801495:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000801499:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x1c
ffff8000008014a0:	1c 00 00 00 
ffff8000008014a4:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
ffff8000008014ab:	48 c7 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],0x2
ffff8000008014b2:	02 00 00 00 
ffff8000008014b6:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
ffff8000008014bd:	48 c7 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],0x0
ffff8000008014c4:	00 00 00 00 
ffff8000008014c8:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
ffff8000008014cf:	00 00 00 00 
ffff8000008014d3:	48 c7 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],0x0
ffff8000008014da:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:63
        asm volatile(".byte 0x48\n"
ffff8000008014de:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff8000008014e5:	48 8b bd 58 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa8]
ffff8000008014ec:	48 8b b5 50 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb0]
ffff8000008014f3:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
ffff8000008014fa:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
ffff800000801501:	4c 8b 85 38 ff ff ff 	mov    r8,QWORD PTR [rbp-0xc8]
ffff800000801508:	4c 8b 8d 30 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd0]
ffff80000080150f:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:65
        long ret=0;
ffff800000801512:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x0
ffff800000801519:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:66
        asm volatile("mov %%rax,%0"::"m"(ret));
ffff80000080151d:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:187 (discriminator 3)
//    init_fat16();

//    extern device *dev_tree[];
//    blk_dev* p=dev_tree[DEVTREE_BLKDEVI];
//    mount_fs("fat16",p->par,vmalloc());
    while (1)
ffff800000801524:	eb fe                	jmp    ffff800000801524 <main+0x67f>

ffff800000801526 <init_logging>:
init_logging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:12
static unsigned char* video;
static int xpos,ypos;
/* 将整数 D 转换为字符串并保存在 BUF 中。如果 BASE 为 'd'，则 D 为十进制，如果 BASE 为 'x'，则 D 为十六进制。 */

int init_logging()
{
ffff800000801526:	f3 0f 1e fa          	endbr64 
ffff80000080152a:	55                   	push   rbp
ffff80000080152b:	48 89 e5             	mov    rbp,rsp
ffff80000080152e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080152e <init_logging+0x8>
ffff800000801535:	49 bb a2 c5 11 00 00 	movabs r11,0x11c5a2
ffff80000080153c:	00 00 00 
ffff80000080153f:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:13
    video=0xb8000;
ffff800000801542:	48 ba 30 25 ae ff ff 	movabs rdx,0xffffffffffae2530
ffff800000801549:	ff ff ff 
ffff80000080154c:	48 c7 04 10 00 80 0b 	mov    QWORD PTR [rax+rdx*1],0xb8000
ffff800000801553:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:14
    xpos=0;
ffff800000801554:	48 ba 38 25 ae ff ff 	movabs rdx,0xffffffffffae2538
ffff80000080155b:	ff ff ff 
ffff80000080155e:	c7 04 10 00 00 00 00 	mov    DWORD PTR [rax+rdx*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:15
    ypos=0;
ffff800000801565:	48 ba 3c 25 ae ff ff 	movabs rdx,0xffffffffffae253c
ffff80000080156c:	ff ff ff 
ffff80000080156f:	c7 04 10 00 00 00 00 	mov    DWORD PTR [rax+rdx*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:16
}
ffff800000801576:	90                   	nop
ffff800000801577:	5d                   	pop    rbp
ffff800000801578:	c3                   	ret    

ffff800000801579 <itoa>:
itoa():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:19

void itoa (char *buf, int base, int d)
{
ffff800000801579:	f3 0f 1e fa          	endbr64 
ffff80000080157d:	55                   	push   rbp
ffff80000080157e:	48 89 e5             	mov    rbp,rsp
ffff800000801581:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801581 <itoa+0x8>
ffff800000801588:	49 bb 4f c5 11 00 00 	movabs r11,0x11c54f
ffff80000080158f:	00 00 00 
ffff800000801592:	4c 01 d8             	add    rax,r11
ffff800000801595:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000801599:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
ffff80000080159c:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:20
    char *p = buf;
ffff80000080159f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008015a3:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:22
    char *p1, *p2;
    unsigned long ud = d;
ffff8000008015a7:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff8000008015aa:	48 98                	cdqe   
ffff8000008015ac:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:23
    int divisor = 10;
ffff8000008015b0:	c7 45 dc 0a 00 00 00 	mov    DWORD PTR [rbp-0x24],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26
 
    /* 如果指定了 %d 并且 D 是负数，在开始添上负号。 */
    if (base == 'd' && d < 0)
ffff8000008015b7:	83 7d c4 64          	cmp    DWORD PTR [rbp-0x3c],0x64
ffff8000008015bb:	75 27                	jne    ffff8000008015e4 <itoa+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26 (discriminator 1)
ffff8000008015bd:	83 7d c0 00          	cmp    DWORD PTR [rbp-0x40],0x0
ffff8000008015c1:	79 21                	jns    ffff8000008015e4 <itoa+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:28
    {
        *p++ = '-';
ffff8000008015c3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008015c7:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff8000008015cb:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff8000008015cf:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:29
        buf++;
ffff8000008015d2:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:30
        ud = -d;
ffff8000008015d7:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff8000008015da:	f7 d8                	neg    eax
ffff8000008015dc:	48 98                	cdqe   
ffff8000008015de:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff8000008015e2:	eb 0d                	jmp    ffff8000008015f1 <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:32
    }
    else if (base == 'x')
ffff8000008015e4:	83 7d c4 78          	cmp    DWORD PTR [rbp-0x3c],0x78
ffff8000008015e8:	75 07                	jne    ffff8000008015f1 <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:33
        divisor = 16;
ffff8000008015ea:	c7 45 dc 10 00 00 00 	mov    DWORD PTR [rbp-0x24],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:38
 
    /* 用 DIVISOR 去除 UD 直到 UD == 0。 */
    do
    {
        int remainder = ud % divisor;
ffff8000008015f1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008015f4:	48 63 c8             	movsxd rcx,eax
ffff8000008015f7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008015fb:	ba 00 00 00 00       	mov    edx,0x0
ffff800000801600:	48 f7 f1             	div    rcx
ffff800000801603:	48 89 d0             	mov    rax,rdx
ffff800000801606:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40
 
        *p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
ffff800000801609:	83 7d d8 09          	cmp    DWORD PTR [rbp-0x28],0x9
ffff80000080160d:	7f 0a                	jg     ffff800000801619 <itoa+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 1)
ffff80000080160f:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000801612:	83 c0 30             	add    eax,0x30
ffff800000801615:	89 c1                	mov    ecx,eax
ffff800000801617:	eb 08                	jmp    ffff800000801621 <itoa+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 2)
ffff800000801619:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080161c:	83 c0 57             	add    eax,0x57
ffff80000080161f:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 4)
ffff800000801621:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000801625:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000801629:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff80000080162d:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:42 (discriminator 4)
    }
    while (ud /= divisor);
ffff80000080162f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000801632:	48 63 f0             	movsxd rsi,eax
ffff800000801635:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801639:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080163e:	48 f7 f6             	div    rsi
ffff800000801641:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff800000801645:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080164a:	75 a5                	jne    ffff8000008015f1 <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:45
 
    /* 在字符串尾添上终结符。 */
    *p = 0;
ffff80000080164c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000801650:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:48
 
    /* 反转 BUF。 */
    p1 = buf;
ffff800000801653:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000801657:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:49
    p2 = p - 1;
ffff80000080165b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080165f:	48 83 e8 01          	sub    rax,0x1
ffff800000801663:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
ffff800000801667:	eb 2b                	jmp    ffff800000801694 <itoa+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:52
    {
        char tmp = *p1;
ffff800000801669:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080166d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801670:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:53
        *p1 = *p2;
ffff800000801673:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801677:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff80000080167a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080167e:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:54
        *p2 = tmp;
ffff800000801680:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801684:	0f b6 55 d7          	movzx  edx,BYTE PTR [rbp-0x29]
ffff800000801688:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:55
        p1++;
ffff80000080168a:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:56
        p2--;
ffff80000080168f:	48 83 6d e8 01       	sub    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
ffff800000801694:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000801698:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff80000080169c:	72 cb                	jb     ffff800000801669 <itoa+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:58
    }
}
ffff80000080169e:	90                   	nop
ffff80000080169f:	90                   	nop
ffff8000008016a0:	5d                   	pop    rbp
ffff8000008016a1:	c3                   	ret    

ffff8000008016a2 <putchar>:
putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:62
 
/* 在屏幕上输出字符 C 。 */
void putchar (char c)
{
ffff8000008016a2:	f3 0f 1e fa          	endbr64 
ffff8000008016a6:	55                   	push   rbp
ffff8000008016a7:	48 89 e5             	mov    rbp,rsp
ffff8000008016aa:	41 57                	push   r15
ffff8000008016ac:	48 83 ec 28          	sub    rsp,0x28
ffff8000008016b0:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008016b0 <putchar+0xe>
ffff8000008016b7:	49 bb 20 c4 11 00 00 	movabs r11,0x11c420
ffff8000008016be:	00 00 00 
ffff8000008016c1:	4c 01 d8             	add    rax,r11
ffff8000008016c4:	89 fa                	mov    edx,edi
ffff8000008016c6:	88 55 dc             	mov    BYTE PTR [rbp-0x24],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:63
    char s[2]={c,'\0'};
ffff8000008016c9:	0f b6 55 dc          	movzx  edx,BYTE PTR [rbp-0x24]
ffff8000008016cd:	88 55 ee             	mov    BYTE PTR [rbp-0x12],dl
ffff8000008016d0:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:64
    print(s);
ffff8000008016d4:	48 8d 55 ee          	lea    rdx,[rbp-0x12]
ffff8000008016d8:	48 89 d7             	mov    rdi,rdx
ffff8000008016db:	49 89 c7             	mov    r15,rax
ffff8000008016de:	48 ba a1 cf ee ff ff 	movabs rdx,0xffffffffffeecfa1
ffff8000008016e5:	ff ff ff 
ffff8000008016e8:	48 01 c2             	add    rdx,rax
ffff8000008016eb:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:82
    *(video + (xpos + ypos * COLUMNS) * 2 + 1) = ATTRIBUTE;
 
    xpos++;
    if (xpos >= COLUMNS)
        goto newline;
}
ffff8000008016ed:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008016f1:	c9                   	leave  
ffff8000008016f2:	c3                   	ret    

ffff8000008016f3 <printf>:
printf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:86
 
/* 格式化字符串并在屏幕上输出，就像 libc 函数 printf 一样。 */
void printf (const char *format,...)
{
ffff8000008016f3:	f3 0f 1e fa          	endbr64 
ffff8000008016f7:	55                   	push   rbp
ffff8000008016f8:	48 89 e5             	mov    rbp,rsp
ffff8000008016fb:	41 57                	push   r15
ffff8000008016fd:	53                   	push   rbx
ffff8000008016fe:	48 81 ec 00 01 00 00 	sub    rsp,0x100
ffff800000801705:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000801705 <printf+0x12>
ffff80000080170c:	49 bb cb c3 11 00 00 	movabs r11,0x11c3cb
ffff800000801713:	00 00 00 
ffff800000801716:	4c 01 db             	add    rbx,r11
ffff800000801719:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
ffff800000801720:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffff800000801727:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffff80000080172e:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffff800000801735:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffff80000080173c:	4c 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r9
ffff800000801743:	84 c0                	test   al,al
ffff800000801745:	74 23                	je     ffff80000080176a <printf+0x77>
ffff800000801747:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
ffff80000080174e:	0f 29 4d 80          	movaps XMMWORD PTR [rbp-0x80],xmm1
ffff800000801752:	0f 29 55 90          	movaps XMMWORD PTR [rbp-0x70],xmm2
ffff800000801756:	0f 29 5d a0          	movaps XMMWORD PTR [rbp-0x60],xmm3
ffff80000080175a:	0f 29 65 b0          	movaps XMMWORD PTR [rbp-0x50],xmm4
ffff80000080175e:	0f 29 6d c0          	movaps XMMWORD PTR [rbp-0x40],xmm5
ffff800000801762:	0f 29 75 d0          	movaps XMMWORD PTR [rbp-0x30],xmm6
ffff800000801766:	0f 29 7d e0          	movaps XMMWORD PTR [rbp-0x20],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:87
    if(strlen(format)>=1024)
ffff80000080176a:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000801771:	48 89 c7             	mov    rdi,rax
ffff800000801774:	49 89 df             	mov    r15,rbx
ffff800000801777:	48 b8 95 54 ef ff ff 	movabs rax,0xffffffffffef5495
ffff80000080177e:	ff ff ff 
ffff800000801781:	48 01 d8             	add    rax,rbx
ffff800000801784:	ff d0                	call   rax
ffff800000801786:	3d ff 03 00 00       	cmp    eax,0x3ff
ffff80000080178b:	0f 8f f2 02 00 00    	jg     ffff800000801a83 <printf+0x390>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:89
        return;//一次性输出不了太长
    char* tmp=(char*) kmalloc();
ffff800000801791:	49 89 df             	mov    r15,rbx
ffff800000801794:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801799:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff8000008017a0:	ff ff ff 
ffff8000008017a3:	48 01 da             	add    rdx,rbx
ffff8000008017a6:	ff d2                	call   rdx
ffff8000008017a8:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:91
    va_list vargs;
    va_start(vargs,format);
ffff8000008017af:	c7 85 00 ff ff ff 08 	mov    DWORD PTR [rbp-0x100],0x8
ffff8000008017b6:	00 00 00 
ffff8000008017b9:	c7 85 04 ff ff ff 30 	mov    DWORD PTR [rbp-0xfc],0x30
ffff8000008017c0:	00 00 00 
ffff8000008017c3:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff8000008017c7:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffff8000008017ce:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffff8000008017d5:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:92
    char *pstr=format;
ffff8000008017dc:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008017e3:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
ffff8000008017ea:	e9 27 02 00 00       	jmp    ffff800000801a16 <printf+0x323>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff8000008017ef:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008017f6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008017f9:	3c 25                	cmp    al,0x25
ffff8000008017fb:	0f 85 e2 01 00 00    	jne    ffff8000008019e3 <printf+0x2f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94 (discriminator 1)
ffff800000801801:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801808:	48 83 c0 01          	add    rax,0x1
ffff80000080180c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080180f:	84 c0                	test   al,al
ffff800000801811:	0f 84 cc 01 00 00    	je     ffff8000008019e3 <printf+0x2f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:95
            pstr++;
ffff800000801817:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff80000080181e:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff80000080181f:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801826:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801829:	3c 78                	cmp    al,0x78
ffff80000080182b:	75 75                	jne    ffff8000008018a2 <printf+0x1af>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:97
                int v=va_arg(vargs,int);
ffff80000080182d:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff800000801833:	83 f8 2f             	cmp    eax,0x2f
ffff800000801836:	77 23                	ja     ffff80000080185b <printf+0x168>
ffff800000801838:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000080183f:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801845:	89 d2                	mov    edx,edx
ffff800000801847:	48 01 d0             	add    rax,rdx
ffff80000080184a:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801850:	83 c2 08             	add    edx,0x8
ffff800000801853:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff800000801859:	eb 12                	jmp    ffff80000080186d <printf+0x17a>
ffff80000080185b:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000801862:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801866:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff80000080186d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080186f:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:98
                sprint_hex(tmp,v);
ffff800000801875:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
ffff80000080187b:	48 63 d0             	movsxd rdx,eax
ffff80000080187e:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801885:	48 89 d6             	mov    rsi,rdx
ffff800000801888:	48 89 c7             	mov    rdi,rax
ffff80000080188b:	49 89 df             	mov    r15,rbx
ffff80000080188e:	48 b8 e8 58 ef ff ff 	movabs rax,0xffffffffffef58e8
ffff800000801895:	ff ff ff 
ffff800000801898:	48 01 d8             	add    rax,rbx
ffff80000080189b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff80000080189d:	e9 6c 01 00 00       	jmp    ffff800000801a0e <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:99
            }else if(*pstr=='s'){
ffff8000008018a2:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008018a9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008018ac:	3c 73                	cmp    al,0x73
ffff8000008018ae:	75 75                	jne    ffff800000801925 <printf+0x232>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:100
                char* v=va_arg(vargs,char*);
ffff8000008018b0:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff8000008018b6:	83 f8 2f             	cmp    eax,0x2f
ffff8000008018b9:	77 23                	ja     ffff8000008018de <printf+0x1eb>
ffff8000008018bb:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff8000008018c2:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff8000008018c8:	89 d2                	mov    edx,edx
ffff8000008018ca:	48 01 d0             	add    rax,rdx
ffff8000008018cd:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff8000008018d3:	83 c2 08             	add    edx,0x8
ffff8000008018d6:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff8000008018dc:	eb 12                	jmp    ffff8000008018f0 <printf+0x1fd>
ffff8000008018de:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff8000008018e5:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008018e9:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff8000008018f0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008018f3:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:101
                sprintn(tmp,v);
ffff8000008018fa:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
ffff800000801901:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801908:	48 89 d6             	mov    rsi,rdx
ffff80000080190b:	48 89 c7             	mov    rdi,rax
ffff80000080190e:	49 89 df             	mov    r15,rbx
ffff800000801911:	48 b8 76 59 ef ff ff 	movabs rax,0xffffffffffef5976
ffff800000801918:	ff ff ff 
ffff80000080191b:	48 01 d8             	add    rax,rbx
ffff80000080191e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801920:	e9 e9 00 00 00       	jmp    ffff800000801a0e <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:102
            }else if(*pstr=='d'){
ffff800000801925:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000080192c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080192f:	3c 64                	cmp    al,0x64
ffff800000801931:	75 73                	jne    ffff8000008019a6 <printf+0x2b3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:103
                char* v=va_arg(vargs,char*);
ffff800000801933:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff800000801939:	83 f8 2f             	cmp    eax,0x2f
ffff80000080193c:	77 23                	ja     ffff800000801961 <printf+0x26e>
ffff80000080193e:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000801945:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff80000080194b:	89 d2                	mov    edx,edx
ffff80000080194d:	48 01 d0             	add    rax,rdx
ffff800000801950:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801956:	83 c2 08             	add    edx,0x8
ffff800000801959:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff80000080195f:	eb 12                	jmp    ffff800000801973 <printf+0x280>
ffff800000801961:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000801968:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff80000080196c:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff800000801973:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801976:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:104
                sprint_decimal(tmp,v);
ffff80000080197d:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff800000801984:	89 c2                	mov    edx,eax
ffff800000801986:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000080198d:	89 d6                	mov    esi,edx
ffff80000080198f:	48 89 c7             	mov    rdi,rax
ffff800000801992:	49 89 df             	mov    r15,rbx
ffff800000801995:	48 b8 2d 58 ef ff ff 	movabs rax,0xffffffffffef582d
ffff80000080199c:	ff ff ff 
ffff80000080199f:	48 01 d8             	add    rax,rbx
ffff8000008019a2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff8000008019a4:	eb 68                	jmp    ffff800000801a0e <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:105
            }else if(*pstr=='c'){
ffff8000008019a6:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008019ad:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008019b0:	3c 63                	cmp    al,0x63
ffff8000008019b2:	75 02                	jne    ffff8000008019b6 <printf+0x2c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:106
                char v=va_arg(vargs,char);
ffff8000008019b4:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:109
                sprintchar(tmp,v);
            }else{
                sprintchar(tmp,*pstr);
ffff8000008019b6:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008019bd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008019c0:	0f be d0             	movsx  edx,al
ffff8000008019c3:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008019ca:	89 d6                	mov    esi,edx
ffff8000008019cc:	48 89 c7             	mov    rdi,rax
ffff8000008019cf:	49 89 df             	mov    r15,rbx
ffff8000008019d2:	48 b8 ee 57 ef ff ff 	movabs rax,0xffffffffffef57ee
ffff8000008019d9:	ff ff ff 
ffff8000008019dc:	48 01 d8             	add    rax,rbx
ffff8000008019df:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff8000008019e1:	eb 2b                	jmp    ffff800000801a0e <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:112
            }
        }else{
            sprintchar(tmp,*pstr);
ffff8000008019e3:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008019ea:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008019ed:	0f be d0             	movsx  edx,al
ffff8000008019f0:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008019f7:	89 d6                	mov    esi,edx
ffff8000008019f9:	48 89 c7             	mov    rdi,rax
ffff8000008019fc:	49 89 df             	mov    r15,rbx
ffff8000008019ff:	48 b8 ee 57 ef ff ff 	movabs rax,0xffffffffffef57ee
ffff800000801a06:	ff ff ff 
ffff800000801a09:	48 01 d8             	add    rax,rbx
ffff800000801a0c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
ffff800000801a0e:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000801a15:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93 (discriminator 1)
ffff800000801a16:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801a1d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801a20:	84 c0                	test   al,al
ffff800000801a22:	0f 85 c7 fd ff ff    	jne    ffff8000008017ef <printf+0xfc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:116
        }
    }
    va_end(vargs);
    print(tmp);
ffff800000801a28:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801a2f:	48 89 c7             	mov    rdi,rax
ffff800000801a32:	49 89 df             	mov    r15,rbx
ffff800000801a35:	48 b8 a1 cf ee ff ff 	movabs rax,0xffffffffffeecfa1
ffff800000801a3c:	ff ff ff 
ffff800000801a3f:	48 01 d8             	add    rax,rbx
ffff800000801a42:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:117
    comprintf(tmp);
ffff800000801a44:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801a4b:	48 89 c7             	mov    rdi,rax
ffff800000801a4e:	49 89 df             	mov    r15,rbx
ffff800000801a51:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801a56:	48 ba 23 4c ef ff ff 	movabs rdx,0xffffffffffef4c23
ffff800000801a5d:	ff ff ff 
ffff800000801a60:	48 01 da             	add    rdx,rbx
ffff800000801a63:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:118
    kmfree(tmp);
ffff800000801a65:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801a6c:	48 89 c7             	mov    rdi,rax
ffff800000801a6f:	49 89 df             	mov    r15,rbx
ffff800000801a72:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff800000801a79:	ff ff ff 
ffff800000801a7c:	48 01 d8             	add    rax,rbx
ffff800000801a7f:	ff d0                	call   rax
ffff800000801a81:	eb 01                	jmp    ffff800000801a84 <printf+0x391>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:88
        return;//一次性输出不了太长
ffff800000801a83:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:160
//                putchar (*((int *) arg++));
//                break;
//            }
//        }
//    }
}
ffff800000801a84:	48 81 c4 00 01 00 00 	add    rsp,0x100
ffff800000801a8b:	5b                   	pop    rbx
ffff800000801a8c:	41 5f                	pop    r15
ffff800000801a8e:	5d                   	pop    rbp
ffff800000801a8f:	c3                   	ret    

ffff800000801a90 <mmap>:
mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:27
//以kb为单位
int high_mem_base=1024;
int mmap_t_i=0;

stat_t mmap(addr_t pa,addr_t la,u32 attr)
{
ffff800000801a90:	f3 0f 1e fa          	endbr64 
ffff800000801a94:	55                   	push   rbp
ffff800000801a95:	48 89 e5             	mov    rbp,rsp
ffff800000801a98:	41 57                	push   r15
ffff800000801a9a:	48 83 ec 28          	sub    rsp,0x28
ffff800000801a9e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801a9e <mmap+0xe>
ffff800000801aa5:	49 bb 32 c0 11 00 00 	movabs r11,0x11c032
ffff800000801aac:	00 00 00 
ffff800000801aaf:	4c 01 d8             	add    rax,r11
ffff800000801ab2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000801ab6:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000801aba:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:28
    return smmap(pa,la,attr,current->pml4);
ffff800000801abd:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000801ac4:	ff ff ff 
ffff800000801ac7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801acb:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000801ace:	48 8b 8a e0 00 00 00 	mov    rcx,QWORD PTR [rdx+0xe0]
ffff800000801ad5:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801ad8:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff800000801adc:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffff800000801ae0:	49 89 c7             	mov    r15,rax
ffff800000801ae3:	49 b8 29 40 ee ff ff 	movabs r8,0xffffffffffee4029
ffff800000801aea:	ff ff ff 
ffff800000801aed:	49 01 c0             	add    r8,rax
ffff800000801af0:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:58
    pt=(page_item*)((addr_t)pt & ~0xff);

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_SIZE]=pa|attr;//映射
    return NORMAL;*/
}
ffff800000801af3:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000801af7:	c9                   	leave  
ffff800000801af8:	c3                   	ret    

ffff800000801af9 <smmap>:
smmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:60
stat_t smmap(addr_t pa,addr_t la,u32 attr,page_item* pml4p)
{
ffff800000801af9:	f3 0f 1e fa          	endbr64 
ffff800000801afd:	55                   	push   rbp
ffff800000801afe:	48 89 e5             	mov    rbp,rsp
ffff800000801b01:	41 57                	push   r15
ffff800000801b03:	53                   	push   rbx
ffff800000801b04:	48 83 ec 40          	sub    rsp,0x40
ffff800000801b08:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000801b08 <smmap+0xf>
ffff800000801b0f:	49 bb c8 bf 11 00 00 	movabs r11,0x11bfc8
ffff800000801b16:	00 00 00 
ffff800000801b19:	4c 01 db             	add    rbx,r11
ffff800000801b1c:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000801b20:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000801b24:	89 55 bc             	mov    DWORD PTR [rbp-0x44],edx
ffff800000801b27:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:63
    //从pml4中找到la所属的pml4项目，即属于第几个512GB
    //canonical 高地址判断
    if(la>0x7ffffffffffful){
ffff800000801b2b:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000801b32:	7f 00 00 
ffff800000801b35:	48 39 45 c0          	cmp    QWORD PTR [rbp-0x40],rax
ffff800000801b39:	76 0e                	jbe    ffff800000801b49 <smmap+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:64
        la&=~0xffff000000000000ul;
ffff800000801b3b:	48 b8 ff ff ff ff ff 	movabs rax,0xffffffffffff
ffff800000801b42:	ff 00 00 
ffff800000801b45:	48 21 45 c0          	and    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:66
    }
    page_item *pdptp= (page_item *) (pml4p[la / PML4E_SIZE]);//指向的pdpt表
ffff800000801b49:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801b4d:	48 c1 e8 27          	shr    rax,0x27
ffff800000801b51:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801b58:	00 
ffff800000801b59:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000801b5d:	48 01 d0             	add    rax,rdx
ffff800000801b60:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801b63:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:67
    int pml4i=la / PML4E_SIZE;
ffff800000801b67:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801b6b:	48 c1 e8 27          	shr    rax,0x27
ffff800000801b6f:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:68
    if(!((unsigned long long)pdptp&PAGE_PRESENT))
ffff800000801b72:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801b76:	83 e0 01             	and    eax,0x1
ffff800000801b79:	48 85 c0             	test   rax,rax
ffff800000801b7c:	75 6f                	jne    ffff800000801bed <smmap+0xf4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:70
    {
        pdptp=(page_item*) kmalloc();
ffff800000801b7e:	49 89 df             	mov    r15,rbx
ffff800000801b81:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801b86:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000801b8d:	ff ff ff 
ffff800000801b90:	48 01 da             	add    rdx,rbx
ffff800000801b93:	ff d2                	call   rdx
ffff800000801b95:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:71
        memset(pdptp,0,4096);
ffff800000801b99:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801b9d:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801ba2:	be 00 00 00 00       	mov    esi,0x0
ffff800000801ba7:	48 89 c7             	mov    rdi,rax
ffff800000801baa:	49 89 df             	mov    r15,rbx
ffff800000801bad:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff800000801bb4:	ff ff ff 
ffff800000801bb7:	48 01 d8             	add    rax,rbx
ffff800000801bba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:73
        //这里使用了狡猾的技巧：kmalloc的内存-KNL_BASE直接就是实际的物理地址
        pml4p[pml4i]=((addr_t)pdptp&~KNL_BASE)|attr;
ffff800000801bbc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801bc0:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801bc7:	7f 00 00 
ffff800000801bca:	48 21 d0             	and    rax,rdx
ffff800000801bcd:	48 89 c1             	mov    rcx,rax
ffff800000801bd0:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801bd3:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000801bd6:	48 98                	cdqe   
ffff800000801bd8:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801bdf:	00 
ffff800000801be0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000801be4:	48 01 f0             	add    rax,rsi
ffff800000801be7:	48 09 ca             	or     rdx,rcx
ffff800000801bea:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:75
    }
    pdptp=(page_item*)(((addr_t)pdptp&~0xff)|KNL_BASE);
ffff800000801bed:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801bf1:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801bf8:	7f 00 00 
ffff800000801bfb:	48 21 c2             	and    rdx,rax
ffff800000801bfe:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801c05:	80 ff ff 
ffff800000801c08:	48 09 d0             	or     rax,rdx
ffff800000801c0b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:78

    //在这个512GB（一张pdpt表）中找到la所属的pdpt项目，找到指向的pd
    int pdpti=la%PML4E_SIZE/PDPTE_SIZE;
ffff800000801c0f:	48 b8 ff ff ff ff 7f 	movabs rax,0x7fffffffff
ffff800000801c16:	00 00 00 
ffff800000801c19:	48 23 45 c0          	and    rax,QWORD PTR [rbp-0x40]
ffff800000801c1d:	48 c1 e8 1e          	shr    rax,0x1e
ffff800000801c21:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:79
    page_item* pdp= (page_item *) pdptp[pdpti];//指向的pd
ffff800000801c24:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000801c27:	48 98                	cdqe   
ffff800000801c29:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801c30:	00 
ffff800000801c31:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801c35:	48 01 d0             	add    rax,rdx
ffff800000801c38:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801c3b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:81
    //检查pdptp是否被占用
    if(!((unsigned long long)pdp&PAGE_PRESENT))
ffff800000801c3f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801c43:	83 e0 01             	and    eax,0x1
ffff800000801c46:	48 85 c0             	test   rax,rax
ffff800000801c49:	75 6f                	jne    ffff800000801cba <smmap+0x1c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:83
    {
        pdp=(page_item*) kmalloc();
ffff800000801c4b:	49 89 df             	mov    r15,rbx
ffff800000801c4e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801c53:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000801c5a:	ff ff ff 
ffff800000801c5d:	48 01 da             	add    rdx,rbx
ffff800000801c60:	ff d2                	call   rdx
ffff800000801c62:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:84
        memset(pdp,0,4096);
ffff800000801c66:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801c6a:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801c6f:	be 00 00 00 00       	mov    esi,0x0
ffff800000801c74:	48 89 c7             	mov    rdi,rax
ffff800000801c77:	49 89 df             	mov    r15,rbx
ffff800000801c7a:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff800000801c81:	ff ff ff 
ffff800000801c84:	48 01 d8             	add    rax,rbx
ffff800000801c87:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:85
        pdptp[pdpti]=((addr_t)pdp&~KNL_BASE)|attr;
ffff800000801c89:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801c8d:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801c94:	7f 00 00 
ffff800000801c97:	48 21 d0             	and    rax,rdx
ffff800000801c9a:	48 89 c1             	mov    rcx,rax
ffff800000801c9d:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801ca0:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000801ca3:	48 98                	cdqe   
ffff800000801ca5:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801cac:	00 
ffff800000801cad:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801cb1:	48 01 f0             	add    rax,rsi
ffff800000801cb4:	48 09 ca             	or     rdx,rcx
ffff800000801cb7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:87
    }
    pdp=(page_item*)(((addr_t)(pdp)&~0xff)|KNL_BASE);
ffff800000801cba:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801cbe:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801cc5:	7f 00 00 
ffff800000801cc8:	48 21 c2             	and    rdx,rax
ffff800000801ccb:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801cd2:	80 ff ff 
ffff800000801cd5:	48 09 d0             	or     rax,rdx
ffff800000801cd8:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:90

    //在pd中找到la指向的pt
    page_item* pt=(page_item*)pdp[la % PDPTE_SIZE / PDE_SIZE];
ffff800000801cdc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801ce0:	25 ff ff ff 3f       	and    eax,0x3fffffff
ffff800000801ce5:	48 c1 e8 15          	shr    rax,0x15
ffff800000801ce9:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801cf0:	00 
ffff800000801cf1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801cf5:	48 01 d0             	add    rax,rdx
ffff800000801cf8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801cfb:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:91
    if(!((unsigned long long)pt & PAGE_PRESENT))
ffff800000801cff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801d03:	83 e0 01             	and    eax,0x1
ffff800000801d06:	48 85 c0             	test   rax,rax
ffff800000801d09:	75 77                	jne    ffff800000801d82 <smmap+0x289>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:93
    {
        pt=(page_item*) kmalloc();
ffff800000801d0b:	49 89 df             	mov    r15,rbx
ffff800000801d0e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801d13:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000801d1a:	ff ff ff 
ffff800000801d1d:	48 01 da             	add    rdx,rbx
ffff800000801d20:	ff d2                	call   rdx
ffff800000801d22:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:94
        memset(pt,0,4096);
ffff800000801d26:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801d2a:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801d2f:	be 00 00 00 00       	mov    esi,0x0
ffff800000801d34:	48 89 c7             	mov    rdi,rax
ffff800000801d37:	49 89 df             	mov    r15,rbx
ffff800000801d3a:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff800000801d41:	ff ff ff 
ffff800000801d44:	48 01 d8             	add    rax,rbx
ffff800000801d47:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:95
        pdp[la%PDPTE_SIZE/PDE_SIZE]= ((addr_t)pt&~KNL_BASE) | attr;
ffff800000801d49:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801d4d:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801d54:	7f 00 00 
ffff800000801d57:	48 21 d0             	and    rax,rdx
ffff800000801d5a:	48 89 c1             	mov    rcx,rax
ffff800000801d5d:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801d60:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801d64:	25 ff ff ff 3f       	and    eax,0x3fffffff
ffff800000801d69:	48 c1 e8 15          	shr    rax,0x15
ffff800000801d6d:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801d74:	00 
ffff800000801d75:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801d79:	48 01 f0             	add    rax,rsi
ffff800000801d7c:	48 09 ca             	or     rdx,rcx
ffff800000801d7f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:97
    }
    pt=(page_item*)(((addr_t)pt & ~0xff)|KNL_BASE);
ffff800000801d82:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801d86:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801d8d:	7f 00 00 
ffff800000801d90:	48 21 c2             	and    rdx,rax
ffff800000801d93:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801d9a:	80 ff ff 
ffff800000801d9d:	48 09 d0             	or     rax,rdx
ffff800000801da0:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:100

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_4K_SIZE]=pa|attr;//映射
ffff800000801da4:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff800000801da7:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000801dab:	81 e2 ff ff 1f 00    	and    edx,0x1fffff
ffff800000801db1:	48 c1 ea 0c          	shr    rdx,0xc
ffff800000801db5:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000801dbc:	00 
ffff800000801dbd:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000801dc1:	48 01 ca             	add    rdx,rcx
ffff800000801dc4:	48 0b 45 c8          	or     rax,QWORD PTR [rbp-0x38]
ffff800000801dc8:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:101
    return NORMAL;
ffff800000801dcb:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:102
}
ffff800000801dd0:	48 83 c4 40          	add    rsp,0x40
ffff800000801dd4:	5b                   	pop    rbx
ffff800000801dd5:	41 5f                	pop    r15
ffff800000801dd7:	5d                   	pop    rbp
ffff800000801dd8:	c3                   	ret    

ffff800000801dd9 <init_paging>:
init_paging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:106


int init_paging()
{
ffff800000801dd9:	f3 0f 1e fa          	endbr64 
ffff800000801ddd:	55                   	push   rbp
ffff800000801dde:	48 89 e5             	mov    rbp,rsp
ffff800000801de1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801de1 <init_paging+0x8>
ffff800000801de8:	49 bb ef bc 11 00 00 	movabs r11,0x11bcef
ffff800000801def:	00 00 00 
ffff800000801df2:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:139
//    set_page_item(pml4,PDPT_ADDR,PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX);
    //设置第一项pdpte，也就是内核空间
//    set_1gb_pdpt(pdpt,0,PAGE_RWX);//设置PDPT0x40000000ul
//    set_page_item(pdpt+1,PD_ADDR,PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX);
    //把低512GB的空间取消映射，留给用户
    pml4[0]=0;
ffff800000801df5:	48 ba b0 ff ff ff ff 	movabs rdx,0xffffffffffffffb0
ffff800000801dfc:	ff ff ff 
ffff800000801dff:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000801e03:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801e06:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:141
    #endif
}
ffff800000801e0d:	90                   	nop
ffff800000801e0e:	5d                   	pop    rbp
ffff800000801e0f:	c3                   	ret    

ffff800000801e10 <set_high_mem_base>:
set_high_mem_base():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:143
void set_high_mem_base(int base)
{
ffff800000801e10:	f3 0f 1e fa          	endbr64 
ffff800000801e14:	55                   	push   rbp
ffff800000801e15:	48 89 e5             	mov    rbp,rsp
ffff800000801e18:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801e18 <set_high_mem_base+0x8>
ffff800000801e1f:	49 bb b8 bc 11 00 00 	movabs r11,0x11bcb8
ffff800000801e26:	00 00 00 
ffff800000801e29:	4c 01 d8             	add    rax,r11
ffff800000801e2c:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:144
    high_mem_base=base;
ffff800000801e2f:	48 ba f8 fd ff ff ff 	movabs rdx,0xfffffffffffffdf8
ffff800000801e36:	ff ff ff 
ffff800000801e39:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000801e3d:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000801e40:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:145
}
ffff800000801e42:	90                   	nop
ffff800000801e43:	5d                   	pop    rbp
ffff800000801e44:	c3                   	ret    

ffff800000801e45 <set_mem_area>:
set_mem_area():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:147
void set_mem_area(unsigned long base, unsigned long len, unsigned long type)
{
ffff800000801e45:	f3 0f 1e fa          	endbr64 
ffff800000801e49:	55                   	push   rbp
ffff800000801e4a:	48 89 e5             	mov    rbp,rsp
ffff800000801e4d:	41 57                	push   r15
ffff800000801e4f:	48 83 ec 28          	sub    rsp,0x28
ffff800000801e53:	4c 8d 05 f9 ff ff ff 	lea    r8,[rip+0xfffffffffffffff9]        # ffff800000801e53 <set_mem_area+0xe>
ffff800000801e5a:	49 bb 7d bc 11 00 00 	movabs r11,0x11bc7d
ffff800000801e61:	00 00 00 
ffff800000801e64:	4d 01 d8             	add    r8,r11
ffff800000801e67:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000801e6b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000801e6f:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:148
    mmap_struct[mmap_t_i].base=base;
ffff800000801e73:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000801e7a:	ff ff ff 
ffff800000801e7d:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000801e81:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801e83:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff800000801e8a:	ff ff ff 
ffff800000801e8d:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000801e91:	48 63 d0             	movsxd rdx,eax
ffff800000801e94:	48 89 d0             	mov    rax,rdx
ffff800000801e97:	48 01 c0             	add    rax,rax
ffff800000801e9a:	48 01 d0             	add    rax,rdx
ffff800000801e9d:	48 c1 e0 03          	shl    rax,0x3
ffff800000801ea1:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000801ea5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801ea9:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:149
    mmap_struct[mmap_t_i].len=len;
ffff800000801eac:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000801eb3:	ff ff ff 
ffff800000801eb6:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000801eba:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801ebc:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff800000801ec3:	ff ff ff 
ffff800000801ec6:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000801eca:	48 63 d0             	movsxd rdx,eax
ffff800000801ecd:	48 89 d0             	mov    rax,rdx
ffff800000801ed0:	48 01 c0             	add    rax,rax
ffff800000801ed3:	48 01 d0             	add    rax,rdx
ffff800000801ed6:	48 c1 e0 03          	shl    rax,0x3
ffff800000801eda:	48 01 c8             	add    rax,rcx
ffff800000801edd:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801ee1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801ee5:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:150
    mmap_struct[mmap_t_i++].type=type;
ffff800000801ee8:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000801eef:	ff ff ff 
ffff800000801ef2:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000801ef6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801ef8:	8d 48 01             	lea    ecx,[rax+0x1]
ffff800000801efb:	48 ba 88 fe ff ff ff 	movabs rdx,0xfffffffffffffe88
ffff800000801f02:	ff ff ff 
ffff800000801f05:	49 8b 14 10          	mov    rdx,QWORD PTR [r8+rdx*1]
ffff800000801f09:	89 0a                	mov    DWORD PTR [rdx],ecx
ffff800000801f0b:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff800000801f12:	ff ff ff 
ffff800000801f15:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000801f19:	48 63 d0             	movsxd rdx,eax
ffff800000801f1c:	48 89 d0             	mov    rax,rdx
ffff800000801f1f:	48 01 c0             	add    rax,rax
ffff800000801f22:	48 01 d0             	add    rax,rdx
ffff800000801f25:	48 c1 e0 03          	shl    rax,0x3
ffff800000801f29:	48 01 c8             	add    rax,rcx
ffff800000801f2c:	48 8d 50 10          	lea    rdx,[rax+0x10]
ffff800000801f30:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801f34:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:151
    comprintf("mem info:base=0x%l,len=0x%l,type=%d\n",base,len,type);
ffff800000801f37:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000801f3b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000801f3f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801f43:	48 89 c6             	mov    rsi,rax
ffff800000801f46:	48 b8 98 d5 ff ff ff 	movabs rax,0xffffffffffffd598
ffff800000801f4d:	ff ff ff 
ffff800000801f50:	49 8d 04 00          	lea    rax,[r8+rax*1]
ffff800000801f54:	48 89 c7             	mov    rdi,rax
ffff800000801f57:	4d 89 c7             	mov    r15,r8
ffff800000801f5a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801f5f:	49 b9 23 4c ef ff ff 	movabs r9,0xffffffffffef4c23
ffff800000801f66:	ff ff ff 
ffff800000801f69:	4d 01 c1             	add    r9,r8
ffff800000801f6c:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:152
}
ffff800000801f6f:	90                   	nop
ffff800000801f70:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000801f74:	c9                   	leave  
ffff800000801f75:	c3                   	ret    

ffff800000801f76 <kmalloc>:
kmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:154
addr_t kmalloc()
{
ffff800000801f76:	f3 0f 1e fa          	endbr64 
ffff800000801f7a:	55                   	push   rbp
ffff800000801f7b:	48 89 e5             	mov    rbp,rsp
ffff800000801f7e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801f7e <kmalloc+0x8>
ffff800000801f85:	49 bb 52 bb 11 00 00 	movabs r11,0x11bb52
ffff800000801f8c:	00 00 00 
ffff800000801f8f:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:155
    for(int i=0;i<VMALLOC_PGN/32;i++)
ffff800000801f92:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000801f99:	e9 c6 00 00 00       	jmp    ffff800000802064 <kmalloc+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157
    {
        for(int j=0;j<32;j++)
ffff800000801f9e:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff800000801fa5:	e9 ac 00 00 00       	jmp    ffff800000802056 <kmalloc+0xe0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:159
        {
            if(!(vmalloc_map[i]&(1<<j)))
ffff800000801faa:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff800000801fb1:	ff ff ff 
ffff800000801fb4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801fb8:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000801fbb:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000801fbe:	48 63 d2             	movsxd rdx,edx
ffff800000801fc1:	48 c1 e2 02          	shl    rdx,0x2
ffff800000801fc5:	48 01 ca             	add    rdx,rcx
ffff800000801fc8:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000801fca:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000801fcd:	bf 01 00 00 00       	mov    edi,0x1
ffff800000801fd2:	89 d1                	mov    ecx,edx
ffff800000801fd4:	d3 e7                	shl    edi,cl
ffff800000801fd6:	89 fa                	mov    edx,edi
ffff800000801fd8:	21 f2                	and    edx,esi
ffff800000801fda:	85 d2                	test   edx,edx
ffff800000801fdc:	75 74                	jne    ffff800000802052 <kmalloc+0xdc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:161
            {
                vmalloc_map[i]|=(1<<j);
ffff800000801fde:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff800000801fe5:	ff ff ff 
ffff800000801fe8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801fec:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000801fef:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000801ff2:	48 63 d2             	movsxd rdx,edx
ffff800000801ff5:	48 c1 e2 02          	shl    rdx,0x2
ffff800000801ff9:	48 01 ca             	add    rdx,rcx
ffff800000801ffc:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000801ffe:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000802001:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802006:	89 d1                	mov    ecx,edx
ffff800000802008:	d3 e7                	shl    edi,cl
ffff80000080200a:	89 fa                	mov    edx,edi
ffff80000080200c:	89 d1                	mov    ecx,edx
ffff80000080200e:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff800000802015:	ff ff ff 
ffff800000802018:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080201c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080201f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802022:	48 98                	cdqe   
ffff800000802024:	48 c1 e0 02          	shl    rax,0x2
ffff800000802028:	48 01 d0             	add    rax,rdx
ffff80000080202b:	09 ce                	or     esi,ecx
ffff80000080202d:	89 f2                	mov    edx,esi
ffff80000080202f:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:162
                return VMALLOC_BASE+(i*32+j)*0x1000;
ffff800000802031:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802034:	c1 e0 05             	shl    eax,0x5
ffff800000802037:	89 c2                	mov    edx,eax
ffff800000802039:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080203c:	01 d0                	add    eax,edx
ffff80000080203e:	c1 e0 0c             	shl    eax,0xc
ffff800000802041:	48 98                	cdqe   
ffff800000802043:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
ffff80000080204a:	80 ff ff 
ffff80000080204d:	48 01 d0             	add    rax,rdx
ffff800000802050:	eb 1c                	jmp    ffff80000080206e <kmalloc+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157 (discriminator 2)
        for(int j=0;j<32;j++)
ffff800000802052:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157 (discriminator 1)
ffff800000802056:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
ffff80000080205a:	0f 8e 4a ff ff ff    	jle    ffff800000801faa <kmalloc+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:155 (discriminator 2)
    for(int i=0;i<VMALLOC_PGN/32;i++)
ffff800000802060:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:155 (discriminator 1)
ffff800000802064:	83 7d fc 7f          	cmp    DWORD PTR [rbp-0x4],0x7f
ffff800000802068:	0f 8e 30 ff ff ff    	jle    ffff800000801f9e <kmalloc+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:166
            }
        }
    }
}
ffff80000080206e:	5d                   	pop    rbp
ffff80000080206f:	c3                   	ret    

ffff800000802070 <kmallocat>:
kmallocat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:168
addr_t kmallocat(addr_t addr,int pgc)
{
ffff800000802070:	f3 0f 1e fa          	endbr64 
ffff800000802074:	55                   	push   rbp
ffff800000802075:	48 89 e5             	mov    rbp,rsp
ffff800000802078:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802078 <kmallocat+0x8>
ffff80000080207f:	49 bb 58 ba 11 00 00 	movabs r11,0x11ba58
ffff800000802086:	00 00 00 
ffff800000802089:	4c 01 d8             	add    rax,r11
ffff80000080208c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000802090:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:169
    int pi=(addr-VMALLOC_BASE)/PAGE_4K_SIZE;
ffff800000802093:	48 b9 00 00 00 fe ff 	movabs rcx,0x7ffffe000000
ffff80000080209a:	7f 00 00 
ffff80000080209d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008020a1:	48 01 ca             	add    rdx,rcx
ffff8000008020a4:	48 c1 ea 0c          	shr    rdx,0xc
ffff8000008020a8:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:170
    if(addr==0){
ffff8000008020ab:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff8000008020b0:	0f 85 3f 01 00 00    	jne    ffff8000008021f5 <kmallocat+0x185>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:171
        int l=0,p=0;
ffff8000008020b6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008020bd:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:172
        for(int i=0;i<kmalloc_pgc;i++){
ffff8000008020c4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff8000008020cb:	eb 63                	jmp    ffff800000802130 <kmallocat+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:173
            if(!(vmalloc_map[i/32]&(1u<<(i%32)))){
ffff8000008020cd:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff8000008020d4:	ff ff ff 
ffff8000008020d7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008020db:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008020de:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff8000008020e1:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff8000008020e4:	85 d2                	test   edx,edx
ffff8000008020e6:	0f 48 d1             	cmovs  edx,ecx
ffff8000008020e9:	c1 fa 05             	sar    edx,0x5
ffff8000008020ec:	48 63 d2             	movsxd rdx,edx
ffff8000008020ef:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008020f3:	48 01 f2             	add    rdx,rsi
ffff8000008020f6:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff8000008020f8:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff8000008020fb:	83 e2 1f             	and    edx,0x1f
ffff8000008020fe:	89 d1                	mov    ecx,edx
ffff800000802100:	d3 ee                	shr    esi,cl
ffff800000802102:	89 f2                	mov    edx,esi
ffff800000802104:	83 e2 01             	and    edx,0x1
ffff800000802107:	85 d2                	test   edx,edx
ffff800000802109:	75 12                	jne    ffff80000080211d <kmallocat+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:174
                if(l==0)
ffff80000080210b:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff80000080210f:	75 06                	jne    ffff800000802117 <kmallocat+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:175
                    p=i;//开头空页
ffff800000802111:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff800000802114:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:176
                l++;
ffff800000802117:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffff80000080211b:	eb 07                	jmp    ffff800000802124 <kmallocat+0xb4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:178
            } else
                l=0;
ffff80000080211d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:179
            if(l==pgc)break;
ffff800000802124:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802127:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff80000080212a:	74 1b                	je     ffff800000802147 <kmallocat+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:172 (discriminator 2)
        for(int i=0;i<kmalloc_pgc;i++){
ffff80000080212c:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:172 (discriminator 1)
ffff800000802130:	48 ba 58 ff ff ff ff 	movabs rdx,0xffffffffffffff58
ffff800000802137:	ff ff ff 
ffff80000080213a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080213e:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000802140:	39 55 f4             	cmp    DWORD PTR [rbp-0xc],edx
ffff800000802143:	7c 88                	jl     ffff8000008020cd <kmallocat+0x5d>
ffff800000802145:	eb 01                	jmp    ffff800000802148 <kmallocat+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:179
            if(l==pgc)break;
ffff800000802147:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:181
        }
        if(l<pgc)return -1;
ffff800000802148:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080214b:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff80000080214e:	7d 0c                	jge    ffff80000080215c <kmallocat+0xec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:181 (discriminator 1)
ffff800000802150:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000802157:	e9 87 01 00 00       	jmp    ffff8000008022e3 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:183
        //开始占用
        for(int i=0;i<pgc;i++){
ffff80000080215c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
ffff800000802163:	eb 6e                	jmp    ffff8000008021d3 <kmallocat+0x163>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:184 (discriminator 3)
            vmalloc_map[(p+i)/32]|=1u<<((p+i)%32);
ffff800000802165:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff80000080216c:	ff ff ff 
ffff80000080216f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802173:	48 8b 3a             	mov    rdi,QWORD PTR [rdx]
ffff800000802176:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff800000802179:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080217c:	01 ca                	add    edx,ecx
ffff80000080217e:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff800000802181:	85 d2                	test   edx,edx
ffff800000802183:	0f 48 d1             	cmovs  edx,ecx
ffff800000802186:	c1 fa 05             	sar    edx,0x5
ffff800000802189:	89 d6                	mov    esi,edx
ffff80000080218b:	48 63 d6             	movsxd rdx,esi
ffff80000080218e:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802192:	48 01 fa             	add    rdx,rdi
ffff800000802195:	8b 3a                	mov    edi,DWORD PTR [rdx]
ffff800000802197:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff80000080219a:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080219d:	01 ca                	add    edx,ecx
ffff80000080219f:	83 e2 1f             	and    edx,0x1f
ffff8000008021a2:	41 b8 01 00 00 00    	mov    r8d,0x1
ffff8000008021a8:	89 d1                	mov    ecx,edx
ffff8000008021aa:	41 d3 e0             	shl    r8d,cl
ffff8000008021ad:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff8000008021b4:	ff ff ff 
ffff8000008021b7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008021bb:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008021be:	48 63 d6             	movsxd rdx,esi
ffff8000008021c1:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008021c5:	48 01 ca             	add    rdx,rcx
ffff8000008021c8:	44 09 c7             	or     edi,r8d
ffff8000008021cb:	89 f9                	mov    ecx,edi
ffff8000008021cd:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:183 (discriminator 3)
        for(int i=0;i<pgc;i++){
ffff8000008021cf:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:183 (discriminator 1)
ffff8000008021d3:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff8000008021d6:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff8000008021d9:	7c 8a                	jl     ffff800000802165 <kmallocat+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:186
        }
        return VMALLOC_BASE+PAGE_4K_SIZE*p;
ffff8000008021db:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff8000008021de:	c1 e0 0c             	shl    eax,0xc
ffff8000008021e1:	48 98                	cdqe   
ffff8000008021e3:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
ffff8000008021ea:	80 ff ff 
ffff8000008021ed:	48 01 d0             	add    rax,rdx
ffff8000008021f0:	e9 ee 00 00 00       	jmp    ffff8000008022e3 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:188
    }
    for(int i=0;i<pgc;i++){
ffff8000008021f5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008021fc:	eb 5c                	jmp    ffff80000080225a <kmallocat+0x1ea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:189
        if(vmalloc_map[(pi+i)/32]&(1<<((pi+i)%32)))
ffff8000008021fe:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff800000802205:	ff ff ff 
ffff800000802208:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080220c:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080220f:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff800000802212:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000802215:	01 ca                	add    edx,ecx
ffff800000802217:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff80000080221a:	85 d2                	test   edx,edx
ffff80000080221c:	0f 48 d1             	cmovs  edx,ecx
ffff80000080221f:	c1 fa 05             	sar    edx,0x5
ffff800000802222:	48 63 d2             	movsxd rdx,edx
ffff800000802225:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802229:	48 01 f2             	add    rdx,rsi
ffff80000080222c:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff80000080222e:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff800000802231:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000802234:	01 ca                	add    edx,ecx
ffff800000802236:	83 e2 1f             	and    edx,0x1f
ffff800000802239:	bf 01 00 00 00       	mov    edi,0x1
ffff80000080223e:	89 d1                	mov    ecx,edx
ffff800000802240:	d3 e7                	shl    edi,cl
ffff800000802242:	89 fa                	mov    edx,edi
ffff800000802244:	21 f2                	and    edx,esi
ffff800000802246:	85 d2                	test   edx,edx
ffff800000802248:	74 0c                	je     ffff800000802256 <kmallocat+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:190
            return -1;
ffff80000080224a:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000802251:	e9 8d 00 00 00       	jmp    ffff8000008022e3 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:188 (discriminator 2)
    for(int i=0;i<pgc;i++){
ffff800000802256:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:188 (discriminator 1)
ffff80000080225a:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080225d:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff800000802260:	7c 9c                	jl     ffff8000008021fe <kmallocat+0x18e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:193
    }
    //
    for(int i=0;i<pgc;i++){
ffff800000802262:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000802269:	eb 6c                	jmp    ffff8000008022d7 <kmallocat+0x267>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:194 (discriminator 3)
        vmalloc_map[(pi+i)]|=(1<<((pi+i)%32));
ffff80000080226b:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff800000802272:	ff ff ff 
ffff800000802275:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802279:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080227c:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
ffff80000080227f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000802282:	01 f2                	add    edx,esi
ffff800000802284:	48 63 d2             	movsxd rdx,edx
ffff800000802287:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080228b:	48 01 ca             	add    rdx,rcx
ffff80000080228e:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802290:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff800000802293:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000802296:	01 ca                	add    edx,ecx
ffff800000802298:	83 e2 1f             	and    edx,0x1f
ffff80000080229b:	bf 01 00 00 00       	mov    edi,0x1
ffff8000008022a0:	89 d1                	mov    ecx,edx
ffff8000008022a2:	d3 e7                	shl    edi,cl
ffff8000008022a4:	89 fa                	mov    edx,edi
ffff8000008022a6:	41 89 d0             	mov    r8d,edx
ffff8000008022a9:	48 ba 68 fd ff ff ff 	movabs rdx,0xfffffffffffffd68
ffff8000008022b0:	ff ff ff 
ffff8000008022b3:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008022b7:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008022ba:	8b 7d e4             	mov    edi,DWORD PTR [rbp-0x1c]
ffff8000008022bd:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008022c0:	01 fa                	add    edx,edi
ffff8000008022c2:	48 63 d2             	movsxd rdx,edx
ffff8000008022c5:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008022c9:	48 01 ca             	add    rdx,rcx
ffff8000008022cc:	44 09 c6             	or     esi,r8d
ffff8000008022cf:	89 f1                	mov    ecx,esi
ffff8000008022d1:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:193 (discriminator 3)
    for(int i=0;i<pgc;i++){
ffff8000008022d3:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:193 (discriminator 1)
ffff8000008022d7:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008022da:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff8000008022dd:	7c 8c                	jl     ffff80000080226b <kmallocat+0x1fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:196
    }
    return addr;
ffff8000008022df:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:198

}
ffff8000008022e3:	5d                   	pop    rbp
ffff8000008022e4:	c3                   	ret    

ffff8000008022e5 <kmfree>:
kmfree():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:201

int kmfree(addr_t ptr)
{
ffff8000008022e5:	f3 0f 1e fa          	endbr64 
ffff8000008022e9:	55                   	push   rbp
ffff8000008022ea:	48 89 e5             	mov    rbp,rsp
ffff8000008022ed:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008022ed <kmfree+0x8>
ffff8000008022f4:	49 bb e3 b7 11 00 00 	movabs r11,0x11b7e3
ffff8000008022fb:	00 00 00 
ffff8000008022fe:	4c 01 da             	add    rdx,r11
ffff800000802301:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:202
    int num=ptr/PAGE_SIZE;
ffff800000802305:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802309:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080230d:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:203
    int n=num/32;
ffff800000802310:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802313:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802316:	85 c0                	test   eax,eax
ffff800000802318:	0f 48 c1             	cmovs  eax,ecx
ffff80000080231b:	c1 f8 05             	sar    eax,0x5
ffff80000080231e:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:204
    int r=num%32;
ffff800000802321:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802324:	89 c1                	mov    ecx,eax
ffff800000802326:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802329:	c1 e9 1b             	shr    ecx,0x1b
ffff80000080232c:	01 c8                	add    eax,ecx
ffff80000080232e:	83 e0 1f             	and    eax,0x1f
ffff800000802331:	29 c8                	sub    eax,ecx
ffff800000802333:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:205
    vmalloc_map[n]=vmalloc_map[n]&~(unsigned int)(1<<r);
ffff800000802336:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff80000080233d:	ff ff ff 
ffff800000802340:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802344:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802347:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080234a:	48 98                	cdqe   
ffff80000080234c:	48 c1 e0 02          	shl    rax,0x2
ffff800000802350:	48 01 c8             	add    rax,rcx
ffff800000802353:	8b 30                	mov    esi,DWORD PTR [rax]
ffff800000802355:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802358:	bf 01 00 00 00       	mov    edi,0x1
ffff80000080235d:	89 c1                	mov    ecx,eax
ffff80000080235f:	d3 e7                	shl    edi,cl
ffff800000802361:	89 f8                	mov    eax,edi
ffff800000802363:	f7 d0                	not    eax
ffff800000802365:	89 c1                	mov    ecx,eax
ffff800000802367:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff80000080236e:	ff ff ff 
ffff800000802371:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802375:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802378:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080237b:	48 98                	cdqe   
ffff80000080237d:	48 c1 e0 02          	shl    rax,0x2
ffff800000802381:	48 01 d0             	add    rax,rdx
ffff800000802384:	21 ce                	and    esi,ecx
ffff800000802386:	89 f2                	mov    edx,esi
ffff800000802388:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:206
}
ffff80000080238a:	90                   	nop
ffff80000080238b:	5d                   	pop    rbp
ffff80000080238c:	c3                   	ret    

ffff80000080238d <page_err>:
page_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:207
void page_err(){
ffff80000080238d:	f3 0f 1e fa          	endbr64 
ffff800000802391:	55                   	push   rbp
ffff800000802392:	48 89 e5             	mov    rbp,rsp
ffff800000802395:	41 57                	push   r15
ffff800000802397:	41 55                	push   r13
ffff800000802399:	41 54                	push   r12
ffff80000080239b:	53                   	push   rbx
ffff80000080239c:	48 83 ec 20          	sub    rsp,0x20
ffff8000008023a0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008023a0 <page_err+0x13>
ffff8000008023a7:	49 bb 30 b7 11 00 00 	movabs r11,0x11b730
ffff8000008023ae:	00 00 00 
ffff8000008023b1:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:208
    asm("cli");
ffff8000008023b4:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:209
    printf("page err\n");
ffff8000008023b5:	48 b8 bd d5 ff ff ff 	movabs rax,0xffffffffffffd5bd
ffff8000008023bc:	ff ff ff 
ffff8000008023bf:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008023c3:	48 89 c7             	mov    rdi,rax
ffff8000008023c6:	49 89 df             	mov    r15,rbx
ffff8000008023c9:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008023ce:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff8000008023d5:	ff ff ff 
ffff8000008023d8:	48 01 da             	add    rdx,rbx
ffff8000008023db:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:210
    unsigned long err_code=0,l_addr=0;
ffff8000008023dd:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff8000008023e4:	00 
ffff8000008023e5:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff8000008023ec:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:211
    asm volatile("mov 0(%%rbp),%0":"=r"(err_code));
ffff8000008023ed:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
ffff8000008023f1:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:212
    asm volatile("mov %%cr2,%0":"=r"(l_addr));//试图访问的地址
ffff8000008023f5:	0f 20 d0             	mov    rax,cr2
ffff8000008023f8:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:213
    int p=err_code&1;
ffff8000008023fc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802400:	83 e0 01             	and    eax,0x1
ffff800000802403:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:215

    if(!p)
ffff800000802406:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080240a:	75 72                	jne    ffff80000080247e <page_err+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:222
        //accessing non-existent page
        //检查地址合法性
        if(l_addr>=MEM_END)
            ;
        //在进程的页表中申请新页
        smmap(get_phyaddr(req_a_page()),l_addr&~0xfff,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,current->pml4);
ffff80000080240c:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000802413:	ff ff ff 
ffff800000802416:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080241a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080241d:	4c 8b a0 e0 00 00 00 	mov    r12,QWORD PTR [rax+0xe0]
ffff800000802424:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000802428:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff80000080242e:	49 89 c5             	mov    r13,rax
ffff800000802431:	49 89 df             	mov    r15,rbx
ffff800000802434:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802439:	48 ba 51 4f ee ff ff 	movabs rdx,0xffffffffffee4f51
ffff800000802440:	ff ff ff 
ffff800000802443:	48 01 da             	add    rdx,rbx
ffff800000802446:	ff d2                	call   rdx
ffff800000802448:	89 c7                	mov    edi,eax
ffff80000080244a:	49 89 df             	mov    r15,rbx
ffff80000080244d:	48 b8 69 52 ee ff ff 	movabs rax,0xffffffffffee5269
ffff800000802454:	ff ff ff 
ffff800000802457:	48 01 d8             	add    rax,rbx
ffff80000080245a:	ff d0                	call   rax
ffff80000080245c:	48 98                	cdqe   
ffff80000080245e:	4c 89 e1             	mov    rcx,r12
ffff800000802461:	ba 07 00 00 00       	mov    edx,0x7
ffff800000802466:	4c 89 ee             	mov    rsi,r13
ffff800000802469:	48 89 c7             	mov    rdi,rax
ffff80000080246c:	49 89 df             	mov    r15,rbx
ffff80000080246f:	48 b8 29 40 ee ff ff 	movabs rax,0xffffffffffee4029
ffff800000802476:	ff ff ff 
ffff800000802479:	48 01 d8             	add    rax,rbx
ffff80000080247c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:240
    }
    else
    {
        //page level protection
    }
    p=err_code&2;
ffff80000080247e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802482:	83 e0 02             	and    eax,0x2
ffff800000802485:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:241
    if(p)printf("when writing\n");else //puts("when reading");
ffff800000802488:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080248c:	74 2a                	je     ffff8000008024b8 <page_err+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:241 (discriminator 1)
ffff80000080248e:	48 b8 c7 d5 ff ff ff 	movabs rax,0xffffffffffffd5c7
ffff800000802495:	ff ff ff 
ffff800000802498:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080249c:	48 89 c7             	mov    rdi,rax
ffff80000080249f:	49 89 df             	mov    r15,rbx
ffff8000008024a2:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008024a7:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff8000008024ae:	ff ff ff 
ffff8000008024b1:	48 01 da             	add    rdx,rbx
ffff8000008024b4:	ff d2                	call   rdx
ffff8000008024b6:	eb 0a                	jmp    ffff8000008024c2 <page_err+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:242
    p=err_code&4;
ffff8000008024b8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008024bc:	83 e0 04             	and    eax,0x4
ffff8000008024bf:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:243
    if(!p)printf("supervisor mode\n");else //puts("user mode");
ffff8000008024c2:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff8000008024c6:	75 2a                	jne    ffff8000008024f2 <page_err+0x165>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:243 (discriminator 1)
ffff8000008024c8:	48 b8 d5 d5 ff ff ff 	movabs rax,0xffffffffffffd5d5
ffff8000008024cf:	ff ff ff 
ffff8000008024d2:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008024d6:	48 89 c7             	mov    rdi,rax
ffff8000008024d9:	49 89 df             	mov    r15,rbx
ffff8000008024dc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008024e1:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff8000008024e8:	ff ff ff 
ffff8000008024eb:	48 01 da             	add    rdx,rbx
ffff8000008024ee:	ff d2                	call   rdx
ffff8000008024f0:	eb 0a                	jmp    ffff8000008024fc <page_err+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:244
    p=err_code&16;
ffff8000008024f2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008024f6:	83 e0 10             	and    eax,0x10
ffff8000008024f9:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:245
    if(p)printf("an instruction tries to fetch\n");
ffff8000008024fc:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff800000802500:	74 28                	je     ffff80000080252a <page_err+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:245 (discriminator 1)
ffff800000802502:	48 b8 e8 d5 ff ff ff 	movabs rax,0xffffffffffffd5e8
ffff800000802509:	ff ff ff 
ffff80000080250c:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802510:	48 89 c7             	mov    rdi,rax
ffff800000802513:	49 89 df             	mov    r15,rbx
ffff800000802516:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080251b:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff800000802522:	ff ff ff 
ffff800000802525:	48 01 da             	add    rdx,rbx
ffff800000802528:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:246
    unsigned int addr=0;
ffff80000080252a:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:247
    asm volatile("mov 8(%%rbp),%0":"=r"(addr));
ffff800000802531:	8b 45 08             	mov    eax,DWORD PTR [rbp+0x8]
ffff800000802534:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:248
    printf("occurred at %x(paddr), %x(laddr)\n",addr,l_addr);
ffff800000802537:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080253b:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080253e:	89 c6                	mov    esi,eax
ffff800000802540:	48 b8 08 d6 ff ff ff 	movabs rax,0xffffffffffffd608
ffff800000802547:	ff ff ff 
ffff80000080254a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080254e:	48 89 c7             	mov    rdi,rax
ffff800000802551:	49 89 df             	mov    r15,rbx
ffff800000802554:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802559:	48 b9 23 3c ee ff ff 	movabs rcx,0xffffffffffee3c23
ffff800000802560:	ff ff ff 
ffff800000802563:	48 01 d9             	add    rcx,rbx
ffff800000802566:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:260
    }*/
    //杀死问题进程
//    del_proc(cur_proc);
    // printf("killed the problem process.\n");
    // printf("shell:>");
    eoi();
ffff800000802568:	49 89 df             	mov    r15,rbx
ffff80000080256b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802570:	48 ba be a2 ee ff ff 	movabs rdx,0xffffffffffeea2be
ffff800000802577:	ff ff ff 
ffff80000080257a:	48 01 da             	add    rdx,rbx
ffff80000080257d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:262
    //这里对esp的加法是必要的，因为page fault多push了一个错误码，但是iret识别不了
    __asm__ volatile ("sti \r\n  leave\n add $8,%rsp \n iretq");
ffff80000080257f:	fb                   	sti    
ffff800000802580:	c9                   	leave  
ffff800000802581:	48 83 c4 08          	add    rsp,0x8
ffff800000802585:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:263
}
ffff800000802587:	90                   	nop
ffff800000802588:	48 83 c4 20          	add    rsp,0x20
ffff80000080258c:	5b                   	pop    rbx
ffff80000080258d:	41 5c                	pop    r12
ffff80000080258f:	41 5d                	pop    r13
ffff800000802591:	41 5f                	pop    r15
ffff800000802593:	5d                   	pop    rbp
ffff800000802594:	c3                   	ret    

ffff800000802595 <init_memory>:
init_memory():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:265
void init_memory()
{
ffff800000802595:	f3 0f 1e fa          	endbr64 
ffff800000802599:	55                   	push   rbp
ffff80000080259a:	48 89 e5             	mov    rbp,rsp
ffff80000080259d:	41 57                	push   r15
ffff80000080259f:	53                   	push   rbx
ffff8000008025a0:	48 83 ec 60          	sub    rsp,0x60
ffff8000008025a4:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008025a4 <init_memory+0xf>
ffff8000008025ab:	49 bb 2c b5 11 00 00 	movabs r11,0x11b52c
ffff8000008025b2:	00 00 00 
ffff8000008025b5:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:268
    extern addr_t _knl_end,_knl_start;//lds中声明的内核的结尾地址，放置位图
    //获取可用内存大小mem_size
    size_t tot_mem_size=mmap_struct[mmap_t_i-1].base+mmap_struct[mmap_t_i-1].len,mem_size=0;
ffff8000008025b8:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff8000008025bf:	ff ff ff 
ffff8000008025c2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008025c6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008025c8:	8d 50 ff             	lea    edx,[rax-0x1]
ffff8000008025cb:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff8000008025d2:	ff ff ff 
ffff8000008025d5:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008025d9:	48 63 d2             	movsxd rdx,edx
ffff8000008025dc:	48 89 d0             	mov    rax,rdx
ffff8000008025df:	48 01 c0             	add    rax,rax
ffff8000008025e2:	48 01 d0             	add    rax,rdx
ffff8000008025e5:	48 c1 e0 03          	shl    rax,0x3
ffff8000008025e9:	48 01 c8             	add    rax,rcx
ffff8000008025ec:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008025ef:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff8000008025f6:	ff ff ff 
ffff8000008025f9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008025fd:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008025ff:	8d 50 ff             	lea    edx,[rax-0x1]
ffff800000802602:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff800000802609:	ff ff ff 
ffff80000080260c:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff800000802610:	48 63 d2             	movsxd rdx,edx
ffff800000802613:	48 89 d0             	mov    rax,rdx
ffff800000802616:	48 01 c0             	add    rax,rax
ffff800000802619:	48 01 d0             	add    rax,rdx
ffff80000080261c:	48 c1 e0 03          	shl    rax,0x3
ffff800000802620:	48 01 f0             	add    rax,rsi
ffff800000802623:	48 83 c0 08          	add    rax,0x8
ffff800000802627:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080262a:	48 01 c8             	add    rax,rcx
ffff80000080262d:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff800000802631:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000802638:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:269
    for(int i=0;i<mmap_t_i;i++)
ffff800000802639:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000802640:	eb 64                	jmp    ffff8000008026a6 <init_memory+0x111>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:271
    {
        if(mmap_struct[i].type==MULTIBOOT_MEMORY_AVAILABLE)
ffff800000802642:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff800000802649:	ff ff ff 
ffff80000080264c:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802650:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802653:	48 63 d0             	movsxd rdx,eax
ffff800000802656:	48 89 d0             	mov    rax,rdx
ffff800000802659:	48 01 c0             	add    rax,rax
ffff80000080265c:	48 01 d0             	add    rax,rdx
ffff80000080265f:	48 c1 e0 03          	shl    rax,0x3
ffff800000802663:	48 01 c8             	add    rax,rcx
ffff800000802666:	48 83 c0 10          	add    rax,0x10
ffff80000080266a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080266d:	48 83 f8 01          	cmp    rax,0x1
ffff800000802671:	75 2f                	jne    ffff8000008026a2 <init_memory+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:272
            mem_size+=mmap_struct[i].len;
ffff800000802673:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff80000080267a:	ff ff ff 
ffff80000080267d:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802681:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802684:	48 63 d0             	movsxd rdx,eax
ffff800000802687:	48 89 d0             	mov    rax,rdx
ffff80000080268a:	48 01 c0             	add    rax,rax
ffff80000080268d:	48 01 d0             	add    rax,rdx
ffff800000802690:	48 c1 e0 03          	shl    rax,0x3
ffff800000802694:	48 01 c8             	add    rax,rcx
ffff800000802697:	48 83 c0 08          	add    rax,0x8
ffff80000080269b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080269e:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:269 (discriminator 2)
    for(int i=0;i<mmap_t_i;i++)
ffff8000008026a2:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:269 (discriminator 1)
ffff8000008026a6:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff8000008026ad:	ff ff ff 
ffff8000008026b0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008026b4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008026b6:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008026b9:	7c 87                	jl     ffff800000802642 <init_memory+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:274
    }
    usr_mem_pa=PAGE_4K_ALIGN(mem_size/2);
ffff8000008026bb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008026bf:	48 d1 e8             	shr    rax,1
ffff8000008026c2:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff8000008026c8:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff8000008026ce:	48 89 c2             	mov    rdx,rax
ffff8000008026d1:	48 b8 28 fd ff ff ff 	movabs rax,0xfffffffffffffd28
ffff8000008026d8:	ff ff ff 
ffff8000008026db:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008026df:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:281
    /*
     * 注：物理内存的一半会分给内核。
     * 前半部分是计算内存大小使多少个页，在位图中，一页表示为一位，所以除以后面部分，
     * 即一页位图可以有多少位。
     * */
    pmalloc_entc= tot_mem_size / PAGE_4K_SIZE/32;
ffff8000008026e2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008026e6:	48 c1 e8 11          	shr    rax,0x11
ffff8000008026ea:	89 c2                	mov    edx,eax
ffff8000008026ec:	48 b8 28 ff ff ff ff 	movabs rax,0xffffffffffffff28
ffff8000008026f3:	ff ff ff 
ffff8000008026f6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008026fa:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:282
    int pgc=(tot_mem_size/PAGE_4K_SIZE)/(PAGE_4K_SIZE*8);
ffff8000008026fc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000802700:	48 c1 e8 1b          	shr    rax,0x1b
ffff800000802704:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:284
    //计算出位图所需的字节数
    int pg_bytes=pgc>>5;//=/32
ffff800000802707:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080270a:	c1 f8 05             	sar    eax,0x5
ffff80000080270d:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:287
    //初始化vmalloc内存位图
    //计算位图需要多少个int
    size_t vmec= (mem_size/2-0x1000000)/PAGE_4K_SIZE/32;//去掉内核代码16M
ffff800000802710:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802714:	48 d1 e8             	shr    rax,1
ffff800000802717:	48 2d 00 00 00 01    	sub    rax,0x1000000
ffff80000080271d:	48 c1 e8 11          	shr    rax,0x11
ffff800000802721:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:288
    size_t vmms=vmec*4/PAGE_4K_SIZE;//位图自己需要多少页
ffff800000802725:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000802729:	48 c1 e0 02          	shl    rax,0x2
ffff80000080272d:	48 c1 e8 0c          	shr    rax,0xc
ffff800000802731:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:289
    comprintf("tot memsize:0x%l,available size 0x%l,kmalloc pages count:%d,kmalloc bitmap taking 0x%d pages\n", tot_mem_size,mem_size,vmec,vmms);
ffff800000802735:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff800000802739:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
ffff80000080273d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000802741:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000802745:	49 89 f0             	mov    r8,rsi
ffff800000802748:	48 89 c6             	mov    rsi,rax
ffff80000080274b:	48 b8 30 d6 ff ff ff 	movabs rax,0xffffffffffffd630
ffff800000802752:	ff ff ff 
ffff800000802755:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802759:	48 89 c7             	mov    rdi,rax
ffff80000080275c:	49 89 df             	mov    r15,rbx
ffff80000080275f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802764:	49 b9 23 4c ef ff ff 	movabs r9,0xffffffffffef4c23
ffff80000080276b:	ff ff ff 
ffff80000080276e:	49 01 d9             	add    r9,rbx
ffff800000802771:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:290
    if(vmec*4%PAGE_4K_SIZE)
ffff800000802774:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000802778:	48 c1 e0 02          	shl    rax,0x2
ffff80000080277c:	25 fc 0f 00 00       	and    eax,0xffc
ffff800000802781:	48 85 c0             	test   rax,rax
ffff800000802784:	74 05                	je     ffff80000080278b <init_memory+0x1f6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:291
        vmms++;
ffff800000802786:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:292
    for(int i=0;i<vmec;i++){
ffff80000080278b:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff800000802792:	eb 27                	jmp    ffff8000008027bb <init_memory+0x226>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:293 (discriminator 3)
        vmalloc_map[i]=0;
ffff800000802794:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff80000080279b:	ff ff ff 
ffff80000080279e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008027a2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008027a5:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008027a8:	48 98                	cdqe   
ffff8000008027aa:	48 c1 e0 02          	shl    rax,0x2
ffff8000008027ae:	48 01 d0             	add    rax,rdx
ffff8000008027b1:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:292 (discriminator 3)
    for(int i=0;i<vmec;i++){
ffff8000008027b7:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:292 (discriminator 1)
ffff8000008027bb:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008027be:	48 98                	cdqe   
ffff8000008027c0:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff8000008027c4:	77 ce                	ja     ffff800000802794 <init_memory+0x1ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:296
    }
    //位图占用前几页
    for(int i=0,j=0;j*32+i<vmms;i++)
ffff8000008027c6:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff8000008027cd:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff8000008027d4:	eb 61                	jmp    ffff800000802837 <init_memory+0x2a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:298
    {
        if(i==32)
ffff8000008027d6:	83 7d d0 20          	cmp    DWORD PTR [rbp-0x30],0x20
ffff8000008027da:	75 0b                	jne    ffff8000008027e7 <init_memory+0x252>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:300
        {
            i=0;
ffff8000008027dc:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:301
            j++;
ffff8000008027e3:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:303 (discriminator 2)
        }
        vmalloc_map[j]|=1u<<i;
ffff8000008027e7:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff8000008027ee:	ff ff ff 
ffff8000008027f1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008027f5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008027f8:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008027fb:	48 98                	cdqe   
ffff8000008027fd:	48 c1 e0 02          	shl    rax,0x2
ffff800000802801:	48 01 d0             	add    rax,rdx
ffff800000802804:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802806:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000802809:	be 01 00 00 00       	mov    esi,0x1
ffff80000080280e:	89 c1                	mov    ecx,eax
ffff800000802810:	d3 e6                	shl    esi,cl
ffff800000802812:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff800000802819:	ff ff ff 
ffff80000080281c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802820:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802823:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000802826:	48 98                	cdqe   
ffff800000802828:	48 c1 e0 02          	shl    rax,0x2
ffff80000080282c:	48 01 c8             	add    rax,rcx
ffff80000080282f:	09 f2                	or     edx,esi
ffff800000802831:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:296 (discriminator 2)
    for(int i=0,j=0;j*32+i<vmms;i++)
ffff800000802833:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:296 (discriminator 1)
ffff800000802837:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080283a:	c1 e0 05             	shl    eax,0x5
ffff80000080283d:	89 c2                	mov    edx,eax
ffff80000080283f:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000802842:	01 d0                	add    eax,edx
ffff800000802844:	48 98                	cdqe   
ffff800000802846:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000080284a:	77 8a                	ja     ffff8000008027d6 <init_memory+0x241>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:306
    }
    //kmalloc连续的内存
    page_map=kmallocat(0,pgc);//(unsigned int*)PAGE_4K_ALIGN(0xc00000);
ffff80000080284c:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080284f:	89 c6                	mov    esi,eax
ffff800000802851:	bf 00 00 00 00       	mov    edi,0x0
ffff800000802856:	49 89 df             	mov    r15,rbx
ffff800000802859:	48 b8 a0 45 ee ff ff 	movabs rax,0xffffffffffee45a0
ffff800000802860:	ff ff ff 
ffff800000802863:	48 01 d8             	add    rax,rbx
ffff800000802866:	ff d0                	call   rax
ffff800000802868:	48 89 c2             	mov    rdx,rax
ffff80000080286b:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802872:	ff ff ff 
ffff800000802875:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802879:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:307
    int* p=page_map;
ffff80000080287c:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802883:	ff ff ff 
ffff800000802886:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080288a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080288d:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:308
    addr_t curp=0;
ffff800000802891:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff800000802898:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:310
    //不能使用的内存提前占用掉
    for(int i=0;i<mmap_t_i;i++){
ffff800000802899:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
ffff8000008028a0:	e9 1f 01 00 00       	jmp    ffff8000008029c4 <init_memory+0x42f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:311
        if(mmap_struct[i].type==MULTIBOOT_MEMORY_AVAILABLE)
ffff8000008028a5:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff8000008028ac:	ff ff ff 
ffff8000008028af:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008028b3:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff8000008028b6:	48 63 d0             	movsxd rdx,eax
ffff8000008028b9:	48 89 d0             	mov    rax,rdx
ffff8000008028bc:	48 01 c0             	add    rax,rax
ffff8000008028bf:	48 01 d0             	add    rax,rdx
ffff8000008028c2:	48 c1 e0 03          	shl    rax,0x3
ffff8000008028c6:	48 01 c8             	add    rax,rcx
ffff8000008028c9:	48 83 c0 10          	add    rax,0x10
ffff8000008028cd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008028d0:	48 83 f8 01          	cmp    rax,0x1
ffff8000008028d4:	0f 84 e5 00 00 00    	je     ffff8000008029bf <init_memory+0x42a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:313
            continue;
        int b=(mmap_struct[i].base-usr_mem_pa)/PAGE_4K_SIZE;
ffff8000008028da:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff8000008028e1:	ff ff ff 
ffff8000008028e4:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008028e8:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff8000008028eb:	48 63 d0             	movsxd rdx,eax
ffff8000008028ee:	48 89 d0             	mov    rax,rdx
ffff8000008028f1:	48 01 c0             	add    rax,rax
ffff8000008028f4:	48 01 d0             	add    rax,rdx
ffff8000008028f7:	48 c1 e0 03          	shl    rax,0x3
ffff8000008028fb:	48 01 c8             	add    rax,rcx
ffff8000008028fe:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802901:	48 b8 28 fd ff ff ff 	movabs rax,0xfffffffffffffd28
ffff800000802908:	ff ff ff 
ffff80000080290b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080290f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802912:	48 89 d0             	mov    rax,rdx
ffff800000802915:	48 29 c8             	sub    rax,rcx
ffff800000802918:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080291c:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:314
        int l=mmap_struct[i].len/PAGE_4K_SIZE;
ffff80000080291f:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff800000802926:	ff ff ff 
ffff800000802929:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080292d:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff800000802930:	48 63 d0             	movsxd rdx,eax
ffff800000802933:	48 89 d0             	mov    rax,rdx
ffff800000802936:	48 01 c0             	add    rax,rax
ffff800000802939:	48 01 d0             	add    rax,rdx
ffff80000080293c:	48 c1 e0 03          	shl    rax,0x3
ffff800000802940:	48 01 c8             	add    rax,rcx
ffff800000802943:	48 83 c0 08          	add    rax,0x8
ffff800000802947:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080294a:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080294e:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:315
        for(int j=0;j<l;j++){
ffff800000802951:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
ffff800000802958:	eb 5b                	jmp    ffff8000008029b5 <init_memory+0x420>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:316 (discriminator 3)
            p[b+j/32]|=1u<<(j%32);
ffff80000080295a:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080295d:	8d 50 1f             	lea    edx,[rax+0x1f]
ffff800000802960:	85 c0                	test   eax,eax
ffff800000802962:	0f 48 c2             	cmovs  eax,edx
ffff800000802965:	c1 f8 05             	sar    eax,0x5
ffff800000802968:	89 c6                	mov    esi,eax
ffff80000080296a:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff80000080296d:	01 f0                	add    eax,esi
ffff80000080296f:	48 98                	cdqe   
ffff800000802971:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000802978:	00 
ffff800000802979:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080297d:	48 01 d0             	add    rax,rdx
ffff800000802980:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802982:	89 c7                	mov    edi,eax
ffff800000802984:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000802987:	83 e0 1f             	and    eax,0x1f
ffff80000080298a:	ba 01 00 00 00       	mov    edx,0x1
ffff80000080298f:	89 c1                	mov    ecx,eax
ffff800000802991:	d3 e2                	shl    edx,cl
ffff800000802993:	89 d0                	mov    eax,edx
ffff800000802995:	09 c7                	or     edi,eax
ffff800000802997:	89 fa                	mov    edx,edi
ffff800000802999:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff80000080299c:	01 f0                	add    eax,esi
ffff80000080299e:	48 98                	cdqe   
ffff8000008029a0:	48 8d 0c 85 00 00 00 	lea    rcx,[rax*4+0x0]
ffff8000008029a7:	00 
ffff8000008029a8:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008029ac:	48 01 c8             	add    rax,rcx
ffff8000008029af:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:315 (discriminator 3)
        for(int j=0;j<l;j++){
ffff8000008029b1:	83 45 c4 01          	add    DWORD PTR [rbp-0x3c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:315 (discriminator 1)
ffff8000008029b5:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff8000008029b8:	3b 45 90             	cmp    eax,DWORD PTR [rbp-0x70]
ffff8000008029bb:	7c 9d                	jl     ffff80000080295a <init_memory+0x3c5>
ffff8000008029bd:	eb 01                	jmp    ffff8000008029c0 <init_memory+0x42b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:312
            continue;
ffff8000008029bf:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:310 (discriminator 2)
    for(int i=0;i<mmap_t_i;i++){
ffff8000008029c0:	83 45 c8 01          	add    DWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:310 (discriminator 1)
ffff8000008029c4:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff8000008029cb:	ff ff ff 
ffff8000008029ce:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008029d2:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008029d4:	39 45 c8             	cmp    DWORD PTR [rbp-0x38],eax
ffff8000008029d7:	0f 8c c8 fe ff ff    	jl     ffff8000008028a5 <init_memory+0x310>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:320
        }
    }
    //低1gb提前占用掉 knl
    for(int j=0;j<0x2000;j++){
ffff8000008029dd:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [rbp-0x40],0x0
ffff8000008029e4:	eb 27                	jmp    ffff800000802a0d <init_memory+0x478>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:321 (discriminator 3)
        page_map[j]=-1;
ffff8000008029e6:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008029ed:	ff ff ff 
ffff8000008029f0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008029f4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008029f7:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff8000008029fa:	48 98                	cdqe   
ffff8000008029fc:	48 c1 e0 02          	shl    rax,0x2
ffff800000802a00:	48 01 d0             	add    rax,rdx
ffff800000802a03:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:320 (discriminator 3)
    for(int j=0;j<0x2000;j++){
ffff800000802a09:	83 45 c0 01          	add    DWORD PTR [rbp-0x40],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:320 (discriminator 1)
ffff800000802a0d:	81 7d c0 ff 1f 00 00 	cmp    DWORD PTR [rbp-0x40],0x1fff
ffff800000802a14:	7e d0                	jle    ffff8000008029e6 <init_memory+0x451>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:351
        pd[i+mapai]=ptpm|PAGE_PRESENT|PAGE_RWX;
    }
    page_item *pdpt=(addr_t)pml4[256]&PAGE_4K_MASK+KNL_BASE;
    pdpt[0]=pdpm|PAGE_PRESENT|PAGE_RWX;*/

}
ffff800000802a16:	90                   	nop
ffff800000802a17:	90                   	nop
ffff800000802a18:	48 83 c4 60          	add    rsp,0x60
ffff800000802a1c:	5b                   	pop    rbx
ffff800000802a1d:	41 5f                	pop    r15
ffff800000802a1f:	5d                   	pop    rbp
ffff800000802a20:	c3                   	ret    

ffff800000802a21 <req_a_page>:
req_a_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:357
/*
page_map存储方式:
0x00000000
little end
*/
addr_t req_a_page(){
ffff800000802a21:	f3 0f 1e fa          	endbr64 
ffff800000802a25:	55                   	push   rbp
ffff800000802a26:	48 89 e5             	mov    rbp,rsp
ffff800000802a29:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802a29 <req_a_page+0x8>
ffff800000802a30:	49 bb a7 b0 11 00 00 	movabs r11,0x11b0a7
ffff800000802a37:	00 00 00 
ffff800000802a3a:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:358
    for(int i=0; i < pmalloc_entc; i++){
ffff800000802a3d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000802a44:	e9 d3 00 00 00       	jmp    ffff800000802b1c <req_a_page+0xfb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:359
        for(int j=0;j<32;j++){
ffff800000802a49:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff800000802a50:	e9 b9 00 00 00       	jmp    ffff800000802b0e <req_a_page+0xed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:360
            unsigned int bit=page_map[i]&(1<<j);
ffff800000802a55:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000802a5c:	ff ff ff 
ffff800000802a5f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802a63:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000802a66:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802a69:	48 63 d2             	movsxd rdx,edx
ffff800000802a6c:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802a70:	48 01 ca             	add    rdx,rcx
ffff800000802a73:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802a75:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000802a78:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802a7d:	89 d1                	mov    ecx,edx
ffff800000802a7f:	d3 e7                	shl    edi,cl
ffff800000802a81:	89 fa                	mov    edx,edi
ffff800000802a83:	21 f2                	and    edx,esi
ffff800000802a85:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:361
            if((i*32+j)*4096>=0x100000&&(bit==0u))
ffff800000802a88:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802a8b:	89 d1                	mov    ecx,edx
ffff800000802a8d:	c1 e1 05             	shl    ecx,0x5
ffff800000802a90:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000802a93:	01 ca                	add    edx,ecx
ffff800000802a95:	c1 e2 0c             	shl    edx,0xc
ffff800000802a98:	81 fa ff ff 0f 00    	cmp    edx,0xfffff
ffff800000802a9e:	7e 6a                	jle    ffff800000802b0a <req_a_page+0xe9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:361 (discriminator 1)
ffff800000802aa0:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
ffff800000802aa4:	75 64                	jne    ffff800000802b0a <req_a_page+0xe9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:364
            {
                // comprintf("req_a_page:before:page_map[%d]=0x%x,",i,page_map[i]);
                page_map[i]=page_map[i]|(1<<j);
ffff800000802aa6:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000802aad:	ff ff ff 
ffff800000802ab0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802ab4:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000802ab7:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802aba:	48 63 d2             	movsxd rdx,edx
ffff800000802abd:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802ac1:	48 01 ca             	add    rdx,rcx
ffff800000802ac4:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802ac6:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000802ac9:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802ace:	89 d1                	mov    ecx,edx
ffff800000802ad0:	d3 e7                	shl    edi,cl
ffff800000802ad2:	89 fa                	mov    edx,edi
ffff800000802ad4:	89 d1                	mov    ecx,edx
ffff800000802ad6:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000802add:	ff ff ff 
ffff800000802ae0:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000802ae4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802ae7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802aea:	48 98                	cdqe   
ffff800000802aec:	48 c1 e0 02          	shl    rax,0x2
ffff800000802af0:	48 01 d0             	add    rax,rdx
ffff800000802af3:	09 ce                	or     esi,ecx
ffff800000802af5:	89 f2                	mov    edx,esi
ffff800000802af7:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:366
                // comprintf("now = 0x%x",page_map[i]);
                return i*32+j;//num of page
ffff800000802af9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802afc:	c1 e0 05             	shl    eax,0x5
ffff800000802aff:	89 c2                	mov    edx,eax
ffff800000802b01:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802b04:	01 d0                	add    eax,edx
ffff800000802b06:	48 98                	cdqe   
ffff800000802b08:	eb 32                	jmp    ffff800000802b3c <req_a_page+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:359 (discriminator 2)
        for(int j=0;j<32;j++){
ffff800000802b0a:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:359 (discriminator 1)
ffff800000802b0e:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
ffff800000802b12:	0f 8e 3d ff ff ff    	jle    ffff800000802a55 <req_a_page+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:358 (discriminator 2)
    for(int i=0; i < pmalloc_entc; i++){
ffff800000802b18:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:358 (discriminator 1)
ffff800000802b1c:	48 ba 28 ff ff ff ff 	movabs rdx,0xffffffffffffff28
ffff800000802b23:	ff ff ff 
ffff800000802b26:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802b2a:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000802b2c:	39 55 fc             	cmp    DWORD PTR [rbp-0x4],edx
ffff800000802b2f:	0f 8c 14 ff ff ff    	jl     ffff800000802a49 <req_a_page+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:371

            }
        }
    }
    return -1;
ffff800000802b35:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:372
}
ffff800000802b3c:	5d                   	pop    rbp
ffff800000802b3d:	c3                   	ret    

ffff800000802b3e <pmalloc>:
pmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:374

void * pmalloc(){
ffff800000802b3e:	f3 0f 1e fa          	endbr64 
ffff800000802b42:	55                   	push   rbp
ffff800000802b43:	48 89 e5             	mov    rbp,rsp
ffff800000802b46:	41 57                	push   r15
ffff800000802b48:	53                   	push   rbx
ffff800000802b49:	48 83 ec 10          	sub    rsp,0x10
ffff800000802b4d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802b4d <pmalloc+0xf>
ffff800000802b54:	49 bb 83 af 11 00 00 	movabs r11,0x11af83
ffff800000802b5b:	00 00 00 
ffff800000802b5e:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:375
    void *ret=(void*)(get_phyaddr(req_a_page()));
ffff800000802b61:	49 89 df             	mov    r15,rbx
ffff800000802b64:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802b69:	48 ba 51 4f ee ff ff 	movabs rdx,0xffffffffffee4f51
ffff800000802b70:	ff ff ff 
ffff800000802b73:	48 01 da             	add    rdx,rbx
ffff800000802b76:	ff d2                	call   rdx
ffff800000802b78:	89 c7                	mov    edi,eax
ffff800000802b7a:	49 89 df             	mov    r15,rbx
ffff800000802b7d:	48 b8 69 52 ee ff ff 	movabs rax,0xffffffffffee5269
ffff800000802b84:	ff ff ff 
ffff800000802b87:	48 01 d8             	add    rax,rbx
ffff800000802b8a:	ff d0                	call   rax
ffff800000802b8c:	48 98                	cdqe   
ffff800000802b8e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:377
    // comprintf("pmalloc():%l\n",ret);
    return ret;
ffff800000802b92:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:378
}
ffff800000802b96:	48 83 c4 10          	add    rsp,0x10
ffff800000802b9a:	5b                   	pop    rbx
ffff800000802b9b:	41 5f                	pop    r15
ffff800000802b9d:	5d                   	pop    rbp
ffff800000802b9e:	c3                   	ret    

ffff800000802b9f <free_page>:
free_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:379
int free_page(char *paddr){
ffff800000802b9f:	f3 0f 1e fa          	endbr64 
ffff800000802ba3:	55                   	push   rbp
ffff800000802ba4:	48 89 e5             	mov    rbp,rsp
ffff800000802ba7:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000802ba7 <free_page+0x8>
ffff800000802bae:	49 bb 29 af 11 00 00 	movabs r11,0x11af29
ffff800000802bb5:	00 00 00 
ffff800000802bb8:	4c 01 da             	add    rdx,r11
ffff800000802bbb:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:380
    int num=(int)paddr/4096;
ffff800000802bbf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802bc3:	8d 88 ff 0f 00 00    	lea    ecx,[rax+0xfff]
ffff800000802bc9:	85 c0                	test   eax,eax
ffff800000802bcb:	0f 48 c1             	cmovs  eax,ecx
ffff800000802bce:	c1 f8 0c             	sar    eax,0xc
ffff800000802bd1:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:381
    int n=num/32;
ffff800000802bd4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802bd7:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802bda:	85 c0                	test   eax,eax
ffff800000802bdc:	0f 48 c1             	cmovs  eax,ecx
ffff800000802bdf:	c1 f8 05             	sar    eax,0x5
ffff800000802be2:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:382
    int r=num%32;
ffff800000802be5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802be8:	89 c1                	mov    ecx,eax
ffff800000802bea:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802bed:	c1 e9 1b             	shr    ecx,0x1b
ffff800000802bf0:	01 c8                	add    eax,ecx
ffff800000802bf2:	83 e0 1f             	and    eax,0x1f
ffff800000802bf5:	29 c8                	sub    eax,ecx
ffff800000802bf7:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:383
    page_map[n]=page_map[n]&~(unsigned int)(1<<r);
ffff800000802bfa:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802c01:	ff ff ff 
ffff800000802c04:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802c08:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802c0b:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802c0e:	48 98                	cdqe   
ffff800000802c10:	48 c1 e0 02          	shl    rax,0x2
ffff800000802c14:	48 01 c8             	add    rax,rcx
ffff800000802c17:	8b 30                	mov    esi,DWORD PTR [rax]
ffff800000802c19:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802c1c:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802c21:	89 c1                	mov    ecx,eax
ffff800000802c23:	d3 e7                	shl    edi,cl
ffff800000802c25:	89 f8                	mov    eax,edi
ffff800000802c27:	f7 d0                	not    eax
ffff800000802c29:	89 c1                	mov    ecx,eax
ffff800000802c2b:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802c32:	ff ff ff 
ffff800000802c35:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802c39:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802c3c:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802c3f:	48 98                	cdqe   
ffff800000802c41:	48 c1 e0 02          	shl    rax,0x2
ffff800000802c45:	48 01 d0             	add    rax,rdx
ffff800000802c48:	21 ce                	and    esi,ecx
ffff800000802c4a:	89 f2                	mov    edx,esi
ffff800000802c4c:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:384
}
ffff800000802c4e:	90                   	nop
ffff800000802c4f:	5d                   	pop    rbp
ffff800000802c50:	c3                   	ret    

ffff800000802c51 <free_pages_at>:
free_pages_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:386

int free_pages_at(int base,int pgn){
ffff800000802c51:	f3 0f 1e fa          	endbr64 
ffff800000802c55:	55                   	push   rbp
ffff800000802c56:	48 89 e5             	mov    rbp,rsp
ffff800000802c59:	41 57                	push   r15
ffff800000802c5b:	53                   	push   rbx
ffff800000802c5c:	48 83 ec 20          	sub    rsp,0x20
ffff800000802c60:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802c60 <free_pages_at+0xf>
ffff800000802c67:	49 bb 70 ae 11 00 00 	movabs r11,0x11ae70
ffff800000802c6e:	00 00 00 
ffff800000802c71:	4c 01 db             	add    rbx,r11
ffff800000802c74:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000802c77:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:387
    for(int i=0;i<pgn;i++){
ffff800000802c7a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000802c81:	eb 28                	jmp    ffff800000802cab <free_pages_at+0x5a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:388 (discriminator 3)
        free_page(base+i*PAGE_4K_SIZE);
ffff800000802c83:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802c86:	c1 e0 0c             	shl    eax,0xc
ffff800000802c89:	89 c2                	mov    edx,eax
ffff800000802c8b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000802c8e:	01 d0                	add    eax,edx
ffff800000802c90:	48 98                	cdqe   
ffff800000802c92:	48 89 c7             	mov    rdi,rax
ffff800000802c95:	49 89 df             	mov    r15,rbx
ffff800000802c98:	48 b8 cf 50 ee ff ff 	movabs rax,0xffffffffffee50cf
ffff800000802c9f:	ff ff ff 
ffff800000802ca2:	48 01 d8             	add    rax,rbx
ffff800000802ca5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:387 (discriminator 3)
    for(int i=0;i<pgn;i++){
ffff800000802ca7:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:387 (discriminator 1)
ffff800000802cab:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802cae:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000802cb1:	7c d0                	jl     ffff800000802c83 <free_pages_at+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:390
    }
}
ffff800000802cb3:	90                   	nop
ffff800000802cb4:	48 83 c4 20          	add    rsp,0x20
ffff800000802cb8:	5b                   	pop    rbx
ffff800000802cb9:	41 5f                	pop    r15
ffff800000802cbb:	5d                   	pop    rbp
ffff800000802cbc:	c3                   	ret    

ffff800000802cbd <check_page>:
check_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:391
int check_page(int num){
ffff800000802cbd:	f3 0f 1e fa          	endbr64 
ffff800000802cc1:	55                   	push   rbp
ffff800000802cc2:	48 89 e5             	mov    rbp,rsp
ffff800000802cc5:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000802cc5 <check_page+0x8>
ffff800000802ccc:	49 bb 0b ae 11 00 00 	movabs r11,0x11ae0b
ffff800000802cd3:	00 00 00 
ffff800000802cd6:	4c 01 da             	add    rdx,r11
ffff800000802cd9:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:392
    int n=num/32;
ffff800000802cdc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802cdf:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802ce2:	85 c0                	test   eax,eax
ffff800000802ce4:	0f 48 c1             	cmovs  eax,ecx
ffff800000802ce7:	c1 f8 05             	sar    eax,0x5
ffff800000802cea:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:393
    int r=num%32;
ffff800000802ced:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802cf0:	89 c1                	mov    ecx,eax
ffff800000802cf2:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802cf5:	c1 e9 1b             	shr    ecx,0x1b
ffff800000802cf8:	01 c8                	add    eax,ecx
ffff800000802cfa:	83 e0 1f             	and    eax,0x1f
ffff800000802cfd:	29 c8                	sub    eax,ecx
ffff800000802cff:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:394
    int bit=page_map[n]&(1<<r);
ffff800000802d02:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802d09:	ff ff ff 
ffff800000802d0c:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802d10:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802d13:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802d16:	48 98                	cdqe   
ffff800000802d18:	48 c1 e0 02          	shl    rax,0x2
ffff800000802d1c:	48 01 d0             	add    rax,rdx
ffff800000802d1f:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802d21:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802d24:	be 01 00 00 00       	mov    esi,0x1
ffff800000802d29:	89 c1                	mov    ecx,eax
ffff800000802d2b:	d3 e6                	shl    esi,cl
ffff800000802d2d:	89 f0                	mov    eax,esi
ffff800000802d2f:	21 d0                	and    eax,edx
ffff800000802d31:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:395
    return bit;
ffff800000802d34:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:396
}
ffff800000802d37:	5d                   	pop    rbp
ffff800000802d38:	c3                   	ret    

ffff800000802d39 <get_phyaddr>:
get_phyaddr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:400
/*
 * 获得这个页对应的物理内存地址
 * */
int get_phyaddr(int num){
ffff800000802d39:	f3 0f 1e fa          	endbr64 
ffff800000802d3d:	55                   	push   rbp
ffff800000802d3e:	48 89 e5             	mov    rbp,rsp
ffff800000802d41:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802d41 <get_phyaddr+0x8>
ffff800000802d48:	49 bb 8f ad 11 00 00 	movabs r11,0x11ad8f
ffff800000802d4f:	00 00 00 
ffff800000802d52:	4c 01 d8             	add    rax,r11
ffff800000802d55:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:401
    if(num==-1)return -1;
ffff800000802d58:	83 7d fc ff          	cmp    DWORD PTR [rbp-0x4],0xffffffff
ffff800000802d5c:	75 07                	jne    ffff800000802d65 <get_phyaddr+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:401 (discriminator 1)
ffff800000802d5e:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000802d63:	eb 06                	jmp    ffff800000802d6b <get_phyaddr+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:402
    return num*0x1000;
ffff800000802d65:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802d68:	c1 e0 0c             	shl    eax,0xc
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:403
}
ffff800000802d6b:	5d                   	pop    rbp
ffff800000802d6c:	c3                   	ret    

ffff800000802d6d <set_page_item>:
set_page_item():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:406

void set_page_item(page_item *item_addr,int phy_addr,int attr)
{
ffff800000802d6d:	f3 0f 1e fa          	endbr64 
ffff800000802d71:	55                   	push   rbp
ffff800000802d72:	48 89 e5             	mov    rbp,rsp
ffff800000802d75:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802d75 <set_page_item+0x8>
ffff800000802d7c:	49 bb 5b ad 11 00 00 	movabs r11,0x11ad5b
ffff800000802d83:	00 00 00 
ffff800000802d86:	4c 01 d8             	add    rax,r11
ffff800000802d89:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000802d8d:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffff800000802d90:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:407
    *item_addr=0;
ffff800000802d93:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802d97:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:408
    *item_addr|=phy_addr&0xfffff000;
ffff800000802d9e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802da2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802da5:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802da8:	89 c0                	mov    eax,eax
ffff800000802daa:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000802daf:	48 09 c2             	or     rdx,rax
ffff800000802db2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802db6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:409
    *item_addr|=attr;
ffff800000802db9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802dbd:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802dc0:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
ffff800000802dc3:	48 98                	cdqe   
ffff800000802dc5:	48 09 c2             	or     rdx,rax
ffff800000802dc8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802dcc:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:410
}
ffff800000802dcf:	90                   	nop
ffff800000802dd0:	5d                   	pop    rbp
ffff800000802dd1:	c3                   	ret    

ffff800000802dd2 <set_1gb_pdpt>:
set_1gb_pdpt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:412
void set_1gb_pdpt(page_item* ppdpt,int pa,unsigned int extra_attr)
{
ffff800000802dd2:	f3 0f 1e fa          	endbr64 
ffff800000802dd6:	55                   	push   rbp
ffff800000802dd7:	48 89 e5             	mov    rbp,rsp
ffff800000802dda:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802dda <set_1gb_pdpt+0x8>
ffff800000802de1:	49 bb f6 ac 11 00 00 	movabs r11,0x11acf6
ffff800000802de8:	00 00 00 
ffff800000802deb:	4c 01 d8             	add    rax,r11
ffff800000802dee:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000802df2:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffff800000802df5:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:413
    *ppdpt=0;
ffff800000802df8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802dfc:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:414
    *ppdpt|=PAGE_PRESENT|PDPTE_1GB|extra_attr;
ffff800000802e03:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802e07:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802e0a:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000802e0d:	0c 81                	or     al,0x81
ffff800000802e0f:	89 c0                	mov    eax,eax
ffff800000802e11:	48 09 c2             	or     rdx,rax
ffff800000802e14:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802e18:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:415
    unsigned int hipa=pa&0xffffc0000000ul;
ffff800000802e1b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802e1e:	25 00 00 00 c0       	and    eax,0xc0000000
ffff800000802e23:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:416
    *ppdpt|=hipa;
ffff800000802e26:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802e2a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802e2d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802e30:	48 09 c2             	or     rdx,rax
ffff800000802e33:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802e37:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:417
}
ffff800000802e3a:	90                   	nop
ffff800000802e3b:	5d                   	pop    rbp
ffff800000802e3c:	c3                   	ret    

ffff800000802e3d <set_2mb_pde>:
set_2mb_pde():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:419
void set_2mb_pde(page_item *pde, int pa, int extra_attr)
{
ffff800000802e3d:	f3 0f 1e fa          	endbr64 
ffff800000802e41:	55                   	push   rbp
ffff800000802e42:	48 89 e5             	mov    rbp,rsp
ffff800000802e45:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802e45 <set_2mb_pde+0x8>
ffff800000802e4c:	49 bb 8b ac 11 00 00 	movabs r11,0x11ac8b
ffff800000802e53:	00 00 00 
ffff800000802e56:	4c 01 d8             	add    rax,r11
ffff800000802e59:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000802e5d:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffff800000802e60:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:420
    *pde=0;
ffff800000802e63:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802e67:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:421
    *pde|=PAGE_PRESENT|PAGE_4MB_PAGE|PDE_4MB_PAT|extra_attr;
ffff800000802e6e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802e72:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802e75:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000802e78:	0d 81 10 00 00       	or     eax,0x1081
ffff800000802e7d:	48 98                	cdqe   
ffff800000802e7f:	48 09 c2             	or     rdx,rax
ffff800000802e82:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802e86:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:422
    unsigned int hipa=pa&0xffc00000;
ffff800000802e89:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802e8c:	25 00 00 c0 ff       	and    eax,0xffc00000
ffff800000802e91:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:423
    *pde|=hipa;
ffff800000802e94:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802e98:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802e9b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802e9e:	48 09 c2             	or     rdx,rax
ffff800000802ea1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802ea5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:424
}
ffff800000802ea8:	90                   	nop
ffff800000802ea9:	5d                   	pop    rbp
ffff800000802eaa:	c3                   	ret    

ffff800000802eab <req_page_at>:
req_page_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:445
        page_map[i]&=(u32)(1<<j);
    return ret;
} */
//在bitmap申请指定的页面,base默认0x1000对齐
addr_t req_page_at(addr_t base,int pgn)
{
ffff800000802eab:	f3 0f 1e fa          	endbr64 
ffff800000802eaf:	55                   	push   rbp
ffff800000802eb0:	48 89 e5             	mov    rbp,rsp
ffff800000802eb3:	41 57                	push   r15
ffff800000802eb5:	53                   	push   rbx
ffff800000802eb6:	48 83 ec 20          	sub    rsp,0x20
ffff800000802eba:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802eba <req_page_at+0xf>
ffff800000802ec1:	49 bb 16 ac 11 00 00 	movabs r11,0x11ac16
ffff800000802ec8:	00 00 00 
ffff800000802ecb:	4c 01 db             	add    rbx,r11
ffff800000802ece:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000802ed2:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:446
    if(base==0)//不指定地址
ffff800000802ed5:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000802eda:	75 32                	jne    ffff800000802f0e <req_page_at+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:448
    {
        return get_phyaddr(req_a_page());
ffff800000802edc:	49 89 df             	mov    r15,rbx
ffff800000802edf:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802ee4:	48 ba 51 4f ee ff ff 	movabs rdx,0xffffffffffee4f51
ffff800000802eeb:	ff ff ff 
ffff800000802eee:	48 01 da             	add    rdx,rbx
ffff800000802ef1:	ff d2                	call   rdx
ffff800000802ef3:	89 c7                	mov    edi,eax
ffff800000802ef5:	49 89 df             	mov    r15,rbx
ffff800000802ef8:	48 b8 69 52 ee ff ff 	movabs rax,0xffffffffffee5269
ffff800000802eff:	ff ff ff 
ffff800000802f02:	48 01 d8             	add    rax,rbx
ffff800000802f05:	ff d0                	call   rax
ffff800000802f07:	48 98                	cdqe   
ffff800000802f09:	e9 c6 00 00 00       	jmp    ffff800000802fd4 <req_page_at+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:450
    }
    if(!is_pgs_ava(base,pgn))return -1;//先检查
ffff800000802f0e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000802f12:	89 c2                	mov    edx,eax
ffff800000802f14:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000802f17:	89 c6                	mov    esi,eax
ffff800000802f19:	89 d7                	mov    edi,edx
ffff800000802f1b:	49 89 df             	mov    r15,rbx
ffff800000802f1e:	48 b8 de 55 ee ff ff 	movabs rax,0xffffffffffee55de
ffff800000802f25:	ff ff ff 
ffff800000802f28:	48 01 d8             	add    rax,rbx
ffff800000802f2b:	ff d0                	call   rax
ffff800000802f2d:	85 c0                	test   eax,eax
ffff800000802f2f:	75 0c                	jne    ffff800000802f3d <req_page_at+0x92>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:450 (discriminator 1)
ffff800000802f31:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000802f38:	e9 97 00 00 00       	jmp    ffff800000802fd4 <req_page_at+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:451
    int pgni=base/4096;
ffff800000802f3d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000802f41:	48 c1 e8 0c          	shr    rax,0xc
ffff800000802f45:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:452
    int pgi=pgni/32;
ffff800000802f48:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802f4b:	8d 50 1f             	lea    edx,[rax+0x1f]
ffff800000802f4e:	85 c0                	test   eax,eax
ffff800000802f50:	0f 48 c2             	cmovs  eax,edx
ffff800000802f53:	c1 f8 05             	sar    eax,0x5
ffff800000802f56:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:453
    int pgj=pgni%32;
ffff800000802f59:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802f5c:	99                   	cdq    
ffff800000802f5d:	c1 ea 1b             	shr    edx,0x1b
ffff800000802f60:	01 d0                	add    eax,edx
ffff800000802f62:	83 e0 1f             	and    eax,0x1f
ffff800000802f65:	29 d0                	sub    eax,edx
ffff800000802f67:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:454
    for(int i=0;i<pgn;i++)
ffff800000802f6a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000802f71:	eb 54                	jmp    ffff800000802fc7 <req_page_at+0x11c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:456 (discriminator 3)
    {
        page_map[i]|=(1<<pgj);
ffff800000802f73:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802f7a:	ff ff ff 
ffff800000802f7d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802f81:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802f84:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802f87:	48 98                	cdqe   
ffff800000802f89:	48 c1 e0 02          	shl    rax,0x2
ffff800000802f8d:	48 01 d0             	add    rax,rdx
ffff800000802f90:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802f92:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000802f95:	be 01 00 00 00       	mov    esi,0x1
ffff800000802f9a:	89 c1                	mov    ecx,eax
ffff800000802f9c:	d3 e6                	shl    esi,cl
ffff800000802f9e:	89 f0                	mov    eax,esi
ffff800000802fa0:	89 c6                	mov    esi,eax
ffff800000802fa2:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000802fa9:	ff ff ff 
ffff800000802fac:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802fb0:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802fb3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802fb6:	48 98                	cdqe   
ffff800000802fb8:	48 c1 e0 02          	shl    rax,0x2
ffff800000802fbc:	48 01 c8             	add    rax,rcx
ffff800000802fbf:	09 f2                	or     edx,esi
ffff800000802fc1:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:454 (discriminator 3)
    for(int i=0;i<pgn;i++)
ffff800000802fc3:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:454 (discriminator 1)
ffff800000802fc7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802fca:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff800000802fcd:	7c a4                	jl     ffff800000802f73 <req_page_at+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:458
    }
    return 0;
ffff800000802fcf:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:460

}
ffff800000802fd4:	48 83 c4 20          	add    rsp,0x20
ffff800000802fd8:	5b                   	pop    rbx
ffff800000802fd9:	41 5f                	pop    r15
ffff800000802fdb:	5d                   	pop    rbp
ffff800000802fdc:	c3                   	ret    

ffff800000802fdd <chk_vm>:
chk_vm():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:462
int chk_vm(int base, int pgn)
{
ffff800000802fdd:	f3 0f 1e fa          	endbr64 
ffff800000802fe1:	55                   	push   rbp
ffff800000802fe2:	48 89 e5             	mov    rbp,rsp
ffff800000802fe5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802fe5 <chk_vm+0x8>
ffff800000802fec:	49 bb eb aa 11 00 00 	movabs r11,0x11aaeb
ffff800000802ff3:	00 00 00 
ffff800000802ff6:	4c 01 d8             	add    rax,r11
ffff800000802ff9:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000802ffc:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:463
    int *pdet=0;
ffff800000802fff:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff800000803006:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:464
    asm volatile("mov %%cr3,%0":"=r"(pdet));
ffff800000803007:	0f 20 d8             	mov    rax,cr3
ffff80000080300a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:465
    int *pt=pdet[base/PAGE_INDEX_SIZE]&0xfffff000;
ffff80000080300e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803011:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff800000803017:	85 c0                	test   eax,eax
ffff800000803019:	0f 48 c2             	cmovs  eax,edx
ffff80000080301c:	c1 f8 15             	sar    eax,0x15
ffff80000080301f:	48 98                	cdqe   
ffff800000803021:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000803028:	00 
ffff800000803029:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080302d:	48 01 d0             	add    rax,rdx
ffff800000803030:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803032:	89 c0                	mov    eax,eax
ffff800000803034:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000803039:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:466
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
ffff80000080303d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803040:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff800000803046:	85 c0                	test   eax,eax
ffff800000803048:	0f 48 c2             	cmovs  eax,edx
ffff80000080304b:	c1 f8 15             	sar    eax,0x15
ffff80000080304e:	48 98                	cdqe   
ffff800000803050:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000803057:	00 
ffff800000803058:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080305c:	48 01 d0             	add    rax,rdx
ffff80000080305f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803061:	83 e0 01             	and    eax,0x1
ffff800000803064:	85 c0                	test   eax,eax
ffff800000803066:	74 38                	je     ffff8000008030a0 <chk_vm+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:467 (discriminator 1)
    !(pt[base%PAGE_INDEX_SIZE/PAGE_SIZE]&PAGE_PRESENT))
ffff800000803068:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080306b:	99                   	cdq    
ffff80000080306c:	c1 ea 0b             	shr    edx,0xb
ffff80000080306f:	01 d0                	add    eax,edx
ffff800000803071:	25 ff ff 1f 00       	and    eax,0x1fffff
ffff800000803076:	29 d0                	sub    eax,edx
ffff800000803078:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff80000080307e:	85 c0                	test   eax,eax
ffff800000803080:	0f 48 c2             	cmovs  eax,edx
ffff800000803083:	c1 f8 0c             	sar    eax,0xc
ffff800000803086:	48 98                	cdqe   
ffff800000803088:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080308f:	00 
ffff800000803090:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000803094:	48 01 d0             	add    rax,rdx
ffff800000803097:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803099:	83 e0 01             	and    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:466 (discriminator 1)
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
ffff80000080309c:	85 c0                	test   eax,eax
ffff80000080309e:	75 07                	jne    ffff8000008030a7 <chk_vm+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:469
    {
        return -1;
ffff8000008030a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008030a5:	eb 05                	jmp    ffff8000008030ac <chk_vm+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:471
    }
    return 0;
ffff8000008030a7:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:472
}
ffff8000008030ac:	5d                   	pop    rbp
ffff8000008030ad:	c3                   	ret    

ffff8000008030ae <is_pgs_ava>:
is_pgs_ava():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:475
//查看指定区域的页内存是否可用
int is_pgs_ava(int base,int pgn)
{
ffff8000008030ae:	f3 0f 1e fa          	endbr64 
ffff8000008030b2:	55                   	push   rbp
ffff8000008030b3:	48 89 e5             	mov    rbp,rsp
ffff8000008030b6:	41 57                	push   r15
ffff8000008030b8:	53                   	push   rbx
ffff8000008030b9:	48 83 ec 20          	sub    rsp,0x20
ffff8000008030bd:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008030bd <is_pgs_ava+0xf>
ffff8000008030c4:	49 bb 13 aa 11 00 00 	movabs r11,0x11aa13
ffff8000008030cb:	00 00 00 
ffff8000008030ce:	4c 01 db             	add    rbx,r11
ffff8000008030d1:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff8000008030d4:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:476
    int pgi=base/4096;
ffff8000008030d7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008030da:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff8000008030e0:	85 c0                	test   eax,eax
ffff8000008030e2:	0f 48 c2             	cmovs  eax,edx
ffff8000008030e5:	c1 f8 0c             	sar    eax,0xc
ffff8000008030e8:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:477
    for(int i=0;i<pgn;i++)
ffff8000008030eb:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008030f2:	eb 2b                	jmp    ffff80000080311f <is_pgs_ava+0x71>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:479
    {
        if(check_page(pgi+i)!=0)return 0;
ffff8000008030f4:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008030f7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008030fa:	01 d0                	add    eax,edx
ffff8000008030fc:	89 c7                	mov    edi,eax
ffff8000008030fe:	49 89 df             	mov    r15,rbx
ffff800000803101:	48 b8 ed 51 ee ff ff 	movabs rax,0xffffffffffee51ed
ffff800000803108:	ff ff ff 
ffff80000080310b:	48 01 d8             	add    rax,rbx
ffff80000080310e:	ff d0                	call   rax
ffff800000803110:	85 c0                	test   eax,eax
ffff800000803112:	74 07                	je     ffff80000080311b <is_pgs_ava+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:479 (discriminator 1)
ffff800000803114:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803119:	eb 11                	jmp    ffff80000080312c <is_pgs_ava+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:477 (discriminator 2)
    for(int i=0;i<pgn;i++)
ffff80000080311b:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:477 (discriminator 1)
ffff80000080311f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803122:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000803125:	7c cd                	jl     ffff8000008030f4 <is_pgs_ava+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:481
    }
    return 1;
ffff800000803127:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:483

}
ffff80000080312c:	48 83 c4 20          	add    rsp,0x20
ffff800000803130:	5b                   	pop    rbx
ffff800000803131:	41 5f                	pop    r15
ffff800000803133:	5d                   	pop    rbp
ffff800000803134:	c3                   	ret    

ffff800000803135 <make_dentry>:
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:24
};
struct dir_entry_operations dev_dir_dops={

};
static int devd_fd=-1;
void make_dentry(struct dir_entry* d,char* name,int namelen,struct dir_entry* parent,struct dir_entry_operations* dops){
ffff800000803135:	f3 0f 1e fa          	endbr64 
ffff800000803139:	55                   	push   rbp
ffff80000080313a:	48 89 e5             	mov    rbp,rsp
ffff80000080313d:	41 57                	push   r15
ffff80000080313f:	48 81 ec 88 00 00 00 	sub    rsp,0x88
ffff800000803146:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803146 <make_dentry+0x11>
ffff80000080314d:	49 bb 8a a9 11 00 00 	movabs r11,0x11a98a
ffff800000803154:	00 00 00 
ffff800000803157:	4c 01 d8             	add    rax,r11
ffff80000080315a:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff80000080315e:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffff800000803162:	89 55 8c             	mov    DWORD PTR [rbp-0x74],edx
ffff800000803165:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
ffff800000803169:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:25
    strcpy(d->name,name);
ffff800000803170:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff800000803174:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000803177:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
ffff80000080317b:	48 89 ce             	mov    rsi,rcx
ffff80000080317e:	48 89 d7             	mov    rdi,rdx
ffff800000803181:	49 89 c7             	mov    r15,rax
ffff800000803184:	48 ba c8 51 ef ff ff 	movabs rdx,0xffffffffffef51c8
ffff80000080318b:	ff ff ff 
ffff80000080318e:	48 01 c2             	add    rdx,rax
ffff800000803191:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:26
    d->name_length=namelen;
ffff800000803193:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000803197:	8b 55 8c             	mov    edx,DWORD PTR [rbp-0x74]
ffff80000080319a:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:28
    //添加dentry的操作方法，这样能够查找设备
    d->dir_ops=dops;
ffff80000080319d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008031a1:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff8000008031a8:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:29
    list_init(&d->subdirs_list);
ffff8000008031ac:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008031b0:	48 83 c0 28          	add    rax,0x28
ffff8000008031b4:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    struct List * next;
};

__attribute__((always_inline)) inline void list_init(struct List * list)
{
    list->prev = NULL;
ffff8000008031b8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008031bc:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff8000008031c3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008031c7:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008031ce:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff8000008031cf:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:30
    list_init(&d->child_node);
ffff8000008031d0:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008031d4:	48 83 c0 10          	add    rax,0x10
ffff8000008031d8:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff8000008031dc:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008031e0:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff8000008031e7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008031eb:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008031f2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff8000008031f3:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:31
    d->child_node.data=d;
ffff8000008031f4:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008031f8:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff8000008031fc:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:32
    d->parent=parent;
ffff800000803200:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000803204:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff800000803208:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:33
    list_add(&parent->subdirs_list,&d->child_node);
ffff80000080320c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000803210:	48 83 c0 10          	add    rax,0x10
ffff800000803214:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff800000803218:	48 83 c2 28          	add    rdx,0x28
ffff80000080321c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000803220:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
        new->next->prev = new;
    // entry->next = new;
}
__attribute__((always_inline)) inline void list_add(struct List * entry,struct List * new)	////add to the tail of the link
{
    if(entry->next==NULL)
ffff800000803224:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803228:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080322c:	48 85 c0             	test   rax,rax
ffff80000080322f:	75 50                	jne    ffff800000803281 <make_dentry+0x14c>
ffff800000803231:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803235:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffff800000803239:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080323d:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000803241:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803245:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000803249:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080324d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000803251:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803255:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000803259:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080325c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803260:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803264:	48 85 c0             	test   rax,rax
ffff800000803267:	0f 84 a3 00 00 00    	je     ffff800000803310 <make_dentry+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080326d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803271:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803275:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803279:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080327c:	e9 8f 00 00 00       	jmp    ffff800000803310 <make_dentry+0x1db>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        list_add_to_behind(entry,new);
    else{
        struct List* p=entry;
ffff800000803281:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803285:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff800000803289:	eb 21                	jmp    ffff8000008032ac <make_dentry+0x177>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff80000080328b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080328f:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000803293:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803297:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080329b:	48 39 c2             	cmp    rdx,rax
ffff80000080329e:	74 73                	je     ffff800000803313 <make_dentry+0x1de>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff8000008032a0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008032a4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008032a8:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffff8000008032ac:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008032b0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008032b4:	48 85 c0             	test   rax,rax
ffff8000008032b7:	74 0e                	je     ffff8000008032c7 <make_dentry+0x192>
ffff8000008032b9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008032bd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008032c1:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffff8000008032c5:	75 c4                	jne    ffff80000080328b <make_dentry+0x156>
ffff8000008032c7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008032cb:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffff8000008032cf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008032d3:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff8000008032d7:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008032db:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008032df:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008032e3:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff8000008032e7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008032eb:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008032ef:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff8000008032f2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008032f6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008032fa:	48 85 c0             	test   rax,rax
ffff8000008032fd:	74 17                	je     ffff800000803316 <make_dentry+0x1e1>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff8000008032ff:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000803303:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803307:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080330b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080330e:	eb 06                	jmp    ffff800000803316 <make_dentry+0x1e1>
ffff800000803310:	90                   	nop
ffff800000803311:	eb 04                	jmp    ffff800000803317 <make_dentry+0x1e2>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff800000803313:	90                   	nop
ffff800000803314:	eb 01                	jmp    ffff800000803317 <make_dentry+0x1e2>
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000803316:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:34
}
ffff800000803317:	90                   	nop
ffff800000803318:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080331c:	c9                   	leave  
ffff80000080331d:	c3                   	ret    

ffff80000080331e <make_inode>:
make_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:35
void make_inode(struct index_node* i,struct index_node_operations* iops,struct file_operations* fops,unsigned long attr,struct super_block* sb){
ffff80000080331e:	f3 0f 1e fa          	endbr64 
ffff800000803322:	55                   	push   rbp
ffff800000803323:	48 89 e5             	mov    rbp,rsp
ffff800000803326:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803326 <make_inode+0x8>
ffff80000080332d:	49 bb aa a7 11 00 00 	movabs r11,0x11a7aa
ffff800000803334:	00 00 00 
ffff800000803337:	4c 01 d8             	add    rax,r11
ffff80000080333a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080333e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000803342:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000803346:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff80000080334a:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:36
    i->f_ops=fops;
ffff80000080334e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803352:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000803356:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:37
    i->attribute=attr;
ffff80000080335a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080335e:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000803362:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:38
    i->sb=sb;
ffff800000803366:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080336a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080336e:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:39
    i->file_size=0;
ffff800000803372:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803376:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:40
    i->inode_ops=iops;
ffff80000080337d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803381:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000803385:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:41
}
ffff800000803389:	90                   	nop
ffff80000080338a:	5d                   	pop    rbp
ffff80000080338b:	c3                   	ret    

ffff80000080338c <make_devf>:
make_devf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:42
void make_devf(struct dir_entry* d,struct index_node* i,char* name,struct dir_entry* ddev,struct file_operations* fops){
ffff80000080338c:	f3 0f 1e fa          	endbr64 
ffff800000803390:	55                   	push   rbp
ffff800000803391:	48 89 e5             	mov    rbp,rsp
ffff800000803394:	41 57                	push   r15
ffff800000803396:	41 54                	push   r12
ffff800000803398:	53                   	push   rbx
ffff800000803399:	48 83 ec 78          	sub    rsp,0x78
ffff80000080339d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080339d <make_devf+0x11>
ffff8000008033a4:	49 bb 33 a7 11 00 00 	movabs r11,0x11a733
ffff8000008033ab:	00 00 00 
ffff8000008033ae:	4c 01 db             	add    rbx,r11
ffff8000008033b1:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff8000008033b5:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffff8000008033b9:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
ffff8000008033bd:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
ffff8000008033c1:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:43
    make_dentry(d,name, strlen(name),root_sb->root,&dev_dir_dops);
ffff8000008033c8:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff8000008033cf:	ff ff ff 
ffff8000008033d2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008033d6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008033d9:	4c 8b 20             	mov    r12,QWORD PTR [rax]
ffff8000008033dc:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008033e0:	48 89 c7             	mov    rdi,rax
ffff8000008033e3:	49 89 df             	mov    r15,rbx
ffff8000008033e6:	48 b8 95 54 ef ff ff 	movabs rax,0xffffffffffef5495
ffff8000008033ed:	ff ff ff 
ffff8000008033f0:	48 01 d8             	add    rax,rbx
ffff8000008033f3:	ff d0                	call   rax
ffff8000008033f5:	89 c2                	mov    edx,eax
ffff8000008033f7:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
ffff8000008033fb:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008033ff:	48 b9 c0 ff ff ff ff 	movabs rcx,0xffffffffffffffc0
ffff800000803406:	ff ff ff 
ffff800000803409:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080340d:	49 89 c8             	mov    r8,rcx
ffff800000803410:	4c 89 e1             	mov    rcx,r12
ffff800000803413:	48 89 c7             	mov    rdi,rax
ffff800000803416:	49 89 df             	mov    r15,rbx
ffff800000803419:	48 b8 65 56 ee ff ff 	movabs rax,0xffffffffffee5665
ffff800000803420:	ff ff ff 
ffff800000803423:	48 01 d8             	add    rax,rbx
ffff800000803426:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:44
    d->dir_inode=i;
ffff800000803428:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080342c:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff800000803430:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:45
    make_inode(i,ddev->dir_inode->inode_ops,fops,FS_ATTR_DEVICE,root_sb);
ffff800000803434:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080343b:	ff ff ff 
ffff80000080343e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803442:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000803445:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000803449:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080344d:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff800000803451:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff800000803458:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080345c:	49 89 c8             	mov    r8,rcx
ffff80000080345f:	b9 04 00 00 00       	mov    ecx,0x4
ffff800000803464:	48 89 c7             	mov    rdi,rax
ffff800000803467:	49 89 df             	mov    r15,rbx
ffff80000080346a:	48 b8 4e 58 ee ff ff 	movabs rax,0xffffffffffee584e
ffff800000803471:	ff ff ff 
ffff800000803474:	48 01 d8             	add    rax,rbx
ffff800000803477:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:46
    list_add(&ddev->subdirs_list,&d->child_node);//添加到/dev下
ffff800000803479:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080347d:	48 83 c0 10          	add    rax,0x10
ffff800000803481:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff800000803485:	48 83 c2 28          	add    rdx,0x28
ffff800000803489:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff80000080348d:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff800000803491:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803495:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803499:	48 85 c0             	test   rax,rax
ffff80000080349c:	75 50                	jne    ffff8000008034ee <make_devf+0x162>
ffff80000080349e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008034a2:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffff8000008034a6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008034aa:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff8000008034ae:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008034b2:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008034b6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008034ba:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff8000008034be:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008034c2:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008034c6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff8000008034c9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008034cd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008034d1:	48 85 c0             	test   rax,rax
ffff8000008034d4:	0f 84 a3 00 00 00    	je     ffff80000080357d <make_devf+0x1f1>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff8000008034da:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008034de:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008034e2:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008034e6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff8000008034e9:	e9 8f 00 00 00       	jmp    ffff80000080357d <make_devf+0x1f1>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff8000008034ee:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008034f2:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff8000008034f6:	eb 21                	jmp    ffff800000803519 <make_devf+0x18d>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff8000008034f8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008034fc:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000803500:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803504:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000803508:	48 39 c2             	cmp    rdx,rax
ffff80000080350b:	74 73                	je     ffff800000803580 <make_devf+0x1f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080350d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000803511:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803515:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff800000803519:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080351d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803521:	48 85 c0             	test   rax,rax
ffff800000803524:	74 0e                	je     ffff800000803534 <make_devf+0x1a8>
ffff800000803526:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080352a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080352e:	48 39 45 b8          	cmp    QWORD PTR [rbp-0x48],rax
ffff800000803532:	75 c4                	jne    ffff8000008034f8 <make_devf+0x16c>
ffff800000803534:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000803538:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffff80000080353c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803540:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000803544:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000803548:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080354c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803550:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000803554:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803558:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff80000080355c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080355f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803563:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803567:	48 85 c0             	test   rax,rax
ffff80000080356a:	74 17                	je     ffff800000803583 <make_devf+0x1f7>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080356c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803570:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803574:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000803578:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080357b:	eb 06                	jmp    ffff800000803583 <make_devf+0x1f7>
ffff80000080357d:	90                   	nop
ffff80000080357e:	eb 04                	jmp    ffff800000803584 <make_devf+0x1f8>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff800000803580:	90                   	nop
ffff800000803581:	eb 01                	jmp    ffff800000803584 <make_devf+0x1f8>
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000803583:	90                   	nop
make_devf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:47
}
ffff800000803584:	90                   	nop
ffff800000803585:	48 83 c4 78          	add    rsp,0x78
ffff800000803589:	5b                   	pop    rbx
ffff80000080358a:	41 5c                	pop    r12
ffff80000080358c:	41 5f                	pop    r15
ffff80000080358e:	5d                   	pop    rbp
ffff80000080358f:	c3                   	ret    

ffff800000803590 <init_devfs>:
init_devfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:55
 * 这个/dev文件夹的dentry和inode等数据由devman管理，根文件系统切换时，这个文件夹会跟着挂载到新文件系统的根目录下。
 * */
struct dir_entry* ddev=NULL,*dmnt,*dconsole,*dhd0,*dtty,*dramdisk;
struct file ftty;
int init_devfs()
{
ffff800000803590:	f3 0f 1e fa          	endbr64 
ffff800000803594:	55                   	push   rbp
ffff800000803595:	48 89 e5             	mov    rbp,rsp
ffff800000803598:	41 57                	push   r15
ffff80000080359a:	53                   	push   rbx
ffff80000080359b:	48 83 ec 30          	sub    rsp,0x30
ffff80000080359f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080359f <init_devfs+0xf>
ffff8000008035a6:	49 bb 31 a5 11 00 00 	movabs r11,0x11a531
ffff8000008035ad:	00 00 00 
ffff8000008035b0:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:57
    //创建dev文件夹
    ddev=(struct dir_entry*) kmalloc();
ffff8000008035b3:	49 89 df             	mov    r15,rbx
ffff8000008035b6:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008035bb:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff8000008035c2:	ff ff ff 
ffff8000008035c5:	48 01 da             	add    rdx,rbx
ffff8000008035c8:	ff d2                	call   rdx
ffff8000008035ca:	48 89 c2             	mov    rdx,rax
ffff8000008035cd:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008035d4:	ff ff ff 
ffff8000008035d7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008035db:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:58
    struct index_node* idev=ddev+1;
ffff8000008035de:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008035e5:	ff ff ff 
ffff8000008035e8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008035ec:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008035ef:	48 83 c0 58          	add    rax,0x58
ffff8000008035f3:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:59
    ddev->name=idev+1;
ffff8000008035f7:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008035fe:	ff ff ff 
ffff800000803601:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803605:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803608:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080360c:	48 83 c2 40          	add    rdx,0x40
ffff800000803610:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:60
    make_dentry(ddev,"dev",3,root_sb->root,root_sb->root->dir_ops);
ffff800000803613:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080361a:	ff ff ff 
ffff80000080361d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803621:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803624:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803627:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
ffff80000080362b:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000803632:	ff ff ff 
ffff800000803635:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803639:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080363c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080363f:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803646:	ff ff ff 
ffff800000803649:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080364d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803650:	49 89 c8             	mov    r8,rcx
ffff800000803653:	48 89 d1             	mov    rcx,rdx
ffff800000803656:	ba 03 00 00 00       	mov    edx,0x3
ffff80000080365b:	48 be 8e d6 ff ff ff 	movabs rsi,0xffffffffffffd68e
ffff800000803662:	ff ff ff 
ffff800000803665:	48 8d 34 33          	lea    rsi,[rbx+rsi*1]
ffff800000803669:	48 89 c7             	mov    rdi,rax
ffff80000080366c:	49 89 df             	mov    r15,rbx
ffff80000080366f:	48 b8 65 56 ee ff ff 	movabs rax,0xffffffffffee5665
ffff800000803676:	ff ff ff 
ffff800000803679:	48 01 d8             	add    rax,rbx
ffff80000080367c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:61
    ddev->dir_inode=idev;
ffff80000080367e:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803685:	ff ff ff 
ffff800000803688:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080368c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080368f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000803693:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:62
    make_inode(idev,root_sb->root->dir_inode->inode_ops,root_sb->root->dir_inode->f_ops,FS_ATTR_DIR,root_sb);
ffff800000803697:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080369e:	ff ff ff 
ffff8000008036a1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008036a5:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008036a8:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff8000008036af:	ff ff ff 
ffff8000008036b2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008036b6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008036b9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008036bc:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008036c0:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff8000008036c4:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff8000008036cb:	ff ff ff 
ffff8000008036ce:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008036d2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008036d5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008036d8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008036dc:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff8000008036e0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008036e4:	49 89 c8             	mov    r8,rcx
ffff8000008036e7:	b9 02 00 00 00       	mov    ecx,0x2
ffff8000008036ec:	48 89 c7             	mov    rdi,rax
ffff8000008036ef:	49 89 df             	mov    r15,rbx
ffff8000008036f2:	48 b8 4e 58 ee ff ff 	movabs rax,0xffffffffffee584e
ffff8000008036f9:	ff ff ff 
ffff8000008036fc:	48 01 d8             	add    rax,rbx
ffff8000008036ff:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:63
    idev->private_index_info=ddev;
ffff800000803701:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803708:	ff ff ff 
ffff80000080370b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080370f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803712:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803716:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:66

    //创建mnt文件夹
    dmnt=(struct dir_entry*) kmalloc();
ffff80000080371a:	49 89 df             	mov    r15,rbx
ffff80000080371d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803722:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000803729:	ff ff ff 
ffff80000080372c:	48 01 da             	add    rdx,rbx
ffff80000080372f:	ff d2                	call   rdx
ffff800000803731:	48 89 c2             	mov    rdx,rax
ffff800000803734:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff80000080373b:	ff ff ff 
ffff80000080373e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803742:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:67
    struct index_node* imnt=dmnt+1;
ffff800000803745:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff80000080374c:	ff ff ff 
ffff80000080374f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803753:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803756:	48 83 c0 58          	add    rax,0x58
ffff80000080375a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:68
    dmnt->name=imnt+1;
ffff80000080375e:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000803765:	ff ff ff 
ffff800000803768:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080376c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080376f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000803773:	48 83 c2 40          	add    rdx,0x40
ffff800000803777:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:69
    make_dentry(dmnt,"mnt",3,root_sb->root,root_sb->root->dir_ops);
ffff80000080377a:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000803781:	ff ff ff 
ffff800000803784:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803788:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080378b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080378e:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
ffff800000803792:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000803799:	ff ff ff 
ffff80000080379c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008037a0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008037a3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008037a6:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff8000008037ad:	ff ff ff 
ffff8000008037b0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008037b4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008037b7:	49 89 c8             	mov    r8,rcx
ffff8000008037ba:	48 89 d1             	mov    rcx,rdx
ffff8000008037bd:	ba 03 00 00 00       	mov    edx,0x3
ffff8000008037c2:	48 be 92 d6 ff ff ff 	movabs rsi,0xffffffffffffd692
ffff8000008037c9:	ff ff ff 
ffff8000008037cc:	48 8d 34 33          	lea    rsi,[rbx+rsi*1]
ffff8000008037d0:	48 89 c7             	mov    rdi,rax
ffff8000008037d3:	49 89 df             	mov    r15,rbx
ffff8000008037d6:	48 b8 65 56 ee ff ff 	movabs rax,0xffffffffffee5665
ffff8000008037dd:	ff ff ff 
ffff8000008037e0:	48 01 d8             	add    rax,rbx
ffff8000008037e3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:70
    dmnt->dir_inode=imnt;
ffff8000008037e5:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff8000008037ec:	ff ff ff 
ffff8000008037ef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008037f3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008037f6:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008037fa:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:71
    make_inode(imnt,root_sb->root->dir_inode->inode_ops,root_sb->root->dir_inode->f_ops,FS_ATTR_DIR,root_sb);
ffff8000008037fe:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000803805:	ff ff ff 
ffff800000803808:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080380c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080380f:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000803816:	ff ff ff 
ffff800000803819:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080381d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803820:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803823:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803827:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080382b:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000803832:	ff ff ff 
ffff800000803835:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803839:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080383c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080383f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803843:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff800000803847:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080384b:	49 89 c8             	mov    r8,rcx
ffff80000080384e:	b9 02 00 00 00       	mov    ecx,0x2
ffff800000803853:	48 89 c7             	mov    rdi,rax
ffff800000803856:	49 89 df             	mov    r15,rbx
ffff800000803859:	48 b8 4e 58 ee ff ff 	movabs rax,0xffffffffffee584e
ffff800000803860:	ff ff ff 
ffff800000803863:	48 01 d8             	add    rax,rbx
ffff800000803866:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:72
    imnt->private_index_info=dmnt;
ffff800000803868:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff80000080386f:	ff ff ff 
ffff800000803872:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803876:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803879:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080387d:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:77


    //创建几个设备文件
    //console-framebuffer.c
    dconsole= (struct dir_entry *) kmalloc();
ffff800000803881:	49 89 df             	mov    r15,rbx
ffff800000803884:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803889:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000803890:	ff ff ff 
ffff800000803893:	48 01 da             	add    rdx,rbx
ffff800000803896:	ff d2                	call   rdx
ffff800000803898:	48 89 c2             	mov    rdx,rax
ffff80000080389b:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff8000008038a2:	ff ff ff 
ffff8000008038a5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008038a9:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:78
    struct index_node* iconsole=dconsole+1;
ffff8000008038ac:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff8000008038b3:	ff ff ff 
ffff8000008038b6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008038ba:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008038bd:	48 83 c0 58          	add    rax,0x58
ffff8000008038c1:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:79
    dconsole->name=iconsole+1;
ffff8000008038c5:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff8000008038cc:	ff ff ff 
ffff8000008038cf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008038d3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008038d6:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008038da:	48 83 c2 40          	add    rdx,0x40
ffff8000008038de:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:80
    iconsole->dev=0x10000;
ffff8000008038e1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008038e5:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:81
    make_devf(dconsole,iconsole,"console",ddev,&devfs_fops);
ffff8000008038eb:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008038f2:	ff ff ff 
ffff8000008038f5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008038f9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008038fc:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff800000803903:	ff ff ff 
ffff800000803906:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080390a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080390d:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff800000803911:	48 b9 f0 fd ff ff ff 	movabs rcx,0xfffffffffffffdf0
ffff800000803918:	ff ff ff 
ffff80000080391b:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080391f:	49 89 c8             	mov    r8,rcx
ffff800000803922:	48 89 d1             	mov    rcx,rdx
ffff800000803925:	48 ba 96 d6 ff ff ff 	movabs rdx,0xffffffffffffd696
ffff80000080392c:	ff ff ff 
ffff80000080392f:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803933:	48 89 c7             	mov    rdi,rax
ffff800000803936:	49 89 df             	mov    r15,rbx
ffff800000803939:	48 b8 bc 58 ee ff ff 	movabs rax,0xffffffffffee58bc
ffff800000803940:	ff ff ff 
ffff800000803943:	48 01 d8             	add    rax,rbx
ffff800000803946:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:83
    //hd0-disk.c
    dhd0= (struct dir_entry *) kmalloc();
ffff800000803948:	49 89 df             	mov    r15,rbx
ffff80000080394b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803950:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000803957:	ff ff ff 
ffff80000080395a:	48 01 da             	add    rdx,rbx
ffff80000080395d:	ff d2                	call   rdx
ffff80000080395f:	48 89 c2             	mov    rdx,rax
ffff800000803962:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff800000803969:	ff ff ff 
ffff80000080396c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803970:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:84
    struct index_node* ihd0=dhd0+1;
ffff800000803973:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff80000080397a:	ff ff ff 
ffff80000080397d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803981:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803984:	48 83 c0 58          	add    rax,0x58
ffff800000803988:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:85
    dhd0->name=ihd0+1;
ffff80000080398c:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff800000803993:	ff ff ff 
ffff800000803996:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080399a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080399d:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008039a1:	48 83 c2 40          	add    rdx,0x40
ffff8000008039a5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:87
    extern int dev_hd;
    ihd0->dev=dev_hd<<8;
ffff8000008039a8:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff8000008039af:	ff ff ff 
ffff8000008039b2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008039b6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008039b8:	c1 e0 08             	shl    eax,0x8
ffff8000008039bb:	89 c2                	mov    edx,eax
ffff8000008039bd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008039c1:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:88
    make_devf(dhd0,ihd0,"hd0",ddev,&devfs_fops);
ffff8000008039c5:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008039cc:	ff ff ff 
ffff8000008039cf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008039d3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008039d6:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff8000008039dd:	ff ff ff 
ffff8000008039e0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008039e4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008039e7:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff8000008039eb:	48 b9 f0 fd ff ff ff 	movabs rcx,0xfffffffffffffdf0
ffff8000008039f2:	ff ff ff 
ffff8000008039f5:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff8000008039f9:	49 89 c8             	mov    r8,rcx
ffff8000008039fc:	48 89 d1             	mov    rcx,rdx
ffff8000008039ff:	48 ba 9e d6 ff ff ff 	movabs rdx,0xffffffffffffd69e
ffff800000803a06:	ff ff ff 
ffff800000803a09:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803a0d:	48 89 c7             	mov    rdi,rax
ffff800000803a10:	49 89 df             	mov    r15,rbx
ffff800000803a13:	48 b8 bc 58 ee ff ff 	movabs rax,0xffffffffffee58bc
ffff800000803a1a:	ff ff ff 
ffff800000803a1d:	48 01 d8             	add    rax,rbx
ffff800000803a20:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:90
    //tty-tty.c
    dtty= (struct dir_entry *) kmalloc();
ffff800000803a22:	49 89 df             	mov    r15,rbx
ffff800000803a25:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803a2a:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000803a31:	ff ff ff 
ffff800000803a34:	48 01 da             	add    rdx,rbx
ffff800000803a37:	ff d2                	call   rdx
ffff800000803a39:	48 89 c2             	mov    rdx,rax
ffff800000803a3c:	48 b8 78 fd ff ff ff 	movabs rax,0xfffffffffffffd78
ffff800000803a43:	ff ff ff 
ffff800000803a46:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a4a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:91
    struct index_node* itty=dtty+1;
ffff800000803a4d:	48 b8 78 fd ff ff ff 	movabs rax,0xfffffffffffffd78
ffff800000803a54:	ff ff ff 
ffff800000803a57:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a5b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803a5e:	48 83 c0 58          	add    rax,0x58
ffff800000803a62:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:92
    dtty->name=itty+1;
ffff800000803a66:	48 b8 78 fd ff ff ff 	movabs rax,0xfffffffffffffd78
ffff800000803a6d:	ff ff ff 
ffff800000803a70:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a74:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803a77:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000803a7b:	48 83 c2 40          	add    rdx,0x40
ffff800000803a7f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:93
    itty->dev|=0x10000;
ffff800000803a82:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803a86:	0f b7 50 18          	movzx  edx,WORD PTR [rax+0x18]
ffff800000803a8a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803a8e:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:94
    make_devf(dtty,itty,"tty",ddev,&devfs_fops);
ffff800000803a92:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803a99:	ff ff ff 
ffff800000803a9c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803aa0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803aa3:	48 b8 78 fd ff ff ff 	movabs rax,0xfffffffffffffd78
ffff800000803aaa:	ff ff ff 
ffff800000803aad:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803ab1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803ab4:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffff800000803ab8:	48 b9 f0 fd ff ff ff 	movabs rcx,0xfffffffffffffdf0
ffff800000803abf:	ff ff ff 
ffff800000803ac2:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803ac6:	49 89 c8             	mov    r8,rcx
ffff800000803ac9:	48 89 d1             	mov    rcx,rdx
ffff800000803acc:	48 ba a2 d6 ff ff ff 	movabs rdx,0xffffffffffffd6a2
ffff800000803ad3:	ff ff ff 
ffff800000803ad6:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803ada:	48 89 c7             	mov    rdi,rax
ffff800000803add:	49 89 df             	mov    r15,rbx
ffff800000803ae0:	48 b8 bc 58 ee ff ff 	movabs rax,0xffffffffffee58bc
ffff800000803ae7:	ff ff ff 
ffff800000803aea:	48 01 d8             	add    rax,rbx
ffff800000803aed:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:96
    //初始化一下
    tty_fops.open(itty,&ftty);
ffff800000803aef:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000803af6:	ff ff ff 
ffff800000803af9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803afd:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803b00:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803b04:	48 b9 40 fe ff ff ff 	movabs rcx,0xfffffffffffffe40
ffff800000803b0b:	ff ff ff 
ffff800000803b0e:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803b12:	48 89 ce             	mov    rsi,rcx
ffff800000803b15:	48 89 c7             	mov    rdi,rax
ffff800000803b18:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:99

    //ramdisk- ramdisk.c
    dramdisk= (struct dir_entry *) kmalloc();
ffff800000803b1a:	49 89 df             	mov    r15,rbx
ffff800000803b1d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803b22:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000803b29:	ff ff ff 
ffff800000803b2c:	48 01 da             	add    rdx,rbx
ffff800000803b2f:	ff d2                	call   rdx
ffff800000803b31:	48 89 c2             	mov    rdx,rax
ffff800000803b34:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff800000803b3b:	ff ff ff 
ffff800000803b3e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b42:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:100
    struct index_node* iramdisk=dramdisk+1;
ffff800000803b45:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff800000803b4c:	ff ff ff 
ffff800000803b4f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b53:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803b56:	48 83 c0 58          	add    rax,0x58
ffff800000803b5a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:101
    dramdisk->name=iramdisk+1;
ffff800000803b5e:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff800000803b65:	ff ff ff 
ffff800000803b68:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b6c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803b6f:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000803b73:	48 83 c2 40          	add    rdx,0x40
ffff800000803b77:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:102
    iramdisk->dev=dev_ramdisk<<8;
ffff800000803b7a:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000803b81:	ff ff ff 
ffff800000803b84:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b88:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803b8a:	c1 e0 08             	shl    eax,0x8
ffff800000803b8d:	89 c2                	mov    edx,eax
ffff800000803b8f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000803b93:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:103
    make_devf(dramdisk,iramdisk,"ram",ddev,&devfs_fops);
ffff800000803b97:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803b9e:	ff ff ff 
ffff800000803ba1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803ba5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803ba8:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff800000803baf:	ff ff ff 
ffff800000803bb2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803bb6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803bb9:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000803bbd:	48 b9 f0 fd ff ff ff 	movabs rcx,0xfffffffffffffdf0
ffff800000803bc4:	ff ff ff 
ffff800000803bc7:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803bcb:	49 89 c8             	mov    r8,rcx
ffff800000803bce:	48 89 d1             	mov    rcx,rdx
ffff800000803bd1:	48 ba a6 d6 ff ff ff 	movabs rdx,0xffffffffffffd6a6
ffff800000803bd8:	ff ff ff 
ffff800000803bdb:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803bdf:	48 89 c7             	mov    rdi,rax
ffff800000803be2:	49 89 df             	mov    r15,rbx
ffff800000803be5:	48 b8 bc 58 ee ff ff 	movabs rax,0xffffffffffee58bc
ffff800000803bec:	ff ff ff 
ffff800000803bef:	48 01 d8             	add    rax,rbx
ffff800000803bf2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:105

}
ffff800000803bf4:	90                   	nop
ffff800000803bf5:	48 83 c4 30          	add    rsp,0x30
ffff800000803bf9:	5b                   	pop    rbx
ffff800000803bfa:	41 5f                	pop    r15
ffff800000803bfc:	5d                   	pop    rbp
ffff800000803bfd:	c3                   	ret    

ffff800000803bfe <open_dev>:
open_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:107
//
long open_dev(struct index_node * inode,struct file * filp){
ffff800000803bfe:	f3 0f 1e fa          	endbr64 
ffff800000803c02:	55                   	push   rbp
ffff800000803c03:	48 89 e5             	mov    rbp,rsp
ffff800000803c06:	41 57                	push   r15
ffff800000803c08:	53                   	push   rbx
ffff800000803c09:	48 83 ec 20          	sub    rsp,0x20
ffff800000803c0d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803c0d <open_dev+0xf>
ffff800000803c14:	49 bb c3 9e 11 00 00 	movabs r11,0x119ec3
ffff800000803c1b:	00 00 00 
ffff800000803c1e:	4c 01 db             	add    rbx,r11
ffff800000803c21:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000803c25:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:109
    //查看文件名
    char* name=filp->dentry->name;
ffff800000803c29:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803c2d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803c31:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803c34:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:110
    char* p=name+ strlen(name)-1;
ffff800000803c38:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803c3c:	48 89 c7             	mov    rdi,rax
ffff800000803c3f:	49 89 df             	mov    r15,rbx
ffff800000803c42:	48 b8 95 54 ef ff ff 	movabs rax,0xffffffffffef5495
ffff800000803c49:	ff ff ff 
ffff800000803c4c:	48 01 d8             	add    rax,rbx
ffff800000803c4f:	ff d0                	call   rax
ffff800000803c51:	48 98                	cdqe   
ffff800000803c53:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000803c57:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803c5b:	48 01 d0             	add    rax,rdx
ffff800000803c5e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:111
    for(;*p!='/'&&p>=name;p--);
ffff800000803c62:	eb 05                	jmp    ffff800000803c69 <open_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:111 (discriminator 3)
ffff800000803c64:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:111 (discriminator 1)
ffff800000803c69:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803c6d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803c70:	3c 2f                	cmp    al,0x2f
ffff800000803c72:	74 0a                	je     ffff800000803c7e <open_dev+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:111 (discriminator 2)
ffff800000803c74:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803c78:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803c7c:	73 e6                	jae    ffff800000803c64 <open_dev+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:112
    if(p>=name)
ffff800000803c7e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803c82:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803c86:	72 0c                	jb     ffff800000803c94 <open_dev+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:113
        name=p+1;
ffff800000803c88:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803c8c:	48 83 c0 01          	add    rax,0x1
ffff800000803c90:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:114
    if(memcmp(name,"tty",3)==0){
ffff800000803c94:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803c98:	ba 03 00 00 00       	mov    edx,0x3
ffff800000803c9d:	48 b9 a2 d6 ff ff ff 	movabs rcx,0xffffffffffffd6a2
ffff800000803ca4:	ff ff ff 
ffff800000803ca7:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000803cab:	48 89 ce             	mov    rsi,rcx
ffff800000803cae:	48 89 c7             	mov    rdi,rax
ffff800000803cb1:	49 89 df             	mov    r15,rbx
ffff800000803cb4:	48 b8 0e 51 ef ff ff 	movabs rax,0xffffffffffef510e
ffff800000803cbb:	ff ff ff 
ffff800000803cbe:	48 01 d8             	add    rax,rbx
ffff800000803cc1:	ff d0                	call   rax
ffff800000803cc3:	85 c0                	test   eax,eax
ffff800000803cc5:	75 22                	jne    ffff800000803ce9 <open_dev+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:115
        return init_tty(inode,filp);
ffff800000803cc7:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803ccb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803ccf:	48 89 d6             	mov    rsi,rdx
ffff800000803cd2:	48 89 c7             	mov    rdi,rax
ffff800000803cd5:	49 89 df             	mov    r15,rbx
ffff800000803cd8:	48 b8 8c 44 ef ff ff 	movabs rax,0xffffffffffef448c
ffff800000803cdf:	ff ff ff 
ffff800000803ce2:	48 01 d8             	add    rax,rbx
ffff800000803ce5:	ff d0                	call   rax
ffff800000803ce7:	eb 57                	jmp    ffff800000803d40 <open_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:116
    }else if(strcmp(name,"console")==0){
ffff800000803ce9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803ced:	48 ba 96 d6 ff ff ff 	movabs rdx,0xffffffffffffd696
ffff800000803cf4:	ff ff ff 
ffff800000803cf7:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803cfb:	48 89 d6             	mov    rsi,rdx
ffff800000803cfe:	48 89 c7             	mov    rdi,rax
ffff800000803d01:	49 89 df             	mov    r15,rbx
ffff800000803d04:	48 b8 16 54 ef ff ff 	movabs rax,0xffffffffffef5416
ffff800000803d0b:	ff ff ff 
ffff800000803d0e:	48 01 d8             	add    rax,rbx
ffff800000803d11:	ff d0                	call   rax
ffff800000803d13:	85 c0                	test   eax,eax
ffff800000803d15:	75 22                	jne    ffff800000803d39 <open_dev+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:117
        return open_framebuffer(inode,filp);
ffff800000803d17:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803d1b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803d1f:	48 89 d6             	mov    rsi,rdx
ffff800000803d22:	48 89 c7             	mov    rdi,rax
ffff800000803d25:	49 89 df             	mov    r15,rbx
ffff800000803d28:	48 b8 3c d1 ee ff ff 	movabs rax,0xffffffffffeed13c
ffff800000803d2f:	ff ff ff 
ffff800000803d32:	48 01 d8             	add    rax,rbx
ffff800000803d35:	ff d0                	call   rax
ffff800000803d37:	eb 07                	jmp    ffff800000803d40 <open_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:119
    }
    return -1;
ffff800000803d39:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:120
}
ffff800000803d40:	48 83 c4 20          	add    rsp,0x20
ffff800000803d44:	5b                   	pop    rbx
ffff800000803d45:	41 5f                	pop    r15
ffff800000803d47:	5d                   	pop    rbp
ffff800000803d48:	c3                   	ret    

ffff800000803d49 <close_dev>:
close_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:121
long close_dev(struct index_node * inode,struct file * filp){
ffff800000803d49:	f3 0f 1e fa          	endbr64 
ffff800000803d4d:	55                   	push   rbp
ffff800000803d4e:	48 89 e5             	mov    rbp,rsp
ffff800000803d51:	41 57                	push   r15
ffff800000803d53:	53                   	push   rbx
ffff800000803d54:	48 83 ec 20          	sub    rsp,0x20
ffff800000803d58:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803d58 <close_dev+0xf>
ffff800000803d5f:	49 bb 78 9d 11 00 00 	movabs r11,0x119d78
ffff800000803d66:	00 00 00 
ffff800000803d69:	4c 01 db             	add    rbx,r11
ffff800000803d6c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000803d70:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:123
    //查看文件名
    char* name=filp->dentry->name;
ffff800000803d74:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803d78:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803d7c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803d7f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:124
    char* p=name+ strlen(name)-1;
ffff800000803d83:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803d87:	48 89 c7             	mov    rdi,rax
ffff800000803d8a:	49 89 df             	mov    r15,rbx
ffff800000803d8d:	48 b8 95 54 ef ff ff 	movabs rax,0xffffffffffef5495
ffff800000803d94:	ff ff ff 
ffff800000803d97:	48 01 d8             	add    rax,rbx
ffff800000803d9a:	ff d0                	call   rax
ffff800000803d9c:	48 98                	cdqe   
ffff800000803d9e:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000803da2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803da6:	48 01 d0             	add    rax,rdx
ffff800000803da9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:125
    for(;*p!='/'&&p>=name;p--);
ffff800000803dad:	eb 05                	jmp    ffff800000803db4 <close_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:125 (discriminator 3)
ffff800000803daf:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:125 (discriminator 1)
ffff800000803db4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803db8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803dbb:	3c 2f                	cmp    al,0x2f
ffff800000803dbd:	74 0a                	je     ffff800000803dc9 <close_dev+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:125 (discriminator 2)
ffff800000803dbf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803dc3:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803dc7:	73 e6                	jae    ffff800000803daf <close_dev+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:126
    if(p>=name)
ffff800000803dc9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803dcd:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803dd1:	72 0c                	jb     ffff800000803ddf <close_dev+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:127
        name=p+1;
ffff800000803dd3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803dd7:	48 83 c0 01          	add    rax,0x1
ffff800000803ddb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:128
    if(memcmp(name,"tty",3)==0){
ffff800000803ddf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803de3:	ba 03 00 00 00       	mov    edx,0x3
ffff800000803de8:	48 b9 a2 d6 ff ff ff 	movabs rcx,0xffffffffffffd6a2
ffff800000803def:	ff ff ff 
ffff800000803df2:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000803df6:	48 89 ce             	mov    rsi,rcx
ffff800000803df9:	48 89 c7             	mov    rdi,rax
ffff800000803dfc:	49 89 df             	mov    r15,rbx
ffff800000803dff:	48 b8 0e 51 ef ff ff 	movabs rax,0xffffffffffef510e
ffff800000803e06:	ff ff ff 
ffff800000803e09:	48 01 d8             	add    rax,rbx
ffff800000803e0c:	ff d0                	call   rax
ffff800000803e0e:	85 c0                	test   eax,eax
ffff800000803e10:	75 22                	jne    ffff800000803e34 <close_dev+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:129
        return close_tty(inode,filp);
ffff800000803e12:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803e16:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803e1a:	48 89 d6             	mov    rsi,rdx
ffff800000803e1d:	48 89 c7             	mov    rdi,rax
ffff800000803e20:	49 89 df             	mov    r15,rbx
ffff800000803e23:	48 b8 bf 43 ef ff ff 	movabs rax,0xffffffffffef43bf
ffff800000803e2a:	ff ff ff 
ffff800000803e2d:	48 01 d8             	add    rax,rbx
ffff800000803e30:	ff d0                	call   rax
ffff800000803e32:	eb 57                	jmp    ffff800000803e8b <close_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:130
    }else if(strcmp(name,"console")==0){
ffff800000803e34:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803e38:	48 ba 96 d6 ff ff ff 	movabs rdx,0xffffffffffffd696
ffff800000803e3f:	ff ff ff 
ffff800000803e42:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803e46:	48 89 d6             	mov    rsi,rdx
ffff800000803e49:	48 89 c7             	mov    rdi,rax
ffff800000803e4c:	49 89 df             	mov    r15,rbx
ffff800000803e4f:	48 b8 16 54 ef ff ff 	movabs rax,0xffffffffffef5416
ffff800000803e56:	ff ff ff 
ffff800000803e59:	48 01 d8             	add    rax,rbx
ffff800000803e5c:	ff d0                	call   rax
ffff800000803e5e:	85 c0                	test   eax,eax
ffff800000803e60:	75 22                	jne    ffff800000803e84 <close_dev+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:131
        return close_framebuffer(inode,filp);
ffff800000803e62:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803e66:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803e6a:	48 89 d6             	mov    rsi,rdx
ffff800000803e6d:	48 89 c7             	mov    rdi,rax
ffff800000803e70:	49 89 df             	mov    r15,rbx
ffff800000803e73:	48 b8 93 d1 ee ff ff 	movabs rax,0xffffffffffeed193
ffff800000803e7a:	ff ff ff 
ffff800000803e7d:	48 01 d8             	add    rax,rbx
ffff800000803e80:	ff d0                	call   rax
ffff800000803e82:	eb 07                	jmp    ffff800000803e8b <close_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:133
    }
    return -1;
ffff800000803e84:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:135

}
ffff800000803e8b:	48 83 c4 20          	add    rsp,0x20
ffff800000803e8f:	5b                   	pop    rbx
ffff800000803e90:	41 5f                	pop    r15
ffff800000803e92:	5d                   	pop    rbp
ffff800000803e93:	c3                   	ret    

ffff800000803e94 <read_dev>:
read_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:136
long read_dev(struct file * filp,char * buf,unsigned long count,long * position){
ffff800000803e94:	f3 0f 1e fa          	endbr64 
ffff800000803e98:	55                   	push   rbp
ffff800000803e99:	48 89 e5             	mov    rbp,rsp
ffff800000803e9c:	41 57                	push   r15
ffff800000803e9e:	53                   	push   rbx
ffff800000803e9f:	48 83 ec 40          	sub    rsp,0x40
ffff800000803ea3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803ea3 <read_dev+0xf>
ffff800000803eaa:	49 bb 2d 9c 11 00 00 	movabs r11,0x119c2d
ffff800000803eb1:	00 00 00 
ffff800000803eb4:	4c 01 db             	add    rbx,r11
ffff800000803eb7:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000803ebb:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000803ebf:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff800000803ec3:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:138
    //判断是不是块设备文件
    struct index_node* i_dev=filp->dentry->dir_inode;
ffff800000803ec7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803ecb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803ecf:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803ed3:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:145
        //这里需要调用缓冲区层的函数读取块设备
        return blkdev_read(i_dev->dev,*position,count,buf);
    }
    
    //查看文件名
    char* name=filp->dentry->name;
ffff800000803ed7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803edb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803edf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803ee2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:146
    char* p=name+ strlen(name)-1;
ffff800000803ee6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803eea:	48 89 c7             	mov    rdi,rax
ffff800000803eed:	49 89 df             	mov    r15,rbx
ffff800000803ef0:	48 b8 95 54 ef ff ff 	movabs rax,0xffffffffffef5495
ffff800000803ef7:	ff ff ff 
ffff800000803efa:	48 01 d8             	add    rax,rbx
ffff800000803efd:	ff d0                	call   rax
ffff800000803eff:	48 98                	cdqe   
ffff800000803f01:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000803f05:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803f09:	48 01 d0             	add    rax,rdx
ffff800000803f0c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:147
    for(;*p!='/'&&p>=name;p--);
ffff800000803f10:	eb 05                	jmp    ffff800000803f17 <read_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:147 (discriminator 3)
ffff800000803f12:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:147 (discriminator 1)
ffff800000803f17:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803f1b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803f1e:	3c 2f                	cmp    al,0x2f
ffff800000803f20:	74 0a                	je     ffff800000803f2c <read_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:147 (discriminator 2)
ffff800000803f22:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803f26:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803f2a:	73 e6                	jae    ffff800000803f12 <read_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:148
    if(p>=name)
ffff800000803f2c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803f30:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803f34:	72 0c                	jb     ffff800000803f42 <read_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:149
        name=p+1;
ffff800000803f36:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803f3a:	48 83 c0 01          	add    rax,0x1
ffff800000803f3e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:150
    if(memcmp(name,"tty",3)==0){
ffff800000803f42:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803f46:	ba 03 00 00 00       	mov    edx,0x3
ffff800000803f4b:	48 b9 a2 d6 ff ff ff 	movabs rcx,0xffffffffffffd6a2
ffff800000803f52:	ff ff ff 
ffff800000803f55:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000803f59:	48 89 ce             	mov    rsi,rcx
ffff800000803f5c:	48 89 c7             	mov    rdi,rax
ffff800000803f5f:	49 89 df             	mov    r15,rbx
ffff800000803f62:	48 b8 0e 51 ef ff ff 	movabs rax,0xffffffffffef510e
ffff800000803f69:	ff ff ff 
ffff800000803f6c:	48 01 d8             	add    rax,rbx
ffff800000803f6f:	ff d0                	call   rax
ffff800000803f71:	85 c0                	test   eax,eax
ffff800000803f73:	75 27                	jne    ffff800000803f9c <read_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:151
        return read_tty(filp,buf,count,position);
ffff800000803f75:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000803f79:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000803f7d:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000803f81:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803f85:	48 89 c7             	mov    rdi,rax
ffff800000803f88:	49 89 df             	mov    r15,rbx
ffff800000803f8b:	48 b8 e0 45 ef ff ff 	movabs rax,0xffffffffffef45e0
ffff800000803f92:	ff ff ff 
ffff800000803f95:	48 01 d8             	add    rax,rbx
ffff800000803f98:	ff d0                	call   rax
ffff800000803f9a:	eb 5c                	jmp    ffff800000803ff8 <read_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:152
    }else if(strcmp(name,"console")==0){
ffff800000803f9c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803fa0:	48 ba 96 d6 ff ff ff 	movabs rdx,0xffffffffffffd696
ffff800000803fa7:	ff ff ff 
ffff800000803faa:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803fae:	48 89 d6             	mov    rsi,rdx
ffff800000803fb1:	48 89 c7             	mov    rdi,rax
ffff800000803fb4:	49 89 df             	mov    r15,rbx
ffff800000803fb7:	48 b8 16 54 ef ff ff 	movabs rax,0xffffffffffef5416
ffff800000803fbe:	ff ff ff 
ffff800000803fc1:	48 01 d8             	add    rax,rbx
ffff800000803fc4:	ff d0                	call   rax
ffff800000803fc6:	85 c0                	test   eax,eax
ffff800000803fc8:	75 27                	jne    ffff800000803ff1 <read_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:153
        return read_framebuffer(filp,buf,count,position);
ffff800000803fca:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000803fce:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000803fd2:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000803fd6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803fda:	48 89 c7             	mov    rdi,rax
ffff800000803fdd:	49 89 df             	mov    r15,rbx
ffff800000803fe0:	48 b8 ba d1 ee ff ff 	movabs rax,0xffffffffffeed1ba
ffff800000803fe7:	ff ff ff 
ffff800000803fea:	48 01 d8             	add    rax,rbx
ffff800000803fed:	ff d0                	call   rax
ffff800000803fef:	eb 07                	jmp    ffff800000803ff8 <read_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:155
    }
    return -1;
ffff800000803ff1:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:157

}
ffff800000803ff8:	48 83 c4 40          	add    rsp,0x40
ffff800000803ffc:	5b                   	pop    rbx
ffff800000803ffd:	41 5f                	pop    r15
ffff800000803fff:	5d                   	pop    rbp
ffff800000804000:	c3                   	ret    

ffff800000804001 <write_dev>:
write_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:158
long write_dev(struct file * filp,char * buf,unsigned long count,long * position){
ffff800000804001:	f3 0f 1e fa          	endbr64 
ffff800000804005:	55                   	push   rbp
ffff800000804006:	48 89 e5             	mov    rbp,rsp
ffff800000804009:	41 57                	push   r15
ffff80000080400b:	53                   	push   rbx
ffff80000080400c:	48 83 ec 40          	sub    rsp,0x40
ffff800000804010:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804010 <write_dev+0xf>
ffff800000804017:	49 bb c0 9a 11 00 00 	movabs r11,0x119ac0
ffff80000080401e:	00 00 00 
ffff800000804021:	4c 01 db             	add    rbx,r11
ffff800000804024:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000804028:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff80000080402c:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff800000804030:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:160
    //判断是不是块设备文件
    struct index_node* idev=filp->dentry->dir_inode;
ffff800000804034:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804038:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080403c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000804040:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:167
        //这里需要调用缓冲区层的函数写块设备
        return blkdev_write(idev->dev,*position,count,buf);
    }

    //查看文件名
    char* name=filp->dentry->name;
ffff800000804044:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804048:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080404c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080404f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:168
    char* p=name+ strlen(name)-1;
ffff800000804053:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804057:	48 89 c7             	mov    rdi,rax
ffff80000080405a:	49 89 df             	mov    r15,rbx
ffff80000080405d:	48 b8 95 54 ef ff ff 	movabs rax,0xffffffffffef5495
ffff800000804064:	ff ff ff 
ffff800000804067:	48 01 d8             	add    rax,rbx
ffff80000080406a:	ff d0                	call   rax
ffff80000080406c:	48 98                	cdqe   
ffff80000080406e:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000804072:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804076:	48 01 d0             	add    rax,rdx
ffff800000804079:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169
    for(;*p!='/'&&p>=name;p--);
ffff80000080407d:	eb 05                	jmp    ffff800000804084 <write_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169 (discriminator 3)
ffff80000080407f:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169 (discriminator 1)
ffff800000804084:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804088:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080408b:	3c 2f                	cmp    al,0x2f
ffff80000080408d:	74 0a                	je     ffff800000804099 <write_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169 (discriminator 2)
ffff80000080408f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804093:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804097:	73 e6                	jae    ffff80000080407f <write_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:170
    if(p>=name)
ffff800000804099:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080409d:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff8000008040a1:	72 0c                	jb     ffff8000008040af <write_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:171
        name=p+1;
ffff8000008040a3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008040a7:	48 83 c0 01          	add    rax,0x1
ffff8000008040ab:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:172
    if(memcmp(name,"tty",3)==0){
ffff8000008040af:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008040b3:	ba 03 00 00 00       	mov    edx,0x3
ffff8000008040b8:	48 b9 a2 d6 ff ff ff 	movabs rcx,0xffffffffffffd6a2
ffff8000008040bf:	ff ff ff 
ffff8000008040c2:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff8000008040c6:	48 89 ce             	mov    rsi,rcx
ffff8000008040c9:	48 89 c7             	mov    rdi,rax
ffff8000008040cc:	49 89 df             	mov    r15,rbx
ffff8000008040cf:	48 b8 0e 51 ef ff ff 	movabs rax,0xffffffffffef510e
ffff8000008040d6:	ff ff ff 
ffff8000008040d9:	48 01 d8             	add    rax,rbx
ffff8000008040dc:	ff d0                	call   rax
ffff8000008040de:	85 c0                	test   eax,eax
ffff8000008040e0:	75 27                	jne    ffff800000804109 <write_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:173
        return write_tty(filp,buf,count,position);
ffff8000008040e2:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff8000008040e6:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008040ea:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff8000008040ee:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008040f2:	48 89 c7             	mov    rdi,rax
ffff8000008040f5:	49 89 df             	mov    r15,rbx
ffff8000008040f8:	48 b8 a1 46 ef ff ff 	movabs rax,0xffffffffffef46a1
ffff8000008040ff:	ff ff ff 
ffff800000804102:	48 01 d8             	add    rax,rbx
ffff800000804105:	ff d0                	call   rax
ffff800000804107:	eb 5c                	jmp    ffff800000804165 <write_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:174
    }else if(strcmp(name,"console")==0){
ffff800000804109:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080410d:	48 ba 96 d6 ff ff ff 	movabs rdx,0xffffffffffffd696
ffff800000804114:	ff ff ff 
ffff800000804117:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080411b:	48 89 d6             	mov    rsi,rdx
ffff80000080411e:	48 89 c7             	mov    rdi,rax
ffff800000804121:	49 89 df             	mov    r15,rbx
ffff800000804124:	48 b8 16 54 ef ff ff 	movabs rax,0xffffffffffef5416
ffff80000080412b:	ff ff ff 
ffff80000080412e:	48 01 d8             	add    rax,rbx
ffff800000804131:	ff d0                	call   rax
ffff800000804133:	85 c0                	test   eax,eax
ffff800000804135:	75 27                	jne    ffff80000080415e <write_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:175
        return write_framebuffer(filp,buf,count,position);
ffff800000804137:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff80000080413b:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080413f:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000804143:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804147:	48 89 c7             	mov    rdi,rax
ffff80000080414a:	49 89 df             	mov    r15,rbx
ffff80000080414d:	48 b8 e9 d1 ee ff ff 	movabs rax,0xffffffffffeed1e9
ffff800000804154:	ff ff ff 
ffff800000804157:	48 01 d8             	add    rax,rbx
ffff80000080415a:	ff d0                	call   rax
ffff80000080415c:	eb 07                	jmp    ffff800000804165 <write_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:177
    }
    return -1;
ffff80000080415e:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:179

}
ffff800000804165:	48 83 c4 40          	add    rsp,0x40
ffff800000804169:	5b                   	pop    rbx
ffff80000080416a:	41 5f                	pop    r15
ffff80000080416c:	5d                   	pop    rbp
ffff80000080416d:	c3                   	ret    

ffff80000080416e <ioctl_dev>:
ioctl_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:180
long ioctl_dev(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff80000080416e:	f3 0f 1e fa          	endbr64 
ffff800000804172:	55                   	push   rbp
ffff800000804173:	48 89 e5             	mov    rbp,rsp
ffff800000804176:	41 57                	push   r15
ffff800000804178:	53                   	push   rbx
ffff800000804179:	48 83 ec 40          	sub    rsp,0x40
ffff80000080417d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080417d <ioctl_dev+0xf>
ffff800000804184:	49 bb 53 99 11 00 00 	movabs r11,0x119953
ffff80000080418b:	00 00 00 
ffff80000080418e:	4c 01 db             	add    rbx,r11
ffff800000804191:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000804195:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000804199:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff80000080419d:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:182
    //判断是不是块设备文件
    struct index_node* idev=filp->dentry->dir_inode;
ffff8000008041a1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008041a5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008041a9:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008041ad:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:188
    if(IS_BLKDEV(idev->dev)){
        //这里需要调用缓冲区层的函数ioctl块设备
        return 1;
    }
    //查看文件名
    char* name=filp->dentry->name;
ffff8000008041b1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008041b5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008041b9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008041bc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:189
    char* p=name+ strlen(name)-1;
ffff8000008041c0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008041c4:	48 89 c7             	mov    rdi,rax
ffff8000008041c7:	49 89 df             	mov    r15,rbx
ffff8000008041ca:	48 b8 95 54 ef ff ff 	movabs rax,0xffffffffffef5495
ffff8000008041d1:	ff ff ff 
ffff8000008041d4:	48 01 d8             	add    rax,rbx
ffff8000008041d7:	ff d0                	call   rax
ffff8000008041d9:	48 98                	cdqe   
ffff8000008041db:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff8000008041df:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008041e3:	48 01 d0             	add    rax,rdx
ffff8000008041e6:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:190
    for(;*p!='/'&&p>=name;p--);
ffff8000008041ea:	eb 05                	jmp    ffff8000008041f1 <ioctl_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:190 (discriminator 3)
ffff8000008041ec:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:190 (discriminator 1)
ffff8000008041f1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008041f5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008041f8:	3c 2f                	cmp    al,0x2f
ffff8000008041fa:	74 0a                	je     ffff800000804206 <ioctl_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:190 (discriminator 2)
ffff8000008041fc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804200:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804204:	73 e6                	jae    ffff8000008041ec <ioctl_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:191
    if(p>=name)
ffff800000804206:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080420a:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff80000080420e:	72 0c                	jb     ffff80000080421c <ioctl_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:192
        name=p+1;
ffff800000804210:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804214:	48 83 c0 01          	add    rax,0x1
ffff800000804218:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:193
    if(memcmp(name,"tty",3)==0){
ffff80000080421c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804220:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804225:	48 b9 a2 d6 ff ff ff 	movabs rcx,0xffffffffffffd6a2
ffff80000080422c:	ff ff ff 
ffff80000080422f:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000804233:	48 89 ce             	mov    rsi,rcx
ffff800000804236:	48 89 c7             	mov    rdi,rax
ffff800000804239:	49 89 df             	mov    r15,rbx
ffff80000080423c:	48 b8 0e 51 ef ff ff 	movabs rax,0xffffffffffef510e
ffff800000804243:	ff ff ff 
ffff800000804246:	48 01 d8             	add    rax,rbx
ffff800000804249:	ff d0                	call   rax
ffff80000080424b:	85 c0                	test   eax,eax
ffff80000080424d:	75 27                	jne    ffff800000804276 <ioctl_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:194
        return ioctl_tty(inode, filp, cmd, arg);
ffff80000080424f:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000804253:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000804257:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff80000080425b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080425f:	48 89 c7             	mov    rdi,rax
ffff800000804262:	49 89 df             	mov    r15,rbx
ffff800000804265:	48 b8 91 47 ef ff ff 	movabs rax,0xffffffffffef4791
ffff80000080426c:	ff ff ff 
ffff80000080426f:	48 01 d8             	add    rax,rbx
ffff800000804272:	ff d0                	call   rax
ffff800000804274:	eb 5c                	jmp    ffff8000008042d2 <ioctl_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:195
    }else if(strcmp(name,"console")==0){
ffff800000804276:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080427a:	48 ba 96 d6 ff ff ff 	movabs rdx,0xffffffffffffd696
ffff800000804281:	ff ff ff 
ffff800000804284:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804288:	48 89 d6             	mov    rsi,rdx
ffff80000080428b:	48 89 c7             	mov    rdi,rax
ffff80000080428e:	49 89 df             	mov    r15,rbx
ffff800000804291:	48 b8 16 54 ef ff ff 	movabs rax,0xffffffffffef5416
ffff800000804298:	ff ff ff 
ffff80000080429b:	48 01 d8             	add    rax,rbx
ffff80000080429e:	ff d0                	call   rax
ffff8000008042a0:	85 c0                	test   eax,eax
ffff8000008042a2:	75 27                	jne    ffff8000008042cb <ioctl_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:196
        return ioctl_framebuffer(inode,filp,cmd,arg);
ffff8000008042a4:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff8000008042a8:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008042ac:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff8000008042b0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008042b4:	48 89 c7             	mov    rdi,rax
ffff8000008042b7:	49 89 df             	mov    r15,rbx
ffff8000008042ba:	48 b8 0a d3 ee ff ff 	movabs rax,0xffffffffffeed30a
ffff8000008042c1:	ff ff ff 
ffff8000008042c4:	48 01 d8             	add    rax,rbx
ffff8000008042c7:	ff d0                	call   rax
ffff8000008042c9:	eb 07                	jmp    ffff8000008042d2 <ioctl_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:198
    }
    return -1;
ffff8000008042cb:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:200

}
ffff8000008042d2:	48 83 c4 40          	add    rsp,0x40
ffff8000008042d6:	5b                   	pop    rbx
ffff8000008042d7:	41 5f                	pop    r15
ffff8000008042d9:	5d                   	pop    rbp
ffff8000008042da:	c3                   	ret    

ffff8000008042db <load_driver>:
load_driver():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:202
int load_driver(char *path)
{
ffff8000008042db:	f3 0f 1e fa          	endbr64 
ffff8000008042df:	55                   	push   rbp
ffff8000008042e0:	48 89 e5             	mov    rbp,rsp
ffff8000008042e3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008042e3 <load_driver+0x8>
ffff8000008042ea:	49 bb ed 97 11 00 00 	movabs r11,0x1197ed
ffff8000008042f1:	00 00 00 
ffff8000008042f4:	4c 01 d8             	add    rax,r11
ffff8000008042f7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:204
    
}
ffff8000008042fb:	90                   	nop
ffff8000008042fc:	5d                   	pop    rbp
ffff8000008042fd:	c3                   	ret    

ffff8000008042fe <init_proc>:
init_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:26
TSS *tss=0xffff800000108000ul;
int cur_proc=0;
int pidd=0;
int palloc_paddr=0;
static pid_t sidd=0;
void init_proc(){
ffff8000008042fe:	f3 0f 1e fa          	endbr64 
ffff800000804302:	55                   	push   rbp
ffff800000804303:	48 89 e5             	mov    rbp,rsp
ffff800000804306:	41 57                	push   r15
ffff800000804308:	53                   	push   rbx
ffff800000804309:	48 83 ec 10          	sub    rsp,0x10
ffff80000080430d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080430d <init_proc+0xf>
ffff800000804314:	49 bb c3 97 11 00 00 	movabs r11,0x1197c3
ffff80000080431b:	00 00 00 
ffff80000080431e:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:28
    //task=(struct process*)get_global_var(TASK_PCBS_ADDR);//[MAX_TASKS];;
    task=(struct process*)kmallocat(0,13);
ffff800000804321:	be 0d 00 00 00       	mov    esi,0xd
ffff800000804326:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080432b:	49 89 df             	mov    r15,rbx
ffff80000080432e:	48 b8 a0 45 ee ff ff 	movabs rax,0xffffffffffee45a0
ffff800000804335:	ff ff ff 
ffff800000804338:	48 01 d8             	add    rax,rbx
ffff80000080433b:	ff d0                	call   rax
ffff80000080433d:	48 89 c2             	mov    rdx,rax
ffff800000804340:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804347:	ff ff ff 
ffff80000080434a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080434e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29
    for(int i=0;i<MAX_PROC_COUNT;i++){
ffff800000804351:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000804358:	eb 7b                	jmp    ffff8000008043d5 <init_proc+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:30 (discriminator 3)
        task[i].pid=-1;
ffff80000080435a:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804361:	ff ff ff 
ffff800000804364:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804368:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080436b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080436e:	48 98                	cdqe   
ffff800000804370:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804377:	48 01 d0             	add    rax,rdx
ffff80000080437a:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:31 (discriminator 3)
        task[i].stat=TASK_EMPTY;
ffff800000804380:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804387:	ff ff ff 
ffff80000080438a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080438e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804391:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804394:	48 98                	cdqe   
ffff800000804396:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080439d:	48 01 d0             	add    rax,rdx
ffff8000008043a0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:32 (discriminator 3)
        task[i].parent_pid=-1;
ffff8000008043a7:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008043ae:	ff ff ff 
ffff8000008043b1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008043b5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008043b8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008043bb:	48 98                	cdqe   
ffff8000008043bd:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008043c4:	48 01 d0             	add    rax,rdx
ffff8000008043c7:	c7 80 bc 00 00 00 ff 	mov    DWORD PTR [rax+0xbc],0xffffffff
ffff8000008043ce:	ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29 (discriminator 3)
    for(int i=0;i<MAX_PROC_COUNT;i++){
ffff8000008043d1:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29 (discriminator 1)
ffff8000008043d5:	83 7d ec 3f          	cmp    DWORD PTR [rbp-0x14],0x3f
ffff8000008043d9:	0f 8e 7b ff ff ff    	jle    ffff80000080435a <init_proc+0x5c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:34
    }
    cur_proc=0;//proc zero
ffff8000008043df:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008043e6:	ff ff ff 
ffff8000008043e9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008043ed:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:35
    current=task;
ffff8000008043f3:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008043fa:	ff ff ff 
ffff8000008043fd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804401:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804404:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080440b:	ff ff ff 
ffff80000080440e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804412:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:36
    pidd=1;
ffff800000804415:	48 b8 70 fe ff ff ff 	movabs rax,0xfffffffffffffe70
ffff80000080441c:	ff ff ff 
ffff80000080441f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804423:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:41


    //asm volatile("lldt %0"::"m"(xi));
    //asm volatile("ltr %0"::"m"(zi));
    set_tss(0x400000+KNL_BASE,0x400000+KNL_BASE,0x400000+KNL_BASE\
ffff800000804429:	68 00 00 80 00       	push   0x800000
ffff80000080442e:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff800000804435:	ff 
ffff800000804436:	68 00 00 80 00       	push   0x800000
ffff80000080443b:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff800000804442:	ff 
ffff800000804443:	68 00 00 80 00       	push   0x800000
ffff800000804448:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff80000080444f:	ff 
ffff800000804450:	68 00 00 80 00       	push   0x800000
ffff800000804455:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff80000080445c:	ff 
ffff80000080445d:	49 b9 00 00 80 00 00 	movabs r9,0xffff800000800000
ffff800000804464:	80 ff ff 
ffff800000804467:	49 b8 00 00 80 00 00 	movabs r8,0xffff800000800000
ffff80000080446e:	80 ff ff 
ffff800000804471:	48 b8 00 00 80 00 00 	movabs rax,0xffff800000800000
ffff800000804478:	80 ff ff 
ffff80000080447b:	48 89 c1             	mov    rcx,rax
ffff80000080447e:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff800000804485:	80 ff ff 
ffff800000804488:	48 89 c2             	mov    rdx,rax
ffff80000080448b:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff800000804492:	80 ff ff 
ffff800000804495:	48 89 c6             	mov    rsi,rax
ffff800000804498:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff80000080449f:	80 ff ff 
ffff8000008044a2:	48 89 c7             	mov    rdi,rax
ffff8000008044a5:	49 89 df             	mov    r15,rbx
ffff8000008044a8:	48 b8 25 88 ee ff ff 	movabs rax,0xffffffffffee8825
ffff8000008044af:	ff ff ff 
ffff8000008044b2:	48 01 d8             	add    rax,rbx
ffff8000008044b5:	ff d0                	call   rax
ffff8000008044b7:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:46
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE\
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE);

    //===============创建0号进程======================
    int zi= init_proc0();
ffff8000008044bb:	49 89 df             	mov    r15,rbx
ffff8000008044be:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008044c3:	48 ba bd 6d ee ff ff 	movabs rdx,0xffffffffffee6dbd
ffff8000008044ca:	ff ff ff 
ffff8000008044cd:	48 01 da             	add    rdx,rbx
ffff8000008044d0:	ff d2                	call   rdx
ffff8000008044d2:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:47
    task[zi].stat=TASK_READY;
ffff8000008044d5:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008044dc:	ff ff ff 
ffff8000008044df:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008044e3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008044e6:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008044e9:	48 98                	cdqe   
ffff8000008044eb:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008044f2:	48 01 d0             	add    rax,rdx
ffff8000008044f5:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:49
    //IA32_INTERRUPT_SSP_TABLE_ADDR，准备IST
    wrmsr(0x6a8,tss->rsvd2);
ffff8000008044fc:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff800000804503:	ff ff ff 
ffff800000804506:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080450a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080450d:	48 8b 40 1c          	mov    rax,QWORD PTR [rax+0x1c]
ffff800000804511:	48 89 c6             	mov    rsi,rax
ffff800000804514:	bf a8 06 00 00       	mov    edi,0x6a8
ffff800000804519:	49 89 df             	mov    r15,rbx
ffff80000080451c:	48 b8 97 33 ee ff ff 	movabs rax,0xffffffffffee3397
ffff800000804523:	ff ff ff 
ffff800000804526:	48 01 d8             	add    rax,rbx
ffff800000804529:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:51
    //把内核代码段选择子写到MSR寄存器中准备用于特权级转换(sysexit，现在没用)
    wrmsr(0x174,0x8);
ffff80000080452b:	be 08 00 00 00       	mov    esi,0x8
ffff800000804530:	bf 74 01 00 00       	mov    edi,0x174
ffff800000804535:	49 89 df             	mov    r15,rbx
ffff800000804538:	48 b8 97 33 ee ff ff 	movabs rax,0xffffffffffee3397
ffff80000080453f:	ff ff ff 
ffff800000804542:	48 01 d8             	add    rax,rbx
ffff800000804545:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:53
    //准备用于特权级转换(sysret，正在使用)
    wrmsr(0xc0000081,0x0020000800000000ul);
ffff800000804547:	48 b8 00 00 00 00 08 	movabs rax,0x20000800000000
ffff80000080454e:	00 20 00 
ffff800000804551:	48 89 c6             	mov    rsi,rax
ffff800000804554:	b8 81 00 00 c0       	mov    eax,0xc0000081
ffff800000804559:	48 89 c7             	mov    rdi,rax
ffff80000080455c:	49 89 df             	mov    r15,rbx
ffff80000080455f:	48 b8 97 33 ee ff ff 	movabs rax,0xffffffffffee3397
ffff800000804566:	ff ff ff 
ffff800000804569:	48 01 d8             	add    rax,rbx
ffff80000080456c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:55

    comprintf("proc init set.\r\ntss.ist=0x%p\r\n",tss->ists[0]);
ffff80000080456e:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff800000804575:	ff ff ff 
ffff800000804578:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080457c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080457f:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
ffff800000804583:	48 89 c6             	mov    rsi,rax
ffff800000804586:	48 b8 b0 d6 ff ff ff 	movabs rax,0xffffffffffffd6b0
ffff80000080458d:	ff ff ff 
ffff800000804590:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000804594:	48 89 c7             	mov    rdi,rax
ffff800000804597:	49 89 df             	mov    r15,rbx
ffff80000080459a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080459f:	48 ba 23 4c ef ff ff 	movabs rdx,0xffffffffffef4c23
ffff8000008045a6:	ff ff ff 
ffff8000008045a9:	48 01 da             	add    rdx,rbx
ffff8000008045ac:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:58
    //创建一个测试进程
//    create_test_proc();
}
ffff8000008045ae:	90                   	nop
ffff8000008045af:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff8000008045b3:	5b                   	pop    rbx
ffff8000008045b4:	41 5f                	pop    r15
ffff8000008045b6:	5d                   	pop    rbp
ffff8000008045b7:	c3                   	ret    

ffff8000008045b8 <create_test_proc>:
create_test_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:59
void create_test_proc(){
ffff8000008045b8:	f3 0f 1e fa          	endbr64 
ffff8000008045bc:	55                   	push   rbp
ffff8000008045bd:	48 89 e5             	mov    rbp,rsp
ffff8000008045c0:	41 57                	push   r15
ffff8000008045c2:	53                   	push   rbx
ffff8000008045c3:	48 83 ec 20          	sub    rsp,0x20
ffff8000008045c7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008045c7 <create_test_proc+0xf>
ffff8000008045ce:	49 bb 09 95 11 00 00 	movabs r11,0x119509
ffff8000008045d5:	00 00 00 
ffff8000008045d8:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:61

    int index=req_proc();
ffff8000008045db:	49 89 df             	mov    r15,rbx
ffff8000008045de:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008045e3:	48 ba ff 6f ee ff ff 	movabs rdx,0xffffffffffee6fff
ffff8000008045ea:	ff ff ff 
ffff8000008045ed:	48 01 da             	add    rdx,rbx
ffff8000008045f0:	ff d2                	call   rdx
ffff8000008045f2:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:62
    task[index].stat=TASK_READY;
ffff8000008045f5:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008045fc:	ff ff ff 
ffff8000008045ff:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804603:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804606:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804609:	48 98                	cdqe   
ffff80000080460b:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804612:	48 01 d0             	add    rax,rdx
ffff800000804615:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:63
    int currsp=0x9fc00-1;
ffff80000080461c:	c7 45 dc ff fb 09 00 	mov    DWORD PTR [rbp-0x24],0x9fbff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:64
    asm volatile("mov %%rsp,%0":"=m"(currsp));
ffff800000804623:	48 89 65 dc          	mov    QWORD PTR [rbp-0x24],rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:65
    set_proc(0, 0, 0, 0, 0x10, 0x8, 0x10, 0x10, 0x10, 0x10,
ffff800000804627:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080462e:	ff ff ff 
ffff800000804631:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804635:	48 89 c2             	mov    rdx,rax
ffff800000804638:	48 83 ec 08          	sub    rsp,0x8
ffff80000080463c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080463f:	50                   	push   rax
ffff800000804640:	6a 00                	push   0x0
ffff800000804642:	52                   	push   rdx
ffff800000804643:	6a 00                	push   0x0
ffff800000804645:	6a 00                	push   0x0
ffff800000804647:	6a 00                	push   0x0
ffff800000804649:	68 58 7d 00 00       	push   0x7d58
ffff80000080464e:	6a 10                	push   0x10
ffff800000804650:	6a 10                	push   0x10
ffff800000804652:	6a 10                	push   0x10
ffff800000804654:	6a 10                	push   0x10
ffff800000804656:	41 b9 08 00 00 00    	mov    r9d,0x8
ffff80000080465c:	41 b8 10 00 00 00    	mov    r8d,0x10
ffff800000804662:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000804667:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080466c:	be 00 00 00 00       	mov    esi,0x0
ffff800000804671:	bf 00 00 00 00       	mov    edi,0x0
ffff800000804676:	49 89 df             	mov    r15,rbx
ffff800000804679:	48 b8 50 71 ee ff ff 	movabs rax,0xffffffffffee7150
ffff800000804680:	ff ff ff 
ffff800000804683:	48 01 d8             	add    rax,rbx
ffff800000804686:	ff d0                	call   rax
ffff800000804688:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:67
             0x7e00- sizeof(stack_store_regs), 0, 0, 0, (long)_syscall_sysret, 0, index);
    task[index].tss.rsp0=0x400000;
ffff80000080468c:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804693:	ff ff ff 
ffff800000804696:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080469a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080469d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008046a0:	48 98                	cdqe   
ffff8000008046a2:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008046a9:	48 01 d0             	add    rax,rdx
ffff8000008046ac:	48 c7 80 fc 01 00 00 	mov    QWORD PTR [rax+0x1fc],0x400000
ffff8000008046b3:	00 00 40 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:68
    task[index].mem_struct.stack_top=0x7e00;
ffff8000008046b7:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008046be:	ff ff ff 
ffff8000008046c1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008046c5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008046c8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008046cb:	48 98                	cdqe   
ffff8000008046cd:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008046d4:	48 01 d0             	add    rax,rdx
ffff8000008046d7:	48 c7 40 40 00 7e 00 	mov    QWORD PTR [rax+0x40],0x7e00
ffff8000008046de:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:69
    task[index].mem_struct.stack_bottom=0x6e00;
ffff8000008046df:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008046e6:	ff ff ff 
ffff8000008046e9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008046ed:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008046f0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008046f3:	48 98                	cdqe   
ffff8000008046f5:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008046fc:	48 01 d0             	add    rax,rdx
ffff8000008046ff:	48 c7 40 38 00 6e 00 	mov    QWORD PTR [rax+0x38],0x6e00
ffff800000804706:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:70
    task[index].mem_struct.heap_top=0x1101000;
ffff800000804707:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080470e:	ff ff ff 
ffff800000804711:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804715:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804718:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080471b:	48 98                	cdqe   
ffff80000080471d:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804724:	48 01 d0             	add    rax,rdx
ffff800000804727:	48 c7 40 30 00 10 10 	mov    QWORD PTR [rax+0x30],0x1101000
ffff80000080472e:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:71
    task[index].mem_struct.heap_base=0x1100000;
ffff80000080472f:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804736:	ff ff ff 
ffff800000804739:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080473d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804740:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804743:	48 98                	cdqe   
ffff800000804745:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080474c:	48 01 d0             	add    rax,rdx
ffff80000080474f:	48 c7 40 28 00 00 10 	mov    QWORD PTR [rax+0x28],0x1100000
ffff800000804756:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:74

    //把还原现场时用到的堆栈设置好
    stack_store_regs *str= (stack_store_regs *) (0x7e00 - sizeof(stack_store_regs));
ffff800000804757:	48 c7 45 e0 58 7d 00 	mov    QWORD PTR [rbp-0x20],0x7d58
ffff80000080475e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:75
    str->rax=0;
ffff80000080475f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804763:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
ffff80000080476a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:76
    str->rbx=0;
ffff80000080476b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080476f:	48 c7 40 70 00 00 00 	mov    QWORD PTR [rax+0x70],0x0
ffff800000804776:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:77
    str->rcx=proc_zero;//sysret采用的返回地址
ffff800000804777:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff80000080477e:	ff ff ff 
ffff800000804781:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804785:	48 89 c2             	mov    rdx,rax
ffff800000804788:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080478c:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:78
    str->rdx=0;
ffff800000804790:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804794:	48 c7 40 60 00 00 00 	mov    QWORD PTR [rax+0x60],0x0
ffff80000080479b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:79
    str->rsi=0;
ffff80000080479c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008047a0:	48 c7 40 50 00 00 00 	mov    QWORD PTR [rax+0x50],0x0
ffff8000008047a7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:80
    str->rdi=0;
ffff8000008047a8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008047ac:	48 c7 40 58 00 00 00 	mov    QWORD PTR [rax+0x58],0x0
ffff8000008047b3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:81
    str->r15=0;
ffff8000008047b4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008047b8:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008047bf:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:82
    str->r14=0;
ffff8000008047c0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008047c4:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff8000008047cb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:83
    str->r13=0;
ffff8000008047cc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008047d0:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffff8000008047d7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:84
    str->r12=0;
ffff8000008047d8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008047dc:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffff8000008047e3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:85
    str->r11=0x200;
ffff8000008047e4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008047e8:	48 c7 40 30 00 02 00 	mov    QWORD PTR [rax+0x30],0x200
ffff8000008047ef:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:86
    str->r10=0;
ffff8000008047f0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008047f4:	48 c7 40 38 00 00 00 	mov    QWORD PTR [rax+0x38],0x0
ffff8000008047fb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:87
    str->r9=0;
ffff8000008047fc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804800:	48 c7 40 40 00 00 00 	mov    QWORD PTR [rax+0x40],0x0
ffff800000804807:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:88
    str->r8=0;
ffff800000804808:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080480c:	48 c7 40 48 00 00 00 	mov    QWORD PTR [rax+0x48],0x0
ffff800000804813:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:89
    str->rip=proc_zero;
ffff800000804814:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff80000080481b:	ff ff ff 
ffff80000080481e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804822:	48 89 c2             	mov    rdx,rax
ffff800000804825:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804829:	48 89 90 80 00 00 00 	mov    QWORD PTR [rax+0x80],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:90
    str->cs=0x8;
ffff800000804830:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804834:	48 c7 80 88 00 00 00 	mov    QWORD PTR [rax+0x88],0x8
ffff80000080483b:	08 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:91
    str->rflags=0x00200206;
ffff80000080483f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804843:	48 c7 80 90 00 00 00 	mov    QWORD PTR [rax+0x90],0x200206
ffff80000080484a:	06 02 20 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:92
    str->rsp=0x7e00;
ffff80000080484e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804852:	48 c7 80 98 00 00 00 	mov    QWORD PTR [rax+0x98],0x7e00
ffff800000804859:	00 7e 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:93
    str->ss=0x2b;
ffff80000080485d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804861:	48 c7 80 a0 00 00 00 	mov    QWORD PTR [rax+0xa0],0x2b
ffff800000804868:	2b 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:94
    str->ds=0x2b;
ffff80000080486c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804870:	48 c7 00 2b 00 00 00 	mov    QWORD PTR [rax],0x2b
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:95
    str->es=0x2b;
ffff800000804877:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080487b:	48 c7 40 08 2b 00 00 	mov    QWORD PTR [rax+0x8],0x2b
ffff800000804882:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:97

}
ffff800000804883:	90                   	nop
ffff800000804884:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff800000804888:	5b                   	pop    rbx
ffff800000804889:	41 5f                	pop    r15
ffff80000080488b:	5d                   	pop    rbp
ffff80000080488c:	c3                   	ret    

ffff80000080488d <init_proc0>:
init_proc0():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:99
int init_proc0()
{
ffff80000080488d:	f3 0f 1e fa          	endbr64 
ffff800000804891:	55                   	push   rbp
ffff800000804892:	48 89 e5             	mov    rbp,rsp
ffff800000804895:	41 57                	push   r15
ffff800000804897:	53                   	push   rbx
ffff800000804898:	48 83 ec 10          	sub    rsp,0x10
ffff80000080489c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080489c <init_proc0+0xf>
ffff8000008048a3:	49 bb 34 92 11 00 00 	movabs r11,0x119234
ffff8000008048aa:	00 00 00 
ffff8000008048ad:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:101

    task[0].pid=pidd++;
ffff8000008048b0:	48 b8 70 fe ff ff ff 	movabs rax,0xfffffffffffffe70
ffff8000008048b7:	ff ff ff 
ffff8000008048ba:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008048be:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008048c0:	8d 48 01             	lea    ecx,[rax+0x1]
ffff8000008048c3:	48 ba 70 fe ff ff ff 	movabs rdx,0xfffffffffffffe70
ffff8000008048ca:	ff ff ff 
ffff8000008048cd:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008048d1:	89 0a                	mov    DWORD PTR [rdx],ecx
ffff8000008048d3:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008048da:	ff ff ff 
ffff8000008048dd:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008048e1:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008048e4:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:102
    task[0].stat=TASK_RUNNING;
ffff8000008048e6:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008048ed:	ff ff ff 
ffff8000008048f0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008048f4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008048f7:	c7 40 18 01 00 00 00 	mov    DWORD PTR [rax+0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:103
    task[0].utime=0;
ffff8000008048fe:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804905:	ff ff ff 
ffff800000804908:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080490c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080490f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:104
    task[0].priority=0;
ffff800000804916:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080491d:	ff ff ff 
ffff800000804920:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804924:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804927:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:106

    struct process *pz=task;
ffff80000080492e:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000804935:	ff ff ff 
ffff800000804938:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080493c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080493f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:115
//    task[index].tss.eip=(long)proc_zero;
    extern struct dir_entry* dtty;
    //stdin stdout stderr
    //这里绕开了sys open，这样是为了尽量快
    extern struct file ftty;
    pz->openf[0]=(struct file*)&ftty;
ffff800000804943:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804947:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff80000080494e:	ff ff ff 
ffff800000804951:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000804955:	48 89 90 f8 00 00 00 	mov    QWORD PTR [rax+0xf8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:116
    pz->openf[1]=(struct file*)&ftty;
ffff80000080495c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804960:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000804967:	ff ff ff 
ffff80000080496a:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080496e:	48 89 90 00 01 00 00 	mov    QWORD PTR [rax+0x100],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:117
    pz->openf[2]=(struct file*)&ftty;
ffff800000804975:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804979:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000804980:	ff ff ff 
ffff800000804983:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000804987:	48 89 90 08 01 00 00 	mov    QWORD PTR [rax+0x108],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:119

    pz->mem_struct.stack_top=STACK_TOP;
ffff80000080498e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804992:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff800000804999:	7f 00 00 
ffff80000080499c:	48 89 70 40          	mov    QWORD PTR [rax+0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:120
    pz->mem_struct.stack_bottom=STACK_TOP;
ffff8000008049a0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008049a4:	48 89 70 38          	mov    QWORD PTR [rax+0x38],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:121
    pz->mem_struct.heap_top=HEAP_BASE;
ffff8000008049a8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008049ac:	48 c7 40 30 00 00 00 	mov    QWORD PTR [rax+0x30],0x1000000
ffff8000008049b3:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:122
    pz->mem_struct.heap_base=HEAP_BASE;
ffff8000008049b4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008049b8:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x1000000
ffff8000008049bf:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:123
    memcpy(&pz->tss,tss, sizeof(TSS));
ffff8000008049c0:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff8000008049c7:	ff ff ff 
ffff8000008049ca:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008049ce:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008049d1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008049d5:	48 8d 8a f8 01 00 00 	lea    rcx,[rdx+0x1f8]
ffff8000008049dc:	ba 6c 00 00 00       	mov    edx,0x6c
ffff8000008049e1:	48 89 c6             	mov    rsi,rax
ffff8000008049e4:	48 89 cf             	mov    rdi,rcx
ffff8000008049e7:	49 89 df             	mov    r15,rbx
ffff8000008049ea:	48 b8 c4 50 ef ff ff 	movabs rax,0xffffffffffef50c4
ffff8000008049f1:	ff ff ff 
ffff8000008049f4:	48 01 d8             	add    rax,rbx
ffff8000008049f7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:125

    pz->child_procs=NULL;
ffff8000008049f9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008049fd:	48 c7 80 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],0x0
ffff800000804a04:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:128

    //这个是进程切换的时候要读取的值
    pz->regs.cr3=PML4_ADDR&~KNL_BASE;
ffff800000804a08:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a0c:	48 c7 80 64 02 00 00 	mov    QWORD PTR [rax+0x264],0x101000
ffff800000804a13:	00 10 10 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:129
    pz->pml4=PML4_ADDR;
ffff800000804a17:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a1b:	48 bf 00 10 10 00 00 	movabs rdi,0xffff800000101000
ffff800000804a22:	80 ff ff 
ffff800000804a25:	48 89 b8 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:130
    pz->cwd=root_sb->root;
ffff800000804a2c:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000804a33:	ff ff ff 
ffff800000804a36:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804a3a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804a3d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804a40:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a44:	48 89 90 e8 00 00 00 	mov    QWORD PTR [rax+0xe8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:131
    pz->exef=NULL;
ffff800000804a4b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a4f:	48 c7 80 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],0x0
ffff800000804a56:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:132
    list_init(&pz->node);
ffff800000804a5a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a5e:	48 05 34 03 00 00    	add    rax,0x334
ffff800000804a64:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000804a68:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804a6c:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000804a73:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804a77:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000804a7e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000804a7f:	90                   	nop
init_proc0():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:133
    pz->node.data=pz;
ffff800000804a80:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a84:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000804a88:	48 89 90 3c 03 00 00 	mov    QWORD PTR [rax+0x33c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:135
    
    pz->gpid=pz->pid;
ffff800000804a8f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a93:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000804a95:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a99:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:136
    pz->sid=pz->pid;
ffff800000804a9c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804aa0:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000804aa2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804aa6:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:137
    pz->fg_pgid=pz->pid;
ffff800000804aa9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804aad:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000804aaf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804ab3:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:138
    pz->in_bgpg=0;
ffff800000804ab6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804aba:	c7 40 10 00 00 00 00 	mov    DWORD PTR [rax+0x10],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:139
    return 0;
ffff800000804ac1:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:140
}
ffff800000804ac6:	48 83 c4 10          	add    rsp,0x10
ffff800000804aca:	5b                   	pop    rbx
ffff800000804acb:	41 5f                	pop    r15
ffff800000804acd:	5d                   	pop    rbp
ffff800000804ace:	c3                   	ret    

ffff800000804acf <req_proc>:
req_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:141
int req_proc(){
ffff800000804acf:	f3 0f 1e fa          	endbr64 
ffff800000804ad3:	55                   	push   rbp
ffff800000804ad4:	48 89 e5             	mov    rbp,rsp
ffff800000804ad7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804ad7 <req_proc+0x8>
ffff800000804ade:	49 bb f9 8f 11 00 00 	movabs r11,0x118ff9
ffff800000804ae5:	00 00 00 
ffff800000804ae8:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:142
    int num=0;
ffff800000804aeb:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
ffff800000804af2:	eb 04                	jmp    ffff800000804af8 <req_proc+0x29>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:145
    num<=MAX_PROC_COUNT){
        num++;
ffff800000804af4:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
ffff800000804af8:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804aff:	ff ff ff 
ffff800000804b02:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804b06:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804b09:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804b0c:	48 63 d2             	movsxd rdx,edx
ffff800000804b0f:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804b16:	48 01 ca             	add    rdx,rcx
ffff800000804b19:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804b1b:	83 fa ff             	cmp    edx,0xffffffff
ffff800000804b1e:	74 2e                	je     ffff800000804b4e <req_proc+0x7f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143 (discriminator 1)
ffff800000804b20:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804b27:	ff ff ff 
ffff800000804b2a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804b2e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804b31:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804b34:	48 63 d2             	movsxd rdx,edx
ffff800000804b37:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804b3e:	48 01 ca             	add    rdx,rcx
ffff800000804b41:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff800000804b44:	85 d2                	test   edx,edx
ffff800000804b46:	74 06                	je     ffff800000804b4e <req_proc+0x7f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143 (discriminator 2)
ffff800000804b48:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff800000804b4c:	7e a6                	jle    ffff800000804af4 <req_proc+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:147
    }
    if(num>=MAX_PROC_COUNT)
ffff800000804b4e:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff800000804b52:	7e 0a                	jle    ffff800000804b5e <req_proc+0x8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:148
        return -1;
ffff800000804b54:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000804b59:	e9 c0 00 00 00       	jmp    ffff800000804c1e <req_proc+0x14f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:149
    task[num].pid=pidd++;
ffff800000804b5e:	48 ba 70 fe ff ff ff 	movabs rdx,0xfffffffffffffe70
ffff800000804b65:	ff ff ff 
ffff800000804b68:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804b6c:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804b6e:	8d 72 01             	lea    esi,[rdx+0x1]
ffff800000804b71:	48 b9 70 fe ff ff ff 	movabs rcx,0xfffffffffffffe70
ffff800000804b78:	ff ff ff 
ffff800000804b7b:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000804b7f:	89 31                	mov    DWORD PTR [rcx],esi
ffff800000804b81:	48 b9 b8 fe ff ff ff 	movabs rcx,0xfffffffffffffeb8
ffff800000804b88:	ff ff ff 
ffff800000804b8b:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000804b8f:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
ffff800000804b92:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000804b95:	48 63 c9             	movsxd rcx,ecx
ffff800000804b98:	48 69 c9 58 03 00 00 	imul   rcx,rcx,0x358
ffff800000804b9f:	48 01 f1             	add    rcx,rsi
ffff800000804ba2:	89 11                	mov    DWORD PTR [rcx],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:150
    task[num].stat=TASK_ZOMBIE;
ffff800000804ba4:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804bab:	ff ff ff 
ffff800000804bae:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804bb2:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804bb5:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804bb8:	48 63 d2             	movsxd rdx,edx
ffff800000804bbb:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804bc2:	48 01 ca             	add    rdx,rcx
ffff800000804bc5:	c7 42 18 04 00 00 00 	mov    DWORD PTR [rdx+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:151
    task[num].utime=0;
ffff800000804bcc:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804bd3:	ff ff ff 
ffff800000804bd6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804bda:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804bdd:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804be0:	48 63 d2             	movsxd rdx,edx
ffff800000804be3:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804bea:	48 01 ca             	add    rdx,rcx
ffff800000804bed:	c7 42 1c 00 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:152
    task[num].priority=0;
ffff800000804bf4:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804bfb:	ff ff ff 
ffff800000804bfe:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000804c02:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804c05:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000804c08:	48 98                	cdqe   
ffff800000804c0a:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804c11:	48 01 d0             	add    rax,rdx
ffff800000804c14:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:153
    return num;
ffff800000804c1b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:154
}
ffff800000804c1e:	5d                   	pop    rbp
ffff800000804c1f:	c3                   	ret    

ffff800000804c20 <set_proc>:
set_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:156
void set_proc(long rax, long rbx, long rcx, long rdx, long es, long cs, long ss, long ds, long fs, long gs, long rsp,
              long rbp, long rsi, long rdi, long rip, long rflags, int proc_nr) {
ffff800000804c20:	f3 0f 1e fa          	endbr64 
ffff800000804c24:	55                   	push   rbp
ffff800000804c25:	48 89 e5             	mov    rbp,rsp
ffff800000804c28:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804c28 <set_proc+0x8>
ffff800000804c2f:	49 bb a8 8e 11 00 00 	movabs r11,0x118ea8
ffff800000804c36:	00 00 00 
ffff800000804c39:	4c 01 d8             	add    rax,r11
ffff800000804c3c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000804c40:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000804c44:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff800000804c48:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
ffff800000804c4c:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
ffff800000804c50:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:157
    struct process* proc=&task[proc_nr];
ffff800000804c54:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804c5b:	ff ff ff 
ffff800000804c5e:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000804c62:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804c65:	8b 45 60             	mov    eax,DWORD PTR [rbp+0x60]
ffff800000804c68:	48 98                	cdqe   
ffff800000804c6a:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000804c71:	48 01 d0             	add    rax,rdx
ffff800000804c74:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:158
    proc->regs.rax=rax;
ffff800000804c78:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804c7c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000804c80:	48 89 90 7c 02 00 00 	mov    QWORD PTR [rax+0x27c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:159
    proc->regs.rbx=rbx;
ffff800000804c87:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804c8b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000804c8f:	48 89 90 94 02 00 00 	mov    QWORD PTR [rax+0x294],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:160
    proc->regs.rcx=rcx;
ffff800000804c96:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804c9a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000804c9e:	48 89 90 84 02 00 00 	mov    QWORD PTR [rax+0x284],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:161
    proc->regs.rdx=rdx;
ffff800000804ca5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804ca9:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804cad:	48 89 90 8c 02 00 00 	mov    QWORD PTR [rax+0x28c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:162
    proc->regs.es=es;
ffff800000804cb4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804cb8:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000804cbc:	48 89 90 bc 02 00 00 	mov    QWORD PTR [rax+0x2bc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:163
    proc->regs.cs=cs;
ffff800000804cc3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804cc7:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000804ccb:	48 89 90 c4 02 00 00 	mov    QWORD PTR [rax+0x2c4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:164
    proc->regs.ss=ss;
ffff800000804cd2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804cd6:	48 8b 55 10          	mov    rdx,QWORD PTR [rbp+0x10]
ffff800000804cda:	48 89 90 cc 02 00 00 	mov    QWORD PTR [rax+0x2cc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:165
    proc->regs.ds=ds;
ffff800000804ce1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804ce5:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
ffff800000804ce9:	48 89 90 d4 02 00 00 	mov    QWORD PTR [rax+0x2d4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:166
    proc->regs.fs=fs;
ffff800000804cf0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804cf4:	48 8b 55 20          	mov    rdx,QWORD PTR [rbp+0x20]
ffff800000804cf8:	48 89 90 dc 02 00 00 	mov    QWORD PTR [rax+0x2dc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:167
    proc->regs.gs=gs;
ffff800000804cff:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d03:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
ffff800000804d07:	48 89 90 e4 02 00 00 	mov    QWORD PTR [rax+0x2e4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:168
    proc->regs.rsp=rsp;
ffff800000804d0e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d12:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
ffff800000804d16:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:169
    proc->regs.rbp=rbp;
ffff800000804d1d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d21:	48 8b 55 38          	mov    rdx,QWORD PTR [rbp+0x38]
ffff800000804d25:	48 89 90 a4 02 00 00 	mov    QWORD PTR [rax+0x2a4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:170
    proc->regs.rsi=rsi;
ffff800000804d2c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d30:	48 8b 55 40          	mov    rdx,QWORD PTR [rbp+0x40]
ffff800000804d34:	48 89 90 ac 02 00 00 	mov    QWORD PTR [rax+0x2ac],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:171
    proc->regs.rdi=rdi;
ffff800000804d3b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d3f:	48 8b 55 48          	mov    rdx,QWORD PTR [rbp+0x48]
ffff800000804d43:	48 89 90 b4 02 00 00 	mov    QWORD PTR [rax+0x2b4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:172
    proc->regs.rflags=0x202;//设置为默认值:0b 0010 0000 0010
ffff800000804d4a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d4e:	48 c7 80 74 02 00 00 	mov    QWORD PTR [rax+0x274],0x202
ffff800000804d55:	02 02 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:174
    //能接受中断
    proc->regs.rip=rip;
ffff800000804d59:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d5d:	48 8b 55 50          	mov    rdx,QWORD PTR [rbp+0x50]
ffff800000804d61:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:176

    proc->regs.cs=cs;
ffff800000804d68:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d6c:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000804d70:	48 89 90 c4 02 00 00 	mov    QWORD PTR [rax+0x2c4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:177
    proc->regs.ds=ds;
ffff800000804d77:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d7b:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
ffff800000804d7f:	48 89 90 d4 02 00 00 	mov    QWORD PTR [rax+0x2d4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:178
    proc->regs.es=es;
ffff800000804d86:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d8a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000804d8e:	48 89 90 bc 02 00 00 	mov    QWORD PTR [rax+0x2bc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:179
    proc->regs.cr3=PML4_ADDR;//get_phyaddr(n1);//暂时先搞成全局
ffff800000804d95:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d99:	48 b9 00 10 10 00 00 	movabs rcx,0xffff800000101000
ffff800000804da0:	80 ff ff 
ffff800000804da3:	48 89 88 64 02 00 00 	mov    QWORD PTR [rax+0x264],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:180
    proc->pml4=PML4_ADDR;
ffff800000804daa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804dae:	48 89 88 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:183


}
ffff800000804db5:	90                   	nop
ffff800000804db6:	5d                   	pop    rbp
ffff800000804db7:	c3                   	ret    

ffff800000804db8 <proc_zero>:
proc_zero():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:185
void proc_zero()
{
ffff800000804db8:	f3 0f 1e fa          	endbr64 
ffff800000804dbc:	55                   	push   rbp
ffff800000804dbd:	48 89 e5             	mov    rbp,rsp
ffff800000804dc0:	41 57                	push   r15
ffff800000804dc2:	53                   	push   rbx
ffff800000804dc3:	48 83 ec 10          	sub    rsp,0x10
ffff800000804dc7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804dc7 <proc_zero+0xf>
ffff800000804dce:	49 bb 09 8d 11 00 00 	movabs r11,0x118d09
ffff800000804dd5:	00 00 00 
ffff800000804dd8:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:198 (discriminator 1)
//    }else{
//        printf("parent proc ret:%d\n",rax);
//    }
    while (1)
    {
        char c= sys_analyse_key();
ffff800000804ddb:	49 89 df             	mov    r15,rbx
ffff800000804dde:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804de3:	48 ba 08 09 ef ff ff 	movabs rdx,0xffffffffffef0908
ffff800000804dea:	ff ff ff 
ffff800000804ded:	48 01 da             	add    rdx,rbx
ffff800000804df0:	ff d2                	call   rdx
ffff800000804df2:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:199 (discriminator 1)
        putchar(c);
ffff800000804df5:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff800000804df9:	89 c7                	mov    edi,eax
ffff800000804dfb:	49 89 df             	mov    r15,rbx
ffff800000804dfe:	48 b8 d2 3b ee ff ff 	movabs rax,0xffffffffffee3bd2
ffff800000804e05:	ff ff ff 
ffff800000804e08:	48 01 d8             	add    rax,rbx
ffff800000804e0b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:197 (discriminator 1)
    {
ffff800000804e0d:	eb cc                	jmp    ffff800000804ddb <proc_zero+0x23>

ffff800000804e0f <save_rsp>:
save_rsp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:202
    }
}
void save_rsp(){
ffff800000804e0f:	f3 0f 1e fa          	endbr64 
ffff800000804e13:	55                   	push   rbp
ffff800000804e14:	48 89 e5             	mov    rbp,rsp
ffff800000804e17:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804e17 <save_rsp+0x8>
ffff800000804e1e:	49 bb b9 8c 11 00 00 	movabs r11,0x118cb9
ffff800000804e25:	00 00 00 
ffff800000804e28:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:204
    //在时钟中断context下
    addr_t * p=INT_STACK_TOP-16;
ffff800000804e2b:	48 be f0 ff 7f 00 00 	movabs rsi,0xffff8000007ffff0
ffff800000804e32:	80 ff ff 
ffff800000804e35:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:205
    current->regs.rsp=*p;
ffff800000804e39:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000804e3d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000804e40:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff800000804e47:	ff ff ff 
ffff800000804e4a:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000804e4e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804e51:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:206
}
ffff800000804e58:	90                   	nop
ffff800000804e59:	5d                   	pop    rbp
ffff800000804e5a:	c3                   	ret    

ffff800000804e5b <manage_proc>:
manage_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:207
void manage_proc(){
ffff800000804e5b:	f3 0f 1e fa          	endbr64 
ffff800000804e5f:	55                   	push   rbp
ffff800000804e60:	48 89 e5             	mov    rbp,rsp
ffff800000804e63:	41 57                	push   r15
ffff800000804e65:	48 83 ec 18          	sub    rsp,0x18
ffff800000804e69:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804e69 <manage_proc+0xe>
ffff800000804e70:	49 bb 67 8c 11 00 00 	movabs r11,0x118c67
ffff800000804e77:	00 00 00 
ffff800000804e7a:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:208
    if(cur_proc!=-1)
ffff800000804e7d:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000804e84:	ff ff ff 
ffff800000804e87:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804e8b:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804e8d:	83 fa ff             	cmp    edx,0xffffffff
ffff800000804e90:	74 37                	je     ffff800000804ec9 <manage_proc+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:209
        task[cur_proc].utime++;
ffff800000804e92:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804e99:	ff ff ff 
ffff800000804e9c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804ea0:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804ea3:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000804eaa:	ff ff ff 
ffff800000804ead:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804eb1:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804eb3:	48 63 d2             	movsxd rdx,edx
ffff800000804eb6:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804ebd:	48 01 ca             	add    rdx,rcx
ffff800000804ec0:	8b 4a 1c             	mov    ecx,DWORD PTR [rdx+0x1c]
ffff800000804ec3:	83 c1 01             	add    ecx,0x1
ffff800000804ec6:	89 4a 1c             	mov    DWORD PTR [rdx+0x1c],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:210
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
ffff800000804ec9:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000804ed0:	ff ff ff 
ffff800000804ed3:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804ed7:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804ed9:	83 fa ff             	cmp    edx,0xffffffff
ffff800000804edc:	74 70                	je     ffff800000804f4e <manage_proc+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:210 (discriminator 1)
ffff800000804ede:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804ee5:	ff ff ff 
ffff800000804ee8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804eec:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804eef:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000804ef6:	ff ff ff 
ffff800000804ef9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804efd:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804eff:	48 63 d2             	movsxd rdx,edx
ffff800000804f02:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804f09:	48 01 ca             	add    rdx,rcx
ffff800000804f0c:	8b 52 1c             	mov    edx,DWORD PTR [rdx+0x1c]
ffff800000804f0f:	83 fa 0a             	cmp    edx,0xa
ffff800000804f12:	77 3a                	ja     ffff800000804f4e <manage_proc+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:211 (discriminator 2)
    task[cur_proc].stat != TASK_READY){
ffff800000804f14:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804f1b:	ff ff ff 
ffff800000804f1e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f22:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804f25:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000804f2c:	ff ff ff 
ffff800000804f2f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f33:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804f35:	48 63 d2             	movsxd rdx,edx
ffff800000804f38:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804f3f:	48 01 ca             	add    rdx,rcx
ffff800000804f42:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:210 (discriminator 2)
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
ffff800000804f45:	83 fa 02             	cmp    edx,0x2
ffff800000804f48:	0f 84 bf 01 00 00    	je     ffff80000080510d <manage_proc+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:212
        if(cur_proc!=-1)
ffff800000804f4e:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000804f55:	ff ff ff 
ffff800000804f58:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f5c:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804f5e:	83 fa ff             	cmp    edx,0xffffffff
ffff800000804f61:	74 35                	je     ffff800000804f98 <manage_proc+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:213
            task[cur_proc].utime=0;
ffff800000804f63:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804f6a:	ff ff ff 
ffff800000804f6d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f71:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804f74:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000804f7b:	ff ff ff 
ffff800000804f7e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f82:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804f84:	48 63 d2             	movsxd rdx,edx
ffff800000804f87:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804f8e:	48 01 ca             	add    rdx,rcx
ffff800000804f91:	c7 42 1c 00 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:215
        //find
        int i=cur_proc+1;
ffff800000804f98:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000804f9f:	ff ff ff 
ffff800000804fa2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804fa6:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804fa8:	83 c2 01             	add    edx,0x1
ffff800000804fab:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:216
        int times=0;
ffff800000804fae:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:218
        //轮询，直到有一个符合条件
        while(times<10){
ffff800000804fb5:	eb 7b                	jmp    ffff800000805032 <manage_proc+0x1d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219
            if(task[i].pid!=-1 && task[i].stat == TASK_READY && i != cur_proc){
ffff800000804fb7:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804fbe:	ff ff ff 
ffff800000804fc1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804fc5:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804fc8:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000804fcb:	48 63 d2             	movsxd rdx,edx
ffff800000804fce:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804fd5:	48 01 ca             	add    rdx,rcx
ffff800000804fd8:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804fda:	83 fa ff             	cmp    edx,0xffffffff
ffff800000804fdd:	74 3e                	je     ffff80000080501d <manage_proc+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219 (discriminator 1)
ffff800000804fdf:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000804fe6:	ff ff ff 
ffff800000804fe9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804fed:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804ff0:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000804ff3:	48 63 d2             	movsxd rdx,edx
ffff800000804ff6:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000804ffd:	48 01 ca             	add    rdx,rcx
ffff800000805000:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff800000805003:	83 fa 02             	cmp    edx,0x2
ffff800000805006:	75 15                	jne    ffff80000080501d <manage_proc+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219 (discriminator 2)
ffff800000805008:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080500f:	ff ff ff 
ffff800000805012:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805016:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805018:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff80000080501b:	75 21                	jne    ffff80000080503e <manage_proc+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:222
                break;
            }
            i++;
ffff80000080501d:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:223
            if(i>=MAX_TASKS){
ffff800000805021:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff800000805025:	7e 0b                	jle    ffff800000805032 <manage_proc+0x1d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:224
                times++;
ffff800000805027:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:225
                i=0;
ffff80000080502b:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:218
        while(times<10){
ffff800000805032:	83 7d e8 09          	cmp    DWORD PTR [rbp-0x18],0x9
ffff800000805036:	0f 8e 7b ff ff ff    	jle    ffff800000804fb7 <manage_proc+0x15c>
ffff80000080503c:	eb 01                	jmp    ffff80000080503f <manage_proc+0x1e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:220
                break;
ffff80000080503e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:228
            }
        }
        if(times==10)return;//超过十次尝试都没有，暂时不切换
ffff80000080503f:	83 7d e8 0a          	cmp    DWORD PTR [rbp-0x18],0xa
ffff800000805043:	0f 84 c7 00 00 00    	je     ffff800000805110 <manage_proc+0x2b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:230
        //switch
        task[cur_proc].stat=TASK_READY;
ffff800000805049:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805050:	ff ff ff 
ffff800000805053:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805057:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080505a:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805061:	ff ff ff 
ffff800000805064:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805068:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080506a:	48 63 d2             	movsxd rdx,edx
ffff80000080506d:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805074:	48 01 ca             	add    rdx,rcx
ffff800000805077:	c7 42 18 02 00 00 00 	mov    DWORD PTR [rdx+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:231
        task[i].stat=TASK_RUNNING;
ffff80000080507e:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805085:	ff ff ff 
ffff800000805088:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080508c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080508f:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805092:	48 63 d2             	movsxd rdx,edx
ffff800000805095:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff80000080509c:	48 01 ca             	add    rdx,rcx
ffff80000080509f:	c7 42 18 01 00 00 00 	mov    DWORD PTR [rdx+0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:232
        switch_to(&task[cur_proc], &task[i]);
ffff8000008050a6:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008050ad:	ff ff ff 
ffff8000008050b0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008050b4:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008050b7:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008050ba:	48 63 d2             	movsxd rdx,edx
ffff8000008050bd:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008050c4:	48 01 d1             	add    rcx,rdx
ffff8000008050c7:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008050ce:	ff ff ff 
ffff8000008050d1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008050d5:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008050d8:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff8000008050df:	ff ff ff 
ffff8000008050e2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008050e6:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008050e8:	48 63 d2             	movsxd rdx,edx
ffff8000008050eb:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008050f2:	48 01 f2             	add    rdx,rsi
ffff8000008050f5:	48 89 ce             	mov    rsi,rcx
ffff8000008050f8:	48 89 d7             	mov    rdi,rdx
ffff8000008050fb:	49 89 c7             	mov    r15,rax
ffff8000008050fe:	48 ba 1d 86 ee ff ff 	movabs rdx,0xffffffffffee861d
ffff800000805105:	ff ff ff 
ffff800000805108:	48 01 c2             	add    rdx,rax
ffff80000080510b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:234
    }
    return;
ffff80000080510d:	90                   	nop
ffff80000080510e:	eb 01                	jmp    ffff800000805111 <manage_proc+0x2b6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:228
        if(times==10)return;//超过十次尝试都没有，暂时不切换
ffff800000805110:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:235
}
ffff800000805111:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000805115:	c9                   	leave  
ffff800000805116:	c3                   	ret    

ffff800000805117 <switch_proc_tss>:
switch_proc_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:238

void switch_proc_tss(int pnr)
{
ffff800000805117:	f3 0f 1e fa          	endbr64 
ffff80000080511b:	55                   	push   rbp
ffff80000080511c:	48 89 e5             	mov    rbp,rsp
ffff80000080511f:	41 57                	push   r15
ffff800000805121:	48 83 ec 28          	sub    rsp,0x28
ffff800000805125:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805125 <switch_proc_tss+0xe>
ffff80000080512c:	49 bb ab 89 11 00 00 	movabs r11,0x1189ab
ffff800000805133:	00 00 00 
ffff800000805136:	4c 01 d8             	add    rax,r11
ffff800000805139:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:239
    int sel=_TSS_IND(pnr)*8;
ffff80000080513c:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080513f:	01 d2                	add    edx,edx
ffff800000805141:	83 c2 05             	add    edx,0x5
ffff800000805144:	c1 e2 03             	shl    edx,0x3
ffff800000805147:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:240
    cur_proc=pnr;
ffff80000080514a:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805151:	ff ff ff 
ffff800000805154:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805158:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
ffff80000080515b:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:241
    switch_proc_asm(sel);
ffff80000080515d:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805160:	89 d7                	mov    edi,edx
ffff800000805162:	49 89 c7             	mov    r15,rax
ffff800000805165:	48 ba e7 59 ef ff ff 	movabs rdx,0xffffffffffef59e7
ffff80000080516c:	ff ff ff 
ffff80000080516f:	48 01 c2             	add    rdx,rax
ffff800000805172:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:242
}
ffff800000805174:	90                   	nop
ffff800000805175:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000805179:	c9                   	leave  
ffff80000080517a:	c3                   	ret    

ffff80000080517b <switch_proc>:
switch_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:243
void switch_proc(int pnr){
ffff80000080517b:	f3 0f 1e fa          	endbr64 
ffff80000080517f:	55                   	push   rbp
ffff800000805180:	48 89 e5             	mov    rbp,rsp
ffff800000805183:	41 57                	push   r15
ffff800000805185:	53                   	push   rbx
ffff800000805186:	48 81 ec 70 03 00 00 	sub    rsp,0x370
ffff80000080518d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080518d <switch_proc+0x12>
ffff800000805194:	49 bb 43 89 11 00 00 	movabs r11,0x118943
ffff80000080519b:	00 00 00 
ffff80000080519e:	4c 01 db             	add    rbx,r11
ffff8000008051a1:	89 bd 8c fc ff ff    	mov    DWORD PTR [rbp-0x374],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:246
    //printf("switching proc to %d\n",pnr);
    //printf("eip:%x\n",task[pnr].tss.eip);
    struct process p=task[pnr];
ffff8000008051a7:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008051ae:	ff ff ff 
ffff8000008051b1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008051b5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008051b8:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff8000008051be:	48 98                	cdqe   
ffff8000008051c0:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008051c7:	48 01 c2             	add    rdx,rax
ffff8000008051ca:	48 8d 85 90 fc ff ff 	lea    rax,[rbp-0x370]
ffff8000008051d1:	48 89 d6             	mov    rsi,rdx
ffff8000008051d4:	ba 6b 00 00 00       	mov    edx,0x6b
ffff8000008051d9:	48 89 c7             	mov    rdi,rax
ffff8000008051dc:	48 89 d1             	mov    rcx,rdx
ffff8000008051df:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:247
    save_context(&task[cur_proc].tss);
ffff8000008051e2:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008051e9:	ff ff ff 
ffff8000008051ec:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008051f0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008051f3:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008051fa:	ff ff ff 
ffff8000008051fd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805201:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805203:	48 98                	cdqe   
ffff800000805205:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080520c:	48 01 d0             	add    rax,rdx
ffff80000080520f:	48 05 f8 01 00 00    	add    rax,0x1f8
ffff800000805215:	48 89 c7             	mov    rdi,rax
ffff800000805218:	49 89 df             	mov    r15,rbx
ffff80000080521b:	48 b8 d1 77 ee ff ff 	movabs rax,0xffffffffffee77d1
ffff800000805222:	ff ff ff 
ffff800000805225:	48 01 d8             	add    rax,rbx
ffff800000805228:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:252
//    //重新设置0号进程
//    task[0].tss.eip=proc_zero;
//    task[0].tss.cr3=PAGE_INDEX_ADDR;
//    task[0].tss.eflags=0x202;
    cur_proc=pnr;
ffff80000080522a:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000805231:	ff ff ff 
ffff800000805234:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805238:	8b 95 8c fc ff ff    	mov    edx,DWORD PTR [rbp-0x374]
ffff80000080523e:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:253
    int sel=_TSS_IND(pnr)*8;
ffff800000805240:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff800000805246:	01 c0                	add    eax,eax
ffff800000805248:	83 c0 05             	add    eax,0x5
ffff80000080524b:	c1 e0 03             	shl    eax,0x3
ffff80000080524e:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:254
    switch_to(NULL, &task[pnr].tss);
ffff800000805251:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805258:	ff ff ff 
ffff80000080525b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080525f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805262:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff800000805268:	48 98                	cdqe   
ffff80000080526a:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805271:	48 01 d0             	add    rax,rdx
ffff800000805274:	48 05 f8 01 00 00    	add    rax,0x1f8
ffff80000080527a:	48 89 c6             	mov    rsi,rax
ffff80000080527d:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805282:	49 89 df             	mov    r15,rbx
ffff800000805285:	48 b8 1d 86 ee ff ff 	movabs rax,0xffffffffffee861d
ffff80000080528c:	ff ff ff 
ffff80000080528f:	48 01 d8             	add    rax,rbx
ffff800000805292:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:257
    //asm volatile("push %0":"=r"(task[pnr].tss.eip));
    //switch_proc_asm(pnr*8+0x8*3);
}
ffff800000805294:	90                   	nop
ffff800000805295:	48 81 c4 70 03 00 00 	add    rsp,0x370
ffff80000080529c:	5b                   	pop    rbx
ffff80000080529d:	41 5f                	pop    r15
ffff80000080529f:	5d                   	pop    rbp
ffff8000008052a0:	c3                   	ret    

ffff8000008052a1 <save_context>:
save_context():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:259
void save_context(TSS *tss)
{
ffff8000008052a1:	f3 0f 1e fa          	endbr64 
ffff8000008052a5:	55                   	push   rbp
ffff8000008052a6:	48 89 e5             	mov    rbp,rsp
ffff8000008052a9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008052a9 <save_context+0x8>
ffff8000008052b0:	49 bb 27 88 11 00 00 	movabs r11,0x118827
ffff8000008052b7:	00 00 00 
ffff8000008052ba:	4c 01 d8             	add    rax,r11
ffff8000008052bd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:270
//    tss->esi=scene_saver.esi;
//    tss->edi=scene_saver.edi;
//    tss->eflags=scene_saver.eflags;
//    tss->esp=scene_saver.esp;
//    tss->ebp=scene_saver.ebp;
}
ffff8000008052c1:	90                   	nop
ffff8000008052c2:	5d                   	pop    rbp
ffff8000008052c3:	c3                   	ret    

ffff8000008052c4 <palloc>:
palloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:431
    task[index].stat=TASK_READY;
    return index;
} */
//为指定进程申请新的内存，并返回这块内存的线性地址。
void* palloc(int proc_index,int size)
{
ffff8000008052c4:	f3 0f 1e fa          	endbr64 
ffff8000008052c8:	55                   	push   rbp
ffff8000008052c9:	48 89 e5             	mov    rbp,rsp
ffff8000008052cc:	41 57                	push   r15
ffff8000008052ce:	53                   	push   rbx
ffff8000008052cf:	48 83 ec 60          	sub    rsp,0x60
ffff8000008052d3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008052d3 <palloc+0xf>
ffff8000008052da:	49 bb fd 87 11 00 00 	movabs r11,0x1187fd
ffff8000008052e1:	00 00 00 
ffff8000008052e4:	4c 01 db             	add    rbx,r11
ffff8000008052e7:	89 7d 9c             	mov    DWORD PTR [rbp-0x64],edi
ffff8000008052ea:	89 75 98             	mov    DWORD PTR [rbp-0x68],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:432
    int page_c=size/4096+size%4096?1:0;
ffff8000008052ed:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffff8000008052f0:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff8000008052f6:	85 c0                	test   eax,eax
ffff8000008052f8:	0f 48 c2             	cmovs  eax,edx
ffff8000008052fb:	c1 f8 0c             	sar    eax,0xc
ffff8000008052fe:	89 c1                	mov    ecx,eax
ffff800000805300:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffff800000805303:	99                   	cdq    
ffff800000805304:	c1 ea 14             	shr    edx,0x14
ffff800000805307:	01 d0                	add    eax,edx
ffff800000805309:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080530e:	29 d0                	sub    eax,edx
ffff800000805310:	01 c8                	add    eax,ecx
ffff800000805312:	85 c0                	test   eax,eax
ffff800000805314:	0f 95 c0             	setne  al
ffff800000805317:	0f b6 c0             	movzx  eax,al
ffff80000080531a:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:433
    int c=0;
ffff80000080531d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:434
    void *ptr=NULL;
ffff800000805324:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080532b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:435
    page_item *pgind=NULL;//task[proc_index].tss.cr3;
ffff80000080532c:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000805333:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:436
    pgind++;
ffff800000805334:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:437
    for(int i=1;i<1024;i++)
ffff800000805339:	c7 45 dc 01 00 00 00 	mov    DWORD PTR [rbp-0x24],0x1
ffff800000805340:	e9 07 03 00 00       	jmp    ffff80000080564c <palloc+0x388>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:439
    {
        page_item* tblp=*pgind&0xfffff000;
ffff800000805345:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805349:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080534c:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000805351:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:440
        for(int j=0;j<1024;j++)
ffff800000805355:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff80000080535c:	e9 d5 02 00 00       	jmp    ffff800000805636 <palloc+0x372>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:442
        {
            int v=*tblp&PAGE_PRESENT;
ffff800000805361:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000805365:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805368:	83 e0 01             	and    eax,0x1
ffff80000080536b:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:443
            if(!v)
ffff80000080536e:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff800000805372:	0f 85 b5 02 00 00    	jne    ffff80000080562d <palloc+0x369>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:445
            {
                int new_pg=req_a_page();
ffff800000805378:	49 89 df             	mov    r15,rbx
ffff80000080537b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805380:	48 ba 51 4f ee ff ff 	movabs rdx,0xffffffffffee4f51
ffff800000805387:	ff ff ff 
ffff80000080538a:	48 01 da             	add    rdx,rbx
ffff80000080538d:	ff d2                	call   rdx
ffff80000080538f:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:446
                if(new_pg==-1)
ffff800000805392:	83 7d b8 ff          	cmp    DWORD PTR [rbp-0x48],0xffffffff
ffff800000805396:	0f 85 0c 01 00 00    	jne    ffff8000008054a8 <palloc+0x1e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:449
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
ffff80000080539c:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008053a3:	ff ff ff 
ffff8000008053a6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008053aa:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008053ad:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008053b0:	48 98                	cdqe   
ffff8000008053b2:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008053b9:	48 01 d0             	add    rax,rdx
ffff8000008053bc:	0f b7 80 88 00 00 00 	movzx  eax,WORD PTR [rax+0x88]
ffff8000008053c3:	0f b7 c0             	movzx  eax,ax
ffff8000008053c6:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:450
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
ffff8000008053c9:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008053d0:	ff ff ff 
ffff8000008053d3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008053d7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008053da:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008053dd:	48 98                	cdqe   
ffff8000008053df:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008053e6:	48 01 d0             	add    rax,rdx
ffff8000008053e9:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff8000008053f0:	0f b7 c0             	movzx  eax,ax
ffff8000008053f3:	c1 e0 10             	shl    eax,0x10
ffff8000008053f6:	25 00 00 0f 00       	and    eax,0xf0000
ffff8000008053fb:	01 45 a4             	add    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:451
                    size+=c;
ffff8000008053fe:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000805401:	01 45 a4             	add    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:452
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
ffff800000805404:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080540b:	ff ff ff 
ffff80000080540e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805412:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805415:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000805418:	48 98                	cdqe   
ffff80000080541a:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805421:	48 01 d0             	add    rax,rdx
ffff800000805424:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
ffff800000805427:	66 89 90 88 00 00 00 	mov    WORD PTR [rax+0x88],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:453
                    int tmp_attr=task[proc_index].ldt[2].attr;
ffff80000080542e:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805435:	ff ff ff 
ffff800000805438:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080543c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080543f:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000805442:	48 98                	cdqe   
ffff800000805444:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080544b:	48 01 d0             	add    rax,rdx
ffff80000080544e:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff800000805455:	0f b7 c0             	movzx  eax,ax
ffff800000805458:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:454
                    tmp_attr&=0xfff0;
ffff80000080545b:	81 65 a0 f0 ff 00 00 	and    DWORD PTR [rbp-0x60],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:455
                    tmp_attr+=(size>>16)&0xf;
ffff800000805462:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000805465:	c1 e8 10             	shr    eax,0x10
ffff800000805468:	83 e0 0f             	and    eax,0xf
ffff80000080546b:	89 c2                	mov    edx,eax
ffff80000080546d:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
ffff800000805470:	01 d0                	add    eax,edx
ffff800000805472:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:456
                    task[proc_index].ldt[2].attr=tmp_attr;
ffff800000805475:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080547c:	ff ff ff 
ffff80000080547f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805483:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805486:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000805489:	48 98                	cdqe   
ffff80000080548b:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805492:	48 01 d0             	add    rax,rdx
ffff800000805495:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
ffff800000805498:	66 89 90 8d 00 00 00 	mov    WORD PTR [rax+0x8d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:457
                    return ptr;//失败了，只能申请一部分的内存或者返回NULL
ffff80000080549f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008054a3:	e9 b6 01 00 00       	jmp    ffff80000080565e <palloc+0x39a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:459
                }
                int addr=get_phyaddr(new_pg);
ffff8000008054a8:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff8000008054ab:	89 c7                	mov    edi,eax
ffff8000008054ad:	49 89 df             	mov    r15,rbx
ffff8000008054b0:	48 b8 69 52 ee ff ff 	movabs rax,0xffffffffffee5269
ffff8000008054b7:	ff ff ff 
ffff8000008054ba:	48 01 d8             	add    rax,rbx
ffff8000008054bd:	ff d0                	call   rax
ffff8000008054bf:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:460
                set_page_item(tblp,addr,PAGE_PRESENT|\
ffff8000008054c2:	8b 4d b4             	mov    ecx,DWORD PTR [rbp-0x4c]
ffff8000008054c5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008054c9:	ba 07 00 00 00       	mov    edx,0x7
ffff8000008054ce:	89 ce                	mov    esi,ecx
ffff8000008054d0:	48 89 c7             	mov    rdi,rax
ffff8000008054d3:	49 89 df             	mov    r15,rbx
ffff8000008054d6:	48 b8 9d 52 ee ff ff 	movabs rax,0xffffffffffee529d
ffff8000008054dd:	ff ff ff 
ffff8000008054e0:	48 01 d8             	add    rax,rbx
ffff8000008054e3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:462
                PAGE_RWX|PAGE_FOR_ALL);
                int laddr=i*0x400000+j*0x1000;//线性地址
ffff8000008054e5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008054e8:	c1 e0 0a             	shl    eax,0xa
ffff8000008054eb:	89 c2                	mov    edx,eax
ffff8000008054ed:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008054f0:	01 d0                	add    eax,edx
ffff8000008054f2:	c1 e0 0c             	shl    eax,0xc
ffff8000008054f5:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:463
                if(ptr==NULL)
ffff8000008054f8:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff8000008054fd:	75 13                	jne    ffff800000805512 <palloc+0x24e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:466
                {
                   // ptr=laddr;
                    palloc_paddr=addr;
ffff8000008054ff:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff800000805506:	ff ff ff 
ffff800000805509:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080550d:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
ffff800000805510:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:468
                }
                page_c--;
ffff800000805512:	83 6d ec 01          	sub    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:469
                c++;
ffff800000805516:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:470
                if(page_c==0)
ffff80000080551a:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080551e:	0f 85 09 01 00 00    	jne    ffff80000080562d <palloc+0x369>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:473
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
ffff800000805524:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080552b:	ff ff ff 
ffff80000080552e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805532:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805535:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000805538:	48 98                	cdqe   
ffff80000080553a:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805541:	48 01 d0             	add    rax,rdx
ffff800000805544:	0f b7 80 88 00 00 00 	movzx  eax,WORD PTR [rax+0x88]
ffff80000080554b:	0f b7 c0             	movzx  eax,ax
ffff80000080554e:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:474
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
ffff800000805551:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805558:	ff ff ff 
ffff80000080555b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080555f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805562:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000805565:	48 98                	cdqe   
ffff800000805567:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080556e:	48 01 d0             	add    rax,rdx
ffff800000805571:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff800000805578:	0f b7 c0             	movzx  eax,ax
ffff80000080557b:	c1 e0 10             	shl    eax,0x10
ffff80000080557e:	25 00 00 0f 00       	and    eax,0xf0000
ffff800000805583:	01 45 ac             	add    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:475
                    size+=c;
ffff800000805586:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000805589:	01 45 ac             	add    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:476
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
ffff80000080558c:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805593:	ff ff ff 
ffff800000805596:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080559a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080559d:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008055a0:	48 98                	cdqe   
ffff8000008055a2:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008055a9:	48 01 d0             	add    rax,rdx
ffff8000008055ac:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff8000008055af:	66 89 90 88 00 00 00 	mov    WORD PTR [rax+0x88],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:477
                    int tmp_attr=task[proc_index].ldt[2].attr;
ffff8000008055b6:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008055bd:	ff ff ff 
ffff8000008055c0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008055c4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008055c7:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008055ca:	48 98                	cdqe   
ffff8000008055cc:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008055d3:	48 01 d0             	add    rax,rdx
ffff8000008055d6:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff8000008055dd:	0f b7 c0             	movzx  eax,ax
ffff8000008055e0:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:478
                    tmp_attr&=0xfff0;
ffff8000008055e3:	81 65 a8 f0 ff 00 00 	and    DWORD PTR [rbp-0x58],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:479
                    tmp_attr+=(size>>16)&0xf;
ffff8000008055ea:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff8000008055ed:	c1 e8 10             	shr    eax,0x10
ffff8000008055f0:	83 e0 0f             	and    eax,0xf
ffff8000008055f3:	89 c2                	mov    edx,eax
ffff8000008055f5:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
ffff8000008055f8:	01 d0                	add    eax,edx
ffff8000008055fa:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:480
                    task[proc_index].ldt[2].attr=tmp_attr;
ffff8000008055fd:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805604:	ff ff ff 
ffff800000805607:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080560b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080560e:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000805611:	48 98                	cdqe   
ffff800000805613:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080561a:	48 01 d0             	add    rax,rdx
ffff80000080561d:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
ffff800000805620:	66 89 90 8d 00 00 00 	mov    WORD PTR [rax+0x8d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:481
                    return ptr;
ffff800000805627:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080562b:	eb 31                	jmp    ffff80000080565e <palloc+0x39a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:484 (discriminator 2)
                }
            }
            tblp++;
ffff80000080562d:	48 83 45 d0 08       	add    QWORD PTR [rbp-0x30],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:440 (discriminator 2)
        for(int j=0;j<1024;j++)
ffff800000805632:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:440 (discriminator 1)
ffff800000805636:	81 7d cc ff 03 00 00 	cmp    DWORD PTR [rbp-0x34],0x3ff
ffff80000080563d:	0f 8e 1e fd ff ff    	jle    ffff800000805361 <palloc+0x9d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:486 (discriminator 2)
        }
        pgind++;
ffff800000805643:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:437 (discriminator 2)
    for(int i=1;i<1024;i++)
ffff800000805648:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:437 (discriminator 1)
ffff80000080564c:	81 7d dc ff 03 00 00 	cmp    DWORD PTR [rbp-0x24],0x3ff
ffff800000805653:	0f 8e ec fc ff ff    	jle    ffff800000805345 <palloc+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:488
    }
    return NULL;
ffff800000805659:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:489
}
ffff80000080565e:	48 83 c4 60          	add    rsp,0x60
ffff800000805662:	5b                   	pop    rbx
ffff800000805663:	41 5f                	pop    r15
ffff800000805665:	5d                   	pop    rbp
ffff800000805666:	c3                   	ret    

ffff800000805667 <malloc>:
malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:492
//为当前进程申请新的内存，并返回这块内存的线性地址。
void* malloc(int size)
{
ffff800000805667:	f3 0f 1e fa          	endbr64 
ffff80000080566b:	55                   	push   rbp
ffff80000080566c:	48 89 e5             	mov    rbp,rsp
ffff80000080566f:	41 57                	push   r15
ffff800000805671:	48 83 ec 18          	sub    rsp,0x18
ffff800000805675:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805675 <malloc+0xe>
ffff80000080567c:	49 bb 5b 84 11 00 00 	movabs r11,0x11845b
ffff800000805683:	00 00 00 
ffff800000805686:	4c 01 d8             	add    rax,r11
ffff800000805689:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:493
    return palloc(cur_proc,size);
ffff80000080568c:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805693:	ff ff ff 
ffff800000805696:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080569a:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080569c:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffff80000080569f:	89 ce                	mov    esi,ecx
ffff8000008056a1:	89 d7                	mov    edi,edx
ffff8000008056a3:	49 89 c7             	mov    r15,rax
ffff8000008056a6:	48 ba f4 77 ee ff ff 	movabs rdx,0xffffffffffee77f4
ffff8000008056ad:	ff ff ff 
ffff8000008056b0:	48 01 c2             	add    rdx,rax
ffff8000008056b3:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:494
}
ffff8000008056b5:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008056b9:	c9                   	leave  
ffff8000008056ba:	c3                   	ret    

ffff8000008056bb <proc_end>:
proc_end():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:496
void proc_end()
{
ffff8000008056bb:	f3 0f 1e fa          	endbr64 
ffff8000008056bf:	55                   	push   rbp
ffff8000008056c0:	48 89 e5             	mov    rbp,rsp
ffff8000008056c3:	41 57                	push   r15
ffff8000008056c5:	53                   	push   rbx
ffff8000008056c6:	48 83 ec 10          	sub    rsp,0x10
ffff8000008056ca:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008056ca <proc_end+0xf>
ffff8000008056d1:	49 bb 06 84 11 00 00 	movabs r11,0x118406
ffff8000008056d8:	00 00 00 
ffff8000008056db:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:498
    int ret;
    asm volatile("mov %%eax,%0":"=m"(ret));
ffff8000008056de:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:502
    //printf("proc #%d ended with retv %d.\n",cur_proc,ret);
    //切换堆栈
    //asm volatile("mov %0,%%rsp"::"r"(task[0].tss.esp));
    del_proc(cur_proc);
ffff8000008056e1:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008056e8:	ff ff ff 
ffff8000008056eb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008056ef:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008056f1:	89 c7                	mov    edi,eax
ffff8000008056f3:	49 89 df             	mov    r15,rbx
ffff8000008056f6:	48 b8 32 7d ee ff ff 	movabs rax,0xffffffffffee7d32
ffff8000008056fd:	ff ff ff 
ffff800000805700:	48 01 d8             	add    rax,rbx
ffff800000805703:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:503
    if(task[cur_proc].parent_pid!=-1){
ffff800000805705:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080570c:	ff ff ff 
ffff80000080570f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805713:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805716:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080571d:	ff ff ff 
ffff800000805720:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805724:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805726:	48 98                	cdqe   
ffff800000805728:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080572f:	48 01 d0             	add    rax,rdx
ffff800000805732:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff800000805738:	83 f8 ff             	cmp    eax,0xffffffff
ffff80000080573b:	0f 84 a0 00 00 00    	je     ffff8000008057e1 <proc_end+0x126>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:504
        task[task[cur_proc].parent_pid].stat=TASK_READY;
ffff800000805741:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805748:	ff ff ff 
ffff80000080574b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080574f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805752:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805759:	ff ff ff 
ffff80000080575c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805760:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805763:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080576a:	ff ff ff 
ffff80000080576d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805771:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805773:	48 98                	cdqe   
ffff800000805775:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080577c:	48 01 c8             	add    rax,rcx
ffff80000080577f:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff800000805785:	89 c0                	mov    eax,eax
ffff800000805787:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080578e:	48 01 d0             	add    rax,rdx
ffff800000805791:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:505
        switch_proc_tss(task[cur_proc].parent_pid);
ffff800000805798:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080579f:	ff ff ff 
ffff8000008057a2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008057a6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008057a9:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008057b0:	ff ff ff 
ffff8000008057b3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008057b7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008057b9:	48 98                	cdqe   
ffff8000008057bb:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008057c2:	48 01 d0             	add    rax,rdx
ffff8000008057c5:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff8000008057cb:	89 c7                	mov    edi,eax
ffff8000008057cd:	49 89 df             	mov    r15,rbx
ffff8000008057d0:	48 b8 47 76 ee ff ff 	movabs rax,0xffffffffffee7647
ffff8000008057d7:	ff ff ff 
ffff8000008057da:	48 01 d8             	add    rax,rbx
ffff8000008057dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:510
    }
    else
        switch_proc_tss(0);
    //syscall(SYSCALL_DEL_PROC,cur_proc,0,0,0,0);
}
ffff8000008057df:	eb 17                	jmp    ffff8000008057f8 <proc_end+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:508
        switch_proc_tss(0);
ffff8000008057e1:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008057e6:	49 89 df             	mov    r15,rbx
ffff8000008057e9:	48 b8 47 76 ee ff ff 	movabs rax,0xffffffffffee7647
ffff8000008057f0:	ff ff ff 
ffff8000008057f3:	48 01 d8             	add    rax,rbx
ffff8000008057f6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:510
}
ffff8000008057f8:	90                   	nop
ffff8000008057f9:	48 83 c4 10          	add    rsp,0x10
ffff8000008057fd:	5b                   	pop    rbx
ffff8000008057fe:	41 5f                	pop    r15
ffff800000805800:	5d                   	pop    rbp
ffff800000805801:	c3                   	ret    

ffff800000805802 <del_proc>:
del_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:512
void del_proc(int pnr)
{
ffff800000805802:	f3 0f 1e fa          	endbr64 
ffff800000805806:	55                   	push   rbp
ffff800000805807:	48 89 e5             	mov    rbp,rsp
ffff80000080580a:	41 57                	push   r15
ffff80000080580c:	53                   	push   rbx
ffff80000080580d:	48 83 ec 20          	sub    rsp,0x20
ffff800000805811:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805811 <del_proc+0xf>
ffff800000805818:	49 bb bf 82 11 00 00 	movabs r11,0x1182bf
ffff80000080581f:	00 00 00 
ffff800000805822:	4c 01 db             	add    rbx,r11
ffff800000805825:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:513
    task[pnr].stat=TASK_ZOMBIE;
ffff800000805828:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080582f:	ff ff ff 
ffff800000805832:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805836:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805839:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080583c:	48 98                	cdqe   
ffff80000080583e:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805845:	48 01 d0             	add    rax,rdx
ffff800000805848:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:516
//    task[pnr].pid=-1;
    //释放申请的页面
    release_mmap(&task[pnr]);
ffff80000080584f:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805856:	ff ff ff 
ffff800000805859:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080585d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805860:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805863:	48 98                	cdqe   
ffff800000805865:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080586c:	48 01 d0             	add    rax,rdx
ffff80000080586f:	48 89 c7             	mov    rdi,rax
ffff800000805872:	49 89 df             	mov    r15,rbx
ffff800000805875:	48 b8 14 94 ee ff ff 	movabs rax,0xffffffffffee9414
ffff80000080587c:	ff ff ff 
ffff80000080587f:	48 01 d8             	add    rax,rbx
ffff800000805882:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:518
    //释放存放页目录的页面
    kmfree(task[pnr].pml4);
ffff800000805884:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080588b:	ff ff ff 
ffff80000080588e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805892:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805895:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805898:	48 98                	cdqe   
ffff80000080589a:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008058a1:	48 01 d0             	add    rax,rdx
ffff8000008058a4:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff8000008058ab:	48 89 c7             	mov    rdi,rax
ffff8000008058ae:	49 89 df             	mov    r15,rbx
ffff8000008058b1:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff8000008058b8:	ff ff ff 
ffff8000008058bb:	48 01 d8             	add    rax,rbx
ffff8000008058be:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:520
    //关闭打开的文件
    for(int i=3;i<MAX_PROC_OPENF;i++){
ffff8000008058c0:	c7 45 ec 03 00 00 00 	mov    DWORD PTR [rbp-0x14],0x3
ffff8000008058c7:	eb 4f                	jmp    ffff800000805918 <del_proc+0x116>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:521
        if(task[pnr].openf[i]){
ffff8000008058c9:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008058d0:	ff ff ff 
ffff8000008058d3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008058d7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008058da:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008058dd:	48 98                	cdqe   
ffff8000008058df:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008058e6:	48 01 d0             	add    rax,rdx
ffff8000008058e9:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008058ec:	48 63 d2             	movsxd rdx,edx
ffff8000008058ef:	48 83 c2 1e          	add    rdx,0x1e
ffff8000008058f3:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff8000008058f8:	48 85 c0             	test   rax,rax
ffff8000008058fb:	74 17                	je     ffff800000805914 <del_proc+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:522
            sys_close(i);
ffff8000008058fd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805900:	89 c7                	mov    edi,eax
ffff800000805902:	49 89 df             	mov    r15,rbx
ffff800000805905:	48 b8 83 e3 ee ff ff 	movabs rax,0xffffffffffeee383
ffff80000080590c:	ff ff ff 
ffff80000080590f:	48 01 d8             	add    rax,rbx
ffff800000805912:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:520 (discriminator 2)
    for(int i=3;i<MAX_PROC_OPENF;i++){
ffff800000805914:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:520 (discriminator 1)
ffff800000805918:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080591c:	7e ab                	jle    ffff8000008058c9 <del_proc+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:526
        }
    }
    //三个std判断一下是否是会话leader，是的话再关闭
    if(task[pnr].sid==task[pnr].pid){
ffff80000080591e:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805925:	ff ff ff 
ffff800000805928:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080592c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080592f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805932:	48 98                	cdqe   
ffff800000805934:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080593b:	48 01 d0             	add    rax,rdx
ffff80000080593e:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000805941:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805948:	ff ff ff 
ffff80000080594b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080594f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805952:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805955:	48 98                	cdqe   
ffff800000805957:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080595e:	48 01 c8             	add    rax,rcx
ffff800000805961:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805963:	39 c2                	cmp    edx,eax
ffff800000805965:	75 79                	jne    ffff8000008059e0 <del_proc+0x1de>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:528
        //tty和console断联
        sys_ioctl(0,TTY_DISCONNECT,0);
ffff800000805967:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080596c:	be 02 00 00 00       	mov    esi,0x2
ffff800000805971:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805976:	49 89 df             	mov    r15,rbx
ffff800000805979:	48 b8 a1 a1 ee ff ff 	movabs rax,0xffffffffffeea1a1
ffff800000805980:	ff ff ff 
ffff800000805983:	48 01 d8             	add    rax,rbx
ffff800000805986:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:529
        sys_close(0);
ffff800000805988:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080598d:	49 89 df             	mov    r15,rbx
ffff800000805990:	48 b8 83 e3 ee ff ff 	movabs rax,0xffffffffffeee383
ffff800000805997:	ff ff ff 
ffff80000080599a:	48 01 d8             	add    rax,rbx
ffff80000080599d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:530
        sys_close(1);
ffff80000080599f:	bf 01 00 00 00       	mov    edi,0x1
ffff8000008059a4:	49 89 df             	mov    r15,rbx
ffff8000008059a7:	48 b8 83 e3 ee ff ff 	movabs rax,0xffffffffffeee383
ffff8000008059ae:	ff ff ff 
ffff8000008059b1:	48 01 d8             	add    rax,rbx
ffff8000008059b4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:531
        sys_close(2);
ffff8000008059b6:	bf 02 00 00 00       	mov    edi,0x2
ffff8000008059bb:	49 89 df             	mov    r15,rbx
ffff8000008059be:	48 b8 83 e3 ee ff ff 	movabs rax,0xffffffffffeee383
ffff8000008059c5:	ff ff ff 
ffff8000008059c8:	48 01 d8             	add    rax,rbx
ffff8000008059cb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:533
        //然后,关闭所有前台进程组的进程
        for(int i=0;i<MAX_TASKS;i++){
ffff8000008059cd:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff8000008059d4:	eb 04                	jmp    ffff8000008059da <del_proc+0x1d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:533 (discriminator 3)
ffff8000008059d6:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:533 (discriminator 1)
ffff8000008059da:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff8000008059de:	7e f6                	jle    ffff8000008059d6 <del_proc+0x1d4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:543
    }
    //TODO 给子进程发送SIGHUP信号结束他们
    //
    //从进程中解除cr3,tss和ldt
    //switch_proc_tss(task[pnr]);
}
ffff8000008059e0:	90                   	nop
ffff8000008059e1:	48 83 c4 20          	add    rsp,0x20
ffff8000008059e5:	5b                   	pop    rbx
ffff8000008059e6:	41 5f                	pop    r15
ffff8000008059e8:	5d                   	pop    rbp
ffff8000008059e9:	c3                   	ret    

ffff8000008059ea <set_proc_stat>:
set_proc_stat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:546

int set_proc_stat(int pid,int stat)
{
ffff8000008059ea:	f3 0f 1e fa          	endbr64 
ffff8000008059ee:	55                   	push   rbp
ffff8000008059ef:	48 89 e5             	mov    rbp,rsp
ffff8000008059f2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008059f2 <set_proc_stat+0x8>
ffff8000008059f9:	49 bb de 80 11 00 00 	movabs r11,0x1180de
ffff800000805a00:	00 00 00 
ffff800000805a03:	4c 01 d8             	add    rax,r11
ffff800000805a06:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000805a09:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:547
    if(pid==-1)return -1;
ffff800000805a0c:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff800000805a10:	75 0a                	jne    ffff800000805a1c <set_proc_stat+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:547 (discriminator 1)
ffff800000805a12:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805a17:	e9 b9 00 00 00       	jmp    ffff800000805ad5 <set_proc_stat+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:548
    int i=0;
ffff800000805a1c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:549
    for(;task[i].pid!=pid;i++);
ffff800000805a23:	eb 04                	jmp    ffff800000805a29 <set_proc_stat+0x3f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:549 (discriminator 2)
ffff800000805a25:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:549 (discriminator 1)
ffff800000805a29:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805a30:	ff ff ff 
ffff800000805a33:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805a37:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805a3a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805a3d:	48 63 d2             	movsxd rdx,edx
ffff800000805a40:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805a47:	48 01 ca             	add    rdx,rcx
ffff800000805a4a:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000805a4c:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805a4f:	39 d1                	cmp    ecx,edx
ffff800000805a51:	75 d2                	jne    ffff800000805a25 <set_proc_stat+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:550
    if(i==MAX_PROC_COUNT)return -1;
ffff800000805a53:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff800000805a57:	75 07                	jne    ffff800000805a60 <set_proc_stat+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:550 (discriminator 1)
ffff800000805a59:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805a5e:	eb 75                	jmp    ffff800000805ad5 <set_proc_stat+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:551
    task[i].stat=stat;
ffff800000805a60:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805a67:	ff ff ff 
ffff800000805a6a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805a6e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805a71:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805a74:	48 63 d2             	movsxd rdx,edx
ffff800000805a77:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805a7e:	48 01 d1             	add    rcx,rdx
ffff800000805a81:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000805a84:	89 51 18             	mov    DWORD PTR [rcx+0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:553
    //如果这就是正在运行的进程，那么马上停止
    if(cur_proc==i)
ffff800000805a87:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805a8e:	ff ff ff 
ffff800000805a91:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805a95:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805a97:	39 55 fc             	cmp    DWORD PTR [rbp-0x4],edx
ffff800000805a9a:	75 34                	jne    ffff800000805ad0 <set_proc_stat+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:554
        task[cur_proc].utime=MAX_UTIME;
ffff800000805a9c:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805aa3:	ff ff ff 
ffff800000805aa6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805aaa:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805aad:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805ab4:	ff ff ff 
ffff800000805ab7:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000805abb:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805abd:	48 98                	cdqe   
ffff800000805abf:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805ac6:	48 01 c8             	add    rax,rcx
ffff800000805ac9:	c7 40 1c 0a 00 00 00 	mov    DWORD PTR [rax+0x1c],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:555
    return 0;
ffff800000805ad0:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:556
}
ffff800000805ad5:	5d                   	pop    rbp
ffff800000805ad6:	c3                   	ret    

ffff800000805ad7 <sys_exit>:
sys_exit():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:588
//}
/*
 * 进程结束。
 * */
int sys_exit(int code)
{
ffff800000805ad7:	f3 0f 1e fa          	endbr64 
ffff800000805adb:	55                   	push   rbp
ffff800000805adc:	48 89 e5             	mov    rbp,rsp
ffff800000805adf:	41 57                	push   r15
ffff800000805ae1:	53                   	push   rbx
ffff800000805ae2:	48 83 ec 10          	sub    rsp,0x10
ffff800000805ae6:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805ae6 <sys_exit+0xf>
ffff800000805aed:	49 bb ea 7f 11 00 00 	movabs r11,0x117fea
ffff800000805af4:	00 00 00 
ffff800000805af7:	4c 01 db             	add    rbx,r11
ffff800000805afa:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:589
    current->exit_code=code;
ffff800000805afd:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000805b04:	ff ff ff 
ffff800000805b07:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805b0b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805b0e:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805b11:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:590
    del_proc(cur_proc);
ffff800000805b14:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000805b1b:	ff ff ff 
ffff800000805b1e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805b22:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805b24:	89 c7                	mov    edi,eax
ffff800000805b26:	49 89 df             	mov    r15,rbx
ffff800000805b29:	48 b8 32 7d ee ff ff 	movabs rax,0xffffffffffee7d32
ffff800000805b30:	ff ff ff 
ffff800000805b33:	48 01 d8             	add    rax,rbx
ffff800000805b36:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:592 (discriminator 1)
    while(1)
        manage_proc();
ffff800000805b38:	49 89 df             	mov    r15,rbx
ffff800000805b3b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805b40:	48 ba 8b 73 ee ff ff 	movabs rdx,0xffffffffffee738b
ffff800000805b47:	ff ff ff 
ffff800000805b4a:	48 01 da             	add    rdx,rbx
ffff800000805b4d:	ff d2                	call   rdx
ffff800000805b4f:	eb e7                	jmp    ffff800000805b38 <sys_exit+0x61>

ffff800000805b51 <reg_proc>:
reg_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:648
    dllmain(NULL,0,NULL);
    
}*/

int reg_proc(addr_t entry, struct index_node *cwd, struct index_node *exef)
{
ffff800000805b51:	f3 0f 1e fa          	endbr64 
ffff800000805b55:	55                   	push   rbp
ffff800000805b56:	48 89 e5             	mov    rbp,rsp
ffff800000805b59:	41 57                	push   r15
ffff800000805b5b:	41 54                	push   r12
ffff800000805b5d:	53                   	push   rbx
ffff800000805b5e:	48 83 ec 48          	sub    rsp,0x48
ffff800000805b62:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805b62 <reg_proc+0x11>
ffff800000805b69:	49 bb 6e 7f 11 00 00 	movabs r11,0x117f6e
ffff800000805b70:	00 00 00 
ffff800000805b73:	4c 01 db             	add    rbx,r11
ffff800000805b76:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff800000805b7a:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff800000805b7e:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:650
    
    int i=req_proc();
ffff800000805b82:	49 89 df             	mov    r15,rbx
ffff800000805b85:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805b8a:	48 ba ff 6f ee ff ff 	movabs rdx,0xffffffffffee6fff
ffff800000805b91:	ff ff ff 
ffff800000805b94:	48 01 da             	add    rdx,rbx
ffff800000805b97:	ff d2                	call   rdx
ffff800000805b99:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:651
    if(i==-1)return -1;
ffff800000805b9c:	83 7d dc ff          	cmp    DWORD PTR [rbp-0x24],0xffffffff
ffff800000805ba0:	75 0a                	jne    ffff800000805bac <reg_proc+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:651 (discriminator 1)
ffff800000805ba2:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805ba7:	e9 7e 02 00 00       	jmp    ffff800000805e2a <reg_proc+0x2d9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:654

    //栈顶设置在了4G处
    set_proc(0, 0, 0, 0, DS_USER, CS_USER, DS_USER, DS_USER\
ffff800000805bac:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000805bb0:	48 83 ec 08          	sub    rsp,0x8
ffff800000805bb4:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000805bb7:	52                   	push   rdx
ffff800000805bb8:	6a 00                	push   0x0
ffff800000805bba:	50                   	push   rax
ffff800000805bbb:	6a 00                	push   0x0
ffff800000805bbd:	6a 00                	push   0x0
ffff800000805bbf:	6a 00                	push   0x0
ffff800000805bc1:	68 00 f0 ff ff       	push   0xfffffffffffff000
ffff800000805bc6:	c7 44 24 04 ff 7f 00 	mov    DWORD PTR [rsp+0x4],0x7fff
ffff800000805bcd:	00 
ffff800000805bce:	6a 28                	push   0x28
ffff800000805bd0:	6a 28                	push   0x28
ffff800000805bd2:	6a 28                	push   0x28
ffff800000805bd4:	6a 28                	push   0x28
ffff800000805bd6:	41 b9 30 00 00 00    	mov    r9d,0x30
ffff800000805bdc:	41 b8 28 00 00 00    	mov    r8d,0x28
ffff800000805be2:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000805be7:	ba 00 00 00 00       	mov    edx,0x0
ffff800000805bec:	be 00 00 00 00       	mov    esi,0x0
ffff800000805bf1:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805bf6:	49 89 df             	mov    r15,rbx
ffff800000805bf9:	48 b8 50 71 ee ff ff 	movabs rax,0xffffffffffee7150
ffff800000805c00:	ff ff ff 
ffff800000805c03:	48 01 d8             	add    rax,rbx
ffff800000805c06:	ff d0                	call   rax
ffff800000805c08:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:656
, DS_USER, DS_USER, STACK_TOP, 0, 0, 0, entry, 0, i);
    task[i].pml4= kmalloc();
ffff800000805c0c:	49 89 df             	mov    r15,rbx
ffff800000805c0f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805c14:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000805c1b:	ff ff ff 
ffff800000805c1e:	48 01 da             	add    rdx,rbx
ffff800000805c21:	ff d2                	call   rdx
ffff800000805c23:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805c2a:	ff ff ff 
ffff800000805c2d:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000805c31:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805c34:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000805c37:	48 63 d2             	movsxd rdx,edx
ffff800000805c3a:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805c41:	48 01 ca             	add    rdx,rcx
ffff800000805c44:	48 89 82 e0 00 00 00 	mov    QWORD PTR [rdx+0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:657
    task[i].pml4[0]= kmalloc();
ffff800000805c4b:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805c52:	ff ff ff 
ffff800000805c55:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805c59:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805c5c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805c5f:	48 98                	cdqe   
ffff800000805c61:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805c68:	48 01 d0             	add    rax,rdx
ffff800000805c6b:	4c 8b a0 e0 00 00 00 	mov    r12,QWORD PTR [rax+0xe0]
ffff800000805c72:	49 89 df             	mov    r15,rbx
ffff800000805c75:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805c7a:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000805c81:	ff ff ff 
ffff800000805c84:	48 01 da             	add    rdx,rbx
ffff800000805c87:	ff d2                	call   rdx
ffff800000805c89:	49 89 04 24          	mov    QWORD PTR [r12],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:658
    unsigned long *pdpt=task[i].pml4;
ffff800000805c8d:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805c94:	ff ff ff 
ffff800000805c97:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805c9b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805c9e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805ca1:	48 98                	cdqe   
ffff800000805ca3:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805caa:	48 01 d0             	add    rax,rdx
ffff800000805cad:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000805cb4:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:660
    //pdpt第一项(0-1GB)设置为内核空间，这样才能访问中断
    set_1gb_pdpt(pdpt,0,PAGE_PRESENT|PAGE_RWX);
ffff800000805cb8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000805cbc:	ba 03 00 00 00       	mov    edx,0x3
ffff800000805cc1:	be 00 00 00 00       	mov    esi,0x0
ffff800000805cc6:	48 89 c7             	mov    rdi,rax
ffff800000805cc9:	49 89 df             	mov    r15,rbx
ffff800000805ccc:	48 b8 02 53 ee ff ff 	movabs rax,0xffffffffffee5302
ffff800000805cd3:	ff ff ff 
ffff800000805cd6:	48 01 d8             	add    rax,rbx
ffff800000805cd9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:663

    //申请一项pd,里面申请一2mb页用于堆栈
    addr_t *stackb= kmalloc();
ffff800000805cdb:	49 89 df             	mov    r15,rbx
ffff800000805cde:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805ce3:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000805cea:	ff ff ff 
ffff800000805ced:	48 01 da             	add    rdx,rbx
ffff800000805cf0:	ff d2                	call   rdx
ffff800000805cf2:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:664
    pdpt[3]=(unsigned long)stackb|PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX;//3-4G分配栈空间
ffff800000805cf6:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805cfa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000805cfe:	48 83 c0 18          	add    rax,0x18
ffff800000805d02:	48 83 ca 07          	or     rdx,0x7
ffff800000805d06:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:665
    set_2mb_pde(stackb + 511, get_phyaddr(req_a_page()), PAGE_FOR_ALL|PAGE_RWX);
ffff800000805d09:	49 89 df             	mov    r15,rbx
ffff800000805d0c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805d11:	48 ba 51 4f ee ff ff 	movabs rdx,0xffffffffffee4f51
ffff800000805d18:	ff ff ff 
ffff800000805d1b:	48 01 da             	add    rdx,rbx
ffff800000805d1e:	ff d2                	call   rdx
ffff800000805d20:	89 c7                	mov    edi,eax
ffff800000805d22:	49 89 df             	mov    r15,rbx
ffff800000805d25:	48 b8 69 52 ee ff ff 	movabs rax,0xffffffffffee5269
ffff800000805d2c:	ff ff ff 
ffff800000805d2f:	48 01 d8             	add    rax,rbx
ffff800000805d32:	ff d0                	call   rax
ffff800000805d34:	89 c1                	mov    ecx,eax
ffff800000805d36:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805d3a:	48 05 f8 0f 00 00    	add    rax,0xff8
ffff800000805d40:	ba 06 00 00 00       	mov    edx,0x6
ffff800000805d45:	89 ce                	mov    esi,ecx
ffff800000805d47:	48 89 c7             	mov    rdi,rax
ffff800000805d4a:	49 89 df             	mov    r15,rbx
ffff800000805d4d:	48 b8 6d 53 ee ff ff 	movabs rax,0xffffffffffee536d
ffff800000805d54:	ff ff ff 
ffff800000805d57:	48 01 d8             	add    rax,rbx
ffff800000805d5a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:666
    task[i].regs.cr3=task[i].pml4;
ffff800000805d5c:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805d63:	ff ff ff 
ffff800000805d66:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805d6a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805d6d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805d70:	48 98                	cdqe   
ffff800000805d72:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805d79:	48 01 d0             	add    rax,rdx
ffff800000805d7c:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000805d83:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805d8a:	ff ff ff 
ffff800000805d8d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805d91:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805d94:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805d97:	48 98                	cdqe   
ffff800000805d99:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805da0:	48 01 c8             	add    rax,rcx
ffff800000805da3:	48 89 90 64 02 00 00 	mov    QWORD PTR [rax+0x264],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:668

    task[i].stat=TASK_READY;
ffff800000805daa:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805db1:	ff ff ff 
ffff800000805db4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805db8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805dbb:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805dbe:	48 98                	cdqe   
ffff800000805dc0:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805dc7:	48 01 d0             	add    rax,rdx
ffff800000805dca:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:669
    task[i].cwd=cwd;
ffff800000805dd1:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805dd8:	ff ff ff 
ffff800000805ddb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805ddf:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805de2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805de5:	48 98                	cdqe   
ffff800000805de7:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805dee:	48 01 c2             	add    rdx,rax
ffff800000805df1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000805df5:	48 89 82 e8 00 00 00 	mov    QWORD PTR [rdx+0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:670
    task[i].exef=exef;
ffff800000805dfc:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000805e03:	ff ff ff 
ffff800000805e06:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805e0a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805e0d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805e10:	48 98                	cdqe   
ffff800000805e12:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805e19:	48 01 c2             	add    rdx,rax
ffff800000805e1c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000805e20:	48 89 82 f0 00 00 00 	mov    QWORD PTR [rdx+0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:672

    return i;
ffff800000805e27:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:727
    proc_ret_stack *pstack=stack_paddr+stack_size-12;
    pstack->argc=0;
    pstack->argv=0;
    pstack->proc_end_addr=proc_end;
    int *pptr=pstack;*/
}
ffff800000805e2a:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
ffff800000805e2e:	5b                   	pop    rbx
ffff800000805e2f:	41 5c                	pop    r12
ffff800000805e31:	41 5f                	pop    r15
ffff800000805e33:	5d                   	pop    rbp
ffff800000805e34:	c3                   	ret    

ffff800000805e35 <sys_malloc>:
sys_malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:730

void * sys_malloc(size_t size)
{
ffff800000805e35:	f3 0f 1e fa          	endbr64 
ffff800000805e39:	55                   	push   rbp
ffff800000805e3a:	48 89 e5             	mov    rbp,rsp
ffff800000805e3d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805e3d <sys_malloc+0x8>
ffff800000805e44:	49 bb 93 7c 11 00 00 	movabs r11,0x117c93
ffff800000805e4b:	00 00 00 
ffff800000805e4e:	4c 01 d8             	add    rax,r11
ffff800000805e51:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:747
    void *data=current->mem_struct.heap_top;
    current->mem_struct.heap_top=new_heaptop;
    return data; */
    

    int n=size/CHUNK_SIZE+size%CHUNK_SIZE?1:0;
ffff800000805e55:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805e59:	48 89 d1             	mov    rcx,rdx
ffff800000805e5c:	48 c1 e9 0c          	shr    rcx,0xc
ffff800000805e60:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805e64:	81 e2 ff 0f 00 00    	and    edx,0xfff
ffff800000805e6a:	48 01 ca             	add    rdx,rcx
ffff800000805e6d:	48 85 d2             	test   rdx,rdx
ffff800000805e70:	0f 95 c2             	setne  dl
ffff800000805e73:	0f b6 d2             	movzx  edx,dl
ffff800000805e76:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:748
    chunk_header *hp=(chunk_header*)task[cur_proc].mem_struct.heap_base;
ffff800000805e79:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805e80:	ff ff ff 
ffff800000805e83:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805e87:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805e8a:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805e91:	ff ff ff 
ffff800000805e94:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805e98:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805e9a:	48 63 d2             	movsxd rdx,edx
ffff800000805e9d:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805ea4:	48 01 ca             	add    rdx,rcx
ffff800000805ea7:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff800000805eab:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:749
    while (hp->next!=NULL&&hp->alloc==0&&hp->pgn>=n)
ffff800000805eaf:	eb 0c                	jmp    ffff800000805ebd <sys_malloc+0x88>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:750
        hp=hp->next;
ffff800000805eb1:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805eb5:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff800000805eb9:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:749
    while (hp->next!=NULL&&hp->alloc==0&&hp->pgn>=n)
ffff800000805ebd:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805ec1:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff800000805ec5:	48 85 d2             	test   rdx,rdx
ffff800000805ec8:	74 16                	je     ffff800000805ee0 <sys_malloc+0xab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:749 (discriminator 1)
ffff800000805eca:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805ece:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff800000805ed1:	85 d2                	test   edx,edx
ffff800000805ed3:	75 0b                	jne    ffff800000805ee0 <sys_malloc+0xab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:749 (discriminator 2)
ffff800000805ed5:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805ed9:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805edb:	39 55 e8             	cmp    DWORD PTR [rbp-0x18],edx
ffff800000805ede:	7e d1                	jle    ffff800000805eb1 <sys_malloc+0x7c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:751
    if(hp->pgn<n)
ffff800000805ee0:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805ee4:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805ee6:	39 55 e8             	cmp    DWORD PTR [rbp-0x18],edx
ffff800000805ee9:	0f 8e b8 00 00 00    	jle    ffff800000805fa7 <sys_malloc+0x172>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:754
    {
        //上抬heap top
        if(task[cur_proc].mem_struct.heap_top+CHUNK_SIZE*n>=HEAP_MAXTOP)
ffff800000805eef:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805ef6:	ff ff ff 
ffff800000805ef9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805efd:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805f00:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805f07:	ff ff ff 
ffff800000805f0a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805f0e:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805f10:	48 63 d2             	movsxd rdx,edx
ffff800000805f13:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000805f1a:	48 01 ca             	add    rdx,rcx
ffff800000805f1d:	48 8b 4a 30          	mov    rcx,QWORD PTR [rdx+0x30]
ffff800000805f21:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000805f24:	c1 e2 0c             	shl    edx,0xc
ffff800000805f27:	48 63 d2             	movsxd rdx,edx
ffff800000805f2a:	48 01 ca             	add    rdx,rcx
ffff800000805f2d:	48 81 fa ff ff ef 01 	cmp    rdx,0x1efffff
ffff800000805f34:	76 0a                	jbe    ffff800000805f40 <sys_malloc+0x10b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:757
        {
            //超过顶部
            return NULL;
ffff800000805f36:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805f3b:	e9 e0 00 00 00       	jmp    ffff800000806020 <sys_malloc+0x1eb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:759
        }
        int needed=n-hp->pgn;
ffff800000805f40:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805f44:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000805f46:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000805f49:	29 ca                	sub    edx,ecx
ffff800000805f4b:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:760
        char* p=task[cur_proc].mem_struct.heap_top;
ffff800000805f4e:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805f55:	ff ff ff 
ffff800000805f58:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805f5c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805f5f:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000805f66:	ff ff ff 
ffff800000805f69:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000805f6d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805f6f:	48 98                	cdqe   
ffff800000805f71:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000805f78:	48 01 c8             	add    rax,rcx
ffff800000805f7b:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000805f7f:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:761
        for(int i=0;i<needed*CHUNK_SIZE/PAGE_SIZE;i++)
ffff800000805f83:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000805f8a:	eb 13                	jmp    ffff800000805f9f <sys_malloc+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:763 (discriminator 3)
        {
            *p=0;//触发缺页中断
ffff800000805f8c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805f90:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:764 (discriminator 3)
            p+=PAGE_SIZE;
ffff800000805f93:	48 81 45 f0 00 10 00 	add    QWORD PTR [rbp-0x10],0x1000
ffff800000805f9a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:761 (discriminator 3)
        for(int i=0;i<needed*CHUNK_SIZE/PAGE_SIZE;i++)
ffff800000805f9b:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:761 (discriminator 1)
ffff800000805f9f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805fa2:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
ffff800000805fa5:	7c e5                	jl     ffff800000805f8c <sys_malloc+0x157>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:767
        }
    }
    if(hp->pgn>n)
ffff800000805fa7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805fab:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805fad:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
ffff800000805fb0:	7d 59                	jge    ffff80000080600b <sys_malloc+0x1d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:770
    {
        //在后面新建一个头
        char *p=hp;
ffff800000805fb2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805fb6:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:771
        p+=(n+1)*CHUNK_SIZE;//算上存储头一个
ffff800000805fba:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000805fbd:	83 c0 01             	add    eax,0x1
ffff800000805fc0:	c1 e0 0c             	shl    eax,0xc
ffff800000805fc3:	48 98                	cdqe   
ffff800000805fc5:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:772
        chunk_header *np=p;
ffff800000805fc9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000805fcd:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:773
        np->pgn=hp->pgn-n-1;
ffff800000805fd1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805fd5:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805fd7:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
ffff800000805fda:	8d 50 ff             	lea    edx,[rax-0x1]
ffff800000805fdd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000805fe1:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:774
        np->next=hp->next;
ffff800000805fe3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805fe7:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000805feb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000805fef:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:775
        np->prev=hp;
ffff800000805ff3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000805ff7:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805ffb:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:776
        hp->next=np;
ffff800000805fff:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806003:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000806007:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:778
    }
    hp->alloc=1;//分配完毕
ffff80000080600b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080600f:	c7 40 04 01 00 00 00 	mov    DWORD PTR [rax+0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:779
    return (char*)hp+CHUNK_SIZE;//返回后边的第一个数据块地址
ffff800000806016:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080601a:	48 05 00 10 00 00    	add    rax,0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:780
}
ffff800000806020:	5d                   	pop    rbp
ffff800000806021:	c3                   	ret    

ffff800000806022 <sys_free>:
sys_free():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:782
int sys_free(int ptr)
{
ffff800000806022:	f3 0f 1e fa          	endbr64 
ffff800000806026:	55                   	push   rbp
ffff800000806027:	48 89 e5             	mov    rbp,rsp
ffff80000080602a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080602a <sys_free+0x8>
ffff800000806031:	49 bb a6 7a 11 00 00 	movabs r11,0x117aa6
ffff800000806038:	00 00 00 
ffff80000080603b:	4c 01 d8             	add    rax,r11
ffff80000080603e:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:783
    chunk_header *hp=ptr-CHUNK_SIZE;//回退到头
ffff800000806041:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806044:	2d 00 10 00 00       	sub    eax,0x1000
ffff800000806049:	48 98                	cdqe   
ffff80000080604b:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:784
    hp->alloc=0;    //合并
ffff80000080604f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806053:	c7 40 04 00 00 00 00 	mov    DWORD PTR [rax+0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:786
    //向后合并
    chunk_header *p=hp->next;
ffff80000080605a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080605e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000806062:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:787
    while(p!=NULL)
ffff800000806066:	eb 2e                	jmp    ffff800000806096 <sys_free+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:789
    {
        if(p->alloc==0)
ffff800000806068:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080606c:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080606f:	85 c0                	test   eax,eax
ffff800000806071:	75 2c                	jne    ffff80000080609f <sys_free+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:791
        {
            hp->pgn+=p->pgn+1;//把区域合并
ffff800000806073:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806077:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000806079:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080607d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080607f:	83 c0 01             	add    eax,0x1
ffff800000806082:	01 c2                	add    edx,eax
ffff800000806084:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806088:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:794
        }else
            break;
        p=p->next;
ffff80000080608a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080608e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000806092:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:787
    while(p!=NULL)
ffff800000806096:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080609b:	75 cb                	jne    ffff800000806068 <sys_free+0x46>
ffff80000080609d:	eb 01                	jmp    ffff8000008060a0 <sys_free+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:793
            break;
ffff80000080609f:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:797
    }
    //向前合并
    p=hp->prev;
ffff8000008060a0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008060a4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008060a8:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:798
    while(p!=NULL)
ffff8000008060ac:	eb 2e                	jmp    ffff8000008060dc <sys_free+0xba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:800
    {
        if(p->alloc==0)
ffff8000008060ae:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008060b2:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008060b5:	85 c0                	test   eax,eax
ffff8000008060b7:	75 2c                	jne    ffff8000008060e5 <sys_free+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:802
        {
            p->pgn+=hp->pgn+1;//把区域合并
ffff8000008060b9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008060bd:	8b 10                	mov    edx,DWORD PTR [rax]
ffff8000008060bf:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008060c3:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008060c5:	83 c0 01             	add    eax,0x1
ffff8000008060c8:	01 c2                	add    edx,eax
ffff8000008060ca:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008060ce:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:805
        }else
            break;
        p=p->prev;
ffff8000008060d0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008060d4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008060d8:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:798
    while(p!=NULL)
ffff8000008060dc:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff8000008060e1:	75 cb                	jne    ffff8000008060ae <sys_free+0x8c>
ffff8000008060e3:	eb 01                	jmp    ffff8000008060e6 <sys_free+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:804
            break;
ffff8000008060e5:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:808
    }
    //合并完成
    return 0;
ffff8000008060e6:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:809
}
ffff8000008060eb:	5d                   	pop    rbp
ffff8000008060ec:	c3                   	ret    

ffff8000008060ed <switch_to>:
switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:811

void switch_to(struct process *from, struct process *to) {
ffff8000008060ed:	f3 0f 1e fa          	endbr64 
ffff8000008060f1:	55                   	push   rbp
ffff8000008060f2:	48 89 e5             	mov    rbp,rsp
ffff8000008060f5:	53                   	push   rbx
ffff8000008060f6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008060f6 <switch_to+0x9>
ffff8000008060fd:	49 bb da 79 11 00 00 	movabs r11,0x1179da
ffff800000806104:	00 00 00 
ffff800000806107:	4c 01 d8             	add    rax,r11
ffff80000080610a:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffff80000080610e:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:812
    cur_proc=to-task;
ffff800000806112:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000806119:	ff ff ff 
ffff80000080611c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806120:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000806123:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000806127:	48 29 ca             	sub    rdx,rcx
ffff80000080612a:	48 89 d1             	mov    rcx,rdx
ffff80000080612d:	48 c1 f9 03          	sar    rcx,0x3
ffff800000806131:	48 ba 43 ac 28 8d 8f 	movabs rdx,0x77a04c8f8d28ac43
ffff800000806138:	4c a0 77 
ffff80000080613b:	48 0f af d1          	imul   rdx,rcx
ffff80000080613f:	89 d1                	mov    ecx,edx
ffff800000806141:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000806148:	ff ff ff 
ffff80000080614b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080614f:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:813
    current=&task[cur_proc];
ffff800000806151:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000806158:	ff ff ff 
ffff80000080615b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080615f:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000806162:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000806169:	ff ff ff 
ffff80000080616c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806170:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806172:	48 63 d2             	movsxd rdx,edx
ffff800000806175:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff80000080617c:	48 01 ca             	add    rdx,rcx
ffff80000080617f:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff800000806186:	ff ff ff 
ffff800000806189:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080618d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:815
    //cr3需要物理地址,regs.cr3里面填的就是物理地址
    asm volatile("mov %0,%%rax\n"
ffff800000806190:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806194:	48 8b 80 64 02 00 00 	mov    rax,QWORD PTR [rax+0x264]
ffff80000080619b:	0f 22 d8             	mov    cr3,rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:817
                 "mov %%rax,%%cr3\n":"=m"(to->regs.cr3));
    asm volatile("mov %%rsp,%0\r\n"
ffff80000080619e:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
ffff8000008061a2:	4c 8b 55 f0          	mov    r10,QWORD PTR [rbp-0x10]
ffff8000008061a6:	4c 8b 5d f0          	mov    r11,QWORD PTR [rbp-0x10]
ffff8000008061aa:	48 8b 5d f0          	mov    rbx,QWORD PTR [rbp-0x10]
ffff8000008061ae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008061b2:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008061b6:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff8000008061ba:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
ffff8000008061be:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffff8000008061c2:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff8000008061c6:	49 89 a1 9c 02 00 00 	mov    QWORD PTR [r9+0x29c],rsp
ffff8000008061cd:	48 8d 05 24 00 00 00 	lea    rax,[rip+0x24]        # ffff8000008061f8 <done>
ffff8000008061d4:	49 89 82 6c 02 00 00 	mov    QWORD PTR [r10+0x26c],rax
ffff8000008061db:	41 8c a3 dc 02 00 00 	mov    WORD PTR [r11+0x2dc],fs
ffff8000008061e2:	8c ab e4 02 00 00    	mov    WORD PTR [rbx+0x2e4],gs
ffff8000008061e8:	48 8b a1 9c 02 00 00 	mov    rsp,QWORD PTR [rcx+0x29c]
ffff8000008061ef:	41 ff b0 6c 02 00 00 	push   QWORD PTR [r8+0x26c]
ffff8000008061f6:	eb 08                	jmp    ffff800000806200 <__switch_to>

ffff8000008061f8 <done>:
ffff8000008061f8:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:831
                 "nop":"=m"(from->regs.rsp),"=m"(from->regs.rip),
                 "=m"(from->regs.fs),"=m"(from->regs.gs):
                "m"(to->regs.fs),"m"(to->regs.gs),"m"(to->regs.rsp),"m"(to->regs.rip),
                "D"(from),"S"(to));

}
ffff8000008061f9:	90                   	nop
ffff8000008061fa:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff8000008061fe:	c9                   	leave  
ffff8000008061ff:	c3                   	ret    

ffff800000806200 <__switch_to>:
__switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:832
void __switch_to(struct process *from, struct process *to) {
ffff800000806200:	f3 0f 1e fa          	endbr64 
ffff800000806204:	55                   	push   rbp
ffff800000806205:	48 89 e5             	mov    rbp,rsp
ffff800000806208:	41 57                	push   r15
ffff80000080620a:	41 54                	push   r12
ffff80000080620c:	53                   	push   rbx
ffff80000080620d:	48 83 ec 18          	sub    rsp,0x18
ffff800000806211:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000806211 <__switch_to+0x11>
ffff800000806218:	49 bb bf 78 11 00 00 	movabs r11,0x1178bf
ffff80000080621f:	00 00 00 
ffff800000806222:	4c 01 d8             	add    rax,r11
ffff800000806225:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000806229:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:833
    set_tss(to->tss.rsp0,to->tss.rsp1,to->tss.rsp2,to->tss.ists[0],to->tss.ists[1],
ffff80000080622d:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000806231:	4c 8b 9a 4c 02 00 00 	mov    r11,QWORD PTR [rdx+0x24c]
ffff800000806238:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080623c:	4c 8b 92 44 02 00 00 	mov    r10,QWORD PTR [rdx+0x244]
ffff800000806243:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000806247:	4c 8b 8a 3c 02 00 00 	mov    r9,QWORD PTR [rdx+0x23c]
ffff80000080624e:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000806252:	4c 8b 82 34 02 00 00 	mov    r8,QWORD PTR [rdx+0x234]
ffff800000806259:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080625d:	4c 8b a2 2c 02 00 00 	mov    r12,QWORD PTR [rdx+0x22c]
ffff800000806264:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000806268:	48 8b 9a 24 02 00 00 	mov    rbx,QWORD PTR [rdx+0x224]
ffff80000080626f:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000806273:	48 8b 8a 1c 02 00 00 	mov    rcx,QWORD PTR [rdx+0x21c]
ffff80000080627a:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080627e:	48 8b 92 0c 02 00 00 	mov    rdx,QWORD PTR [rdx+0x20c]
ffff800000806285:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000806289:	48 8b b6 04 02 00 00 	mov    rsi,QWORD PTR [rsi+0x204]
ffff800000806290:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffff800000806294:	48 8b bf fc 01 00 00 	mov    rdi,QWORD PTR [rdi+0x1fc]
ffff80000080629b:	41 53                	push   r11
ffff80000080629d:	41 52                	push   r10
ffff80000080629f:	41 51                	push   r9
ffff8000008062a1:	41 50                	push   r8
ffff8000008062a3:	4d 89 e1             	mov    r9,r12
ffff8000008062a6:	49 89 d8             	mov    r8,rbx
ffff8000008062a9:	49 89 c7             	mov    r15,rax
ffff8000008062ac:	49 ba 25 88 ee ff ff 	movabs r10,0xffffffffffee8825
ffff8000008062b3:	ff ff ff 
ffff8000008062b6:	49 01 c2             	add    r10,rax
ffff8000008062b9:	41 ff d2             	call   r10
ffff8000008062bc:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:835
            to->tss.ists[2],to->tss.ists[3],to->tss.ists[4],to->tss.ists[5],to->tss.ists[6]);
    asm volatile("mov %%fs,%0\r\n"
ffff8000008062c0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008062c4:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff8000008062c8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008062cc:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff8000008062d0:	8c a0 dc 02 00 00    	mov    WORD PTR [rax+0x2dc],fs
ffff8000008062d6:	8c ae e4 02 00 00    	mov    WORD PTR [rsi+0x2e4],gs
ffff8000008062dc:	8e a2 dc 02 00 00    	mov    fs,WORD PTR [rdx+0x2dc]
ffff8000008062e2:	8e a9 e4 02 00 00    	mov    gs,WORD PTR [rcx+0x2e4]
ffff8000008062e8:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:841
                 "mov %%gs,%1\r\n"
                 "mov %2,%%fs\r\n"
                 "mov %3,%%gs\r\n"
                 "sti":"=m"(to->regs.fs),"=m"(to->regs.gs):
                 "m"(from->regs.fs),"m"(from->regs.gs));
}
ffff8000008062e9:	90                   	nop
ffff8000008062ea:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
ffff8000008062ee:	5b                   	pop    rbx
ffff8000008062ef:	41 5c                	pop    r12
ffff8000008062f1:	41 5f                	pop    r15
ffff8000008062f3:	5d                   	pop    rbp
ffff8000008062f4:	c3                   	ret    

ffff8000008062f5 <set_tss>:
set_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:843

void set_tss(u64 rsp0,u64 rsp1,u64 rsp2,u64 ist0,u64 ist1,u64 ist2,u64 ist3,u64 ist4,u64 ist5,u64 ist6){
ffff8000008062f5:	f3 0f 1e fa          	endbr64 
ffff8000008062f9:	55                   	push   rbp
ffff8000008062fa:	48 89 e5             	mov    rbp,rsp
ffff8000008062fd:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008062fd <set_tss+0x8>
ffff800000806304:	49 bb d3 77 11 00 00 	movabs r11,0x1177d3
ffff80000080630b:	00 00 00 
ffff80000080630e:	4c 01 d8             	add    rax,r11
ffff800000806311:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000806315:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000806319:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080631d:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff800000806321:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
ffff800000806325:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:844
    tss->rsp0=rsp0;
ffff800000806329:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff800000806330:	ff ff ff 
ffff800000806333:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806337:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080633a:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff80000080633e:	48 89 4a 04          	mov    QWORD PTR [rdx+0x4],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:845
    tss->rsp1=rsp1;
ffff800000806342:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff800000806349:	ff ff ff 
ffff80000080634c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806350:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806353:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000806357:	48 89 4a 0c          	mov    QWORD PTR [rdx+0xc],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:846
    tss->rsp2=rsp2;
ffff80000080635b:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff800000806362:	ff ff ff 
ffff800000806365:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806369:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080636c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff800000806370:	48 89 4a 14          	mov    QWORD PTR [rdx+0x14],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:847
    tss->ists[0]=ist0;
ffff800000806374:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff80000080637b:	ff ff ff 
ffff80000080637e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806382:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806385:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff800000806389:	48 89 4a 24          	mov    QWORD PTR [rdx+0x24],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:848
    tss->ists[1]=ist1;
ffff80000080638d:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff800000806394:	ff ff ff 
ffff800000806397:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080639b:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080639e:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff8000008063a2:	48 89 4a 2c          	mov    QWORD PTR [rdx+0x2c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:849
    tss->ists[2]=ist2;
ffff8000008063a6:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff8000008063ad:	ff ff ff 
ffff8000008063b0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008063b4:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008063b7:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff8000008063bb:	48 89 4a 34          	mov    QWORD PTR [rdx+0x34],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:850
    tss->ists[3]=ist3;
ffff8000008063bf:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff8000008063c6:	ff ff ff 
ffff8000008063c9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008063cd:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008063d0:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
ffff8000008063d4:	48 89 4a 3c          	mov    QWORD PTR [rdx+0x3c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:851
    tss->ists[4]=ist4;
ffff8000008063d8:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff8000008063df:	ff ff ff 
ffff8000008063e2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008063e6:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008063e9:	48 8b 4d 18          	mov    rcx,QWORD PTR [rbp+0x18]
ffff8000008063ed:	48 89 4a 44          	mov    QWORD PTR [rdx+0x44],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:852
    tss->ists[5]=ist5;
ffff8000008063f1:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff8000008063f8:	ff ff ff 
ffff8000008063fb:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008063ff:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806402:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
ffff800000806406:	48 89 4a 4c          	mov    QWORD PTR [rdx+0x4c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:853
    tss->ists[6]=ist6;
ffff80000080640a:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff800000806411:	ff ff ff 
ffff800000806414:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000806418:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080641b:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
ffff80000080641f:	48 89 50 54          	mov    QWORD PTR [rax+0x54],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:854
}
ffff800000806423:	90                   	nop
ffff800000806424:	5d                   	pop    rbp
ffff800000806425:	c3                   	ret    

ffff800000806426 <fork_child_ret>:
fork_child_ret():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:856

int fork_child_ret(){
ffff800000806426:	f3 0f 1e fa          	endbr64 
ffff80000080642a:	55                   	push   rbp
ffff80000080642b:	48 89 e5             	mov    rbp,rsp
ffff80000080642e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080642e <fork_child_ret+0x8>
ffff800000806435:	49 bb a2 76 11 00 00 	movabs r11,0x1176a2
ffff80000080643c:	00 00 00 
ffff80000080643f:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:857
    return 0;
ffff800000806442:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:859

}
ffff800000806447:	5d                   	pop    rbp
ffff800000806448:	c3                   	ret    

ffff800000806449 <sys_fork>:
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:861

int sys_fork(void){
ffff800000806449:	f3 0f 1e fa          	endbr64 
ffff80000080644d:	55                   	push   rbp
ffff80000080644e:	48 89 e5             	mov    rbp,rsp
ffff800000806451:	41 57                	push   r15
ffff800000806453:	53                   	push   rbx
ffff800000806454:	48 81 ec 90 00 00 00 	sub    rsp,0x90
ffff80000080645b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080645b <sys_fork+0x12>
ffff800000806462:	49 bb 75 76 11 00 00 	movabs r11,0x117675
ffff800000806469:	00 00 00 
ffff80000080646c:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:862
    cli();
ffff80000080646f:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:863
    int pid=req_proc();
ffff800000806470:	49 89 df             	mov    r15,rbx
ffff800000806473:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806478:	48 ba ff 6f ee ff ff 	movabs rdx,0xffffffffffee6fff
ffff80000080647f:	ff ff ff 
ffff800000806482:	48 01 da             	add    rdx,rbx
ffff800000806485:	ff d2                	call   rdx
ffff800000806487:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:864
    int pids=task[pid].pid;
ffff80000080648a:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806491:	ff ff ff 
ffff800000806494:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806498:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080649b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080649e:	48 98                	cdqe   
ffff8000008064a0:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008064a7:	48 01 d0             	add    rax,rdx
ffff8000008064aa:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008064ac:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:865
    if(pid==-1)return -1;
ffff8000008064af:	83 7d dc ff          	cmp    DWORD PTR [rbp-0x24],0xffffffff
ffff8000008064b3:	75 0a                	jne    ffff8000008064bf <sys_fork+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:865 (discriminator 1)
ffff8000008064b5:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008064ba:	e9 19 0a 00 00       	jmp    ffff800000806ed8 <sys_fork+0xa8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:867
    //首先完全复制
    task[pid]=*current;
ffff8000008064bf:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008064c6:	ff ff ff 
ffff8000008064c9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008064cd:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008064d0:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008064d7:	ff ff ff 
ffff8000008064da:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008064de:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008064e1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008064e4:	48 98                	cdqe   
ffff8000008064e6:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008064ed:	48 01 d0             	add    rax,rdx
ffff8000008064f0:	48 89 c2             	mov    rdx,rax
ffff8000008064f3:	48 89 c8             	mov    rax,rcx
ffff8000008064f6:	b9 58 03 00 00       	mov    ecx,0x358
ffff8000008064fb:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff8000008064fe:	48 89 32             	mov    QWORD PTR [rdx],rsi
ffff800000806501:	89 ce                	mov    esi,ecx
ffff800000806503:	48 01 d6             	add    rsi,rdx
ffff800000806506:	48 8d 7e 08          	lea    rdi,[rsi+0x8]
ffff80000080650a:	89 ce                	mov    esi,ecx
ffff80000080650c:	48 01 c6             	add    rsi,rax
ffff80000080650f:	48 83 c6 08          	add    rsi,0x8
ffff800000806513:	48 8b 76 f0          	mov    rsi,QWORD PTR [rsi-0x10]
ffff800000806517:	48 89 77 f0          	mov    QWORD PTR [rdi-0x10],rsi
ffff80000080651b:	48 8d 7a 08          	lea    rdi,[rdx+0x8]
ffff80000080651f:	48 83 e7 f8          	and    rdi,0xfffffffffffffff8
ffff800000806523:	48 29 fa             	sub    rdx,rdi
ffff800000806526:	48 29 d0             	sub    rax,rdx
ffff800000806529:	01 d1                	add    ecx,edx
ffff80000080652b:	83 e1 f8             	and    ecx,0xfffffff8
ffff80000080652e:	c1 e9 03             	shr    ecx,0x3
ffff800000806531:	89 ca                	mov    edx,ecx
ffff800000806533:	89 d2                	mov    edx,edx
ffff800000806535:	48 89 c6             	mov    rsi,rax
ffff800000806538:	48 89 d1             	mov    rcx,rdx
ffff80000080653b:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:868
    task[pid].pid=pids;
ffff80000080653e:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806545:	ff ff ff 
ffff800000806548:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080654c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080654f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806552:	48 98                	cdqe   
ffff800000806554:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080655b:	48 01 c2             	add    rdx,rax
ffff80000080655e:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000806561:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:869
    task[pid].stat=TASK_ZOMBIE;
ffff800000806563:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080656a:	ff ff ff 
ffff80000080656d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806571:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806574:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806577:	48 98                	cdqe   
ffff800000806579:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806580:	48 01 d0             	add    rax,rdx
ffff800000806583:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:876

//    asm volatile("mov %%r10,%0"::"m"(r->rip));
    // r->rip=current->regs.rip;

    // memcpy(&task[pid].tss,tss, sizeof(TSS));
    task[pid].parent_pid=current->pid;
ffff80000080658a:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806591:	ff ff ff 
ffff800000806594:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806598:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080659b:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008065a2:	ff ff ff 
ffff8000008065a5:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008065a9:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008065ac:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008065af:	48 63 d2             	movsxd rdx,edx
ffff8000008065b2:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008065b9:	48 01 ca             	add    rdx,rcx
ffff8000008065bc:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008065be:	89 82 bc 00 00 00    	mov    DWORD PTR [rdx+0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:878
    //设置父子关系以及初始化子进程的的list节点
    list_init(&task[pid].node);
ffff8000008065c4:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008065cb:	ff ff ff 
ffff8000008065ce:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008065d2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008065d5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008065d8:	48 98                	cdqe   
ffff8000008065da:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008065e1:	48 01 d0             	add    rax,rdx
ffff8000008065e4:	48 05 34 03 00 00    	add    rax,0x334
ffff8000008065ea:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff8000008065ee:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008065f2:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff8000008065f9:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008065fd:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000806604:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000806605:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:879
    task[pid].child_procs=NULL;
ffff800000806606:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080660d:	ff ff ff 
ffff800000806610:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806614:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806617:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080661a:	48 98                	cdqe   
ffff80000080661c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806623:	48 01 d0             	add    rax,rdx
ffff800000806626:	48 c7 80 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],0x0
ffff80000080662d:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:880
    task[pid].node.data=&task[pid];
ffff800000806631:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806638:	ff ff ff 
ffff80000080663b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080663f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806642:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806645:	48 98                	cdqe   
ffff800000806647:	48 69 d0 58 03 00 00 	imul   rdx,rax,0x358
ffff80000080664e:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806655:	ff ff ff 
ffff800000806658:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080665c:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff80000080665f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806662:	48 98                	cdqe   
ffff800000806664:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080666b:	48 01 f0             	add    rax,rsi
ffff80000080666e:	48 01 ca             	add    rdx,rcx
ffff800000806671:	48 89 90 3c 03 00 00 	mov    QWORD PTR [rax+0x33c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:881
    if(!current->child_procs)
ffff800000806678:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080667f:	ff ff ff 
ffff800000806682:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806686:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806689:	48 8b 80 4c 03 00 00 	mov    rax,QWORD PTR [rax+0x34c]
ffff800000806690:	48 85 c0             	test   rax,rax
ffff800000806693:	75 44                	jne    ffff8000008066d9 <sys_fork+0x290>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:882
        current->child_procs=&task[pid].node;
ffff800000806695:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080669c:	ff ff ff 
ffff80000080669f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008066a3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008066a6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008066a9:	48 98                	cdqe   
ffff8000008066ab:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008066b2:	48 01 c2             	add    rdx,rax
ffff8000008066b5:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008066bc:	ff ff ff 
ffff8000008066bf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008066c3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008066c6:	48 81 c2 34 03 00 00 	add    rdx,0x334
ffff8000008066cd:	48 89 90 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],rdx
ffff8000008066d4:	e9 71 01 00 00       	jmp    ffff80000080684a <sys_fork+0x401>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:884
    else
        list_add(current->child_procs,&task[pid].node);
ffff8000008066d9:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008066e0:	ff ff ff 
ffff8000008066e3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008066e7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008066ea:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008066ed:	48 98                	cdqe   
ffff8000008066ef:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008066f6:	48 01 d0             	add    rax,rdx
ffff8000008066f9:	48 8d 90 34 03 00 00 	lea    rdx,[rax+0x334]
ffff800000806700:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806707:	ff ff ff 
ffff80000080670a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080670e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806711:	48 8b 80 4c 03 00 00 	mov    rax,QWORD PTR [rax+0x34c]
ffff800000806718:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffff80000080671c:	48 89 55 90          	mov    QWORD PTR [rbp-0x70],rdx
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff800000806720:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000806724:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806728:	48 85 c0             	test   rax,rax
ffff80000080672b:	75 50                	jne    ffff80000080677d <sys_fork+0x334>
ffff80000080672d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000806731:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffff800000806735:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000806739:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080673d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000806741:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000806745:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000806749:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080674d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000806751:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff800000806755:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff800000806758:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080675c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806760:	48 85 c0             	test   rax,rax
ffff800000806763:	0f 84 da 00 00 00    	je     ffff800000806843 <sys_fork+0x3fa>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff800000806769:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080676d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806771:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff800000806775:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000806778:	e9 c6 00 00 00       	jmp    ffff800000806843 <sys_fork+0x3fa>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff80000080677d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000806781:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff800000806788:	eb 2e                	jmp    ffff8000008067b8 <sys_fork+0x36f>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff80000080678a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000806791:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000806795:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000806799:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080679d:	48 39 c2             	cmp    rdx,rax
ffff8000008067a0:	0f 84 a0 00 00 00    	je     ffff800000806846 <sys_fork+0x3fd>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff8000008067a6:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008067ad:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008067b1:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffff8000008067b8:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008067bf:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008067c3:	48 85 c0             	test   rax,rax
ffff8000008067c6:	74 14                	je     ffff8000008067dc <sys_fork+0x393>
ffff8000008067c8:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008067cf:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008067d3:	48 39 85 78 ff ff ff 	cmp    QWORD PTR [rbp-0x88],rax
ffff8000008067da:	75 ae                	jne    ffff80000080678a <sys_fork+0x341>
ffff8000008067dc:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008067e3:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffff8000008067ea:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008067ee:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff8000008067f5:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008067fc:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000806800:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000806807:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080680b:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000806812:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffff800000806819:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080681c:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000806823:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806827:	48 85 c0             	test   rax,rax
ffff80000080682a:	74 1d                	je     ffff800000806849 <sys_fork+0x400>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080682c:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000806833:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806837:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffff80000080683e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000806841:	eb 06                	jmp    ffff800000806849 <sys_fork+0x400>
ffff800000806843:	90                   	nop
ffff800000806844:	eb 04                	jmp    ffff80000080684a <sys_fork+0x401>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff800000806846:	90                   	nop
ffff800000806847:	eb 01                	jmp    ffff80000080684a <sys_fork+0x401>
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000806849:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:886

    task[pid].utime=0;
ffff80000080684a:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806851:	ff ff ff 
ffff800000806854:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806858:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080685b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080685e:	48 98                	cdqe   
ffff800000806860:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806867:	48 01 d0             	add    rax,rdx
ffff80000080686a:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:889

    //复制父进程的内存映射到子进程，然后重新映射并复制子进程的堆栈和数据段
    copy_mmap(current,&task[pid]);
ffff800000806871:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806878:	ff ff ff 
ffff80000080687b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080687f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806882:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806885:	48 98                	cdqe   
ffff800000806887:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080688e:	48 01 c2             	add    rdx,rax
ffff800000806891:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806898:	ff ff ff 
ffff80000080689b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080689f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008068a2:	48 89 d6             	mov    rsi,rdx
ffff8000008068a5:	48 89 c7             	mov    rdi,rax
ffff8000008068a8:	49 89 df             	mov    r15,rbx
ffff8000008068ab:	48 b8 b6 97 ee ff ff 	movabs rax,0xffffffffffee97b6
ffff8000008068b2:	ff ff ff 
ffff8000008068b5:	48 01 d8             	add    rax,rbx
ffff8000008068b8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:894
    
    //复制完毕，开始更改堆栈
    //栈
    //首先获取物理内存，然后临时映射到一个地方，然后拷贝数据，再解除映射，再映射到目标进程的页表。
    addr_t stk=task[pid].mem_struct.stack_top-PAGE_4K_SIZE;
ffff8000008068ba:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008068c1:	ff ff ff 
ffff8000008068c4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008068c8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008068cb:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008068ce:	48 98                	cdqe   
ffff8000008068d0:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008068d7:	48 01 d0             	add    rax,rdx
ffff8000008068da:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008068de:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff8000008068e4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:895
    addr_t tmpla=KNL_BASE+0x80000000;
ffff8000008068e8:	48 b8 00 00 00 80 00 	movabs rax,0xffff800080000000
ffff8000008068ef:	80 ff ff 
ffff8000008068f2:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:896
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
ffff8000008068f6:	e9 d1 00 00 00       	jmp    ffff8000008069cc <sys_fork+0x583>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:897 (discriminator 2)
        addr_t new_stkpg= pmalloc();
ffff8000008068fb:	49 89 df             	mov    r15,rbx
ffff8000008068fe:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806903:	48 ba 6e 50 ee ff ff 	movabs rdx,0xffffffffffee506e
ffff80000080690a:	ff ff ff 
ffff80000080690d:	48 01 da             	add    rdx,rbx
ffff800000806910:	ff d2                	call   rdx
ffff800000806912:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:898 (discriminator 2)
        smmap(new_stkpg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff800000806916:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080691d:	ff ff ff 
ffff800000806920:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806924:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806927:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff80000080692e:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000806932:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000806936:	48 89 d1             	mov    rcx,rdx
ffff800000806939:	ba 03 00 00 00       	mov    edx,0x3
ffff80000080693e:	48 89 c7             	mov    rdi,rax
ffff800000806941:	49 89 df             	mov    r15,rbx
ffff800000806944:	48 b8 29 40 ee ff ff 	movabs rax,0xffffffffffee4029
ffff80000080694b:	ff ff ff 
ffff80000080694e:	48 01 d8             	add    rax,rbx
ffff800000806951:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:899 (discriminator 2)
        memcpy(tmpla,stk,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000806953:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff800000806957:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080695b:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000806960:	48 89 ce             	mov    rsi,rcx
ffff800000806963:	48 89 c7             	mov    rdi,rax
ffff800000806966:	49 89 df             	mov    r15,rbx
ffff800000806969:	48 b8 c4 50 ef ff ff 	movabs rax,0xffffffffffef50c4
ffff800000806970:	ff ff ff 
ffff800000806973:	48 01 d8             	add    rax,rbx
ffff800000806976:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:902 (discriminator 2)
        
        //把新的页面映射到进程页表里
        smmap(new_stkpg,stk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000806978:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080697f:	ff ff ff 
ffff800000806982:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806986:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806989:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080698c:	48 98                	cdqe   
ffff80000080698e:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806995:	48 01 d0             	add    rax,rdx
ffff800000806998:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff80000080699f:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff8000008069a3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008069a7:	48 89 d1             	mov    rcx,rdx
ffff8000008069aa:	ba 07 00 00 00       	mov    edx,0x7
ffff8000008069af:	48 89 c7             	mov    rdi,rax
ffff8000008069b2:	49 89 df             	mov    r15,rbx
ffff8000008069b5:	48 b8 29 40 ee ff ff 	movabs rax,0xffffffffffee4029
ffff8000008069bc:	ff ff ff 
ffff8000008069bf:	48 01 d8             	add    rax,rbx
ffff8000008069c2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:896 (discriminator 2)
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
ffff8000008069c4:	48 81 6d e8 00 10 00 	sub    QWORD PTR [rbp-0x18],0x1000
ffff8000008069cb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:896 (discriminator 1)
ffff8000008069cc:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008069d3:	ff ff ff 
ffff8000008069d6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008069da:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008069dd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008069e0:	48 98                	cdqe   
ffff8000008069e2:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008069e9:	48 01 d0             	add    rax,rdx
ffff8000008069ec:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff8000008069f0:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff8000008069f4:	0f 83 01 ff ff ff    	jae    ffff8000008068fb <sys_fork+0x4b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:904
    }
    if(task[pid].mem_struct.stack_top<=task[pid].mem_struct.stack_bottom){
ffff8000008069fa:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806a01:	ff ff ff 
ffff800000806a04:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a08:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806a0b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806a0e:	48 98                	cdqe   
ffff800000806a10:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806a17:	48 01 d0             	add    rax,rdx
ffff800000806a1a:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff800000806a1e:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806a25:	ff ff ff 
ffff800000806a28:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a2c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806a2f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806a32:	48 98                	cdqe   
ffff800000806a34:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806a3b:	48 01 c8             	add    rax,rcx
ffff800000806a3e:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000806a42:	48 39 c2             	cmp    rdx,rax
ffff800000806a45:	0f 87 bd 00 00 00    	ja     ffff800000806b08 <sys_fork+0x6bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:907
        //父进程没有栈空间（一般是不可能的，这个几乎就是为了内核进程fork而写）
        //开辟一页空栈。
        addr_t new_stkpg= (addr_t) pmalloc();
ffff800000806a4b:	49 89 df             	mov    r15,rbx
ffff800000806a4e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806a53:	48 ba 6e 50 ee ff ff 	movabs rdx,0xffffffffffee506e
ffff800000806a5a:	ff ff ff 
ffff800000806a5d:	48 01 da             	add    rdx,rbx
ffff800000806a60:	ff d2                	call   rdx
ffff800000806a62:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:908
        stk=task[pid].mem_struct.stack_top-PAGE_4K_SIZE;
ffff800000806a66:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806a6d:	ff ff ff 
ffff800000806a70:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a74:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806a77:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806a7a:	48 98                	cdqe   
ffff800000806a7c:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806a83:	48 01 d0             	add    rax,rdx
ffff800000806a86:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000806a8a:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000806a90:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:910
        //把新的页面映射到进程页表里
        smmap(new_stkpg,stk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000806a94:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806a9b:	ff ff ff 
ffff800000806a9e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806aa2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806aa5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806aa8:	48 98                	cdqe   
ffff800000806aaa:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806ab1:	48 01 d0             	add    rax,rdx
ffff800000806ab4:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806abb:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000806abf:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000806ac3:	48 89 d1             	mov    rcx,rdx
ffff800000806ac6:	ba 07 00 00 00       	mov    edx,0x7
ffff800000806acb:	48 89 c7             	mov    rdi,rax
ffff800000806ace:	49 89 df             	mov    r15,rbx
ffff800000806ad1:	48 b8 29 40 ee ff ff 	movabs rax,0xffffffffffee4029
ffff800000806ad8:	ff ff ff 
ffff800000806adb:	48 01 d8             	add    rax,rbx
ffff800000806ade:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:912
        //给新进程分配一页栈
        task[pid].mem_struct.stack_bottom=stk;
ffff800000806ae0:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806ae7:	ff ff ff 
ffff800000806aea:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806aee:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806af1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806af4:	48 98                	cdqe   
ffff800000806af6:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806afd:	48 01 c2             	add    rdx,rax
ffff800000806b00:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806b04:	48 89 42 38          	mov    QWORD PTR [rdx+0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:918
        //给这页新的栈填上恢复上下文需要的内容
        
    }
    //中断使用的栈空间
    //ist一页就够
    addr_t new_stkpg= kmalloc();
ffff800000806b08:	49 89 df             	mov    r15,rbx
ffff800000806b0b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806b10:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000806b17:	ff ff ff 
ffff800000806b1a:	48 01 da             	add    rdx,rbx
ffff800000806b1d:	ff d2                	call   rdx
ffff800000806b1f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:919
    memcpy(new_stkpg,current->tss.ists[0]-PAGE_4K_SIZE,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000806b23:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806b2a:	ff ff ff 
ffff800000806b2d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b31:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806b34:	48 8b 80 1c 02 00 00 	mov    rax,QWORD PTR [rax+0x21c]
ffff800000806b3b:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000806b41:	48 89 c1             	mov    rcx,rax
ffff800000806b44:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000806b48:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000806b4d:	48 89 ce             	mov    rsi,rcx
ffff800000806b50:	48 89 c7             	mov    rdi,rax
ffff800000806b53:	49 89 df             	mov    r15,rbx
ffff800000806b56:	48 b8 c4 50 ef ff ff 	movabs rax,0xffffffffffef50c4
ffff800000806b5d:	ff ff ff 
ffff800000806b60:	48 01 d8             	add    rax,rbx
ffff800000806b63:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:920
    stack_store_regs* ctx_dup=new_stkpg+PAGE_4K_SIZE-sizeof(stack_store_regs);//拷贝的上下文
ffff800000806b65:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000806b69:	48 05 58 0f 00 00    	add    rax,0xf58
ffff800000806b6f:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:921
    ctx_dup->rax=0;//这样进程切换到子进程的done标签，从时钟中断返回弹出堆栈的时候rax弹出来的就是0，成为返回值。
ffff800000806b73:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000806b77:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
ffff800000806b7e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:922
    task[pid].regs.rip=clock_ret;
ffff800000806b7f:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806b86:	ff ff ff 
ffff800000806b89:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b8d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806b90:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806b93:	48 98                	cdqe   
ffff800000806b95:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806b9c:	48 01 d0             	add    rax,rdx
ffff800000806b9f:	48 ba c8 ff ff ff ff 	movabs rdx,0xffffffffffffffc8
ffff800000806ba6:	ff ff ff 
ffff800000806ba9:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000806bad:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:923
    task[pid].regs.rsp=ctx_dup;
ffff800000806bb4:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806bbb:	ff ff ff 
ffff800000806bbe:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806bc2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806bc5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806bc8:	48 98                	cdqe   
ffff800000806bca:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806bd1:	48 01 c2             	add    rdx,rax
ffff800000806bd4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000806bd8:	48 89 82 9c 02 00 00 	mov    QWORD PTR [rdx+0x29c],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:924
    task[pid].tss.ists[0]=new_stkpg+PAGE_4K_SIZE;
ffff800000806bdf:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806be6:	ff ff ff 
ffff800000806be9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806bed:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806bf0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806bf3:	48 98                	cdqe   
ffff800000806bf5:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806bfc:	48 01 d0             	add    rax,rdx
ffff800000806bff:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806c03:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806c0a:	48 89 90 1c 02 00 00 	mov    QWORD PTR [rax+0x21c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:925
    task[pid].tss.ists[1]=new_stkpg+PAGE_4K_SIZE;
ffff800000806c11:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806c18:	ff ff ff 
ffff800000806c1b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c1f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806c22:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806c25:	48 98                	cdqe   
ffff800000806c27:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806c2e:	48 01 d0             	add    rax,rdx
ffff800000806c31:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806c35:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806c3c:	48 89 90 24 02 00 00 	mov    QWORD PTR [rax+0x224],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:926
    task[pid].tss.ists[2]=new_stkpg+PAGE_4K_SIZE;
ffff800000806c43:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806c4a:	ff ff ff 
ffff800000806c4d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c51:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806c54:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806c57:	48 98                	cdqe   
ffff800000806c59:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806c60:	48 01 d0             	add    rax,rdx
ffff800000806c63:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806c67:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806c6e:	48 89 90 2c 02 00 00 	mov    QWORD PTR [rax+0x22c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:927
    task[pid].tss.ists[3]=new_stkpg+PAGE_4K_SIZE;
ffff800000806c75:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806c7c:	ff ff ff 
ffff800000806c7f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c83:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806c86:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806c89:	48 98                	cdqe   
ffff800000806c8b:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806c92:	48 01 d0             	add    rax,rdx
ffff800000806c95:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806c99:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806ca0:	48 89 90 34 02 00 00 	mov    QWORD PTR [rax+0x234],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:928
    task[pid].tss.ists[4]=new_stkpg+PAGE_4K_SIZE;
ffff800000806ca7:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806cae:	ff ff ff 
ffff800000806cb1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806cb5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806cb8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806cbb:	48 98                	cdqe   
ffff800000806cbd:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806cc4:	48 01 d0             	add    rax,rdx
ffff800000806cc7:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806ccb:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806cd2:	48 89 90 3c 02 00 00 	mov    QWORD PTR [rax+0x23c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:929
    task[pid].tss.ists[5]=new_stkpg+PAGE_4K_SIZE;
ffff800000806cd9:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806ce0:	ff ff ff 
ffff800000806ce3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806ce7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806cea:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806ced:	48 98                	cdqe   
ffff800000806cef:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806cf6:	48 01 d0             	add    rax,rdx
ffff800000806cf9:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806cfd:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806d04:	48 89 90 44 02 00 00 	mov    QWORD PTR [rax+0x244],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:930
    task[pid].tss.ists[6]=new_stkpg+PAGE_4K_SIZE;
ffff800000806d0b:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806d12:	ff ff ff 
ffff800000806d15:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806d19:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806d1c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806d1f:	48 98                	cdqe   
ffff800000806d21:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806d28:	48 01 d0             	add    rax,rdx
ffff800000806d2b:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806d2f:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806d36:	48 89 90 4c 02 00 00 	mov    QWORD PTR [rax+0x24c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:933

    //堆
    addr_t hp=task[pid].mem_struct.heap_top-PAGE_4K_SIZE;
ffff800000806d3d:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806d44:	ff ff ff 
ffff800000806d47:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806d4b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806d4e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806d51:	48 98                	cdqe   
ffff800000806d53:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806d5a:	48 01 d0             	add    rax,rdx
ffff800000806d5d:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000806d61:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000806d67:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:934
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
ffff800000806d6b:	e9 d1 00 00 00       	jmp    ffff800000806e41 <sys_fork+0x9f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:935 (discriminator 2)
        addr_t new_hppg= pmalloc();
ffff800000806d70:	49 89 df             	mov    r15,rbx
ffff800000806d73:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806d78:	48 ba 6e 50 ee ff ff 	movabs rdx,0xffffffffffee506e
ffff800000806d7f:	ff ff ff 
ffff800000806d82:	48 01 da             	add    rdx,rbx
ffff800000806d85:	ff d2                	call   rdx
ffff800000806d87:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:936 (discriminator 2)
        smmap(new_hppg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff800000806d8b:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806d92:	ff ff ff 
ffff800000806d95:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806d99:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806d9c:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806da3:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000806da7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000806dab:	48 89 d1             	mov    rcx,rdx
ffff800000806dae:	ba 03 00 00 00       	mov    edx,0x3
ffff800000806db3:	48 89 c7             	mov    rdi,rax
ffff800000806db6:	49 89 df             	mov    r15,rbx
ffff800000806db9:	48 b8 29 40 ee ff ff 	movabs rax,0xffffffffffee4029
ffff800000806dc0:	ff ff ff 
ffff800000806dc3:	48 01 d8             	add    rax,rbx
ffff800000806dc6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:937 (discriminator 2)
        memcpy(tmpla,hp,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000806dc8:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff800000806dcc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806dd0:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000806dd5:	48 89 ce             	mov    rsi,rcx
ffff800000806dd8:	48 89 c7             	mov    rdi,rax
ffff800000806ddb:	49 89 df             	mov    r15,rbx
ffff800000806dde:	48 b8 c4 50 ef ff ff 	movabs rax,0xffffffffffef50c4
ffff800000806de5:	ff ff ff 
ffff800000806de8:	48 01 d8             	add    rax,rbx
ffff800000806deb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:939 (discriminator 2)
        //把新的页面映射到进程页表里
        smmap(new_hppg,hp,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000806ded:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806df4:	ff ff ff 
ffff800000806df7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806dfb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806dfe:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806e01:	48 98                	cdqe   
ffff800000806e03:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806e0a:	48 01 d0             	add    rax,rdx
ffff800000806e0d:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806e14:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff800000806e18:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000806e1c:	48 89 d1             	mov    rcx,rdx
ffff800000806e1f:	ba 07 00 00 00       	mov    edx,0x7
ffff800000806e24:	48 89 c7             	mov    rdi,rax
ffff800000806e27:	49 89 df             	mov    r15,rbx
ffff800000806e2a:	48 b8 29 40 ee ff ff 	movabs rax,0xffffffffffee4029
ffff800000806e31:	ff ff ff 
ffff800000806e34:	48 01 d8             	add    rax,rbx
ffff800000806e37:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:934 (discriminator 2)
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
ffff800000806e39:	48 81 6d e0 00 10 00 	sub    QWORD PTR [rbp-0x20],0x1000
ffff800000806e40:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:934 (discriminator 1)
ffff800000806e41:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806e48:	ff ff ff 
ffff800000806e4b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806e4f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806e52:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806e55:	48 98                	cdqe   
ffff800000806e57:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806e5e:	48 01 d0             	add    rax,rdx
ffff800000806e61:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff800000806e65:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff800000806e69:	0f 83 01 ff ff ff    	jae    ffff800000806d70 <sys_fork+0x927>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:941
    }
    smmap(0,tmpla,0,current->pml4);//解除映射
ffff800000806e6f:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000806e76:	ff ff ff 
ffff800000806e79:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806e7d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806e80:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806e87:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806e8b:	48 89 d1             	mov    rcx,rdx
ffff800000806e8e:	ba 00 00 00 00       	mov    edx,0x0
ffff800000806e93:	48 89 c6             	mov    rsi,rax
ffff800000806e96:	bf 00 00 00 00       	mov    edi,0x0
ffff800000806e9b:	49 89 df             	mov    r15,rbx
ffff800000806e9e:	48 b8 29 40 ee ff ff 	movabs rax,0xffffffffffee4029
ffff800000806ea5:	ff ff ff 
ffff800000806ea8:	48 01 d8             	add    rax,rbx
ffff800000806eab:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:942
    task[pid].stat=TASK_READY;
ffff800000806ead:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000806eb4:	ff ff ff 
ffff800000806eb7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806ebb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806ebe:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806ec1:	48 98                	cdqe   
ffff800000806ec3:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000806eca:	48 01 d0             	add    rax,rdx
ffff800000806ecd:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:945
    

    sti();
ffff800000806ed4:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:948
    //如果父进程没有堆，不开辟。留给load_xx函数。
    //父进程运行到这里
    return pid;
ffff800000806ed5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:949
}
ffff800000806ed8:	48 81 c4 90 00 00 00 	add    rsp,0x90
ffff800000806edf:	5b                   	pop    rbx
ffff800000806ee0:	41 5f                	pop    r15
ffff800000806ee2:	5d                   	pop    rbp
ffff800000806ee3:	c3                   	ret    

ffff800000806ee4 <release_mmap>:
release_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:951
//释放进程页表映射的内存，内核空间除外。
void release_mmap(struct process* p){
ffff800000806ee4:	f3 0f 1e fa          	endbr64 
ffff800000806ee8:	55                   	push   rbp
ffff800000806ee9:	48 89 e5             	mov    rbp,rsp
ffff800000806eec:	41 57                	push   r15
ffff800000806eee:	53                   	push   rbx
ffff800000806eef:	48 83 ec 50          	sub    rsp,0x50
ffff800000806ef3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000806ef3 <release_mmap+0xf>
ffff800000806efa:	49 bb dd 6b 11 00 00 	movabs r11,0x116bdd
ffff800000806f01:	00 00 00 
ffff800000806f04:	4c 01 db             	add    rbx,r11
ffff800000806f07:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:952
    page_item * pml4p=p->pml4;
ffff800000806f0b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000806f0f:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000806f16:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:954
    //复制pdpt
    page_item *pml4e= pml4p;
ffff800000806f1a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000806f1e:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:955
    for(int i=0;i<256;i++)//高地址不释放（内核空间）
ffff800000806f22:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000806f29:	e9 40 03 00 00       	jmp    ffff80000080726e <release_mmap+0x38a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:957
    {
        if(pml4e[i]&PAGE_PRESENT){
ffff800000806f2e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806f31:	48 98                	cdqe   
ffff800000806f33:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806f3a:	00 
ffff800000806f3b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806f3f:	48 01 d0             	add    rax,rdx
ffff800000806f42:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806f45:	83 e0 01             	and    eax,0x1
ffff800000806f48:	48 85 c0             	test   rax,rax
ffff800000806f4b:	0f 84 19 03 00 00    	je     ffff80000080726a <release_mmap+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:958
            page_item *pdpte=pml4e[i]&PAGE_4K_MASK|KNL_BASE;
ffff800000806f51:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806f54:	48 98                	cdqe   
ffff800000806f56:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806f5d:	00 
ffff800000806f5e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806f62:	48 01 d0             	add    rax,rdx
ffff800000806f65:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806f68:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000806f6f:	7f 00 00 
ffff800000806f72:	48 21 c2             	and    rdx,rax
ffff800000806f75:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000806f7c:	80 ff ff 
ffff800000806f7f:	48 09 d0             	or     rax,rdx
ffff800000806f82:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:959
            for(int j=0;j<512;j++)
ffff800000806f86:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000806f8d:	e9 85 02 00 00       	jmp    ffff800000807217 <release_mmap+0x333>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:961
            {
                if(pdpte[j]&PAGE_PRESENT&&!(pdpte[j]&PDPTE_1GB)){
ffff800000806f92:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000806f95:	48 98                	cdqe   
ffff800000806f97:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806f9e:	00 
ffff800000806f9f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000806fa3:	48 01 d0             	add    rax,rdx
ffff800000806fa6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806fa9:	83 e0 01             	and    eax,0x1
ffff800000806fac:	48 85 c0             	test   rax,rax
ffff800000806faf:	0f 84 5e 02 00 00    	je     ffff800000807213 <release_mmap+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:961 (discriminator 1)
ffff800000806fb5:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000806fb8:	48 98                	cdqe   
ffff800000806fba:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806fc1:	00 
ffff800000806fc2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000806fc6:	48 01 d0             	add    rax,rdx
ffff800000806fc9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806fcc:	25 80 00 00 00       	and    eax,0x80
ffff800000806fd1:	48 85 c0             	test   rax,rax
ffff800000806fd4:	0f 85 39 02 00 00    	jne    ffff800000807213 <release_mmap+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:962
                    page_item *pde=pdpte[j]&PAGE_4K_MASK|KNL_BASE;
ffff800000806fda:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000806fdd:	48 98                	cdqe   
ffff800000806fdf:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806fe6:	00 
ffff800000806fe7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000806feb:	48 01 d0             	add    rax,rdx
ffff800000806fee:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806ff1:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000806ff8:	7f 00 00 
ffff800000806ffb:	48 21 c2             	and    rdx,rax
ffff800000806ffe:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000807005:	80 ff ff 
ffff800000807008:	48 09 d0             	or     rax,rdx
ffff80000080700b:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:963
                    for(int k=0;k<512;k++)
ffff80000080700f:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000807016:	e9 a5 01 00 00       	jmp    ffff8000008071c0 <release_mmap+0x2dc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:965
                    {
                        if(pde[k]&PAGE_PRESENT&&!(pde[k] & PDE_2MB)){
ffff80000080701b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080701e:	48 98                	cdqe   
ffff800000807020:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807027:	00 
ffff800000807028:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080702c:	48 01 d0             	add    rax,rdx
ffff80000080702f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807032:	83 e0 01             	and    eax,0x1
ffff800000807035:	48 85 c0             	test   rax,rax
ffff800000807038:	0f 84 09 01 00 00    	je     ffff800000807147 <release_mmap+0x263>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:965 (discriminator 1)
ffff80000080703e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807041:	48 98                	cdqe   
ffff800000807043:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080704a:	00 
ffff80000080704b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080704f:	48 01 d0             	add    rax,rdx
ffff800000807052:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807055:	25 80 00 00 00       	and    eax,0x80
ffff80000080705a:	48 85 c0             	test   rax,rax
ffff80000080705d:	0f 85 e4 00 00 00    	jne    ffff800000807147 <release_mmap+0x263>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:966
                            page_item *pte=pde[k]&PAGE_4K_MASK|KNL_BASE;
ffff800000807063:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807066:	48 98                	cdqe   
ffff800000807068:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080706f:	00 
ffff800000807070:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807074:	48 01 d0             	add    rax,rdx
ffff800000807077:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080707a:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000807081:	7f 00 00 
ffff800000807084:	48 21 c2             	and    rdx,rax
ffff800000807087:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff80000080708e:	80 ff ff 
ffff800000807091:	48 09 d0             	or     rax,rdx
ffff800000807094:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:967
                            for(int l=0;l<512;l++){
ffff800000807098:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000080709f:	eb 55                	jmp    ffff8000008070f6 <release_mmap+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:968
                                if(pte[l]&PAGE_PRESENT){
ffff8000008070a1:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008070a4:	48 98                	cdqe   
ffff8000008070a6:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008070ad:	00 
ffff8000008070ae:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008070b2:	48 01 d0             	add    rax,rdx
ffff8000008070b5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008070b8:	83 e0 01             	and    eax,0x1
ffff8000008070bb:	48 85 c0             	test   rax,rax
ffff8000008070be:	74 32                	je     ffff8000008070f2 <release_mmap+0x20e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:971
                                    //释放申请的物理内存
                                    //TODO:这里有一个问题：目前fork时候堆栈空间使用的是vmalloc内存，这样的话free_page是释放不了的。
                                    free_page(pte[l]&PAGE_4K_MASK);
ffff8000008070c0:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008070c3:	48 98                	cdqe   
ffff8000008070c5:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008070cc:	00 
ffff8000008070cd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008070d1:	48 01 d0             	add    rax,rdx
ffff8000008070d4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008070d7:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff8000008070dd:	48 89 c7             	mov    rdi,rax
ffff8000008070e0:	49 89 df             	mov    r15,rbx
ffff8000008070e3:	48 b8 cf 50 ee ff ff 	movabs rax,0xffffffffffee50cf
ffff8000008070ea:	ff ff ff 
ffff8000008070ed:	48 01 d8             	add    rax,rbx
ffff8000008070f0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:967 (discriminator 2)
                            for(int l=0;l<512;l++){
ffff8000008070f2:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:967 (discriminator 1)
ffff8000008070f6:	81 7d e0 ff 01 00 00 	cmp    DWORD PTR [rbp-0x20],0x1ff
ffff8000008070fd:	7e a2                	jle    ffff8000008070a1 <release_mmap+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:975
                                }
                            }
                            //里面的项释放完了，这一项指向的vmalloc内存可以释放了
                            kmfree(pde[k] & PAGE_4K_MASK|KNL_BASE);
ffff8000008070ff:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807102:	48 98                	cdqe   
ffff800000807104:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080710b:	00 
ffff80000080710c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807110:	48 01 d0             	add    rax,rdx
ffff800000807113:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807116:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff80000080711d:	7f 00 00 
ffff800000807120:	48 21 c2             	and    rdx,rax
ffff800000807123:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff80000080712a:	80 ff ff 
ffff80000080712d:	48 09 d0             	or     rax,rdx
ffff800000807130:	48 89 c7             	mov    rdi,rax
ffff800000807133:	49 89 df             	mov    r15,rbx
ffff800000807136:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff80000080713d:	ff ff ff 
ffff800000807140:	48 01 d8             	add    rax,rbx
ffff800000807143:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:965
                        if(pde[k]&PAGE_PRESENT&&!(pde[k] & PDE_2MB)){
ffff800000807145:	eb 75                	jmp    ffff8000008071bc <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:976
                        }else if((pde[k]&PAGE_PRESENT)&&(pde[k] & PDE_2MB)){
ffff800000807147:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080714a:	48 98                	cdqe   
ffff80000080714c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807153:	00 
ffff800000807154:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807158:	48 01 d0             	add    rax,rdx
ffff80000080715b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080715e:	83 e0 01             	and    eax,0x1
ffff800000807161:	48 85 c0             	test   rax,rax
ffff800000807164:	74 56                	je     ffff8000008071bc <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:976 (discriminator 1)
ffff800000807166:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807169:	48 98                	cdqe   
ffff80000080716b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807172:	00 
ffff800000807173:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807177:	48 01 d0             	add    rax,rdx
ffff80000080717a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080717d:	25 80 00 00 00       	and    eax,0x80
ffff800000807182:	48 85 c0             	test   rax,rax
ffff800000807185:	74 35                	je     ffff8000008071bc <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:978
                            //释放2MB页
                            free_pages_at(pde[k]&PAGE_4K_MASK,512);
ffff800000807187:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080718a:	48 98                	cdqe   
ffff80000080718c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807193:	00 
ffff800000807194:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807198:	48 01 d0             	add    rax,rdx
ffff80000080719b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080719e:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff8000008071a3:	be 00 02 00 00       	mov    esi,0x200
ffff8000008071a8:	89 c7                	mov    edi,eax
ffff8000008071aa:	49 89 df             	mov    r15,rbx
ffff8000008071ad:	48 b8 81 51 ee ff ff 	movabs rax,0xffffffffffee5181
ffff8000008071b4:	ff ff ff 
ffff8000008071b7:	48 01 d8             	add    rax,rbx
ffff8000008071ba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:963 (discriminator 2)
                    for(int k=0;k<512;k++)
ffff8000008071bc:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:963 (discriminator 1)
ffff8000008071c0:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
ffff8000008071c7:	0f 8e 4e fe ff ff    	jle    ffff80000080701b <release_mmap+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:982
                        }
                    }
                    //这一页pde的内容释放完了，这一项指向的vmalloc可以释放了
                    kmfree(pdpte[j] & PAGE_4K_MASK|KNL_BASE);
ffff8000008071cd:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008071d0:	48 98                	cdqe   
ffff8000008071d2:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008071d9:	00 
ffff8000008071da:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008071de:	48 01 d0             	add    rax,rdx
ffff8000008071e1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008071e4:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff8000008071eb:	7f 00 00 
ffff8000008071ee:	48 21 c2             	and    rdx,rax
ffff8000008071f1:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff8000008071f8:	80 ff ff 
ffff8000008071fb:	48 09 d0             	or     rax,rdx
ffff8000008071fe:	48 89 c7             	mov    rdi,rax
ffff800000807201:	49 89 df             	mov    r15,rbx
ffff800000807204:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff80000080720b:	ff ff ff 
ffff80000080720e:	48 01 d8             	add    rax,rbx
ffff800000807211:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:959 (discriminator 2)
            for(int j=0;j<512;j++)
ffff800000807213:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:959 (discriminator 1)
ffff800000807217:	81 7d e8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x18],0x1ff
ffff80000080721e:	0f 8e 6e fd ff ff    	jle    ffff800000806f92 <release_mmap+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:987
                }//1GB先不写，目前还没有初始化之后动态申请1GB页的

            }
            //这一页pdpte的内容释放完了，这一项指向的vmalloc可以释放了
            kmfree(pml4e[i] & PAGE_4K_MASK|KNL_BASE);
ffff800000807224:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807227:	48 98                	cdqe   
ffff800000807229:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807230:	00 
ffff800000807231:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000807235:	48 01 d0             	add    rax,rdx
ffff800000807238:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080723b:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000807242:	7f 00 00 
ffff800000807245:	48 21 c2             	and    rdx,rax
ffff800000807248:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff80000080724f:	80 ff ff 
ffff800000807252:	48 09 d0             	or     rax,rdx
ffff800000807255:	48 89 c7             	mov    rdi,rax
ffff800000807258:	49 89 df             	mov    r15,rbx
ffff80000080725b:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff800000807262:	ff ff ff 
ffff800000807265:	48 01 d8             	add    rax,rbx
ffff800000807268:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:955 (discriminator 2)
    for(int i=0;i<256;i++)//高地址不释放（内核空间）
ffff80000080726a:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:955 (discriminator 1)
ffff80000080726e:	81 7d ec ff 00 00 00 	cmp    DWORD PTR [rbp-0x14],0xff
ffff800000807275:	0f 8e b3 fc ff ff    	jle    ffff800000806f2e <release_mmap+0x4a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:990
        }
    }
}
ffff80000080727b:	90                   	nop
ffff80000080727c:	90                   	nop
ffff80000080727d:	48 83 c4 50          	add    rsp,0x50
ffff800000807281:	5b                   	pop    rbx
ffff800000807282:	41 5f                	pop    r15
ffff800000807284:	5d                   	pop    rbp
ffff800000807285:	c3                   	ret    

ffff800000807286 <copy_mmap>:
copy_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:991
void copy_mmap(struct process* from, struct process *to){
ffff800000807286:	f3 0f 1e fa          	endbr64 
ffff80000080728a:	55                   	push   rbp
ffff80000080728b:	48 89 e5             	mov    rbp,rsp
ffff80000080728e:	41 57                	push   r15
ffff800000807290:	53                   	push   rbx
ffff800000807291:	48 83 ec 70          	sub    rsp,0x70
ffff800000807295:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807295 <copy_mmap+0xf>
ffff80000080729c:	49 bb 3b 68 11 00 00 	movabs r11,0x11683b
ffff8000008072a3:	00 00 00 
ffff8000008072a6:	4c 01 db             	add    rbx,r11
ffff8000008072a9:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff8000008072ad:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:992
    page_item * pml4p= kmalloc();
ffff8000008072b1:	49 89 df             	mov    r15,rbx
ffff8000008072b4:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008072b9:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff8000008072c0:	ff ff ff 
ffff8000008072c3:	48 01 da             	add    rdx,rbx
ffff8000008072c6:	ff d2                	call   rdx
ffff8000008072c8:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:993
    memcpy(pml4p, (unsigned char *) from->pml4, PAGE_4K_SIZE);//复制pml4
ffff8000008072cc:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008072d0:	48 8b 88 e0 00 00 00 	mov    rcx,QWORD PTR [rax+0xe0]
ffff8000008072d7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008072db:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008072e0:	48 89 ce             	mov    rsi,rcx
ffff8000008072e3:	48 89 c7             	mov    rdi,rax
ffff8000008072e6:	49 89 df             	mov    r15,rbx
ffff8000008072e9:	48 b8 c4 50 ef ff ff 	movabs rax,0xffffffffffef50c4
ffff8000008072f0:	ff ff ff 
ffff8000008072f3:	48 01 d8             	add    rax,rbx
ffff8000008072f6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:994
    to->regs.cr3=(unsigned long)pml4p&~KNL_BASE;
ffff8000008072f8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008072fc:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000807303:	7f 00 00 
ffff800000807306:	48 21 c2             	and    rdx,rax
ffff800000807309:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080730d:	48 89 90 64 02 00 00 	mov    QWORD PTR [rax+0x264],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:995
    to->pml4=pml4p;
ffff800000807314:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000807318:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080731c:	48 89 90 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:998
    //复制pdpt

    page_item *pml4e= pml4p;
ffff800000807323:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000807327:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:999
    for(int i=0;i<512;i++)
ffff80000080732b:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000807332:	e9 0e 03 00 00       	jmp    ffff800000807645 <copy_mmap+0x3bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1001
    {
        if((pml4e[i]&PAGE_PRESENT)==0)
ffff800000807337:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080733a:	48 98                	cdqe   
ffff80000080733c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807343:	00 
ffff800000807344:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000807348:	48 01 d0             	add    rax,rdx
ffff80000080734b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080734e:	83 e0 01             	and    eax,0x1
ffff800000807351:	48 85 c0             	test   rax,rax
ffff800000807354:	0f 84 e6 02 00 00    	je     ffff800000807640 <copy_mmap+0x3ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1003
            continue;
        addr_t old_data=pml4e[i];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff80000080735a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080735d:	48 98                	cdqe   
ffff80000080735f:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807366:	00 
ffff800000807367:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080736b:	48 01 d0             	add    rax,rdx
ffff80000080736e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807371:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1004
        addr_t m4=kmalloc();
ffff800000807375:	49 89 df             	mov    r15,rbx
ffff800000807378:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080737d:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000807384:	ff ff ff 
ffff800000807387:	48 01 da             	add    rdx,rbx
ffff80000080738a:	ff d2                	call   rdx
ffff80000080738c:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1005
        pml4e[i]= (m4&~KNL_BASE) | (old_data & ~PAGE_4K_MASK);
ffff800000807390:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000807397:	7f 00 00 
ffff80000080739a:	48 23 45 c0          	and    rax,QWORD PTR [rbp-0x40]
ffff80000080739e:	48 89 c2             	mov    rdx,rax
ffff8000008073a1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008073a5:	25 ff 0f 00 00       	and    eax,0xfff
ffff8000008073aa:	48 89 c1             	mov    rcx,rax
ffff8000008073ad:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008073b0:	48 98                	cdqe   
ffff8000008073b2:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff8000008073b9:	00 
ffff8000008073ba:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008073be:	48 01 f0             	add    rax,rsi
ffff8000008073c1:	48 09 ca             	or     rdx,rcx
ffff8000008073c4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1006
        memcpy((unsigned char *) m4, old_data & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff8000008073c7:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff8000008073ce:	7f 00 00 
ffff8000008073d1:	48 23 45 c8          	and    rax,QWORD PTR [rbp-0x38]
ffff8000008073d5:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff8000008073dc:	80 ff ff 
ffff8000008073df:	48 09 d0             	or     rax,rdx
ffff8000008073e2:	48 89 c1             	mov    rcx,rax
ffff8000008073e5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008073e9:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008073ee:	48 89 ce             	mov    rsi,rcx
ffff8000008073f1:	48 89 c7             	mov    rdi,rax
ffff8000008073f4:	49 89 df             	mov    r15,rbx
ffff8000008073f7:	48 b8 c4 50 ef ff ff 	movabs rax,0xffffffffffef50c4
ffff8000008073fe:	ff ff ff 
ffff800000807401:	48 01 d8             	add    rax,rbx
ffff800000807404:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1007
        page_item *pdpte= (page_item *) m4;
ffff800000807406:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080740a:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1008
        for(int j=0;j<512;j++)
ffff80000080740e:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000807415:	e9 17 02 00 00       	jmp    ffff800000807631 <copy_mmap+0x3ab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1010
        {
            if((pdpte[j]&PAGE_PRESENT)==0||(pdpte[j]&PDPTE_1GB)!=0)
ffff80000080741a:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080741d:	48 98                	cdqe   
ffff80000080741f:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807426:	00 
ffff800000807427:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080742b:	48 01 d0             	add    rax,rdx
ffff80000080742e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807431:	83 e0 01             	and    eax,0x1
ffff800000807434:	48 85 c0             	test   rax,rax
ffff800000807437:	0f 84 ef 01 00 00    	je     ffff80000080762c <copy_mmap+0x3a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1010 (discriminator 2)
ffff80000080743d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807440:	48 98                	cdqe   
ffff800000807442:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807449:	00 
ffff80000080744a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080744e:	48 01 d0             	add    rax,rdx
ffff800000807451:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807454:	25 80 00 00 00       	and    eax,0x80
ffff800000807459:	48 85 c0             	test   rax,rax
ffff80000080745c:	0f 85 ca 01 00 00    	jne    ffff80000080762c <copy_mmap+0x3a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1012
                continue;
            addr_t old_data2=pdpte[j];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff800000807462:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807465:	48 98                	cdqe   
ffff800000807467:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080746e:	00 
ffff80000080746f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807473:	48 01 d0             	add    rax,rdx
ffff800000807476:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807479:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1013
            addr_t m3=kmalloc();
ffff80000080747d:	49 89 df             	mov    r15,rbx
ffff800000807480:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807485:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff80000080748c:	ff ff ff 
ffff80000080748f:	48 01 da             	add    rdx,rbx
ffff800000807492:	ff d2                	call   rdx
ffff800000807494:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1014
            pdpte[j]= (m3&~KNL_BASE) | (old_data2 & ~PAGE_4K_MASK);
ffff800000807498:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff80000080749f:	7f 00 00 
ffff8000008074a2:	48 23 45 a8          	and    rax,QWORD PTR [rbp-0x58]
ffff8000008074a6:	48 89 c2             	mov    rdx,rax
ffff8000008074a9:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008074ad:	25 ff 0f 00 00       	and    eax,0xfff
ffff8000008074b2:	48 89 c1             	mov    rcx,rax
ffff8000008074b5:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008074b8:	48 98                	cdqe   
ffff8000008074ba:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff8000008074c1:	00 
ffff8000008074c2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008074c6:	48 01 f0             	add    rax,rsi
ffff8000008074c9:	48 09 ca             	or     rdx,rcx
ffff8000008074cc:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1015
            memcpy((unsigned char *) m3, old_data2 & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff8000008074cf:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff8000008074d6:	7f 00 00 
ffff8000008074d9:	48 23 45 b0          	and    rax,QWORD PTR [rbp-0x50]
ffff8000008074dd:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff8000008074e4:	80 ff ff 
ffff8000008074e7:	48 09 d0             	or     rax,rdx
ffff8000008074ea:	48 89 c1             	mov    rcx,rax
ffff8000008074ed:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008074f1:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008074f6:	48 89 ce             	mov    rsi,rcx
ffff8000008074f9:	48 89 c7             	mov    rdi,rax
ffff8000008074fc:	49 89 df             	mov    r15,rbx
ffff8000008074ff:	48 b8 c4 50 ef ff ff 	movabs rax,0xffffffffffef50c4
ffff800000807506:	ff ff ff 
ffff800000807509:	48 01 d8             	add    rax,rbx
ffff80000080750c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1016
            page_item *pde= (page_item *) m3;
ffff80000080750e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000807512:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1017
            for(int k=0;k<512;k++)
ffff800000807516:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080751d:	e9 fb 00 00 00       	jmp    ffff80000080761d <copy_mmap+0x397>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1019
            {
                if((pde[k]&PAGE_PRESENT)==0||(pde[k]&PDE_2MB)!=0)
ffff800000807522:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807525:	48 98                	cdqe   
ffff800000807527:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080752e:	00 
ffff80000080752f:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000807533:	48 01 d0             	add    rax,rdx
ffff800000807536:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807539:	83 e0 01             	and    eax,0x1
ffff80000080753c:	48 85 c0             	test   rax,rax
ffff80000080753f:	0f 84 d3 00 00 00    	je     ffff800000807618 <copy_mmap+0x392>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1019 (discriminator 2)
ffff800000807545:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807548:	48 98                	cdqe   
ffff80000080754a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807551:	00 
ffff800000807552:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000807556:	48 01 d0             	add    rax,rdx
ffff800000807559:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080755c:	25 80 00 00 00       	and    eax,0x80
ffff800000807561:	48 85 c0             	test   rax,rax
ffff800000807564:	0f 85 ae 00 00 00    	jne    ffff800000807618 <copy_mmap+0x392>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1021
                    continue;
                addr_t old_data3=pde[k];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff80000080756a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080756d:	48 98                	cdqe   
ffff80000080756f:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807576:	00 
ffff800000807577:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080757b:	48 01 d0             	add    rax,rdx
ffff80000080757e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807581:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1022
                addr_t m2=kmalloc();
ffff800000807585:	49 89 df             	mov    r15,rbx
ffff800000807588:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080758d:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000807594:	ff ff ff 
ffff800000807597:	48 01 da             	add    rdx,rbx
ffff80000080759a:	ff d2                	call   rdx
ffff80000080759c:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1023
                pde[k]= (m2&~KNL_BASE) | (old_data3 & ~PAGE_4K_MASK);
ffff8000008075a0:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff8000008075a7:	7f 00 00 
ffff8000008075aa:	48 23 45 90          	and    rax,QWORD PTR [rbp-0x70]
ffff8000008075ae:	48 89 c2             	mov    rdx,rax
ffff8000008075b1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008075b5:	25 ff 0f 00 00       	and    eax,0xfff
ffff8000008075ba:	48 89 c1             	mov    rcx,rax
ffff8000008075bd:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008075c0:	48 98                	cdqe   
ffff8000008075c2:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff8000008075c9:	00 
ffff8000008075ca:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008075ce:	48 01 f0             	add    rax,rsi
ffff8000008075d1:	48 09 ca             	or     rdx,rcx
ffff8000008075d4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1024
                memcpy((unsigned char *) m2, old_data3 & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff8000008075d7:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff8000008075de:	7f 00 00 
ffff8000008075e1:	48 23 45 98          	and    rax,QWORD PTR [rbp-0x68]
ffff8000008075e5:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff8000008075ec:	80 ff ff 
ffff8000008075ef:	48 09 d0             	or     rax,rdx
ffff8000008075f2:	48 89 c1             	mov    rcx,rax
ffff8000008075f5:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008075f9:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008075fe:	48 89 ce             	mov    rsi,rcx
ffff800000807601:	48 89 c7             	mov    rdi,rax
ffff800000807604:	49 89 df             	mov    r15,rbx
ffff800000807607:	48 b8 c4 50 ef ff ff 	movabs rax,0xffffffffffef50c4
ffff80000080760e:	ff ff ff 
ffff800000807611:	48 01 d8             	add    rax,rbx
ffff800000807614:	ff d0                	call   rax
ffff800000807616:	eb 01                	jmp    ffff800000807619 <copy_mmap+0x393>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1020
                    continue;
ffff800000807618:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1017 (discriminator 2)
            for(int k=0;k<512;k++)
ffff800000807619:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1017 (discriminator 1)
ffff80000080761d:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
ffff800000807624:	0f 8e f8 fe ff ff    	jle    ffff800000807522 <copy_mmap+0x29c>
ffff80000080762a:	eb 01                	jmp    ffff80000080762d <copy_mmap+0x3a7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1011
                continue;
ffff80000080762c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1008 (discriminator 2)
        for(int j=0;j<512;j++)
ffff80000080762d:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1008 (discriminator 1)
ffff800000807631:	81 7d e8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x18],0x1ff
ffff800000807638:	0f 8e dc fd ff ff    	jle    ffff80000080741a <copy_mmap+0x194>
ffff80000080763e:	eb 01                	jmp    ffff800000807641 <copy_mmap+0x3bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1002
            continue;
ffff800000807640:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:999 (discriminator 2)
    for(int i=0;i<512;i++)
ffff800000807641:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:999 (discriminator 1)
ffff800000807645:	81 7d ec ff 01 00 00 	cmp    DWORD PTR [rbp-0x14],0x1ff
ffff80000080764c:	0f 8e e5 fc ff ff    	jle    ffff800000807337 <copy_mmap+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1031
            }

        }

    }
}
ffff800000807652:	90                   	nop
ffff800000807653:	90                   	nop
ffff800000807654:	48 83 c4 70          	add    rsp,0x70
ffff800000807658:	5b                   	pop    rbx
ffff800000807659:	41 5f                	pop    r15
ffff80000080765b:	5d                   	pop    rbp
ffff80000080765c:	c3                   	ret    

ffff80000080765d <chk_mmap>:
chk_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1033

int chk_mmap(off_t base, size_t mem_size){
ffff80000080765d:	f3 0f 1e fa          	endbr64 
ffff800000807661:	55                   	push   rbp
ffff800000807662:	48 89 e5             	mov    rbp,rsp
ffff800000807665:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807665 <chk_mmap+0x8>
ffff80000080766c:	49 bb 6b 64 11 00 00 	movabs r11,0x11646b
ffff800000807673:	00 00 00 
ffff800000807676:	4c 01 d8             	add    rax,r11
ffff800000807679:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
ffff80000080767c:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1035
    size_t nr_pte;
    size_t ndx_pml4=0,ndx_pdpt=0,ndx_pd=0,ndx_pt=0;
ffff800000807680:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff800000807687:	00 
ffff800000807688:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080768f:	00 
ffff800000807690:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000807697:	00 
ffff800000807698:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080769f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1036
    page_item *pml4e= current->pml4;
ffff8000008076a0:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff8000008076a7:	ff ff ff 
ffff8000008076aa:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008076ae:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008076b1:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff8000008076b8:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1037
    nr_pte=  (mem_size-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff8000008076bc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008076c0:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff8000008076c6:	48 c1 e8 0c          	shr    rax,0xc
ffff8000008076ca:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1038
    ndx_pt=  base/PAGE_4K_SIZE;
ffff8000008076ce:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008076d1:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff8000008076d7:	85 c0                	test   eax,eax
ffff8000008076d9:	0f 48 c2             	cmovs  eax,edx
ffff8000008076dc:	c1 f8 0c             	sar    eax,0xc
ffff8000008076df:	48 98                	cdqe   
ffff8000008076e1:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1039
    ndx_pd=  ndx_pt/512%512;
ffff8000008076e5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008076e9:	48 c1 e8 09          	shr    rax,0x9
ffff8000008076ed:	25 ff 01 00 00       	and    eax,0x1ff
ffff8000008076f2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1040
    ndx_pdpt=ndx_pd/512%512;
ffff8000008076f6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008076fa:	48 c1 e8 09          	shr    rax,0x9
ffff8000008076fe:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000807703:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1041
    ndx_pml4=ndx_pdpt/512%512;
ffff800000807707:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080770b:	48 c1 e8 09          	shr    rax,0x9
ffff80000080770f:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000807714:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1042
    while (nr_pte)
ffff800000807718:	eb 25                	jmp    ffff80000080773f <chk_mmap+0xe2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1044
    {
        if(ndx_pdpt==512){
ffff80000080771a:	48 81 7d f8 00 02 00 	cmp    QWORD PTR [rbp-0x8],0x200
ffff800000807721:	00 
ffff800000807722:	75 0d                	jne    ffff800000807731 <chk_mmap+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1045
            ndx_pml4++;
ffff800000807724:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1046
            ndx_pdpt=0;
ffff800000807729:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff800000807730:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1049 (discriminator 1)
        }
        if(pml4e[ndx_pml4]%PAGE_PRESENT==0){
            ndx_pml4++;
ffff800000807731:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1050 (discriminator 1)
            ndx_pdpt=0;
ffff800000807736:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080773d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1051 (discriminator 1)
            continue;
ffff80000080773e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1042
    while (nr_pte)
ffff80000080773f:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff800000807744:	75 d4                	jne    ffff80000080771a <chk_mmap+0xbd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1081
        if(pt[ndx_pt]&PAGE_PRESENT)return 0;
        ndx_pt++;
        nr_pte--;
    }
    
    return 1;
ffff800000807746:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1082
}
ffff80000080774b:	5d                   	pop    rbp
ffff80000080774c:	c3                   	ret    

ffff80000080774d <sys_getpgrp>:
sys_getpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1083
pid_t sys_getpgrp(void){
ffff80000080774d:	f3 0f 1e fa          	endbr64 
ffff800000807751:	55                   	push   rbp
ffff800000807752:	48 89 e5             	mov    rbp,rsp
ffff800000807755:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807755 <sys_getpgrp+0x8>
ffff80000080775c:	49 bb 7b 63 11 00 00 	movabs r11,0x11637b
ffff800000807763:	00 00 00 
ffff800000807766:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1084
    return current->gpid;
ffff800000807769:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807770:	ff ff ff 
ffff800000807773:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807777:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080777a:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1085
}
ffff80000080777d:	5d                   	pop    rbp
ffff80000080777e:	c3                   	ret    

ffff80000080777f <sys_getpgid>:
sys_getpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1087

int sys_getpgid(pid_t pid,gid_t gid){
ffff80000080777f:	f3 0f 1e fa          	endbr64 
ffff800000807783:	55                   	push   rbp
ffff800000807784:	48 89 e5             	mov    rbp,rsp
ffff800000807787:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807787 <sys_getpgid+0x8>
ffff80000080778e:	49 bb 49 63 11 00 00 	movabs r11,0x116349
ffff800000807795:	00 00 00 
ffff800000807798:	4c 01 d8             	add    rax,r11
ffff80000080779b:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080779e:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1088
    if(pid==0)
ffff8000008077a1:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff8000008077a5:	75 16                	jne    ffff8000008077bd <sys_getpgid+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1089
        return current->gpid;
ffff8000008077a7:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff8000008077ae:	ff ff ff 
ffff8000008077b1:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008077b5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008077b8:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008077bb:	eb 67                	jmp    ffff800000807824 <sys_getpgid+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1090
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff8000008077bd:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008077c4:	eb 53                	jmp    ffff800000807819 <sys_getpgid+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1091
        if(task[i].pid==pid)
ffff8000008077c6:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008077cd:	ff ff ff 
ffff8000008077d0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008077d4:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008077d7:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008077da:	48 63 d2             	movsxd rdx,edx
ffff8000008077dd:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008077e4:	48 01 ca             	add    rdx,rcx
ffff8000008077e7:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff8000008077e9:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008077ec:	39 d1                	cmp    ecx,edx
ffff8000008077ee:	75 25                	jne    ffff800000807815 <sys_getpgid+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1092
            return task[i].gpid;
ffff8000008077f0:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008077f7:	ff ff ff 
ffff8000008077fa:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008077fe:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807801:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000807804:	48 98                	cdqe   
ffff800000807806:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080780d:	48 01 d0             	add    rax,rdx
ffff800000807810:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000807813:	eb 0f                	jmp    ffff800000807824 <sys_getpgid+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1090 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807815:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1090 (discriminator 1)
ffff800000807819:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff80000080781d:	7e a7                	jle    ffff8000008077c6 <sys_getpgid+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1094
    }
    return -1;
ffff80000080781f:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1095
}
ffff800000807824:	5d                   	pop    rbp
ffff800000807825:	c3                   	ret    

ffff800000807826 <sys_setpgid>:
sys_setpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1096
int sys_setpgid(pid_t pid,gid_t gid){
ffff800000807826:	f3 0f 1e fa          	endbr64 
ffff80000080782a:	55                   	push   rbp
ffff80000080782b:	48 89 e5             	mov    rbp,rsp
ffff80000080782e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080782e <sys_setpgid+0x8>
ffff800000807835:	49 bb a2 62 11 00 00 	movabs r11,0x1162a2
ffff80000080783c:	00 00 00 
ffff80000080783f:	4c 01 d8             	add    rax,r11
ffff800000807842:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000807845:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1097
    if(pid==0)
ffff800000807848:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080784c:	75 56                	jne    ffff8000008078a4 <sys_setpgid+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1099
    {
        if(current->sid==current->pid)
ffff80000080784e:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807855:	ff ff ff 
ffff800000807858:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080785c:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080785f:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000807862:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807869:	ff ff ff 
ffff80000080786c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807870:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807873:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807875:	39 d1                	cmp    ecx,edx
ffff800000807877:	75 0a                	jne    ffff800000807883 <sys_setpgid+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1100
            return -1;
ffff800000807879:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080787e:	e9 e9 00 00 00       	jmp    ffff80000080796c <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1101
        current->gpid=gid;
ffff800000807883:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080788a:	ff ff ff 
ffff80000080788d:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807891:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807894:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807897:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1102
        return 0;
ffff80000080789a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080789f:	e9 c8 00 00 00       	jmp    ffff80000080796c <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1104
    }
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff8000008078a4:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008078ab:	e9 ad 00 00 00       	jmp    ffff80000080795d <sys_setpgid+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1105
        if(task[i].pid==pid)
ffff8000008078b0:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008078b7:	ff ff ff 
ffff8000008078ba:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008078be:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008078c1:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008078c4:	48 63 d2             	movsxd rdx,edx
ffff8000008078c7:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008078ce:	48 01 ca             	add    rdx,rcx
ffff8000008078d1:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff8000008078d3:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008078d6:	39 d1                	cmp    ecx,edx
ffff8000008078d8:	75 7f                	jne    ffff800000807959 <sys_setpgid+0x133>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1107
        {
            if(task[i].sid==task[i].pid)
ffff8000008078da:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008078e1:	ff ff ff 
ffff8000008078e4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008078e8:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008078eb:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008078ee:	48 63 d2             	movsxd rdx,edx
ffff8000008078f1:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff8000008078f8:	48 01 ca             	add    rdx,rcx
ffff8000008078fb:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff8000008078fe:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000807905:	ff ff ff 
ffff800000807908:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080790c:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080790f:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807912:	48 63 d2             	movsxd rdx,edx
ffff800000807915:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff80000080791c:	48 01 f2             	add    rdx,rsi
ffff80000080791f:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807921:	39 d1                	cmp    ecx,edx
ffff800000807923:	75 07                	jne    ffff80000080792c <sys_setpgid+0x106>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1108
                return -1;
ffff800000807925:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080792a:	eb 40                	jmp    ffff80000080796c <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1109
            task[i].gpid=gid;
ffff80000080792c:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000807933:	ff ff ff 
ffff800000807936:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080793a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080793d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000807940:	48 98                	cdqe   
ffff800000807942:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807949:	48 01 c2             	add    rdx,rax
ffff80000080794c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080794f:	89 42 04             	mov    DWORD PTR [rdx+0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1110
            return 0;
ffff800000807952:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807957:	eb 13                	jmp    ffff80000080796c <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1104 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807959:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1104 (discriminator 1)
ffff80000080795d:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000807961:	0f 8e 49 ff ff ff    	jle    ffff8000008078b0 <sys_setpgid+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1113
        }
    }
    return -1;
ffff800000807967:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1114
}
ffff80000080796c:	5d                   	pop    rbp
ffff80000080796d:	c3                   	ret    

ffff80000080796e <sys_setsid>:
sys_setsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1116

pid_t sys_setsid(void){
ffff80000080796e:	f3 0f 1e fa          	endbr64 
ffff800000807972:	55                   	push   rbp
ffff800000807973:	48 89 e5             	mov    rbp,rsp
ffff800000807976:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807976 <sys_setsid+0x8>
ffff80000080797d:	49 bb 5a 61 11 00 00 	movabs r11,0x11615a
ffff800000807984:	00 00 00 
ffff800000807987:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1117
    current->sid=current->pid;
ffff80000080798a:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807991:	ff ff ff 
ffff800000807994:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807998:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080799b:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff8000008079a2:	ff ff ff 
ffff8000008079a5:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff8000008079a9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008079ac:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008079ae:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1118
}
ffff8000008079b1:	90                   	nop
ffff8000008079b2:	5d                   	pop    rbp
ffff8000008079b3:	c3                   	ret    

ffff8000008079b4 <sys_getsid>:
sys_getsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1119
pid_t sys_getsid(pid_t pid){
ffff8000008079b4:	f3 0f 1e fa          	endbr64 
ffff8000008079b8:	55                   	push   rbp
ffff8000008079b9:	48 89 e5             	mov    rbp,rsp
ffff8000008079bc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008079bc <sys_getsid+0x8>
ffff8000008079c3:	49 bb 14 61 11 00 00 	movabs r11,0x116114
ffff8000008079ca:	00 00 00 
ffff8000008079cd:	4c 01 d8             	add    rax,r11
ffff8000008079d0:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1120
    if(pid==0)
ffff8000008079d3:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff8000008079d7:	75 16                	jne    ffff8000008079ef <sys_getsid+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1121
        return current->sid;
ffff8000008079d9:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff8000008079e0:	ff ff ff 
ffff8000008079e3:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008079e7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008079ea:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008079ed:	eb 67                	jmp    ffff800000807a56 <sys_getsid+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1122
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff8000008079ef:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008079f6:	eb 53                	jmp    ffff800000807a4b <sys_getsid+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1123
        if(task[i].pid==pid)
ffff8000008079f8:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff8000008079ff:	ff ff ff 
ffff800000807a02:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807a06:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807a09:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807a0c:	48 63 d2             	movsxd rdx,edx
ffff800000807a0f:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff800000807a16:	48 01 ca             	add    rdx,rcx
ffff800000807a19:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000807a1b:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807a1e:	39 d1                	cmp    ecx,edx
ffff800000807a20:	75 25                	jne    ffff800000807a47 <sys_getsid+0x93>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1124
            return task[i].sid;
ffff800000807a22:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000807a29:	ff ff ff 
ffff800000807a2c:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807a30:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807a33:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000807a36:	48 98                	cdqe   
ffff800000807a38:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807a3f:	48 01 d0             	add    rax,rdx
ffff800000807a42:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000807a45:	eb 0f                	jmp    ffff800000807a56 <sys_getsid+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1122 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807a47:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1122 (discriminator 1)
ffff800000807a4b:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000807a4f:	7e a7                	jle    ffff8000008079f8 <sys_getsid+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1126
    }
    return -1;
ffff800000807a51:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1127
}
ffff800000807a56:	5d                   	pop    rbp
ffff800000807a57:	c3                   	ret    

ffff800000807a58 <sys_tcsetpgrp>:
sys_tcsetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1128
int sys_tcsetpgrp(int fildes,pid_t pgid_id){
ffff800000807a58:	f3 0f 1e fa          	endbr64 
ffff800000807a5c:	55                   	push   rbp
ffff800000807a5d:	48 89 e5             	mov    rbp,rsp
ffff800000807a60:	41 57                	push   r15
ffff800000807a62:	53                   	push   rbx
ffff800000807a63:	48 83 ec 20          	sub    rsp,0x20
ffff800000807a67:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807a67 <sys_tcsetpgrp+0xf>
ffff800000807a6e:	49 bb 69 60 11 00 00 	movabs r11,0x116069
ffff800000807a75:	00 00 00 
ffff800000807a78:	4c 01 db             	add    rbx,r11
ffff800000807a7b:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000807a7e:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1130
    //当前controlling terminal断联
    sys_ioctl(fildes,TTY_DISCONNECT,0);
ffff800000807a81:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807a84:	ba 00 00 00 00       	mov    edx,0x0
ffff800000807a89:	be 02 00 00 00       	mov    esi,0x2
ffff800000807a8e:	89 c7                	mov    edi,eax
ffff800000807a90:	49 89 df             	mov    r15,rbx
ffff800000807a93:	48 b8 a1 a1 ee ff ff 	movabs rax,0xffffffffffeea1a1
ffff800000807a9a:	ff ff ff 
ffff800000807a9d:	48 01 d8             	add    rax,rbx
ffff800000807aa0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1131
    int sid= sys_getsid(0);//获取session id
ffff800000807aa2:	bf 00 00 00 00       	mov    edi,0x0
ffff800000807aa7:	49 89 df             	mov    r15,rbx
ffff800000807aaa:	48 b8 e4 9e ee ff ff 	movabs rax,0xffffffffffee9ee4
ffff800000807ab1:	ff ff ff 
ffff800000807ab4:	48 01 d8             	add    rax,rbx
ffff800000807ab7:	ff d0                	call   rax
ffff800000807ab9:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1132
    struct process* new_fgl=NULL;
ffff800000807abc:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000807ac3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1133
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807ac4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000807acb:	e9 fb 00 00 00       	jmp    ffff800000807bcb <sys_tcsetpgrp+0x173>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1134
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
ffff800000807ad0:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000807ad7:	ff ff ff 
ffff800000807ada:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807ade:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807ae1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807ae4:	48 98                	cdqe   
ffff800000807ae6:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807aed:	48 01 d0             	add    rax,rdx
ffff800000807af0:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000807af3:	83 f8 04             	cmp    eax,0x4
ffff800000807af6:	0f 84 ca 00 00 00    	je     ffff800000807bc6 <sys_tcsetpgrp+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1134 (discriminator 2)
ffff800000807afc:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000807b03:	ff ff ff 
ffff800000807b06:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807b0a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807b0d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807b10:	48 98                	cdqe   
ffff800000807b12:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807b19:	48 01 d0             	add    rax,rdx
ffff800000807b1c:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000807b1f:	85 c0                	test   eax,eax
ffff800000807b21:	0f 84 9f 00 00 00    	je     ffff800000807bc6 <sys_tcsetpgrp+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1135
        if(task[i].sid==sid){
ffff800000807b27:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000807b2e:	ff ff ff 
ffff800000807b31:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807b35:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807b38:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807b3b:	48 98                	cdqe   
ffff800000807b3d:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807b44:	48 01 d0             	add    rax,rdx
ffff800000807b47:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000807b4a:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000807b4d:	39 c2                	cmp    edx,eax
ffff800000807b4f:	75 76                	jne    ffff800000807bc7 <sys_tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1136
            task[i].fg_pgid=pgid_id;
ffff800000807b51:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000807b58:	ff ff ff 
ffff800000807b5b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807b5f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807b62:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807b65:	48 98                	cdqe   
ffff800000807b67:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807b6e:	48 01 c2             	add    rdx,rax
ffff800000807b71:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000807b74:	89 42 0c             	mov    DWORD PTR [rdx+0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1137
            if(task[i].pid==pgid_id){
ffff800000807b77:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000807b7e:	ff ff ff 
ffff800000807b81:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807b85:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807b88:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807b8b:	48 98                	cdqe   
ffff800000807b8d:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807b94:	48 01 d0             	add    rax,rdx
ffff800000807b97:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000807b99:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000807b9c:	39 c2                	cmp    edx,eax
ffff800000807b9e:	75 27                	jne    ffff800000807bc7 <sys_tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1139
                //这是新前台进程组的leader
                new_fgl=&task[i];
ffff800000807ba0:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000807ba7:	ff ff ff 
ffff800000807baa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807bae:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807bb1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807bb4:	48 98                	cdqe   
ffff800000807bb6:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000807bbd:	48 01 d0             	add    rax,rdx
ffff800000807bc0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff800000807bc4:	eb 01                	jmp    ffff800000807bc7 <sys_tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1134
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
ffff800000807bc6:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1133 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807bc7:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1133 (discriminator 1)
ffff800000807bcb:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
ffff800000807bcf:	0f 8e fb fe ff ff    	jle    ffff800000807ad0 <sys_tcsetpgrp+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1144
            }
        }
    }
    //新leader把tty连接
    new_fgl->openf[new_fgl->tty_fd]->f_ops->ioctl(new_fgl->openf[fildes]->dentry->dir_inode,new_fgl->openf[fildes]\
ffff800000807bd5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807bd9:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
ffff800000807bdc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807be0:	48 63 d2             	movsxd rdx,edx
ffff800000807be3:	48 83 c2 1e          	add    rdx,0x1e
ffff800000807be7:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000807bec:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000807bf0:	4c 8b 40 28          	mov    r8,QWORD PTR [rax+0x28]
ffff800000807bf4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807bf8:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000807bfb:	48 63 d2             	movsxd rdx,edx
ffff800000807bfe:	48 83 c2 1e          	add    rdx,0x1e
ffff800000807c02:	48 8b 74 d0 08       	mov    rsi,QWORD PTR [rax+rdx*8+0x8]
ffff800000807c07:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807c0b:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000807c0e:	48 63 d2             	movsxd rdx,edx
ffff800000807c11:	48 83 c2 1e          	add    rdx,0x1e
ffff800000807c15:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000807c1a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000807c1e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000807c22:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000807c27:	ba 01 00 00 00       	mov    edx,0x1
ffff800000807c2c:	48 89 c7             	mov    rdi,rax
ffff800000807c2f:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1146
    ,TTY_CONNECT,0);
}
ffff800000807c32:	90                   	nop
ffff800000807c33:	48 83 c4 20          	add    rsp,0x20
ffff800000807c37:	5b                   	pop    rbx
ffff800000807c38:	41 5f                	pop    r15
ffff800000807c3a:	5d                   	pop    rbp
ffff800000807c3b:	c3                   	ret    

ffff800000807c3c <sys_tcgetpgrp>:
sys_tcgetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1147
pid_t sys_tcgetpgrp(int fildes){
ffff800000807c3c:	f3 0f 1e fa          	endbr64 
ffff800000807c40:	55                   	push   rbp
ffff800000807c41:	48 89 e5             	mov    rbp,rsp
ffff800000807c44:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807c44 <sys_tcgetpgrp+0x8>
ffff800000807c4b:	49 bb 8c 5e 11 00 00 	movabs r11,0x115e8c
ffff800000807c52:	00 00 00 
ffff800000807c55:	4c 01 d8             	add    rax,r11
ffff800000807c58:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1148
    return current->fg_pgid;
ffff800000807c5b:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807c62:	ff ff ff 
ffff800000807c65:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807c69:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807c6c:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1149
}
ffff800000807c6f:	5d                   	pop    rbp
ffff800000807c70:	c3                   	ret    

ffff800000807c71 <sys_ioctl>:
sys_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1152
//===============

int sys_ioctl(int fildes, int request, unsigned long args){
ffff800000807c71:	f3 0f 1e fa          	endbr64 
ffff800000807c75:	55                   	push   rbp
ffff800000807c76:	48 89 e5             	mov    rbp,rsp
ffff800000807c79:	48 83 ec 10          	sub    rsp,0x10
ffff800000807c7d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807c7d <sys_ioctl+0xc>
ffff800000807c84:	49 bb 53 5e 11 00 00 	movabs r11,0x115e53
ffff800000807c8b:	00 00 00 
ffff800000807c8e:	4c 01 d8             	add    rax,r11
ffff800000807c91:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff800000807c94:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff800000807c97:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1153
    current->openf[fildes]->f_ops->ioctl(current->openf[fildes]->dentry->dir_inode,current->openf[fildes]\
ffff800000807c9b:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807ca2:	ff ff ff 
ffff800000807ca5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807ca9:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807cac:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000807caf:	48 63 c9             	movsxd rcx,ecx
ffff800000807cb2:	48 83 c1 1e          	add    rcx,0x1e
ffff800000807cb6:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff800000807cbb:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff800000807cbf:	4c 8b 42 28          	mov    r8,QWORD PTR [rdx+0x28]
ffff800000807cc3:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000807cc6:	48 63 d2             	movsxd rdx,edx
ffff800000807cc9:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff800000807cd0:	ff ff ff 
ffff800000807cd3:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000807cd7:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
ffff800000807cda:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
ffff800000807cdd:	48 63 f6             	movsxd rsi,esi
ffff800000807ce0:	48 83 c6 1e          	add    rsi,0x1e
ffff800000807ce4:	48 8b 74 f1 08       	mov    rsi,QWORD PTR [rcx+rsi*8+0x8]
ffff800000807ce9:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff800000807cf0:	ff ff ff 
ffff800000807cf3:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000807cf7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807cfa:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000807cfd:	48 63 c9             	movsxd rcx,ecx
ffff800000807d00:	48 83 c1 1e          	add    rcx,0x1e
ffff800000807d04:	48 8b 44 c8 08       	mov    rax,QWORD PTR [rax+rcx*8+0x8]
ffff800000807d09:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000807d0d:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000807d11:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000807d15:	48 89 c7             	mov    rdi,rax
ffff800000807d18:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1155
    ,request,args);
}
ffff800000807d1b:	90                   	nop
ffff800000807d1c:	c9                   	leave  
ffff800000807d1d:	c3                   	ret    

ffff800000807d1e <set_errno>:
set_errno():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1156
void set_errno(int errno){
ffff800000807d1e:	f3 0f 1e fa          	endbr64 
ffff800000807d22:	55                   	push   rbp
ffff800000807d23:	48 89 e5             	mov    rbp,rsp
ffff800000807d26:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807d26 <set_errno+0x8>
ffff800000807d2d:	49 bb aa 5d 11 00 00 	movabs r11,0x115daa
ffff800000807d34:	00 00 00 
ffff800000807d37:	4c 01 d8             	add    rax,r11
ffff800000807d3a:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1157
    current->regs.errcode=errno;
ffff800000807d3d:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff800000807d44:	ff ff ff 
ffff800000807d47:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807d4b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807d4e:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807d51:	48 63 d2             	movsxd rdx,edx
ffff800000807d54:	48 89 90 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1158
ffff800000807d5b:	90                   	nop
ffff800000807d5c:	5d                   	pop    rbp
ffff800000807d5d:	c3                   	ret    
ffff800000807d5e:	66 90                	xchg   ax,ax

ffff800000807d60 <outb>:
outb():
ffff800000807d60:	66 89 fa             	mov    dx,di
ffff800000807d63:	66 89 f0             	mov    ax,si
ffff800000807d66:	ee                   	out    dx,al
ffff800000807d67:	e8 29 00 00 00       	call   ffff800000807d95 <io_delay>
ffff800000807d6c:	c3                   	ret    

ffff800000807d6d <outw>:
outw():
ffff800000807d6d:	66 89 fa             	mov    dx,di
ffff800000807d70:	66 89 f0             	mov    ax,si
ffff800000807d73:	66 ef                	out    dx,ax
ffff800000807d75:	90                   	nop
ffff800000807d76:	90                   	nop
ffff800000807d77:	90                   	nop
ffff800000807d78:	c3                   	ret    

ffff800000807d79 <inb>:
inb():
ffff800000807d79:	31 c0                	xor    eax,eax
ffff800000807d7b:	66 89 fa             	mov    dx,di
ffff800000807d7e:	ec                   	in     al,dx
ffff800000807d7f:	90                   	nop
ffff800000807d80:	90                   	nop
ffff800000807d81:	90                   	nop
ffff800000807d82:	c3                   	ret    

ffff800000807d83 <inw>:
inw():
ffff800000807d83:	31 c0                	xor    eax,eax
ffff800000807d85:	66 89 fa             	mov    dx,di
ffff800000807d88:	66 ed                	in     ax,dx
ffff800000807d8a:	90                   	nop
ffff800000807d8b:	90                   	nop
ffff800000807d8c:	90                   	nop
ffff800000807d8d:	c3                   	ret    

ffff800000807d8e <eoi>:
eoi():
ffff800000807d8e:	b0 20                	mov    al,0x20
ffff800000807d90:	e6 a0                	out    0xa0,al
ffff800000807d92:	e6 20                	out    0x20,al
ffff800000807d94:	c3                   	ret    

ffff800000807d95 <io_delay>:
io_delay():
ffff800000807d95:	90                   	nop
ffff800000807d96:	90                   	nop
ffff800000807d97:	90                   	nop
ffff800000807d98:	90                   	nop
ffff800000807d99:	c3                   	ret    

ffff800000807d9a <turn_on_int>:
turn_on_int():
ffff800000807d9a:	b0 f8                	mov    al,0xf8
ffff800000807d9c:	e6 21                	out    0x21,al
ffff800000807d9e:	e8 f2 ff ff ff       	call   ffff800000807d95 <io_delay>
ffff800000807da3:	b0 af                	mov    al,0xaf
ffff800000807da5:	e6 a1                	out    0xa1,al
ffff800000807da7:	e8 e9 ff ff ff       	call   ffff800000807d95 <io_delay>
ffff800000807dac:	48 b8 00 70 10 00 00 	movabs rax,0xffff800000107000
ffff800000807db3:	80 ff ff 
ffff800000807db6:	0f 01 18             	lidt   [rax]
ffff800000807db9:	90                   	nop
ffff800000807dba:	90                   	nop
ffff800000807dbb:	90                   	nop
ffff800000807dbc:	90                   	nop
ffff800000807dbd:	c3                   	ret    

ffff800000807dbe <report_back_trace_of_err>:
report_back_trace_of_err():
ffff800000807dbe:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff800000807dc3:	50                   	push   rax
ffff800000807dc4:	83 c4 08             	add    esp,0x8
ffff800000807dc7:	c3                   	ret    

ffff800000807dc8 <bt_msg>:
bt_msg():
ffff800000807dc8:	65 72 72             	gs jb  ffff800000807e3d <fill_desc+0x3a>
ffff800000807dcb:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffff800000807dcc:	72 20                	jb     ffff800000807dee <init_gdt+0x11>
ffff800000807dce:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffff800000807dcf:	63 63 75             	movsxd esp,DWORD PTR [rbx+0x75]
ffff800000807dd2:	72 73                	jb     ffff800000807e47 <fill_desc+0x44>
ffff800000807dd4:	20 61 74             	and    BYTE PTR [rcx+0x74],ah
ffff800000807dd7:	3a 25 78 5c 6e 00    	cmp    ah,BYTE PTR [rip+0x6e5c78]        # ffff800000eeda55 <_knl_end+0x2eda55>

ffff800000807ddd <init_gdt>:
init_gdt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:9
#include "proc.h"

descriptor *gdt=GDT_ADDR+KNL_BASE;
extern char *gdtptr;
int init_gdt()
{
ffff800000807ddd:	f3 0f 1e fa          	endbr64 
ffff800000807de1:	55                   	push   rbp
ffff800000807de2:	48 89 e5             	mov    rbp,rsp
ffff800000807de5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807de5 <init_gdt+0x8>
ffff800000807dec:	49 bb eb 5c 11 00 00 	movabs r11,0x115ceb
ffff800000807df3:	00 00 00 
ffff800000807df6:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:11
//    fill_desc(0x108000,108,SEG_SYS_TSS|SEG_PRESENT,4);
    asm volatile("mov $0x48,%ax\r\n"
ffff800000807df9:	66 b8 48 00          	mov    ax,0x48
ffff800000807dfd:	0f 00 d8             	ltr    ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:13
                 "ltr %ax");  
}
ffff800000807e00:	90                   	nop
ffff800000807e01:	5d                   	pop    rbp
ffff800000807e02:	c3                   	ret    

ffff800000807e03 <fill_desc>:
fill_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:15
void fill_desc(u64 base, u64 limit, u16 attr, u32 index)
{
ffff800000807e03:	f3 0f 1e fa          	endbr64 
ffff800000807e07:	55                   	push   rbp
ffff800000807e08:	48 89 e5             	mov    rbp,rsp
ffff800000807e0b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807e0b <fill_desc+0x8>
ffff800000807e12:	49 bb c5 5c 11 00 00 	movabs r11,0x115cc5
ffff800000807e19:	00 00 00 
ffff800000807e1c:	4c 01 d8             	add    rax,r11
ffff800000807e1f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000807e23:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000807e27:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
ffff800000807e2a:	66 89 55 ec          	mov    WORD PTR [rbp-0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:16
    gdt[index].base_12=base&0xffff;
ffff800000807e2e:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000807e35:	ff ff ff 
ffff800000807e38:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807e3c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807e3f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807e42:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807e46:	48 01 ca             	add    rdx,rcx
ffff800000807e49:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff800000807e4d:	66 89 4a 02          	mov    WORD PTR [rdx+0x2],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:17
    gdt[index].base_3=(base>>16)&0xff;
ffff800000807e51:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000807e55:	48 89 d6             	mov    rsi,rdx
ffff800000807e58:	48 c1 ee 10          	shr    rsi,0x10
ffff800000807e5c:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000807e63:	ff ff ff 
ffff800000807e66:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807e6a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807e6d:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807e70:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807e74:	48 01 ca             	add    rdx,rcx
ffff800000807e77:	89 f1                	mov    ecx,esi
ffff800000807e79:	88 4a 04             	mov    BYTE PTR [rdx+0x4],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:18
    gdt[index].base_4=(base>>24)&0xff;
ffff800000807e7c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000807e80:	48 89 d6             	mov    rsi,rdx
ffff800000807e83:	48 c1 ee 18          	shr    rsi,0x18
ffff800000807e87:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000807e8e:	ff ff ff 
ffff800000807e91:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807e95:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807e98:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807e9b:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807e9f:	48 01 ca             	add    rdx,rcx
ffff800000807ea2:	89 f1                	mov    ecx,esi
ffff800000807ea4:	88 4a 07             	mov    BYTE PTR [rdx+0x7],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:19
    gdt[index].base_5678=(base>>32)&0xffffffff;
ffff800000807ea7:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000807eab:	48 89 d1             	mov    rcx,rdx
ffff800000807eae:	48 c1 e9 20          	shr    rcx,0x20
ffff800000807eb2:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000807eb9:	ff ff ff 
ffff800000807ebc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807ec0:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000807ec3:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807ec6:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807eca:	48 01 f2             	add    rdx,rsi
ffff800000807ecd:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:20
    gdt[index].limit_lo16=limit&0xffff;
ffff800000807ed0:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000807ed7:	ff ff ff 
ffff800000807eda:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807ede:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807ee1:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807ee4:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807ee8:	48 01 ca             	add    rdx,rcx
ffff800000807eeb:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000807eef:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:21
    gdt[index].attr=attr|((limit>>8)&0xf0);
ffff800000807ef2:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000807ef6:	48 c1 ea 08          	shr    rdx,0x8
ffff800000807efa:	89 d1                	mov    ecx,edx
ffff800000807efc:	66 81 e1 f0 00       	and    cx,0xf0
ffff800000807f01:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000807f08:	ff ff ff 
ffff800000807f0b:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807f0f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807f12:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807f15:	48 c1 e0 04          	shl    rax,0x4
ffff800000807f19:	48 01 c2             	add    rdx,rax
ffff800000807f1c:	89 c8                	mov    eax,ecx
ffff800000807f1e:	66 0b 45 ec          	or     ax,WORD PTR [rbp-0x14]
ffff800000807f22:	66 89 42 05          	mov    WORD PTR [rdx+0x5],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:23

}
ffff800000807f26:	90                   	nop
ffff800000807f27:	5d                   	pop    rbp
ffff800000807f28:	c3                   	ret    

ffff800000807f29 <fill_gate>:
fill_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:26

void fill_gate(u32 index,u32 offset,u16 selector,u16 attr)
{
ffff800000807f29:	f3 0f 1e fa          	endbr64 
ffff800000807f2d:	55                   	push   rbp
ffff800000807f2e:	48 89 e5             	mov    rbp,rsp
ffff800000807f31:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807f31 <fill_gate+0x8>
ffff800000807f38:	49 bb 9f 5b 11 00 00 	movabs r11,0x115b9f
ffff800000807f3f:	00 00 00 
ffff800000807f42:	4c 01 d8             	add    rax,r11
ffff800000807f45:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000807f48:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffff800000807f4b:	89 d6                	mov    esi,edx
ffff800000807f4d:	89 ca                	mov    edx,ecx
ffff800000807f4f:	89 f1                	mov    ecx,esi
ffff800000807f51:	66 89 4d e4          	mov    WORD PTR [rbp-0x1c],cx
ffff800000807f55:	66 89 55 e0          	mov    WORD PTR [rbp-0x20],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:27
    gate* ptr=gdt;
ffff800000807f59:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000807f60:	ff ff ff 
ffff800000807f63:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807f67:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807f6a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:28
    ptr[index].offset_low=offset&0xffff;
ffff800000807f6e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807f71:	48 c1 e0 04          	shl    rax,0x4
ffff800000807f75:	48 89 c2             	mov    rdx,rax
ffff800000807f78:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807f7c:	48 01 d0             	add    rax,rdx
ffff800000807f7f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807f82:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:29
    ptr[index].offset_high=(offset>>16)&0xffff;
ffff800000807f85:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807f88:	48 c1 e0 04          	shl    rax,0x4
ffff800000807f8c:	48 89 c2             	mov    rdx,rax
ffff800000807f8f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807f93:	48 01 d0             	add    rax,rdx
ffff800000807f96:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807f99:	c1 ea 10             	shr    edx,0x10
ffff800000807f9c:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:30
    ptr[index].selector=selector;
ffff800000807f9f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807fa2:	48 c1 e0 04          	shl    rax,0x4
ffff800000807fa6:	48 89 c2             	mov    rdx,rax
ffff800000807fa9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807fad:	48 01 c2             	add    rdx,rax
ffff800000807fb0:	0f b7 45 e4          	movzx  eax,WORD PTR [rbp-0x1c]
ffff800000807fb4:	66 89 42 02          	mov    WORD PTR [rdx+0x2],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:31
    ptr[index].attr=attr;
ffff800000807fb8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807fbb:	48 c1 e0 04          	shl    rax,0x4
ffff800000807fbf:	48 89 c2             	mov    rdx,rax
ffff800000807fc2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807fc6:	48 01 c2             	add    rdx,rax
ffff800000807fc9:	0f b7 45 e0          	movzx  eax,WORD PTR [rbp-0x20]
ffff800000807fcd:	66 89 42 04          	mov    WORD PTR [rdx+0x4],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:32
}
ffff800000807fd1:	90                   	nop
ffff800000807fd2:	5d                   	pop    rbp
ffff800000807fd3:	c3                   	ret    

ffff800000807fd4 <fill_ldt_desc>:
fill_ldt_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:35

void fill_ldt_desc(u32 base, u32 limit,u16 attr,descriptor *desc)
{
ffff800000807fd4:	f3 0f 1e fa          	endbr64 
ffff800000807fd8:	55                   	push   rbp
ffff800000807fd9:	48 89 e5             	mov    rbp,rsp
ffff800000807fdc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807fdc <fill_ldt_desc+0x8>
ffff800000807fe3:	49 bb f4 5a 11 00 00 	movabs r11,0x115af4
ffff800000807fea:	00 00 00 
ffff800000807fed:	4c 01 d8             	add    rax,r11
ffff800000807ff0:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff800000807ff3:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff800000807ff6:	89 d0                	mov    eax,edx
ffff800000807ff8:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffff800000807ffc:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:41
//    desc->base_lo16=base&0xffff;
//    desc->base_mid8=(base>>16)&0xff;
//    desc->base_hi8=(base>>24)&0xff;
//    desc->limit_lo16=limit&0xffff;
//    desc->attr=attr|(limit>>16&0xf)<<8;
ffff800000808000:	90                   	nop
ffff800000808001:	5d                   	pop    rbp
ffff800000808002:	c3                   	ret    
ffff800000808003:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff80000080800a:	00 00 00 
ffff80000080800d:	0f 1f 00             	nop    DWORD PTR [rax]

ffff800000808010 <fill_desc>:
fill_desc():
ffff800000808010:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff800000808015:	67 8b 5c 24 08       	mov    ebx,DWORD PTR [esp+0x8]
ffff80000080801a:	67 8b 4c 24 0c       	mov    ecx,DWORD PTR [esp+0xc]
ffff80000080801f:	67 8b 54 24 10       	mov    edx,DWORD PTR [esp+0x10]
ffff800000808024:	be 00 60 00 00       	mov    esi,0x6000
ffff800000808029:	c1 e2 03             	shl    edx,0x3
ffff80000080802c:	01 d6                	add    esi,edx
ffff80000080802e:	66 67 89 1e          	mov    WORD PTR [esi],bx
ffff800000808032:	66 67 89 46 02       	mov    WORD PTR [esi+0x2],ax
ffff800000808037:	c1 e8 10             	shr    eax,0x10
ffff80000080803a:	67 88 46 04          	mov    BYTE PTR [esi+0x4],al
ffff80000080803e:	c1 eb 10             	shr    ebx,0x10
ffff800000808041:	67 88 5e 06          	mov    BYTE PTR [esi+0x6],bl
ffff800000808045:	67 88 66 07          	mov    BYTE PTR [esi+0x7],ah
ffff800000808049:	67 09 4e 05          	or     DWORD PTR [esi+0x5],ecx
ffff80000080804d:	c3                   	ret    

ffff80000080804e <clock_c>:
clock_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:9
#include <devman.h>
#include <disk.h>
extern int manage_proc_lock;
extern int cur_proc;
extern struct process *task;
void clock_c(){
ffff80000080804e:	f3 0f 1e fa          	endbr64 
ffff800000808052:	55                   	push   rbp
ffff800000808053:	48 89 e5             	mov    rbp,rsp
ffff800000808056:	41 57                	push   r15
ffff800000808058:	48 83 ec 08          	sub    rsp,0x8
ffff80000080805c:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080805c <clock_c+0xe>
ffff800000808063:	49 bb 74 5a 11 00 00 	movabs r11,0x115a74
ffff80000080806a:	00 00 00 
ffff80000080806d:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:11
    //refresh_wnds();
    if(!manage_proc_lock)
ffff800000808070:	48 b8 38 fd ff ff ff 	movabs rax,0xfffffffffffffd38
ffff800000808077:	ff ff ff 
ffff80000080807a:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080807e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808080:	85 c0                	test   eax,eax
ffff800000808082:	75 17                	jne    ffff80000080809b <clock_c+0x4d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:13
    {
        manage_proc();
ffff800000808084:	49 89 d7             	mov    r15,rdx
ffff800000808087:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080808c:	48 b9 8b 73 ee ff ff 	movabs rcx,0xffffffffffee738b
ffff800000808093:	ff ff ff 
ffff800000808096:	48 01 d1             	add    rcx,rdx
ffff800000808099:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:16
    }
    //puts("1 disk req executed.");
ffff80000080809b:	90                   	nop
ffff80000080809c:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008080a0:	c9                   	leave  
ffff8000008080a1:	c3                   	ret    
ffff8000008080a2:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff8000008080a9:	00 00 00 
ffff8000008080ac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffff8000008080b0 <clock>:
clock():
ffff8000008080b0:	50                   	push   rax
ffff8000008080b1:	53                   	push   rbx
ffff8000008080b2:	51                   	push   rcx
ffff8000008080b3:	52                   	push   rdx
ffff8000008080b4:	57                   	push   rdi
ffff8000008080b5:	56                   	push   rsi
ffff8000008080b6:	41 50                	push   r8
ffff8000008080b8:	41 51                	push   r9
ffff8000008080ba:	41 52                	push   r10
ffff8000008080bc:	41 53                	push   r11
ffff8000008080be:	41 54                	push   r12
ffff8000008080c0:	41 55                	push   r13
ffff8000008080c2:	41 56                	push   r14
ffff8000008080c4:	41 57                	push   r15
ffff8000008080c6:	e8 44 cd ff ff       	call   ffff800000804e0f <save_rsp>
ffff8000008080cb:	66 8c c0             	mov    ax,es
ffff8000008080ce:	50                   	push   rax
ffff8000008080cf:	66 8c d8             	mov    ax,ds
ffff8000008080d2:	50                   	push   rax
ffff8000008080d3:	66 b8 10 00          	mov    ax,0x10
ffff8000008080d7:	8e c0                	mov    es,eax
ffff8000008080d9:	8e d8                	mov    ds,eax

ffff8000008080db <clock.normal_part>:
clock.normal_part():
ffff8000008080db:	b0 20                	mov    al,0x20
ffff8000008080dd:	e6 a0                	out    0xa0,al
ffff8000008080df:	e6 20                	out    0x20,al
ffff8000008080e1:	e8 68 ff ff ff       	call   ffff80000080804e <clock_c>

ffff8000008080e6 <clock_ret>:
clock_ret():
ffff8000008080e6:	58                   	pop    rax
ffff8000008080e7:	8e d8                	mov    ds,eax
ffff8000008080e9:	58                   	pop    rax
ffff8000008080ea:	8e c0                	mov    es,eax
ffff8000008080ec:	41 5f                	pop    r15
ffff8000008080ee:	41 5e                	pop    r14
ffff8000008080f0:	41 5d                	pop    r13
ffff8000008080f2:	41 5c                	pop    r12
ffff8000008080f4:	41 5b                	pop    r11
ffff8000008080f6:	41 5a                	pop    r10
ffff8000008080f8:	41 59                	pop    r9
ffff8000008080fa:	41 58                	pop    r8
ffff8000008080fc:	5e                   	pop    rsi
ffff8000008080fd:	5f                   	pop    rdi
ffff8000008080fe:	5a                   	pop    rdx
ffff8000008080ff:	59                   	pop    rcx
ffff800000808100:	5b                   	pop    rbx
ffff800000808101:	58                   	pop    rax
ffff800000808102:	48 cf                	iretq  

ffff800000808104 <execute>:
execute():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:118
    return ind;
}
*/

int execute(char *path, char **argv)
{
ffff800000808104:	f3 0f 1e fa          	endbr64 
ffff800000808108:	55                   	push   rbp
ffff800000808109:	48 89 e5             	mov    rbp,rsp
ffff80000080810c:	41 57                	push   r15
ffff80000080810e:	53                   	push   rbx
ffff80000080810f:	48 83 ec 20          	sub    rsp,0x20
ffff800000808113:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808113 <execute+0xf>
ffff80000080811a:	49 bb bd 59 11 00 00 	movabs r11,0x1159bd
ffff800000808121:	00 00 00 
ffff800000808124:	4c 01 db             	add    rbx,r11
ffff800000808127:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080812b:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:121
    //尚未切换到目标进程
    //syscall(SYSCALL_REG_PROC, load_pe,0,0,0,0);
    int fno=-1,cwd_fno=-1;
ffff80000080812f:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [rbp-0x1c],0xffffffff
ffff800000808136:	c7 45 e0 ff ff ff ff 	mov    DWORD PTR [rbp-0x20],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:122
    if((fno=sys_open(path, O_EXEC)) <0)return -1;
ffff80000080813d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808141:	be 00 10 00 00       	mov    esi,0x1000
ffff800000808146:	48 89 c7             	mov    rdi,rax
ffff800000808149:	49 89 df             	mov    r15,rbx
ffff80000080814c:	48 b8 e3 dc ee ff ff 	movabs rax,0xffffffffffeedce3
ffff800000808153:	ff ff ff 
ffff800000808156:	48 01 d8             	add    rax,rbx
ffff800000808159:	ff d0                	call   rax
ffff80000080815b:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffff80000080815e:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff800000808162:	79 0a                	jns    ffff80000080816e <execute+0x6a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:122 (discriminator 1)
ffff800000808164:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000808169:	e9 81 00 00 00       	jmp    ffff8000008081ef <execute+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:124
    //
    char *p=path;
ffff80000080816e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808172:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125
    for(;*p!='\0';p++);
ffff800000808176:	eb 05                	jmp    ffff80000080817d <execute+0x79>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125 (discriminator 2)
ffff800000808178:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125 (discriminator 1)
ffff80000080817d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808181:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000808184:	84 c0                	test   al,al
ffff800000808186:	75 f0                	jne    ffff800000808178 <execute+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126
    for(;*p!='/'&&p>path;p--);
ffff800000808188:	eb 05                	jmp    ffff80000080818f <execute+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 3)
ffff80000080818a:	48 83 6d e8 01       	sub    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 1)
ffff80000080818f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808193:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000808196:	3c 2f                	cmp    al,0x2f
ffff800000808198:	74 0a                	je     ffff8000008081a4 <execute+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 2)
ffff80000080819a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080819e:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
ffff8000008081a2:	77 e6                	ja     ffff80000080818a <execute+0x86>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:127
    if(p>path)
ffff8000008081a4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008081a8:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
ffff8000008081ac:	76 3c                	jbe    ffff8000008081ea <execute+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:129
    {
        *p='\0';
ffff8000008081ae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008081b2:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:130
        if((cwd_fno=sys_open(path, O_DIRECTORY)) <0)return -1;
ffff8000008081b5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008081b9:	be 00 40 00 00       	mov    esi,0x4000
ffff8000008081be:	48 89 c7             	mov    rdi,rax
ffff8000008081c1:	49 89 df             	mov    r15,rbx
ffff8000008081c4:	48 b8 e3 dc ee ff ff 	movabs rax,0xffffffffffeedce3
ffff8000008081cb:	ff ff ff 
ffff8000008081ce:	48 01 d8             	add    rax,rbx
ffff8000008081d1:	ff d0                	call   rax
ffff8000008081d3:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffff8000008081d6:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
ffff8000008081da:	79 07                	jns    ffff8000008081e3 <execute+0xdf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:130 (discriminator 1)
ffff8000008081dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008081e1:	eb 0c                	jmp    ffff8000008081ef <execute+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:131
        *p='/';
ffff8000008081e3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008081e7:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:136
    }
    // extern struct file opened[];
    extern struct process task[];
    // int pi= reg_proc(proc_start, &opened[cwd_fno], &opened[fno]);
    return 0;
ffff8000008081ea:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:137
}
ffff8000008081ef:	48 83 c4 20          	add    rsp,0x20
ffff8000008081f3:	5b                   	pop    rbx
ffff8000008081f4:	41 5f                	pop    r15
ffff8000008081f6:	5d                   	pop    rbp
ffff8000008081f7:	c3                   	ret    

ffff8000008081f8 <sys_execve>:
sys_execve():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:139

int sys_execve(char *path, int argc, char **argv) {
ffff8000008081f8:	f3 0f 1e fa          	endbr64 
ffff8000008081fc:	55                   	push   rbp
ffff8000008081fd:	48 89 e5             	mov    rbp,rsp
ffff800000808200:	41 57                	push   r15
ffff800000808202:	53                   	push   rbx
ffff800000808203:	48 83 ec 60          	sub    rsp,0x60
ffff800000808207:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808207 <sys_execve+0xf>
ffff80000080820e:	49 bb c9 58 11 00 00 	movabs r11,0x1158c9
ffff800000808215:	00 00 00 
ffff800000808218:	4c 01 db             	add    rbx,r11
ffff80000080821b:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffff80000080821f:	89 75 a4             	mov    DWORD PTR [rbp-0x5c],esi
ffff800000808222:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:140
    int fno=-1,cwd_fno=-1;
ffff800000808226:	c7 45 d0 ff ff ff ff 	mov    DWORD PTR [rbp-0x30],0xffffffff
ffff80000080822d:	c7 45 cc ff ff ff ff 	mov    DWORD PTR [rbp-0x34],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:141
    if((fno=sys_open(path, O_EXEC)) <0)return -ENOENT;
ffff800000808234:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808238:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080823d:	48 89 c7             	mov    rdi,rax
ffff800000808240:	49 89 df             	mov    r15,rbx
ffff800000808243:	48 b8 e3 dc ee ff ff 	movabs rax,0xffffffffffeedce3
ffff80000080824a:	ff ff ff 
ffff80000080824d:	48 01 d8             	add    rax,rbx
ffff800000808250:	ff d0                	call   rax
ffff800000808252:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
ffff800000808255:	83 7d d0 00          	cmp    DWORD PTR [rbp-0x30],0x0
ffff800000808259:	79 0a                	jns    ffff800000808265 <sys_execve+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:141 (discriminator 1)
ffff80000080825b:	b8 d3 ff ff ff       	mov    eax,0xffffffd3
ffff800000808260:	e9 99 02 00 00       	jmp    ffff8000008084fe <sys_execve+0x306>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:145

    //重新设置进程数据
    //清空原来的页表
    release_mmap(current);
ffff800000808265:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080826c:	ff ff ff 
ffff80000080826f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808273:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808276:	48 89 c7             	mov    rdi,rax
ffff800000808279:	49 89 df             	mov    r15,rbx
ffff80000080827c:	48 b8 14 94 ee ff ff 	movabs rax,0xffffffffffee9414
ffff800000808283:	ff ff ff 
ffff800000808286:	48 01 d8             	add    rax,rbx
ffff800000808289:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:149
    // current->regs.rsp=STACK_TOP;//清空栈
    extern TSS* tss;

    current->exef=current->openf[fno];//改变执行文件
ffff80000080828b:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000808292:	ff ff ff 
ffff800000808295:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808299:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080829c:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008082a3:	ff ff ff 
ffff8000008082a6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008082aa:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008082ad:	8b 4d d0             	mov    ecx,DWORD PTR [rbp-0x30]
ffff8000008082b0:	48 63 c9             	movsxd rcx,ecx
ffff8000008082b3:	48 83 c1 1e          	add    rcx,0x1e
ffff8000008082b7:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff8000008082bc:	48 89 90 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:150
    off_t entry= load_elf(current->exef);
ffff8000008082c3:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008082ca:	ff ff ff 
ffff8000008082cd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008082d1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008082d4:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
ffff8000008082db:	48 89 c7             	mov    rdi,rax
ffff8000008082de:	49 89 df             	mov    r15,rbx
ffff8000008082e1:	48 b8 91 b5 ee ff ff 	movabs rax,0xffffffffffeeb591
ffff8000008082e8:	ff ff ff 
ffff8000008082eb:	48 01 d8             	add    rax,rbx
ffff8000008082ee:	ff d0                	call   rax
ffff8000008082f0:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:151
    if(entry==-1)
ffff8000008082f3:	83 7d c8 ff          	cmp    DWORD PTR [rbp-0x38],0xffffffff
ffff8000008082f7:	75 4d                	jne    ffff800000808346 <sys_execve+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:153
    {
        comprintf("failed execve, errcode:%d\n",current->regs.errcode);
ffff8000008082f9:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000808300:	ff ff ff 
ffff800000808303:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808307:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080830a:	48 8b 80 2c 03 00 00 	mov    rax,QWORD PTR [rax+0x32c]
ffff800000808311:	48 89 c6             	mov    rsi,rax
ffff800000808314:	48 b8 d0 d6 ff ff ff 	movabs rax,0xffffffffffffd6d0
ffff80000080831b:	ff ff ff 
ffff80000080831e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000808322:	48 89 c7             	mov    rdi,rax
ffff800000808325:	49 89 df             	mov    r15,rbx
ffff800000808328:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080832d:	48 ba 23 4c ef ff ff 	movabs rdx,0xffffffffffef4c23
ffff800000808334:	ff ff ff 
ffff800000808337:	48 01 da             	add    rdx,rbx
ffff80000080833a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:154
        return -1;
ffff80000080833c:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000808341:	e9 b8 01 00 00       	jmp    ffff8000008084fe <sys_execve+0x306>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:156
    }
    if(sys_close(fno)<0)return -1;
ffff800000808346:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000808349:	89 c7                	mov    edi,eax
ffff80000080834b:	49 89 df             	mov    r15,rbx
ffff80000080834e:	48 b8 83 e3 ee ff ff 	movabs rax,0xffffffffffeee383
ffff800000808355:	ff ff ff 
ffff800000808358:	48 01 d8             	add    rax,rbx
ffff80000080835b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:159

    //sysret直接返回到新程序的main
    void *retp= (void *) entry;
ffff80000080835d:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff800000808360:	48 98                	cdqe   
ffff800000808362:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:160
    stack_store_regs *rs= (stack_store_regs *) (tss->ists[0] - sizeof(stack_store_regs));
ffff800000808366:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff80000080836d:	ff ff ff 
ffff800000808370:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808374:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808377:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
ffff80000080837b:	48 2d a8 00 00 00    	sub    rax,0xa8
ffff800000808381:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:161
    rs->r10= (unsigned long) retp;//返回地址已经xchg到r10
ffff800000808385:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000808389:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080838d:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:163
    //第二个参数argv需要把内容从内核空间拷贝到用户堆里面
    size_t arglen=0;
ffff800000808391:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000808398:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:164
    for(int i=0;i<argc;i++){
ffff800000808399:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff8000008083a0:	eb 39                	jmp    ffff8000008083db <sys_execve+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:165 (discriminator 3)
        arglen+= strlen(argv[i])+1;
ffff8000008083a2:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008083a5:	48 98                	cdqe   
ffff8000008083a7:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008083ae:	00 
ffff8000008083af:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008083b3:	48 01 d0             	add    rax,rdx
ffff8000008083b6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008083b9:	48 89 c7             	mov    rdi,rax
ffff8000008083bc:	49 89 df             	mov    r15,rbx
ffff8000008083bf:	48 b8 95 54 ef ff ff 	movabs rax,0xffffffffffef5495
ffff8000008083c6:	ff ff ff 
ffff8000008083c9:	48 01 d8             	add    rax,rbx
ffff8000008083cc:	ff d0                	call   rax
ffff8000008083ce:	83 c0 01             	add    eax,0x1
ffff8000008083d1:	48 98                	cdqe   
ffff8000008083d3:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:164 (discriminator 3)
    for(int i=0;i<argc;i++){
ffff8000008083d7:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:164 (discriminator 1)
ffff8000008083db:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008083de:	3b 45 a4             	cmp    eax,DWORD PTR [rbp-0x5c]
ffff8000008083e1:	7c bf                	jl     ffff8000008083a2 <sys_execve+0x1aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:167
    }
    char* p= sys_malloc(arglen),pp=p;
ffff8000008083e3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008083e7:	48 89 c7             	mov    rdi,rax
ffff8000008083ea:	49 89 df             	mov    r15,rbx
ffff8000008083ed:	48 b8 65 83 ee ff ff 	movabs rax,0xffffffffffee8365
ffff8000008083f4:	ff ff ff 
ffff8000008083f7:	48 01 d8             	add    rax,rbx
ffff8000008083fa:	ff d0                	call   rax
ffff8000008083fc:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffff800000808400:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808404:	88 45 b7             	mov    BYTE PTR [rbp-0x49],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:168
    for(int i=0;i<argc;i++){
ffff800000808407:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff80000080840e:	eb 6c                	jmp    ffff80000080847c <sys_execve+0x284>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:169 (discriminator 3)
        strcpy(p,argv[i]);
ffff800000808410:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000808413:	48 98                	cdqe   
ffff800000808415:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080841c:	00 
ffff80000080841d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000808421:	48 01 d0             	add    rax,rdx
ffff800000808424:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808427:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080842b:	48 89 d6             	mov    rsi,rdx
ffff80000080842e:	48 89 c7             	mov    rdi,rax
ffff800000808431:	49 89 df             	mov    r15,rbx
ffff800000808434:	48 b8 c8 51 ef ff ff 	movabs rax,0xffffffffffef51c8
ffff80000080843b:	ff ff ff 
ffff80000080843e:	48 01 d8             	add    rax,rbx
ffff800000808441:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:170 (discriminator 3)
        p+=strlen(argv[i])+1;
ffff800000808443:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000808446:	48 98                	cdqe   
ffff800000808448:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080844f:	00 
ffff800000808450:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000808454:	48 01 d0             	add    rax,rdx
ffff800000808457:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080845a:	48 89 c7             	mov    rdi,rax
ffff80000080845d:	49 89 df             	mov    r15,rbx
ffff800000808460:	48 b8 95 54 ef ff ff 	movabs rax,0xffffffffffef5495
ffff800000808467:	ff ff ff 
ffff80000080846a:	48 01 d8             	add    rax,rbx
ffff80000080846d:	ff d0                	call   rax
ffff80000080846f:	83 c0 01             	add    eax,0x1
ffff800000808472:	48 98                	cdqe   
ffff800000808474:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:168 (discriminator 3)
    for(int i=0;i<argc;i++){
ffff800000808478:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:168 (discriminator 1)
ffff80000080847c:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080847f:	3b 45 a4             	cmp    eax,DWORD PTR [rbp-0x5c]
ffff800000808482:	7c 8c                	jl     ffff800000808410 <sys_execve+0x218>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:174
    }
    
    //第一个参数argc
    if(current->dl){
ffff800000808484:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080848b:	ff ff ff 
ffff80000080848e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808492:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808495:	8b 80 54 03 00 00    	mov    eax,DWORD PTR [rax+0x354]
ffff80000080849b:	85 c0                	test   eax,eax
ffff80000080849d:	74 3f                	je     ffff8000008084de <sys_execve+0x2e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:175
        rs->rsi=current->dl;
ffff80000080849f:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008084a6:	ff ff ff 
ffff8000008084a9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008084ad:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008084b0:	8b 80 54 03 00 00    	mov    eax,DWORD PTR [rax+0x354]
ffff8000008084b6:	48 63 d0             	movsxd rdx,eax
ffff8000008084b9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008084bd:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:176
        rs->rdi=argc;
ffff8000008084c1:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff8000008084c4:	48 63 d0             	movsxd rdx,eax
ffff8000008084c7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008084cb:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:177
        rs->rdx=pp;
ffff8000008084cf:	48 0f be 55 b7       	movsx  rdx,BYTE PTR [rbp-0x49]
ffff8000008084d4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008084d8:	48 89 50 60          	mov    QWORD PTR [rax+0x60],rdx
ffff8000008084dc:	eb 1b                	jmp    ffff8000008084f9 <sys_execve+0x301>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:179
    }else{
        rs->rsi=argc;
ffff8000008084de:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff8000008084e1:	48 63 d0             	movsxd rdx,eax
ffff8000008084e4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008084e8:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:180
        rs->rdi=pp;
ffff8000008084ec:	48 0f be 55 b7       	movsx  rdx,BYTE PTR [rbp-0x49]
ffff8000008084f1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008084f5:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:186
    }
    
    //以下部分是临时测试代码
//    int (*pmain)(int argc,char **argv)=(int (*)(int, char **)) entry;
//    pmain(argc, (char **) rs->rdi);
    return 0;
ffff8000008084f9:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:187
}
ffff8000008084fe:	48 83 c4 60          	add    rsp,0x60
ffff800000808502:	5b                   	pop    rbx
ffff800000808503:	41 5f                	pop    r15
ffff800000808505:	5d                   	pop    rbp
ffff800000808506:	c3                   	ret    

ffff800000808507 <exec_call>:
exec_call():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:189
int exec_call(char *path)
{
ffff800000808507:	f3 0f 1e fa          	endbr64 
ffff80000080850b:	55                   	push   rbp
ffff80000080850c:	48 89 e5             	mov    rbp,rsp
ffff80000080850f:	41 57                	push   r15
ffff800000808511:	53                   	push   rbx
ffff800000808512:	48 83 ec 20          	sub    rsp,0x20
ffff800000808516:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808516 <exec_call+0xf>
ffff80000080851d:	49 bb ba 55 11 00 00 	movabs r11,0x1155ba
ffff800000808524:	00 00 00 
ffff800000808527:	4c 01 db             	add    rbx,r11
ffff80000080852a:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:190
    int pi= execute(path, NULL);
ffff80000080852e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808532:	be 00 00 00 00       	mov    esi,0x0
ffff800000808537:	48 89 c7             	mov    rdi,rax
ffff80000080853a:	49 89 df             	mov    r15,rbx
ffff80000080853d:	48 b8 34 a6 ee ff ff 	movabs rax,0xffffffffffeea634
ffff800000808544:	ff ff ff 
ffff800000808547:	48 01 d8             	add    rax,rbx
ffff80000080854a:	ff d0                	call   rax
ffff80000080854c:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:191
    int tss= _TSS_IND(pi)*8;
ffff80000080854f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808552:	01 c0                	add    eax,eax
ffff800000808554:	83 c0 05             	add    eax,0x5
ffff800000808557:	c1 e0 03             	shl    eax,0x3
ffff80000080855a:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:194
    extern struct process task[];
    extern int cur_proc;
    switch_proc_tss(pi);
ffff80000080855d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808560:	89 c7                	mov    edi,eax
ffff800000808562:	49 89 df             	mov    r15,rbx
ffff800000808565:	48 b8 47 76 ee ff ff 	movabs rax,0xffffffffffee7647
ffff80000080856c:	ff ff ff 
ffff80000080856f:	48 01 d8             	add    rax,rbx
ffff800000808572:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:195
    while(task[pi].stat != TASK_ZOMBIE);
ffff800000808574:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:195 (discriminator 1)
ffff800000808575:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080857c:	ff ff ff 
ffff80000080857f:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000808583:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808586:	48 98                	cdqe   
ffff800000808588:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff80000080858f:	48 01 d0             	add    rax,rdx
ffff800000808592:	48 83 c0 10          	add    rax,0x10
ffff800000808596:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000808599:	83 f8 04             	cmp    eax,0x4
ffff80000080859c:	75 d7                	jne    ffff800000808575 <exec_call+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:196
    return task[pi].exit_code;
ffff80000080859e:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008085a5:	ff ff ff 
ffff8000008085a8:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff8000008085ac:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008085af:	48 98                	cdqe   
ffff8000008085b1:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff8000008085b8:	48 01 d0             	add    rax,rdx
ffff8000008085bb:	48 83 c0 20          	add    rax,0x20
ffff8000008085bf:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:197
}
ffff8000008085c2:	48 83 c4 20          	add    rsp,0x20
ffff8000008085c6:	5b                   	pop    rbx
ffff8000008085c7:	41 5f                	pop    r15
ffff8000008085c9:	5d                   	pop    rbp
ffff8000008085ca:	c3                   	ret    

ffff8000008085cb <proc_start>:
proc_start():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:199
int proc_start()
{
ffff8000008085cb:	f3 0f 1e fa          	endbr64 
ffff8000008085cf:	55                   	push   rbp
ffff8000008085d0:	48 89 e5             	mov    rbp,rsp
ffff8000008085d3:	41 57                	push   r15
ffff8000008085d5:	53                   	push   rbx
ffff8000008085d6:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008085d6 <proc_start+0xb>
ffff8000008085dd:	49 bb fa 54 11 00 00 	movabs r11,0x1154fa
ffff8000008085e4:	00 00 00 
ffff8000008085e7:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:202
    extern struct process task[];
    extern int cur_proc;
    load_pe(&task[cur_proc]);
ffff8000008085ea:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008085f1:	ff ff ff 
ffff8000008085f4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008085f8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008085fa:	48 98                	cdqe   
ffff8000008085fc:	48 69 d0 58 03 00 00 	imul   rdx,rax,0x358
ffff800000808603:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000080860a:	ff ff ff 
ffff80000080860d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808611:	48 01 d0             	add    rax,rdx
ffff800000808614:	48 89 c7             	mov    rdi,rax
ffff800000808617:	49 89 df             	mov    r15,rbx
ffff80000080861a:	48 b8 76 ab ee ff ff 	movabs rax,0xffffffffffeeab76
ffff800000808621:	ff ff ff 
ffff800000808624:	48 01 d8             	add    rax,rbx
ffff800000808627:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:204
    //释放进程资源
    sys_exit(0);
ffff800000808629:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080862e:	49 89 df             	mov    r15,rbx
ffff800000808631:	48 b8 07 80 ee ff ff 	movabs rax,0xffffffffffee8007
ffff800000808638:	ff ff ff 
ffff80000080863b:	48 01 d8             	add    rax,rbx
ffff80000080863e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:205
}
ffff800000808640:	90                   	nop
ffff800000808641:	5b                   	pop    rbx
ffff800000808642:	41 5f                	pop    r15
ffff800000808644:	5d                   	pop    rbp
ffff800000808645:	c3                   	ret    

ffff800000808646 <load_pe>:
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:208
//在cr3切换到目标进程下的加载程序
int load_pe(struct process *proc)
{
ffff800000808646:	f3 0f 1e fa          	endbr64 
ffff80000080864a:	55                   	push   rbp
ffff80000080864b:	48 89 e5             	mov    rbp,rsp
ffff80000080864e:	41 57                	push   r15
ffff800000808650:	53                   	push   rbx
ffff800000808651:	48 81 ec 10 03 00 00 	sub    rsp,0x310
ffff800000808658:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808658 <load_pe+0x12>
ffff80000080865f:	49 bb 78 54 11 00 00 	movabs r11,0x115478
ffff800000808666:	00 00 00 
ffff800000808669:	4c 01 db             	add    rbx,r11
ffff80000080866c:	48 89 bd e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:210
    // 读取文件头
    struct file *f=proc->exef;
ffff800000808673:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
ffff80000080867a:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
ffff800000808681:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:211
    int exefno=-1;
ffff800000808685:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [rbp-0x14],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:212
    for(int i=0;i<MAX_PROC_OPENF;i++)
ffff80000080868c:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000808693:	eb 32                	jmp    ffff8000008086c7 <load_pe+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:213
        if(current->openf[i]==f)
ffff800000808695:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080869c:	ff ff ff 
ffff80000080869f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008086a3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008086a6:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008086a9:	48 63 d2             	movsxd rdx,edx
ffff8000008086ac:	48 83 c2 1e          	add    rdx,0x1e
ffff8000008086b0:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff8000008086b5:	48 39 45 88          	cmp    QWORD PTR [rbp-0x78],rax
ffff8000008086b9:	75 08                	jne    ffff8000008086c3 <load_pe+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:215
        {
            exefno=i;
ffff8000008086bb:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008086be:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:216
            break;
ffff8000008086c1:	eb 0a                	jmp    ffff8000008086cd <load_pe+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:212 (discriminator 2)
    for(int i=0;i<MAX_PROC_OPENF;i++)
ffff8000008086c3:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:212 (discriminator 1)
ffff8000008086c7:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff8000008086cb:	7e c8                	jle    ffff800000808695 <load_pe+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:218
        }
    if(exefno==-1)return ERR;
ffff8000008086cd:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff8000008086d1:	75 0a                	jne    ffff8000008086dd <load_pe+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:218 (discriminator 1)
ffff8000008086d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008086d8:	e9 64 08 00 00       	jmp    ffff800000808f41 <load_pe+0x8fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:222

    IMAGE_DOS_HEADER tdh;
    IMAGE_NT_HEADERS32 tnth;
    sys_read(exefno, &tdh, sizeof(tdh));
ffff8000008086dd:	48 8d 8d 30 fe ff ff 	lea    rcx,[rbp-0x1d0]
ffff8000008086e4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008086e7:	ba 44 00 00 00       	mov    edx,0x44
ffff8000008086ec:	48 89 ce             	mov    rsi,rcx
ffff8000008086ef:	89 c7                	mov    edi,eax
ffff8000008086f1:	49 89 df             	mov    r15,rbx
ffff8000008086f4:	48 b8 7a e4 ee ff ff 	movabs rax,0xffffffffffeee47a
ffff8000008086fb:	ff ff ff 
ffff8000008086fe:	48 01 d8             	add    rax,rbx
ffff800000808701:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:223
    sys_lseek(exefno,tdh.e_lfanew,SEEK_SET);
ffff800000808703:	48 8b 85 6c fe ff ff 	mov    rax,QWORD PTR [rbp-0x194]
ffff80000080870a:	48 89 c1             	mov    rcx,rax
ffff80000080870d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808710:	ba 00 00 00 00       	mov    edx,0x0
ffff800000808715:	48 89 ce             	mov    rsi,rcx
ffff800000808718:	89 c7                	mov    edi,eax
ffff80000080871a:	49 89 df             	mov    r15,rbx
ffff80000080871d:	48 b8 16 e6 ee ff ff 	movabs rax,0xffffffffffeee616
ffff800000808724:	ff ff ff 
ffff800000808727:	48 01 d8             	add    rax,rbx
ffff80000080872a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:224
    sys_read(exefno, &tnth, sizeof(tnth));
ffff80000080872c:	48 8d 8d 20 fd ff ff 	lea    rcx,[rbp-0x2e0]
ffff800000808733:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808736:	ba 0c 01 00 00       	mov    edx,0x10c
ffff80000080873b:	48 89 ce             	mov    rsi,rcx
ffff80000080873e:	89 c7                	mov    edi,eax
ffff800000808740:	49 89 df             	mov    r15,rbx
ffff800000808743:	48 b8 7a e4 ee ff ff 	movabs rax,0xffffffffffeee47a
ffff80000080874a:	ff ff ff 
ffff80000080874d:	48 01 d8             	add    rax,rbx
ffff800000808750:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:227

    //是否需要移动base(先不检查)
    off_t nbase=tnth.OptionalHeader.ImageBase;
ffff800000808752:	48 8b 85 54 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2ac]
ffff800000808759:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:228
    int pgn=tnth.OptionalHeader.SizeOfImage/PAGE_SIZE;
ffff80000080875c:	8b 85 74 fd ff ff    	mov    eax,DWORD PTR [rbp-0x28c]
ffff800000808762:	c1 e8 0c             	shr    eax,0xc
ffff800000808765:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:253
//        break;
//    }

    //proc->tss.eip=tnth.OptionalHeader.AddressOfEntryPoint+nbase;
    //存放文件头
    sys_lseek(exefno,0,SEEK_SET);
ffff800000808768:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080876b:	ba 00 00 00 00       	mov    edx,0x0
ffff800000808770:	be 00 00 00 00       	mov    esi,0x0
ffff800000808775:	89 c7                	mov    edi,eax
ffff800000808777:	49 89 df             	mov    r15,rbx
ffff80000080877a:	48 b8 16 e6 ee ff ff 	movabs rax,0xffffffffffeee616
ffff800000808781:	ff ff ff 
ffff800000808784:	48 01 d8             	add    rax,rbx
ffff800000808787:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:254
    sys_read(exefno, nbase, PAGE_SIZE);
ffff800000808789:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff80000080878c:	48 98                	cdqe   
ffff80000080878e:	48 89 c1             	mov    rcx,rax
ffff800000808791:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808794:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000808799:	48 89 ce             	mov    rsi,rcx
ffff80000080879c:	89 c7                	mov    edi,eax
ffff80000080879e:	49 89 df             	mov    r15,rbx
ffff8000008087a1:	48 b8 7a e4 ee ff ff 	movabs rax,0xffffffffffeee47a
ffff8000008087a8:	ff ff ff 
ffff8000008087ab:	48 01 d8             	add    rax,rbx
ffff8000008087ae:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:256
    //dos头
    PIMAGE_DOS_HEADER dosh=nbase;
ffff8000008087b0:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff8000008087b3:	48 98                	cdqe   
ffff8000008087b5:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:257
    PIMAGE_NT_HEADERS64 nth=nbase+dosh->e_lfanew;
ffff8000008087bc:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff8000008087bf:	48 63 d0             	movsxd rdx,eax
ffff8000008087c2:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008087c9:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff8000008087cd:	48 01 d0             	add    rax,rdx
ffff8000008087d0:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:258
    PIMAGE_FILE_HEADER fh=&nth->FileHeader;
ffff8000008087d7:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008087de:	48 83 c0 04          	add    rax,0x4
ffff8000008087e2:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:261
    //为新进程分配内存页
    //计算所需的页
    int prog_size=nth->OptionalHeader.SizeOfImage;
ffff8000008087e9:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008087f0:	8b 40 50             	mov    eax,DWORD PTR [rax+0x50]
ffff8000008087f3:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:262
    int page_count=prog_size/4096;
ffff8000008087f9:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
ffff8000008087ff:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff800000808805:	85 c0                	test   eax,eax
ffff800000808807:	0f 48 c2             	cmovs  eax,edx
ffff80000080880a:	c1 f8 0c             	sar    eax,0xc
ffff80000080880d:	89 85 60 ff ff ff    	mov    DWORD PTR [rbp-0xa0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:264

    off_t shell_addr=nth->OptionalHeader.AddressOfEntryPoint+nbase;
ffff800000808813:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080881a:	8b 50 28             	mov    edx,DWORD PTR [rax+0x28]
ffff80000080881d:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808820:	01 d0                	add    eax,edx
ffff800000808822:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:265
    int page_index_item_count=page_count/1024+page_count%1024==0?0:1;
ffff800000808828:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
ffff80000080882e:	8d 90 ff 03 00 00    	lea    edx,[rax+0x3ff]
ffff800000808834:	85 c0                	test   eax,eax
ffff800000808836:	0f 48 c2             	cmovs  eax,edx
ffff800000808839:	c1 f8 0a             	sar    eax,0xa
ffff80000080883c:	89 c1                	mov    ecx,eax
ffff80000080883e:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
ffff800000808844:	99                   	cdq    
ffff800000808845:	c1 ea 16             	shr    edx,0x16
ffff800000808848:	01 d0                	add    eax,edx
ffff80000080884a:	25 ff 03 00 00       	and    eax,0x3ff
ffff80000080884f:	29 d0                	sub    eax,edx
ffff800000808851:	01 c8                	add    eax,ecx
ffff800000808853:	85 c0                	test   eax,eax
ffff800000808855:	0f 95 c0             	setne  al
ffff800000808858:	0f b6 c0             	movzx  eax,al
ffff80000080885b:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:266
    int start_pgind_item=shell_addr/PAGE_INDEX_SIZE;
ffff800000808861:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
ffff800000808867:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff80000080886d:	85 c0                	test   eax,eax
ffff80000080886f:	0f 48 c2             	cmovs  eax,edx
ffff800000808872:	c1 f8 15             	sar    eax,0x15
ffff800000808875:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:269

    //sys_read sections
    PIMAGE_SECTION_HEADER psec=(u32)nth+sizeof(IMAGE_NT_HEADERS32);
ffff80000080887b:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808882:	89 c0                	mov    eax,eax
ffff800000808884:	48 05 0c 01 00 00    	add    rax,0x10c
ffff80000080888a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:271
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
    nth->FileHeader.NumberOfSections*sizeof(IMAGE_SECTION_HEADER);
ffff80000080888e:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808895:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
ffff800000808899:	0f b7 d0             	movzx  edx,ax
ffff80000080889c:	89 d0                	mov    eax,edx
ffff80000080889e:	c1 e0 02             	shl    eax,0x2
ffff8000008088a1:	01 d0                	add    eax,edx
ffff8000008088a3:	c1 e0 03             	shl    eax,0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:270
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
ffff8000008088a6:	05 50 01 00 00       	add    eax,0x150
ffff8000008088ab:	89 85 50 ff ff ff    	mov    DWORD PTR [rbp-0xb0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:272
    int align=nth->OptionalHeader.FileAlignment;
ffff8000008088b1:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008088b8:	8b 40 3c             	mov    eax,DWORD PTR [rax+0x3c]
ffff8000008088bb:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:273
    data_start=data_start%align?data_start-data_start%align+align:data_start;
ffff8000008088c1:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff8000008088c7:	99                   	cdq    
ffff8000008088c8:	f7 bd 4c ff ff ff    	idiv   DWORD PTR [rbp-0xb4]
ffff8000008088ce:	89 d0                	mov    eax,edx
ffff8000008088d0:	85 c0                	test   eax,eax
ffff8000008088d2:	74 23                	je     ffff8000008088f7 <load_pe+0x2b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:273 (discriminator 1)
ffff8000008088d4:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff8000008088da:	99                   	cdq    
ffff8000008088db:	f7 bd 4c ff ff ff    	idiv   DWORD PTR [rbp-0xb4]
ffff8000008088e1:	89 d1                	mov    ecx,edx
ffff8000008088e3:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff8000008088e9:	29 c8                	sub    eax,ecx
ffff8000008088eb:	89 c2                	mov    edx,eax
ffff8000008088ed:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
ffff8000008088f3:	01 d0                	add    eax,edx
ffff8000008088f5:	eb 06                	jmp    ffff8000008088fd <load_pe+0x2b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:273 (discriminator 2)
ffff8000008088f7:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:273 (discriminator 4)
ffff8000008088fd:	89 85 50 ff ff ff    	mov    DWORD PTR [rbp-0xb0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:274 (discriminator 4)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
ffff800000808903:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080890a:	e9 83 00 00 00       	jmp    ffff800000808992 <load_pe+0x34c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:276
    {
        int disca=psec->Characteristics&IMAGE_SCN_MEM_DISCARDABLE;
ffff80000080890f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000808913:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff800000808916:	25 00 00 00 02       	and    eax,0x2000000
ffff80000080891b:	89 85 b8 fe ff ff    	mov    DWORD PTR [rbp-0x148],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:277
        if(disca)
ffff800000808921:	83 bd b8 fe ff ff 00 	cmp    DWORD PTR [rbp-0x148],0x0
ffff800000808928:	75 5e                	jne    ffff800000808988 <load_pe+0x342>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:280
            continue;
        //直接读，缺页内核解决
        sys_lseek(exefno,psec->PointerToRawData,SEEK_SET);
ffff80000080892a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080892e:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff800000808931:	89 c1                	mov    ecx,eax
ffff800000808933:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808936:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080893b:	48 89 ce             	mov    rsi,rcx
ffff80000080893e:	89 c7                	mov    edi,eax
ffff800000808940:	49 89 df             	mov    r15,rbx
ffff800000808943:	48 b8 16 e6 ee ff ff 	movabs rax,0xffffffffffeee616
ffff80000080894a:	ff ff ff 
ffff80000080894d:	48 01 d8             	add    rax,rbx
ffff800000808950:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:281
        sys_read(exefno, psec->VirtualAddress + nbase,  psec->SizeOfRawData);
ffff800000808952:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000808956:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000808959:	89 c2                	mov    edx,eax
ffff80000080895b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080895f:	8b 48 0c             	mov    ecx,DWORD PTR [rax+0xc]
ffff800000808962:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808965:	01 c8                	add    eax,ecx
ffff800000808967:	89 c0                	mov    eax,eax
ffff800000808969:	48 89 c1             	mov    rcx,rax
ffff80000080896c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080896f:	48 89 ce             	mov    rsi,rcx
ffff800000808972:	89 c7                	mov    edi,eax
ffff800000808974:	49 89 df             	mov    r15,rbx
ffff800000808977:	48 b8 7a e4 ee ff ff 	movabs rax,0xffffffffffeee47a
ffff80000080897e:	ff ff ff 
ffff800000808981:	48 01 d8             	add    rax,rbx
ffff800000808984:	ff d0                	call   rax
ffff800000808986:	eb 01                	jmp    ffff800000808989 <load_pe+0x343>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:278
            continue;
ffff800000808988:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:274 (discriminator 2)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
ffff800000808989:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
ffff80000080898d:	48 83 45 e0 28       	add    QWORD PTR [rbp-0x20],0x28
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:274 (discriminator 1)
ffff800000808992:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808999:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
ffff80000080899d:	0f b7 c0             	movzx  eax,ax
ffff8000008089a0:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff8000008089a3:	0f 8c 66 ff ff ff    	jl     ffff80000080890f <load_pe+0x2c9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:286

    }

    //通过导入表加载需要的dll
    PIMAGE_DATA_DIRECTORY impd=&nth->OptionalHeader.DataDirectory[1];
ffff8000008089a9:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008089b0:	48 05 90 00 00 00    	add    rax,0x90
ffff8000008089b6:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:287
    if(impd->Size>0)
ffff8000008089bd:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff8000008089c4:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008089c7:	85 c0                	test   eax,eax
ffff8000008089c9:	0f 84 b5 02 00 00    	je     ffff800000808c84 <load_pe+0x63e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:289
    {
        int tmpi=impd->VirtualAddress+nbase;
ffff8000008089cf:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff8000008089d6:	8b 10                	mov    edx,DWORD PTR [rax]
ffff8000008089d8:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff8000008089db:	01 d0                	add    eax,edx
ffff8000008089dd:	89 85 3c ff ff ff    	mov    DWORD PTR [rbp-0xc4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:290
        PIMAGE_IMPORT_DESCRIPTOR impdes=tmpi;
ffff8000008089e3:	8b 85 3c ff ff ff    	mov    eax,DWORD PTR [rbp-0xc4]
ffff8000008089e9:	48 98                	cdqe   
ffff8000008089eb:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:292
        int dllp;
        while (impdes->Characteristics)
ffff8000008089ef:	e9 82 02 00 00       	jmp    ffff800000808c76 <load_pe+0x630>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:295
        {
            //加载dll
            char *dllname=impdes->Name+nbase;
ffff8000008089f4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008089f8:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff8000008089fb:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff8000008089fe:	01 d0                	add    eax,edx
ffff800000808a00:	89 c0                	mov    eax,eax
ffff800000808a02:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:298
            //此处应有加载dll代码
            int dlli;
            if(strcmp(dllname,"sys.dll")==0)//加载系统dll的部分由内核已经完成
ffff800000808a09:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000808a10:	48 ba eb d6 ff ff ff 	movabs rdx,0xffffffffffffd6eb
ffff800000808a17:	ff ff ff 
ffff800000808a1a:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000808a1e:	48 89 d6             	mov    rsi,rdx
ffff800000808a21:	48 89 c7             	mov    rdi,rax
ffff800000808a24:	49 89 df             	mov    r15,rbx
ffff800000808a27:	48 b8 16 54 ef ff ff 	movabs rax,0xffffffffffef5416
ffff800000808a2e:	ff ff ff 
ffff800000808a31:	48 01 d8             	add    rax,rbx
ffff800000808a34:	ff d0                	call   rax
ffff800000808a36:	85 c0                	test   eax,eax
ffff800000808a38:	75 09                	jne    ffff800000808a43 <load_pe+0x3fd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:300
            {
                dllp=0x1c00000;
ffff800000808a3a:	c7 45 cc 00 00 c0 01 	mov    DWORD PTR [rbp-0x34],0x1c00000
ffff800000808a41:	eb 3d                	jmp    ffff800000808a80 <load_pe+0x43a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:303
            }else{
                //load_pe要记录module的加载
                dlli= load_pe(proc);
ffff800000808a43:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
ffff800000808a4a:	48 89 c7             	mov    rdi,rax
ffff800000808a4d:	48 b8 76 ab ee ff ff 	movabs rax,0xffffffffffeeab76
ffff800000808a54:	ff ff ff 
ffff800000808a57:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000808a5b:	ff d0                	call   rax
ffff800000808a5d:	89 85 2c ff ff ff    	mov    DWORD PTR [rbp-0xd4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:306
                //dlli=load_library(dllname);
                //这个是线性地址
                dllp=get_module_addr(dlli);
ffff800000808a63:	8b 85 2c ff ff ff    	mov    eax,DWORD PTR [rbp-0xd4]
ffff800000808a69:	89 c7                	mov    edi,eax
ffff800000808a6b:	49 89 df             	mov    r15,rbx
ffff800000808a6e:	48 b8 7d b4 ee ff ff 	movabs rax,0xffffffffffeeb47d
ffff800000808a75:	ff ff ff 
ffff800000808a78:	48 01 d8             	add    rax,rbx
ffff800000808a7b:	ff d0                	call   rax
ffff800000808a7d:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:309
            }
            //从线性地址查页表找到物理地址
            PIMAGE_DOS_HEADER dlldos=dllp;
ffff800000808a80:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808a83:	48 98                	cdqe   
ffff800000808a85:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:310
            PIMAGE_NT_HEADERS32 dllnth=dllp+dlldos->e_lfanew;
ffff800000808a8c:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808a8f:	48 63 d0             	movsxd rdx,eax
ffff800000808a92:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
ffff800000808a99:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000808a9d:	48 01 d0             	add    rax,rdx
ffff800000808aa0:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:311
            PIMAGE_EXPORT_DIRECTORY dllexp=(dllnth->OptionalHeader.DataDirectory[0].VirtualAddress+dllp);
ffff800000808aa7:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000808aae:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [rax+0x8c]
ffff800000808ab4:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808ab7:	01 d0                	add    eax,edx
ffff800000808ab9:	89 c0                	mov    eax,eax
ffff800000808abb:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:312
            int funcn=dllexp->NumberOfNames;
ffff800000808ac2:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000808ac9:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000808acc:	89 85 0c ff ff ff    	mov    DWORD PTR [rbp-0xf4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:313
            char **fnames=dllexp->AddressOfNames+dllp;
ffff800000808ad2:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000808ad9:	8b 50 20             	mov    edx,DWORD PTR [rax+0x20]
ffff800000808adc:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808adf:	01 d0                	add    eax,edx
ffff800000808ae1:	89 c0                	mov    eax,eax
ffff800000808ae3:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:314
            int *funcaddrs=dllexp->AddressOfFunctions+dllp;
ffff800000808aea:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000808af1:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
ffff800000808af4:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808af7:	01 d0                	add    eax,edx
ffff800000808af9:	89 c0                	mov    eax,eax
ffff800000808afb:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:315
            short *funcords=dllexp->AddressOfNameOrdinals+dllp;
ffff800000808b02:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000808b09:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff800000808b0c:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808b0f:	01 d0                	add    eax,edx
ffff800000808b11:	89 c0                	mov    eax,eax
ffff800000808b13:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:317
            //寻找nameordinal的base（最小值），里面的数据加上base才是真正的序号
            unsigned int ord_base=dllexp->Base;
ffff800000808b1a:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000808b21:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000808b24:	89 85 ec fe ff ff    	mov    DWORD PTR [rbp-0x114],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:319
            //开始将导入表IAT的内容更新为函数地址
            unsigned int *iataddrs=impdes->FirstThunk+nbase;//IAT和INT内容一样，只用IAT
ffff800000808b2a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808b2e:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
ffff800000808b31:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808b34:	01 d0                	add    eax,edx
ffff800000808b36:	89 c0                	mov    eax,eax
ffff800000808b38:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:320
            char **siataddrs=impdes->FirstThunk+nbase;
ffff800000808b3c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808b40:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
ffff800000808b43:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808b46:	01 d0                	add    eax,edx
ffff800000808b48:	89 c0                	mov    eax,eax
ffff800000808b4a:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:321
            while (*iataddrs)
ffff800000808b4e:	e9 10 01 00 00       	jmp    ffff800000808c63 <load_pe+0x61d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:324
            {
                //判断是序号导入还是名称导入
                if(((unsigned)*iataddrs)&0x80000000)
ffff800000808b53:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808b57:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808b59:	85 c0                	test   eax,eax
ffff800000808b5b:	79 43                	jns    ffff800000808ba0 <load_pe+0x55a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:327
                {
                    //序号导入
                    unsigned int ord=((*iataddrs)&0x7fffffff)-ord_base;
ffff800000808b5d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808b61:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808b63:	25 ff ff ff 7f       	and    eax,0x7fffffff
ffff800000808b68:	2b 85 ec fe ff ff    	sub    eax,DWORD PTR [rbp-0x114]
ffff800000808b6e:	89 85 d8 fe ff ff    	mov    DWORD PTR [rbp-0x128],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:328
                    *iataddrs=funcaddrs[ord]+dllp;
ffff800000808b74:	8b 85 d8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x128]
ffff800000808b7a:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000808b81:	00 
ffff800000808b82:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000808b89:	48 01 d0             	add    rax,rdx
ffff800000808b8c:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808b8e:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808b91:	01 d0                	add    eax,edx
ffff800000808b93:	89 c2                	mov    edx,eax
ffff800000808b95:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808b99:	89 10                	mov    DWORD PTR [rax],edx
ffff800000808b9b:	e9 b9 00 00 00       	jmp    ffff800000808c59 <load_pe+0x613>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:332
                }else
                {
                    //名称导入
                    char *import_by_name_p=*iataddrs;//指向IMPORT_BY_NAME
ffff800000808ba0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808ba4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808ba6:	89 c0                	mov    eax,eax
ffff800000808ba8:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:333
                    import_by_name_p+=2;//跳过开头两字节序号
ffff800000808baf:	48 83 85 e0 fe ff ff 	add    QWORD PTR [rbp-0x120],0x2
ffff800000808bb6:	02 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:334
                    int i=0;
ffff800000808bb7:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335
                    for(;i<funcn;i++)
ffff800000808bbe:	e9 87 00 00 00       	jmp    ffff800000808c4a <load_pe+0x604>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:337
                    {
                        if(strcmp(import_by_name_p,fnames[i])==0)
ffff800000808bc3:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000808bc6:	48 98                	cdqe   
ffff800000808bc8:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808bcf:	00 
ffff800000808bd0:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000808bd7:	48 01 d0             	add    rax,rdx
ffff800000808bda:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808bdd:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
ffff800000808be4:	48 89 d6             	mov    rsi,rdx
ffff800000808be7:	48 89 c7             	mov    rdi,rax
ffff800000808bea:	49 89 df             	mov    r15,rbx
ffff800000808bed:	48 b8 16 54 ef ff ff 	movabs rax,0xffffffffffef5416
ffff800000808bf4:	ff ff ff 
ffff800000808bf7:	48 01 d8             	add    rax,rbx
ffff800000808bfa:	ff d0                	call   rax
ffff800000808bfc:	85 c0                	test   eax,eax
ffff800000808bfe:	75 46                	jne    ffff800000808c46 <load_pe+0x600>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:339
                        {
                            int ordi=funcords[i];
ffff800000808c00:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000808c03:	48 98                	cdqe   
ffff800000808c05:	48 8d 14 00          	lea    rdx,[rax+rax*1]
ffff800000808c09:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000808c10:	48 01 d0             	add    rax,rdx
ffff800000808c13:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000808c16:	98                   	cwde   
ffff800000808c17:	89 85 dc fe ff ff    	mov    DWORD PTR [rbp-0x124],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:340
                            *iataddrs=funcaddrs[ordi]+dllp;//导入表中的IAT内容修改成地址
ffff800000808c1d:	8b 85 dc fe ff ff    	mov    eax,DWORD PTR [rbp-0x124]
ffff800000808c23:	48 98                	cdqe   
ffff800000808c25:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000808c2c:	00 
ffff800000808c2d:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000808c34:	48 01 d0             	add    rax,rdx
ffff800000808c37:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808c39:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808c3c:	01 d0                	add    eax,edx
ffff800000808c3e:	89 c2                	mov    edx,eax
ffff800000808c40:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808c44:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335
                    for(;i<funcn;i++)
ffff800000808c46:	83 45 b4 01          	add    DWORD PTR [rbp-0x4c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335 (discriminator 1)
ffff800000808c4a:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000808c4d:	3b 85 0c ff ff ff    	cmp    eax,DWORD PTR [rbp-0xf4]
ffff800000808c53:	0f 8c 6a ff ff ff    	jl     ffff800000808bc3 <load_pe+0x57d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:344
                        }
                    }
                }
                iataddrs++;
ffff800000808c59:	48 83 45 c0 04       	add    QWORD PTR [rbp-0x40],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:345
                siataddrs++;
ffff800000808c5e:	48 83 45 b8 08       	add    QWORD PTR [rbp-0x48],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:321
            while (*iataddrs)
ffff800000808c63:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808c67:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808c69:	85 c0                	test   eax,eax
ffff800000808c6b:	0f 85 e2 fe ff ff    	jne    ffff800000808b53 <load_pe+0x50d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:347
            }
            impdes++;
ffff800000808c71:	48 83 45 d0 14       	add    QWORD PTR [rbp-0x30],0x14
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:292
        while (impdes->Characteristics)
ffff800000808c76:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808c7a:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808c7c:	85 c0                	test   eax,eax
ffff800000808c7e:	0f 85 70 fd ff ff    	jne    ffff8000008089f4 <load_pe+0x3ae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:354
        }
    }


    //开始重定位
    PIMAGE_BASE_RELOCATION relp=0;
ffff800000808c84:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff800000808c8b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:355
    if(nth->OptionalHeader.DataDirectory[5].Size>0)
ffff800000808c8c:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808c93:	8b 80 b4 00 00 00    	mov    eax,DWORD PTR [rax+0xb4]
ffff800000808c99:	85 c0                	test   eax,eax
ffff800000808c9b:	0f 84 e7 00 00 00    	je     ffff800000808d88 <load_pe+0x742>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:357
    {
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
ffff800000808ca1:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808ca8:	8b 90 b0 00 00 00    	mov    edx,DWORD PTR [rax+0xb0]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:358
                                +(u32)nbase);
ffff800000808cae:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:357
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
ffff800000808cb1:	01 d0                	add    eax,edx
ffff800000808cb3:	89 c0                	mov    eax,eax
ffff800000808cb5:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:359
        u16 *reloc=relp+sizeof(IMAGE_BASE_RELOCATION);
ffff800000808cb9:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808cbd:	48 83 c0 40          	add    rax,0x40
ffff800000808cc1:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:360
        u16 *rtype=reloc+1;
ffff800000808cc5:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000808cc9:	48 83 c0 02          	add    rax,0x2
ffff800000808ccd:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:361
        int old_base=nth->OptionalHeader.ImageBase;
ffff800000808cd1:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808cd8:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000808cdc:	89 85 d4 fe ff ff    	mov    DWORD PTR [rbp-0x12c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:362
        while(relp->VirtualAddress){
ffff800000808ce2:	e9 93 00 00 00       	jmp    ffff800000808d7a <load_pe+0x734>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:363
            int pgva=relp->VirtualAddress+nbase;
ffff800000808ce7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808ceb:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808ced:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808cf0:	01 d0                	add    eax,edx
ffff800000808cf2:	89 85 d0 fe ff ff    	mov    DWORD PTR [rbp-0x130],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:364
            for(int i=0;i<relp->SizeOfBlock/4;i++)
ffff800000808cf8:	c7 45 94 00 00 00 00 	mov    DWORD PTR [rbp-0x6c],0x0
ffff800000808cff:	eb 57                	jmp    ffff800000808d58 <load_pe+0x712>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:366
            {
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
ffff800000808d01:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000808d05:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000808d08:	66 85 c0             	test   ax,ax
ffff800000808d0b:	74 46                	je     ffff800000808d53 <load_pe+0x70d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:367
                int *at=*reloc+pgva;//要重定位的数据的地址
ffff800000808d0d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000808d11:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000808d14:	0f b7 d0             	movzx  edx,ax
ffff800000808d17:	8b 85 d0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x130]
ffff800000808d1d:	01 d0                	add    eax,edx
ffff800000808d1f:	48 98                	cdqe   
ffff800000808d21:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:368
                *at=*at-old_base+nbase;
ffff800000808d28:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000808d2f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808d31:	2b 85 d4 fe ff ff    	sub    eax,DWORD PTR [rbp-0x12c]
ffff800000808d37:	89 c2                	mov    edx,eax
ffff800000808d39:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000808d3c:	01 c2                	add    edx,eax
ffff800000808d3e:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000808d45:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:370
                //下一个
                reloc+=2;
ffff800000808d47:	48 83 45 a0 04       	add    QWORD PTR [rbp-0x60],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:371
                rtype+=2;
ffff800000808d4c:	48 83 45 98 04       	add    QWORD PTR [rbp-0x68],0x4
ffff800000808d51:	eb 01                	jmp    ffff800000808d54 <load_pe+0x70e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:366
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
ffff800000808d53:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:364 (discriminator 2)
            for(int i=0;i<relp->SizeOfBlock/4;i++)
ffff800000808d54:	83 45 94 01          	add    DWORD PTR [rbp-0x6c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:364 (discriminator 1)
ffff800000808d58:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808d5c:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000808d5f:	c1 e8 02             	shr    eax,0x2
ffff800000808d62:	89 c2                	mov    edx,eax
ffff800000808d64:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff800000808d67:	39 c2                	cmp    edx,eax
ffff800000808d69:	77 96                	ja     ffff800000808d01 <load_pe+0x6bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:373
            }
            relp=(int)relp+0x1000;
ffff800000808d6b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808d6f:	05 00 10 00 00       	add    eax,0x1000
ffff800000808d74:	48 98                	cdqe   
ffff800000808d76:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:362
        while(relp->VirtualAddress){
ffff800000808d7a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808d7e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808d80:	85 c0                	test   eax,eax
ffff800000808d82:	0f 85 5f ff ff ff    	jne    ffff800000808ce7 <load_pe+0x6a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:379
        }
    }
    extern struct process task[];
    extern int cur_proc;
    //初始化堆
    chunk_header hdrtmp={
ffff800000808d88:	c7 85 00 fd ff ff 00 	mov    DWORD PTR [rbp-0x300],0x0
ffff800000808d8f:	00 00 00 
ffff800000808d92:	c7 85 04 fd ff ff 00 	mov    DWORD PTR [rbp-0x2fc],0x0
ffff800000808d99:	00 00 00 
ffff800000808d9c:	48 c7 85 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],0x0
ffff800000808da3:	00 00 00 00 
ffff800000808da7:	48 c7 85 10 fd ff ff 	mov    QWORD PTR [rbp-0x2f0],0x0
ffff800000808dae:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:386
            .next=NULL,
            .pgn=0,
            .prev=NULL
    };//空堆
    //拷贝触发页中断然后分配
    memcpy((chunk_header*)HEAP_BASE,&hdrtmp,sizeof(hdrtmp));
ffff800000808db2:	48 8d 85 00 fd ff ff 	lea    rax,[rbp-0x300]
ffff800000808db9:	ba 18 00 00 00       	mov    edx,0x18
ffff800000808dbe:	48 89 c6             	mov    rsi,rax
ffff800000808dc1:	bf 00 00 00 01       	mov    edi,0x1000000
ffff800000808dc6:	49 89 df             	mov    r15,rbx
ffff800000808dc9:	48 b8 c4 50 ef ff ff 	movabs rax,0xffffffffffef50c4
ffff800000808dd0:	ff ff ff 
ffff800000808dd3:	48 01 d8             	add    rax,rbx
ffff800000808dd6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:387
    task[cur_proc].mem_struct.heap_base=HEAP_BASE;
ffff800000808dd8:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000808ddf:	ff ff ff 
ffff800000808de2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808de6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808de8:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000808def:	ff ff ff 
ffff800000808df2:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000808df6:	48 98                	cdqe   
ffff800000808df8:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000808dff:	48 01 d0             	add    rax,rdx
ffff800000808e02:	48 83 c0 20          	add    rax,0x20
ffff800000808e06:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x1000000
ffff800000808e0d:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:388
    task[cur_proc].mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
ffff800000808e0e:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000808e15:	ff ff ff 
ffff800000808e18:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808e1c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808e1e:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000808e25:	ff ff ff 
ffff800000808e28:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000808e2c:	48 98                	cdqe   
ffff800000808e2e:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000808e35:	48 01 d0             	add    rax,rdx
ffff800000808e38:	48 83 c0 20          	add    rax,0x20
ffff800000808e3c:	48 c7 40 10 00 10 00 	mov    QWORD PTR [rax+0x10],0x1001000
ffff800000808e43:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:390
    //设置栈
    task[cur_proc].mem_struct.stack_top=STACK_TOP;
ffff800000808e44:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000808e4b:	ff ff ff 
ffff800000808e4e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808e52:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808e54:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000808e5b:	ff ff ff 
ffff800000808e5e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000808e62:	48 98                	cdqe   
ffff800000808e64:	48 69 c0 58 03 00 00 	imul   rax,rax,0x358
ffff800000808e6b:	48 01 d0             	add    rax,rdx
ffff800000808e6e:	48 83 c0 30          	add    rax,0x30
ffff800000808e72:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff800000808e79:	7f 00 00 
ffff800000808e7c:	48 89 70 10          	mov    QWORD PTR [rax+0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:397


    //完毕,调用入口函数
    //重定位完毕，准备调用DllMain
    typedef int (*Main)(int,void*);
    Main main=shell_addr;
ffff800000808e80:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
ffff800000808e86:	48 98                	cdqe   
ffff800000808e88:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:398
    int ecode=main(0,NULL);
ffff800000808e8f:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
ffff800000808e96:	be 00 00 00 00       	mov    esi,0x0
ffff800000808e9b:	bf 00 00 00 00       	mov    edi,0x0
ffff800000808ea0:	ff d0                	call   rax
ffff800000808ea2:	89 85 bc fe ff ff    	mov    DWORD PTR [rbp-0x144],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:399
    do_syscall(SYSCALL_EXIT,ecode,0,0,0,0,0);
ffff800000808ea8:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
ffff800000808eae:	48 98                	cdqe   
ffff800000808eb0:	48 c7 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],0x14
ffff800000808eb7:	14 00 00 00 
ffff800000808ebb:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
ffff800000808ec2:	48 c7 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],0x0
ffff800000808ec9:	00 00 00 00 
ffff800000808ecd:	48 c7 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],0x0
ffff800000808ed4:	00 00 00 00 
ffff800000808ed8:	48 c7 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],0x0
ffff800000808edf:	00 00 00 00 
ffff800000808ee3:	48 c7 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],0x0
ffff800000808eea:	00 00 00 00 
ffff800000808eee:	48 c7 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],0x0
ffff800000808ef5:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:63
        asm volatile(".byte 0x48\n"
ffff800000808ef9:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
ffff800000808f00:	48 8b bd a8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x158]
ffff800000808f07:	48 8b b5 a0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x160]
ffff800000808f0e:	48 8b 95 98 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x168]
ffff800000808f15:	48 8b 8d 90 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x170]
ffff800000808f1c:	4c 8b 85 88 fe ff ff 	mov    r8,QWORD PTR [rbp-0x178]
ffff800000808f23:	4c 8b 8d 80 fe ff ff 	mov    r9,QWORD PTR [rbp-0x180]
ffff800000808f2a:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:65
        long ret=0;
ffff800000808f2d:	48 c7 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],0x0
ffff800000808f34:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:66
        asm volatile("mov %%rax,%0"::"m"(ret));
ffff800000808f38:	48 89 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],rax
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:402 (discriminator 1)
    //
    //不应该执行到这
    while(1);
ffff800000808f3f:	eb fe                	jmp    ffff800000808f3f <load_pe+0x8f9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:404 (discriminator 2)
    return task[cur_proc].exit_code;
}
ffff800000808f41:	48 81 c4 10 03 00 00 	add    rsp,0x310
ffff800000808f48:	5b                   	pop    rbx
ffff800000808f49:	41 5f                	pop    r15
ffff800000808f4b:	5d                   	pop    rbp
ffff800000808f4c:	c3                   	ret    

ffff800000808f4d <get_module_addr>:
get_module_addr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:407

int get_module_addr(int mi)
{
ffff800000808f4d:	f3 0f 1e fa          	endbr64 
ffff800000808f51:	55                   	push   rbp
ffff800000808f52:	48 89 e5             	mov    rbp,rsp
ffff800000808f55:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808f55 <get_module_addr+0x8>
ffff800000808f5c:	49 bb 7b 4b 11 00 00 	movabs r11,0x114b7b
ffff800000808f63:	00 00 00 
ffff800000808f66:	4c 01 d8             	add    rax,r11
ffff800000808f69:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:408
    return modules[mi].base;
ffff800000808f6c:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000808f73:	ff ff ff 
ffff800000808f76:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000808f7a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000808f7d:	48 63 d0             	movsxd rdx,eax
ffff800000808f80:	48 89 d0             	mov    rax,rdx
ffff800000808f83:	48 c1 e0 02          	shl    rax,0x2
ffff800000808f87:	48 01 d0             	add    rax,rdx
ffff800000808f8a:	48 c1 e0 03          	shl    rax,0x3
ffff800000808f8e:	48 01 c8             	add    rax,rcx
ffff800000808f91:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:409
}
ffff800000808f93:	5d                   	pop    rbp
ffff800000808f94:	c3                   	ret    

ffff800000808f95 <dispose_library>:
dispose_library():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:411
int dispose_library(int dlln)
{
ffff800000808f95:	f3 0f 1e fa          	endbr64 
ffff800000808f99:	55                   	push   rbp
ffff800000808f9a:	48 89 e5             	mov    rbp,rsp
ffff800000808f9d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808f9d <dispose_library+0x8>
ffff800000808fa4:	49 bb 33 4b 11 00 00 	movabs r11,0x114b33
ffff800000808fab:	00 00 00 
ffff800000808fae:	4c 01 d8             	add    rax,r11
ffff800000808fb1:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:412
    if(dlln<0||dlln>=MAX_DLLS)return -1;
ffff800000808fb4:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000808fb8:	78 09                	js     ffff800000808fc3 <dispose_library+0x2e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:412 (discriminator 2)
ffff800000808fba:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
ffff800000808fc1:	7e 07                	jle    ffff800000808fca <dispose_library+0x35>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:412 (discriminator 3)
ffff800000808fc3:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000808fc8:	eb 2c                	jmp    ffff800000808ff6 <dispose_library+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:417
    //空间不够，释放之前申请的
    // for(int j=0;j<dlls[dlln].page_used;j++)
    //     dispose_page(get_phyaddr(dlls[dlln].page_num[j]));
    //释放dll
    dlls[dlln].flag=DLL_STAT_EMPTY;
ffff800000808fca:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff800000808fd1:	ff ff ff 
ffff800000808fd4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808fd8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000808fdb:	48 98                	cdqe   
ffff800000808fdd:	48 69 c0 2c 01 00 00 	imul   rax,rax,0x12c
ffff800000808fe4:	48 01 d0             	add    rax,rdx
ffff800000808fe7:	48 83 c0 08          	add    rax,0x8
ffff800000808feb:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:418
    return 0;
ffff800000808ff1:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:419
}
ffff800000808ff6:	5d                   	pop    rbp
ffff800000808ff7:	c3                   	ret    

ffff800000808ff8 <sys_insmod>:
sys_insmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:467

    return 0;
} */

int sys_insmod(char *path)
{
ffff800000808ff8:	f3 0f 1e fa          	endbr64 
ffff800000808ffc:	55                   	push   rbp
ffff800000808ffd:	48 89 e5             	mov    rbp,rsp
ffff800000809000:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809000 <sys_insmod+0x8>
ffff800000809007:	49 bb d0 4a 11 00 00 	movabs r11,0x114ad0
ffff80000080900e:	00 00 00 
ffff800000809011:	4c 01 d8             	add    rax,r11
ffff800000809014:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:469

}
ffff800000809018:	90                   	nop
ffff800000809019:	5d                   	pop    rbp
ffff80000080901a:	c3                   	ret    

ffff80000080901b <sys_rmmod>:
sys_rmmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:471
int sys_rmmod(char *name)
{
ffff80000080901b:	f3 0f 1e fa          	endbr64 
ffff80000080901f:	55                   	push   rbp
ffff800000809020:	48 89 e5             	mov    rbp,rsp
ffff800000809023:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809023 <sys_rmmod+0x8>
ffff80000080902a:	49 bb ad 4a 11 00 00 	movabs r11,0x114aad
ffff800000809031:	00 00 00 
ffff800000809034:	4c 01 d8             	add    rax,r11
ffff800000809037:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:473

}
ffff80000080903b:	90                   	nop
ffff80000080903c:	5d                   	pop    rbp
ffff80000080903d:	c3                   	ret    

ffff80000080903e <new_load_elf>:
new_load_elf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:474
off_t new_load_elf(struct file* elf){
ffff80000080903e:	f3 0f 1e fa          	endbr64 
ffff800000809042:	55                   	push   rbp
ffff800000809043:	48 89 e5             	mov    rbp,rsp
ffff800000809046:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809046 <new_load_elf+0x8>
ffff80000080904d:	49 bb 8a 4a 11 00 00 	movabs r11,0x114a8a
ffff800000809054:	00 00 00 
ffff800000809057:	4c 01 d8             	add    rax,r11
ffff80000080905a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:480
    //读取文件头
    //if ET_DYN
    //load dl
    //else
    // load elf
}
ffff80000080905e:	90                   	nop
ffff80000080905f:	5d                   	pop    rbp
ffff800000809060:	c3                   	ret    

ffff800000809061 <load_elf>:
load_elf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:482
//切换进程前,在execve系统调用中
off_t load_elf(struct file *elf) {
ffff800000809061:	f3 0f 1e fa          	endbr64 
ffff800000809065:	55                   	push   rbp
ffff800000809066:	48 89 e5             	mov    rbp,rsp
ffff800000809069:	41 57                	push   r15
ffff80000080906b:	53                   	push   rbx
ffff80000080906c:	48 81 ec 30 01 00 00 	sub    rsp,0x130
ffff800000809073:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809073 <load_elf+0x12>
ffff80000080907a:	49 bb 5d 4a 11 00 00 	movabs r11,0x114a5d
ffff800000809081:	00 00 00 
ffff800000809084:	4c 01 db             	add    rbx,r11
ffff800000809087:	48 89 bd c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:484
    // 读取文件头
    struct file* elf_storage=elf;
ffff80000080908e:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000809095:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:485
    off_t tmpla=kmalloc();
ffff800000809099:	49 89 df             	mov    r15,rbx
ffff80000080909c:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008090a1:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff8000008090a8:	ff ff ff 
ffff8000008090ab:	48 01 da             	add    rdx,rbx
ffff8000008090ae:	ff d2                	call   rdx
ffff8000008090b0:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:486
    off_t shla=kmalloc();
ffff8000008090b6:	49 89 df             	mov    r15,rbx
ffff8000008090b9:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008090be:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff8000008090c5:	ff ff ff 
ffff8000008090c8:	48 01 da             	add    rdx,rbx
ffff8000008090cb:	ff d2                	call   rdx
ffff8000008090cd:	89 85 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:487
    if(tmpla==-1)
ffff8000008090d3:	83 bd 7c ff ff ff ff 	cmp    DWORD PTR [rbp-0x84],0xffffffff
ffff8000008090da:	75 26                	jne    ffff800000809102 <load_elf+0xa1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:489
    {
        current->regs.errcode=-ENOMEM;
ffff8000008090dc:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008090e3:	ff ff ff 
ffff8000008090e6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008090ea:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008090ed:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff8000008090f4:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:490
        return -1;
ffff8000008090f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008090fd:	e9 be 0a 00 00       	jmp    ffff800000809bc0 <load_elf+0xb5f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:492
    }
ready:
ffff800000809102:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:493
    elf->position=0;
ffff800000809103:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff80000080910a:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:495
    //读取文件头
    elf->f_ops->read(elf, (char *) tmpla, PAGE_4K_SIZE, &elf->position);
ffff800000809111:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000809118:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080911c:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff800000809120:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
ffff800000809127:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
ffff80000080912d:	48 98                	cdqe   
ffff80000080912f:	48 89 c6             	mov    rsi,rax
ffff800000809132:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000809139:	48 89 d1             	mov    rcx,rdx
ffff80000080913c:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000809141:	48 89 c7             	mov    rdi,rax
ffff800000809144:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:497

    Elf64_Ehdr *ehdr=(Elf64_Phdr*)tmpla;
ffff800000809147:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
ffff80000080914d:	48 98                	cdqe   
ffff80000080914f:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:498
    u16 entn=ehdr->e_phnum;
ffff800000809156:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080915d:	0f b7 40 38          	movzx  eax,WORD PTR [rax+0x38]
ffff800000809161:	66 89 85 6e ff ff ff 	mov    WORD PTR [rbp-0x92],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:499
    u16 ents=ehdr->e_phentsize;
ffff800000809168:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080916f:	0f b7 40 36          	movzx  eax,WORD PTR [rax+0x36]
ffff800000809173:	66 89 85 6c ff ff ff 	mov    WORD PTR [rbp-0x94],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:500
    elf->position=ehdr->e_shoff;
ffff80000080917a:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000809181:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff800000809185:	48 89 c2             	mov    rdx,rax
ffff800000809188:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff80000080918f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:501
    elf->f_ops->read(elf,(char*)shla,ehdr->e_shnum*ehdr->e_shentsize,&elf->position);
ffff800000809192:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff800000809199:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080919d:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff8000008091a1:	48 8b 8d c8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x138]
ffff8000008091a8:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008091af:	0f b7 40 3c          	movzx  eax,WORD PTR [rax+0x3c]
ffff8000008091b3:	0f b7 d0             	movzx  edx,ax
ffff8000008091b6:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008091bd:	0f b7 40 3a          	movzx  eax,WORD PTR [rax+0x3a]
ffff8000008091c1:	0f b7 c0             	movzx  eax,ax
ffff8000008091c4:	0f af c2             	imul   eax,edx
ffff8000008091c7:	48 63 d0             	movsxd rdx,eax
ffff8000008091ca:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
ffff8000008091d0:	48 98                	cdqe   
ffff8000008091d2:	48 89 c6             	mov    rsi,rax
ffff8000008091d5:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff8000008091dc:	48 89 c7             	mov    rdi,rax
ffff8000008091df:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:502
    struct Elf64_Shdr* sh= (struct Elf64_Shdr *) (shla);
ffff8000008091e2:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
ffff8000008091e8:	48 98                	cdqe   
ffff8000008091ea:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:504
    //TODO  加载shdr表
    Elf64_Phdr *ph= (Elf64_Phdr *) (tmpla + ehdr->e_phoff);
ffff8000008091f1:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
ffff8000008091f7:	48 63 d0             	movsxd rdx,eax
ffff8000008091fa:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000809201:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000809205:	48 01 d0             	add    rax,rdx
ffff800000809208:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:505
    size_t tot_sz=0;
ffff80000080920c:	48 c7 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],0x0
ffff800000809213:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:506
    off_t base=ph->p_vaddr,offset=0;
ffff800000809217:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080921b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080921f:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
ffff800000809225:	c7 85 50 ff ff ff 00 	mov    DWORD PTR [rbp-0xb0],0x0
ffff80000080922c:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:507
    int reloc_flag=0;
ffff80000080922f:	c7 85 4c ff ff ff 00 	mov    DWORD PTR [rbp-0xb4],0x0
ffff800000809236:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:531
            offset=new_base-base;
        }
    } */
    

    module* mod=0;
ffff800000809239:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000809240:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:533
    //module项设置
    for(int i=0;i<MAX_MODULES;i++){
ffff800000809241:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff800000809248:	e9 00 01 00 00       	jmp    ffff80000080934d <load_elf+0x2ec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:534
        if(modules[i].type==ET_NONE){
ffff80000080924d:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000809254:	ff ff ff 
ffff800000809257:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080925b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080925e:	48 63 d0             	movsxd rdx,eax
ffff800000809261:	48 89 d0             	mov    rax,rdx
ffff800000809264:	48 c1 e0 02          	shl    rax,0x2
ffff800000809268:	48 01 d0             	add    rax,rdx
ffff80000080926b:	48 c1 e0 03          	shl    rax,0x3
ffff80000080926f:	48 01 c8             	add    rax,rcx
ffff800000809272:	48 83 c0 10          	add    rax,0x10
ffff800000809276:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809279:	48 85 c0             	test   rax,rax
ffff80000080927c:	0f 85 c7 00 00 00    	jne    ffff800000809349 <load_elf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:535
            modules[i].type=ehdr->e_type;
ffff800000809282:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000809289:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080928d:	0f b7 d0             	movzx  edx,ax
ffff800000809290:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000809297:	ff ff ff 
ffff80000080929a:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff80000080929e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008092a1:	48 63 c8             	movsxd rcx,eax
ffff8000008092a4:	48 89 c8             	mov    rax,rcx
ffff8000008092a7:	48 c1 e0 02          	shl    rax,0x2
ffff8000008092ab:	48 01 c8             	add    rax,rcx
ffff8000008092ae:	48 c1 e0 03          	shl    rax,0x3
ffff8000008092b2:	48 01 f0             	add    rax,rsi
ffff8000008092b5:	48 83 c0 10          	add    rax,0x10
ffff8000008092b9:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:536
            modules[i].load_offset=offset;
ffff8000008092bc:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff8000008092c3:	ff ff ff 
ffff8000008092c6:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008092ca:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008092cd:	48 63 d0             	movsxd rdx,eax
ffff8000008092d0:	48 89 d0             	mov    rax,rdx
ffff8000008092d3:	48 c1 e0 02          	shl    rax,0x2
ffff8000008092d7:	48 01 d0             	add    rax,rdx
ffff8000008092da:	48 c1 e0 03          	shl    rax,0x3
ffff8000008092de:	48 01 c8             	add    rax,rcx
ffff8000008092e1:	48 8d 50 04          	lea    rdx,[rax+0x4]
ffff8000008092e5:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff8000008092eb:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:537
            modules[i].base=base;
ffff8000008092ed:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff8000008092f4:	ff ff ff 
ffff8000008092f7:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008092fb:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008092fe:	48 63 d0             	movsxd rdx,eax
ffff800000809301:	48 89 d0             	mov    rax,rdx
ffff800000809304:	48 c1 e0 02          	shl    rax,0x2
ffff800000809308:	48 01 d0             	add    rax,rdx
ffff80000080930b:	48 c1 e0 03          	shl    rax,0x3
ffff80000080930f:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000809313:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff800000809319:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:538
            mod=modules+i;
ffff80000080931b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080931e:	48 63 d0             	movsxd rdx,eax
ffff800000809321:	48 89 d0             	mov    rax,rdx
ffff800000809324:	48 c1 e0 02          	shl    rax,0x2
ffff800000809328:	48 01 d0             	add    rax,rdx
ffff80000080932b:	48 c1 e0 03          	shl    rax,0x3
ffff80000080932f:	48 89 c2             	mov    rdx,rax
ffff800000809332:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000809339:	ff ff ff 
ffff80000080933c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809340:	48 01 d0             	add    rax,rdx
ffff800000809343:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:539
            break;
ffff800000809347:	eb 0e                	jmp    ffff800000809357 <load_elf+0x2f6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:533 (discriminator 2)
    for(int i=0;i<MAX_MODULES;i++){
ffff800000809349:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:533 (discriminator 1)
ffff80000080934d:	83 7d dc 7f          	cmp    DWORD PTR [rbp-0x24],0x7f
ffff800000809351:	0f 8e f6 fe ff ff    	jle    ffff80000080924d <load_elf+0x1ec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:542
        }
    }
    for(int i=0;i<entn;i++){
ffff800000809357:	c7 85 48 ff ff ff 00 	mov    DWORD PTR [rbp-0xb8],0x0
ffff80000080935e:	00 00 00 
ffff800000809361:	90                   	nop
ffff800000809362:	0f b7 85 6e ff ff ff 	movzx  eax,WORD PTR [rbp-0x92]
ffff800000809369:	39 85 48 ff ff ff    	cmp    DWORD PTR [rbp-0xb8],eax
ffff80000080936f:	0f 8d d4 00 00 00    	jge    ffff800000809449 <load_elf+0x3e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:547
        
        if((ph[i].p_type|PT_INTERP)!=0){
            //load dl
            //
            if(current->dl)break;
ffff800000809375:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080937c:	ff ff ff 
ffff80000080937f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809383:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809386:	8b 80 54 03 00 00    	mov    eax,DWORD PTR [rax+0x354]
ffff80000080938c:	85 c0                	test   eax,eax
ffff80000080938e:	0f 85 b4 00 00 00    	jne    ffff800000809448 <load_elf+0x3e7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:548
            int fd=sys_open("/mnt/dl.so",O_EXEC);
ffff800000809394:	be 00 10 00 00       	mov    esi,0x1000
ffff800000809399:	48 b8 f3 d6 ff ff ff 	movabs rax,0xffffffffffffd6f3
ffff8000008093a0:	ff ff ff 
ffff8000008093a3:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008093a7:	48 89 c7             	mov    rdi,rax
ffff8000008093aa:	49 89 df             	mov    r15,rbx
ffff8000008093ad:	48 b8 e3 dc ee ff ff 	movabs rax,0xffffffffffeedce3
ffff8000008093b4:	ff ff ff 
ffff8000008093b7:	48 01 d8             	add    rax,rbx
ffff8000008093ba:	ff d0                	call   rax
ffff8000008093bc:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:549
            kmfree(tmpla);
ffff8000008093c2:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
ffff8000008093c8:	48 98                	cdqe   
ffff8000008093ca:	48 89 c7             	mov    rdi,rax
ffff8000008093cd:	49 89 df             	mov    r15,rbx
ffff8000008093d0:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff8000008093d7:	ff ff ff 
ffff8000008093da:	48 01 d8             	add    rax,rbx
ffff8000008093dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:550
            kmfree(shla);
ffff8000008093df:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
ffff8000008093e5:	48 98                	cdqe   
ffff8000008093e7:	48 89 c7             	mov    rdi,rax
ffff8000008093ea:	49 89 df             	mov    r15,rbx
ffff8000008093ed:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff8000008093f4:	ff ff ff 
ffff8000008093f7:	48 01 d8             	add    rax,rbx
ffff8000008093fa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:551
            current->dl=fd;
ffff8000008093fc:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809403:	ff ff ff 
ffff800000809406:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080940a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080940d:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
ffff800000809413:	89 90 54 03 00 00    	mov    DWORD PTR [rax+0x354],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:552
            elf=current->openf[fd];
ffff800000809419:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809420:	ff ff ff 
ffff800000809423:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809427:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080942a:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
ffff800000809430:	48 63 d2             	movsxd rdx,edx
ffff800000809433:	48 83 c2 1e          	add    rdx,0x1e
ffff800000809437:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080943c:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:553
            goto ready;
ffff800000809443:	e9 bb fc ff ff       	jmp    ffff800000809103 <load_elf+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:547
            if(current->dl)break;
ffff800000809448:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:556
        }
    }
    for(int i=0;i<entn;i++){
ffff800000809449:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff800000809450:	e9 9d 01 00 00       	jmp    ffff8000008095f2 <load_elf+0x591>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:559
        //加载段
        if((ph->p_type|PT_LOAD)!=0){
            unsigned long off=ph->p_offset;
ffff800000809455:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809459:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080945d:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:560
            unsigned long fs=ph->p_filesz;
ffff800000809464:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809468:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080946c:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:561
            size_t ms=ph->p_memsz;
ffff800000809473:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809477:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080947b:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:562
            char* vptr= (char *) ph->p_vaddr+offset;
ffff800000809482:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff800000809488:	48 63 d0             	movsxd rdx,eax
ffff80000080948b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080948f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000809493:	48 01 d0             	add    rax,rdx
ffff800000809496:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:563
            elf->position=off;
ffff80000080949d:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
ffff8000008094a4:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff8000008094ab:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:564
            if(off==0){
ffff8000008094ae:	48 83 bd 10 ff ff ff 	cmp    QWORD PTR [rbp-0xf0],0x0
ffff8000008094b5:	00 
ffff8000008094b6:	75 10                	jne    ffff8000008094c8 <load_elf+0x467>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:565
                mod->header=vptr;
ffff8000008094b8:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008094bf:	89 c2                	mov    edx,eax
ffff8000008094c1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008094c5:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:568
            }
            //先映射好内存
            int attr=PAGE_PRESENT|PAGE_FOR_ALL;
ffff8000008094c8:	c7 85 f4 fe ff ff 05 	mov    DWORD PTR [rbp-0x10c],0x5
ffff8000008094cf:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:570
            if((ph->p_flags|PF_X)!=0||(ph->p_flags|PF_W)!=0)
                attr|=PAGE_RWX;
ffff8000008094d2:	83 8d f4 fe ff ff 02 	or     DWORD PTR [rbp-0x10c],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:571
            int pgc=(ms-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff8000008094d9:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff8000008094e0:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff8000008094e6:	48 c1 e8 0c          	shr    rax,0xc
ffff8000008094ea:	89 85 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:572
            for(int j=0;j<pgc;j++){
ffff8000008094f0:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff8000008094f7:	e9 ad 00 00 00       	jmp    ffff8000008095a9 <load_elf+0x548>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:573
                off_t dest=(off_t) (vptr + j * PAGE_4K_SIZE);
ffff8000008094fc:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008094ff:	c1 e0 0c             	shl    eax,0xc
ffff800000809502:	48 63 d0             	movsxd rdx,eax
ffff800000809505:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000080950c:	48 01 d0             	add    rax,rdx
ffff80000080950f:	89 85 ec fe ff ff    	mov    DWORD PTR [rbp-0x114],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:574
                off_t lma=pmalloc();
ffff800000809515:	49 89 df             	mov    r15,rbx
ffff800000809518:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080951d:	48 ba 6e 50 ee ff ff 	movabs rdx,0xffffffffffee506e
ffff800000809524:	ff ff ff 
ffff800000809527:	48 01 da             	add    rdx,rbx
ffff80000080952a:	ff d2                	call   rdx
ffff80000080952c:	89 85 e8 fe ff ff    	mov    DWORD PTR [rbp-0x118],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:575
                if(lma==-1)
ffff800000809532:	83 bd e8 fe ff ff ff 	cmp    DWORD PTR [rbp-0x118],0xffffffff
ffff800000809539:	75 26                	jne    ffff800000809561 <load_elf+0x500>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:577
                {
                    current->regs.errcode=-ENOMEM;
ffff80000080953b:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809542:	ff ff ff 
ffff800000809545:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809549:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080954c:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff800000809553:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:578
                    return -1;
ffff800000809557:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080955c:	e9 5f 06 00 00       	jmp    ffff800000809bc0 <load_elf+0xb5f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:580 (discriminator 2)
                }
                smmap(lma , dest, attr, current->pml4);
ffff800000809561:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809568:	ff ff ff 
ffff80000080956b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080956f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809572:	48 8b 88 e0 00 00 00 	mov    rcx,QWORD PTR [rax+0xe0]
ffff800000809579:	8b 95 f4 fe ff ff    	mov    edx,DWORD PTR [rbp-0x10c]
ffff80000080957f:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [rbp-0x114]
ffff800000809585:	48 63 f0             	movsxd rsi,eax
ffff800000809588:	8b 85 e8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x118]
ffff80000080958e:	48 98                	cdqe   
ffff800000809590:	48 89 c7             	mov    rdi,rax
ffff800000809593:	49 89 df             	mov    r15,rbx
ffff800000809596:	48 b8 29 40 ee ff ff 	movabs rax,0xffffffffffee4029
ffff80000080959d:	ff ff ff 
ffff8000008095a0:	48 01 d8             	add    rax,rbx
ffff8000008095a3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:572 (discriminator 2)
            for(int j=0;j<pgc;j++){
ffff8000008095a5:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:572 (discriminator 1)
ffff8000008095a9:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008095ac:	3b 85 f0 fe ff ff    	cmp    eax,DWORD PTR [rbp-0x110]
ffff8000008095b2:	0f 8c 44 ff ff ff    	jl     ffff8000008094fc <load_elf+0x49b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:583
            }
            //读取
            elf->f_ops->read(elf,vptr,fs,&elf->position);
ffff8000008095b8:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff8000008095bf:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008095c3:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff8000008095c7:	48 8b 8d c8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x138]
ffff8000008095ce:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
ffff8000008095d5:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
ffff8000008095dc:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff8000008095e3:	48 89 c7             	mov    rdi,rax
ffff8000008095e6:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:586

        }
        ph++;
ffff8000008095e9:	48 83 45 e8 38       	add    QWORD PTR [rbp-0x18],0x38
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:556
    for(int i=0;i<entn;i++){
ffff8000008095ee:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:556 (discriminator 1)
ffff8000008095f2:	0f b7 85 6e ff ff ff 	movzx  eax,WORD PTR [rbp-0x92]
ffff8000008095f9:	39 45 d8             	cmp    DWORD PTR [rbp-0x28],eax
ffff8000008095fc:	0f 8c 53 fe ff ff    	jl     ffff800000809455 <load_elf+0x3f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:589
    }
    //找dynamic段
    struct Elf64_Shdr *dynamic=NULL;
ffff800000809602:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff800000809609:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:590
    off_t* got=NULL;
ffff80000080960a:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
ffff800000809611:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:591
    for(int i=0;i<ehdr->e_shnum;i++){
ffff800000809615:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
ffff80000080961c:	eb 50                	jmp    ffff80000080966e <load_elf+0x60d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:592
        if(sh[i].sh_type==SHT_DYNAMIC)
ffff80000080961e:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000809621:	48 63 d0             	movsxd rdx,eax
ffff800000809624:	48 89 d0             	mov    rax,rdx
ffff800000809627:	48 01 c0             	add    rax,rax
ffff80000080962a:	48 01 d0             	add    rax,rdx
ffff80000080962d:	48 c1 e0 04          	shl    rax,0x4
ffff800000809631:	48 89 c2             	mov    rdx,rax
ffff800000809634:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080963b:	48 01 d0             	add    rax,rdx
ffff80000080963e:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000809641:	83 f8 06             	cmp    eax,0x6
ffff800000809644:	75 24                	jne    ffff80000080966a <load_elf+0x609>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:593
            dynamic=sh+i;
ffff800000809646:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000809649:	48 63 d0             	movsxd rdx,eax
ffff80000080964c:	48 89 d0             	mov    rax,rdx
ffff80000080964f:	48 01 c0             	add    rax,rax
ffff800000809652:	48 01 d0             	add    rax,rdx
ffff800000809655:	48 c1 e0 04          	shl    rax,0x4
ffff800000809659:	48 89 c2             	mov    rdx,rax
ffff80000080965c:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000809663:	48 01 d0             	add    rax,rdx
ffff800000809666:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:591 (discriminator 2)
    for(int i=0;i<ehdr->e_shnum;i++){
ffff80000080966a:	83 45 c4 01          	add    DWORD PTR [rbp-0x3c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:591 (discriminator 1)
ffff80000080966e:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000809675:	0f b7 40 3c          	movzx  eax,WORD PTR [rax+0x3c]
ffff800000809679:	0f b7 c0             	movzx  eax,ax
ffff80000080967c:	39 45 c4             	cmp    DWORD PTR [rbp-0x3c],eax
ffff80000080967f:	7c 9d                	jl     ffff80000080961e <load_elf+0x5bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:595
    }
    if(dynamic){
ffff800000809681:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff800000809686:	0f 84 89 03 00 00    	je     ffff800000809a15 <load_elf+0x9b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:596
        char* dynstr=0;
ffff80000080968c:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff800000809693:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:597
        Elf64_Dyn *dyn=dynamic->sh_addr+offset;
ffff800000809694:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809698:	48 8b 50 0c          	mov    rdx,QWORD PTR [rax+0xc]
ffff80000080969c:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff8000008096a2:	48 98                	cdqe   
ffff8000008096a4:	48 01 d0             	add    rax,rdx
ffff8000008096a7:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:599

        mod->p_dynamic=dynamic;
ffff8000008096ae:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008096b2:	89 c2                	mov    edx,eax
ffff8000008096b4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008096b8:	89 50 18             	mov    DWORD PTR [rax+0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:603
        //这里一堆获取函数之后实现细节
        // dynstr=so_get_dynstr(dyn);
        //so_get_dynstr从so中获取.dynstr节
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff8000008096bb:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008096c2:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffff8000008096c6:	eb 2b                	jmp    ffff8000008096f3 <load_elf+0x692>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:604
            if(p->d_tag==DT_STRTAB){
ffff8000008096c8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008096cc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008096cf:	48 83 f8 05          	cmp    rax,0x5
ffff8000008096d3:	75 19                	jne    ffff8000008096ee <load_elf+0x68d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:605
                dynstr=p->d_un.d_ptr+offset;
ffff8000008096d5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008096d9:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff8000008096dd:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff8000008096e3:	48 98                	cdqe   
ffff8000008096e5:	48 01 d0             	add    rax,rdx
ffff8000008096e8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:606
                break;
ffff8000008096ec:	eb 11                	jmp    ffff8000008096ff <load_elf+0x69e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:603 (discriminator 2)
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff8000008096ee:	48 83 45 b0 10       	add    QWORD PTR [rbp-0x50],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:603 (discriminator 1)
ffff8000008096f3:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008096f7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008096fa:	48 85 c0             	test   rax,rax
ffff8000008096fd:	75 c9                	jne    ffff8000008096c8 <load_elf+0x667>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:609
            }
        }
        if(!dynstr){
ffff8000008096ff:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
ffff800000809704:	75 28                	jne    ffff80000080972e <load_elf+0x6cd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:610
            comprintf("cannot find dynstr in .dynamic!\n");
ffff800000809706:	48 b8 00 d7 ff ff ff 	movabs rax,0xffffffffffffd700
ffff80000080970d:	ff ff ff 
ffff800000809710:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000809714:	48 89 c7             	mov    rdi,rax
ffff800000809717:	49 89 df             	mov    r15,rbx
ffff80000080971a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080971f:	48 ba 23 4c ef ff ff 	movabs rdx,0xffffffffffef4c23
ffff800000809726:	ff ff ff 
ffff800000809729:	48 01 da             	add    rdx,rbx
ffff80000080972c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:619
        // so_load_sos(so_paths);
        //so_get_needed&so_load_sos
        //so_get_got
        // got=so_get_got(dyn);
        //intel架构上DT_PLTGOT存放的是got地址
        size_t relsz=0,relentsz=0;
ffff80000080972e:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff800000809735:	00 
ffff800000809736:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff80000080973d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:620
        off_t relptr=0;
ffff80000080973e:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:621
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff800000809745:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000080974c:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffff800000809750:	e9 b0 02 00 00       	jmp    ffff800000809a05 <load_elf+0x9a4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:622
            switch (p->d_tag)
ffff800000809755:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809759:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080975c:	48 83 f8 13          	cmp    rax,0x13
ffff800000809760:	0f 87 d5 01 00 00    	ja     ffff80000080993b <load_elf+0x8da>
ffff800000809766:	48 83 f8 07          	cmp    rax,0x7
ffff80000080976a:	73 29                	jae    ffff800000809795 <load_elf+0x734>
ffff80000080976c:	48 83 f8 06          	cmp    rax,0x6
ffff800000809770:	0f 84 89 01 00 00    	je     ffff8000008098ff <load_elf+0x89e>
ffff800000809776:	48 83 f8 06          	cmp    rax,0x6
ffff80000080977a:	0f 87 bb 01 00 00    	ja     ffff80000080993b <load_elf+0x8da>
ffff800000809780:	48 83 f8 01          	cmp    rax,0x1
ffff800000809784:	74 62                	je     ffff8000008097e8 <load_elf+0x787>
ffff800000809786:	48 83 f8 03          	cmp    rax,0x3
ffff80000080978a:	0f 84 ea 00 00 00    	je     ffff80000080987a <load_elf+0x819>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:657
                relentsz=p->d_un.d_val;
                goto is_rel_prepared;

            
            default:
                break;
ffff800000809790:	e9 a6 01 00 00       	jmp    ffff80000080993b <load_elf+0x8da>
ffff800000809795:	ba 01 00 00 00       	mov    edx,0x1
ffff80000080979a:	89 c1                	mov    ecx,eax
ffff80000080979c:	48 d3 e2             	shl    rdx,cl
ffff80000080979f:	48 89 d0             	mov    rax,rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:622
            switch (p->d_tag)
ffff8000008097a2:	48 89 c2             	mov    rdx,rax
ffff8000008097a5:	81 e2 00 02 08 00    	and    edx,0x80200
ffff8000008097ab:	48 85 d2             	test   rdx,rdx
ffff8000008097ae:	0f 95 c2             	setne  dl
ffff8000008097b1:	84 d2                	test   dl,dl
ffff8000008097b3:	0f 85 74 01 00 00    	jne    ffff80000080992d <load_elf+0x8cc>
ffff8000008097b9:	48 89 c2             	mov    rdx,rax
ffff8000008097bc:	81 e2 80 00 02 00    	and    edx,0x20080
ffff8000008097c2:	48 85 d2             	test   rdx,rdx
ffff8000008097c5:	0f 95 c2             	setne  dl
ffff8000008097c8:	84 d2                	test   dl,dl
ffff8000008097ca:	0f 85 50 01 00 00    	jne    ffff800000809920 <load_elf+0x8bf>
ffff8000008097d0:	25 00 01 04 00       	and    eax,0x40100
ffff8000008097d5:	48 85 c0             	test   rax,rax
ffff8000008097d8:	0f 95 c0             	setne  al
ffff8000008097db:	84 c0                	test   al,al
ffff8000008097dd:	0f 85 2f 01 00 00    	jne    ffff800000809912 <load_elf+0x8b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:657
                break;
ffff8000008097e3:	e9 53 01 00 00       	jmp    ffff80000080993b <load_elf+0x8da>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:625
                char* pathname=p->d_un.d_val+dynstr;
ffff8000008097e8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008097ec:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff8000008097f0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008097f4:	48 01 d0             	add    rax,rdx
ffff8000008097f7:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:626
                int so_fno=sys_open(pathname,O_EXEC);
ffff8000008097fe:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff800000809805:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080980a:	48 89 c7             	mov    rdi,rax
ffff80000080980d:	49 89 df             	mov    r15,rbx
ffff800000809810:	48 b8 e3 dc ee ff ff 	movabs rax,0xffffffffffeedce3
ffff800000809817:	ff ff ff 
ffff80000080981a:	48 01 d8             	add    rax,rbx
ffff80000080981d:	ff d0                	call   rax
ffff80000080981f:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:628
                load_elf(current->openf[so_fno]);
ffff800000809825:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080982c:	ff ff ff 
ffff80000080982f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809833:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809836:	8b 95 24 ff ff ff    	mov    edx,DWORD PTR [rbp-0xdc]
ffff80000080983c:	48 63 d2             	movsxd rdx,edx
ffff80000080983f:	48 83 c2 1e          	add    rdx,0x1e
ffff800000809843:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000809848:	48 89 c7             	mov    rdi,rax
ffff80000080984b:	48 b8 91 b5 ee ff ff 	movabs rax,0xffffffffffeeb591
ffff800000809852:	ff ff ff 
ffff800000809855:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000809859:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:629
                sys_close(so_fno);
ffff80000080985b:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff800000809861:	89 c7                	mov    edi,eax
ffff800000809863:	49 89 df             	mov    r15,rbx
ffff800000809866:	48 b8 83 e3 ee ff ff 	movabs rax,0xffffffffffeee383
ffff80000080986d:	ff ff ff 
ffff800000809870:	48 01 d8             	add    rax,rbx
ffff800000809873:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:630
                break;
ffff800000809875:	e9 c2 00 00 00       	jmp    ffff80000080993c <load_elf+0x8db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:632
                got=p->d_un.d_ptr+offset;
ffff80000080987a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080987e:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000809882:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
ffff800000809888:	48 98                	cdqe   
ffff80000080988a:	48 01 d0             	add    rax,rdx
ffff80000080988d:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:635
                got[2]=dl_runtime_resolve;
ffff800000809894:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff80000080989b:	ff ff ff 
ffff80000080989e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008098a2:	48 89 c2             	mov    rdx,rax
ffff8000008098a5:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008098ac:	48 83 c0 08          	add    rax,0x8
ffff8000008098b0:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:637
                got[1]=mod-modules;
ffff8000008098b2:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff8000008098b9:	ff ff ff 
ffff8000008098bc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008098c0:	48 89 c2             	mov    rdx,rax
ffff8000008098c3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008098c7:	48 29 d0             	sub    rax,rdx
ffff8000008098ca:	48 c1 f8 03          	sar    rax,0x3
ffff8000008098ce:	48 89 c2             	mov    rdx,rax
ffff8000008098d1:	48 b8 cd cc cc cc cc 	movabs rax,0xcccccccccccccccd
ffff8000008098d8:	cc cc cc 
ffff8000008098db:	48 0f af c2          	imul   rax,rdx
ffff8000008098df:	48 89 c2             	mov    rdx,rax
ffff8000008098e2:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008098e9:	48 83 c0 04          	add    rax,0x4
ffff8000008098ed:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:638
                mod->p_got=got;
ffff8000008098ef:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008098f6:	89 c2                	mov    edx,eax
ffff8000008098f8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008098fc:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:640
                mod->p_symbol=p->d_un.d_ptr;
ffff8000008098ff:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809903:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000809907:	89 c2                	mov    edx,eax
ffff800000809909:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080990d:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:641
                break;
ffff800000809910:	eb 2a                	jmp    ffff80000080993c <load_elf+0x8db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:644
                relsz=p->d_un.d_val;
ffff800000809912:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809916:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080991a:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:645
                goto is_rel_prepared;
ffff80000080991e:	eb 21                	jmp    ffff800000809941 <load_elf+0x8e0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:648
                relptr=p->d_un.d_ptr;
ffff800000809920:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809924:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000809928:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:649
                goto is_rel_prepared;
ffff80000080992b:	eb 14                	jmp    ffff800000809941 <load_elf+0x8e0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:652
                relentsz=p->d_un.d_val;
ffff80000080992d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809931:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000809935:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:653
                goto is_rel_prepared;
ffff800000809939:	eb 06                	jmp    ffff800000809941 <load_elf+0x8e0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:657
                break;
ffff80000080993b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:659
            }
            continue;
ffff80000080993c:	e9 bf 00 00 00       	jmp    ffff800000809a00 <load_elf+0x99f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:661
is_rel_prepared:
            if(!(relsz&&relentsz&&relptr))continue;
ffff800000809941:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff800000809946:	0f 84 b3 00 00 00    	je     ffff8000008099ff <load_elf+0x99e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:661 (discriminator 2)
ffff80000080994c:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
ffff800000809951:	0f 84 a8 00 00 00    	je     ffff8000008099ff <load_elf+0x99e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:661 (discriminator 4)
ffff800000809957:	83 7d 9c 00          	cmp    DWORD PTR [rbp-0x64],0x0
ffff80000080995b:	0f 84 9e 00 00 00    	je     ffff8000008099ff <load_elf+0x99e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:662
            for(int j=0;j<relsz/relentsz;j++){
ffff800000809961:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
ffff800000809968:	eb 64                	jmp    ffff8000008099ce <load_elf+0x96d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:663 (discriminator 3)
                fill_reloc(relptr+j*relentsz,mod-modules);
ffff80000080996a:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff800000809971:	ff ff ff 
ffff800000809974:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809978:	48 89 c2             	mov    rdx,rax
ffff80000080997b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080997f:	48 29 d0             	sub    rax,rdx
ffff800000809982:	48 c1 f8 03          	sar    rax,0x3
ffff800000809986:	48 89 c2             	mov    rdx,rax
ffff800000809989:	48 b8 cd cc cc cc cc 	movabs rax,0xcccccccccccccccd
ffff800000809990:	cc cc cc 
ffff800000809993:	48 0f af c2          	imul   rax,rdx
ffff800000809997:	48 89 c2             	mov    rdx,rax
ffff80000080999a:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080999d:	48 63 c8             	movsxd rcx,eax
ffff8000008099a0:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
ffff8000008099a3:	48 98                	cdqe   
ffff8000008099a5:	48 0f af 45 a0       	imul   rax,QWORD PTR [rbp-0x60]
ffff8000008099aa:	48 01 c8             	add    rax,rcx
ffff8000008099ad:	48 89 d6             	mov    rsi,rdx
ffff8000008099b0:	48 89 c7             	mov    rdi,rax
ffff8000008099b3:	49 89 df             	mov    r15,rbx
ffff8000008099b6:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008099bb:	48 ba ef c4 ee ff ff 	movabs rdx,0xffffffffffeec4ef
ffff8000008099c2:	ff ff ff 
ffff8000008099c5:	48 01 da             	add    rdx,rbx
ffff8000008099c8:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:662 (discriminator 3)
            for(int j=0;j<relsz/relentsz;j++){
ffff8000008099ca:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:662 (discriminator 1)
ffff8000008099ce:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
ffff8000008099d1:	48 63 c8             	movsxd rcx,eax
ffff8000008099d4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008099d8:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008099dd:	48 f7 75 a0          	div    QWORD PTR [rbp-0x60]
ffff8000008099e1:	48 39 c1             	cmp    rcx,rax
ffff8000008099e4:	72 84                	jb     ffff80000080996a <load_elf+0x909>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:665
            }
            relsz=relentsz=relptr=0;
ffff8000008099e6:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
ffff8000008099ed:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff8000008099f4:	00 
ffff8000008099f5:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008099f9:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffff8000008099fd:	eb 01                	jmp    ffff800000809a00 <load_elf+0x99f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:661
            if(!(relsz&&relentsz&&relptr))continue;
ffff8000008099ff:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:621 (discriminator 2)
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff800000809a00:	48 83 45 90 10       	add    QWORD PTR [rbp-0x70],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:621 (discriminator 3)
ffff800000809a05:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809a09:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809a0c:	48 85 c0             	test   rax,rax
ffff800000809a0f:	0f 85 40 fd ff ff    	jne    ffff800000809755 <load_elf+0x6f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:672
        }
        
    }
    
    //初始化堆
    chunk_header hdrtmp={
ffff800000809a15:	c7 85 d0 fe ff ff 00 	mov    DWORD PTR [rbp-0x130],0x0
ffff800000809a1c:	00 00 00 
ffff800000809a1f:	c7 85 d4 fe ff ff 00 	mov    DWORD PTR [rbp-0x12c],0x0
ffff800000809a26:	00 00 00 
ffff800000809a29:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
ffff800000809a30:	00 00 00 00 
ffff800000809a34:	48 c7 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],0x0
ffff800000809a3b:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:680
            .pgn=0,
            .prev=NULL
    };
    //空堆
    //分配堆
    off_t lma=pmalloc();
ffff800000809a3f:	49 89 df             	mov    r15,rbx
ffff800000809a42:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809a47:	48 ba 6e 50 ee ff ff 	movabs rdx,0xffffffffffee506e
ffff800000809a4e:	ff ff ff 
ffff800000809a51:	48 01 da             	add    rdx,rbx
ffff800000809a54:	ff d2                	call   rdx
ffff800000809a56:	89 85 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:681
    if(lma==-1)
ffff800000809a5c:	83 bd 20 ff ff ff ff 	cmp    DWORD PTR [rbp-0xe0],0xffffffff
ffff800000809a63:	75 26                	jne    ffff800000809a8b <load_elf+0xa2a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:683
    {
        current->regs.errcode=-ENOMEM;
ffff800000809a65:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809a6c:	ff ff ff 
ffff800000809a6f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809a73:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809a76:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff800000809a7d:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:684
        return -1;
ffff800000809a81:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000809a86:	e9 35 01 00 00       	jmp    ffff800000809bc0 <load_elf+0xb5f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:686
    }
    smmap(lma, HEAP_BASE, PAGE_PRESENT | PAGE_FOR_ALL | PAGE_RWX, current->pml4);
ffff800000809a8b:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809a92:	ff ff ff 
ffff800000809a95:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809a99:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809a9c:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000809aa3:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
ffff800000809aa9:	48 98                	cdqe   
ffff800000809aab:	48 89 d1             	mov    rcx,rdx
ffff800000809aae:	ba 07 00 00 00       	mov    edx,0x7
ffff800000809ab3:	be 00 00 00 01       	mov    esi,0x1000000
ffff800000809ab8:	48 89 c7             	mov    rdi,rax
ffff800000809abb:	49 89 df             	mov    r15,rbx
ffff800000809abe:	48 b8 29 40 ee ff ff 	movabs rax,0xffffffffffee4029
ffff800000809ac5:	ff ff ff 
ffff800000809ac8:	48 01 d8             	add    rax,rbx
ffff800000809acb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:687
    memset((unsigned char *) HEAP_BASE, 0, CHUNK_SIZE);
ffff800000809acd:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000809ad2:	be 00 00 00 00       	mov    esi,0x0
ffff800000809ad7:	bf 00 00 00 01       	mov    edi,0x1000000
ffff800000809adc:	49 89 df             	mov    r15,rbx
ffff800000809adf:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff800000809ae6:	ff ff ff 
ffff800000809ae9:	48 01 d8             	add    rax,rbx
ffff800000809aec:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:688
    current->mem_struct.heap_base=HEAP_BASE;
ffff800000809aee:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809af5:	ff ff ff 
ffff800000809af8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809afc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809aff:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x1000000
ffff800000809b06:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:689
    current->mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
ffff800000809b07:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809b0e:	ff ff ff 
ffff800000809b11:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809b15:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809b18:	48 c7 40 30 00 10 00 	mov    QWORD PTR [rax+0x30],0x1001000
ffff800000809b1f:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:690
    memcpy((chunk_header*)HEAP_BASE,&hdrtmp,sizeof(hdrtmp));
ffff800000809b20:	48 8d 85 d0 fe ff ff 	lea    rax,[rbp-0x130]
ffff800000809b27:	ba 18 00 00 00       	mov    edx,0x18
ffff800000809b2c:	48 89 c6             	mov    rsi,rax
ffff800000809b2f:	bf 00 00 00 01       	mov    edi,0x1000000
ffff800000809b34:	49 89 df             	mov    r15,rbx
ffff800000809b37:	48 b8 c4 50 ef ff ff 	movabs rax,0xffffffffffef50c4
ffff800000809b3e:	ff ff ff 
ffff800000809b41:	48 01 d8             	add    rax,rbx
ffff800000809b44:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:692
    //设置栈
    current->mem_struct.stack_top=STACK_TOP;
ffff800000809b46:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000809b4d:	ff ff ff 
ffff800000809b50:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809b54:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809b57:	48 bf 00 f0 ff ff ff 	movabs rdi,0x7ffffffff000
ffff800000809b5e:	7f 00 00 
ffff800000809b61:	48 89 78 40          	mov    QWORD PTR [rax+0x40],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:693
    off_t entry=0;
ffff800000809b65:	c7 85 1c ff ff ff 00 	mov    DWORD PTR [rbp-0xe4],0x0
ffff800000809b6c:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:694
    entry=ehdr->e_entry;
ffff800000809b6f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000809b76:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000809b7a:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:695
    kmfree(tmpla);
ffff800000809b80:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
ffff800000809b86:	48 98                	cdqe   
ffff800000809b88:	48 89 c7             	mov    rdi,rax
ffff800000809b8b:	49 89 df             	mov    r15,rbx
ffff800000809b8e:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff800000809b95:	ff ff ff 
ffff800000809b98:	48 01 d8             	add    rax,rbx
ffff800000809b9b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:696
    kmfree(shla);
ffff800000809b9d:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
ffff800000809ba3:	48 98                	cdqe   
ffff800000809ba5:	48 89 c7             	mov    rdi,rax
ffff800000809ba8:	49 89 df             	mov    r15,rbx
ffff800000809bab:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff800000809bb2:	ff ff ff 
ffff800000809bb5:	48 01 d8             	add    rax,rbx
ffff800000809bb8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:698
    //从系统调用返回
    return entry;
ffff800000809bba:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:699 (discriminator 1)
}
ffff800000809bc0:	48 81 c4 30 01 00 00 	add    rsp,0x130
ffff800000809bc7:	5b                   	pop    rbx
ffff800000809bc8:	41 5f                	pop    r15
ffff800000809bca:	5d                   	pop    rbp
ffff800000809bcb:	c3                   	ret    

ffff800000809bcc <get_modid>:
get_modid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:700
id_t get_modid(void){
ffff800000809bcc:	f3 0f 1e fa          	endbr64 
ffff800000809bd0:	55                   	push   rbp
ffff800000809bd1:	48 89 e5             	mov    rbp,rsp
ffff800000809bd4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809bd4 <get_modid+0x8>
ffff800000809bdb:	49 bb fc 3e 11 00 00 	movabs r11,0x113efc
ffff800000809be2:	00 00 00 
ffff800000809be5:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:702
    static id_t modid_d=0;
    return modid_d++;
ffff800000809be8:	48 ba b0 68 af ff ff 	movabs rdx,0xffffffffffaf68b0
ffff800000809bef:	ff ff ff 
ffff800000809bf2:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff800000809bf5:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff800000809bf8:	48 be b0 68 af ff ff 	movabs rsi,0xffffffffffaf68b0
ffff800000809bff:	ff ff ff 
ffff800000809c02:	89 0c 30             	mov    DWORD PTR [rax+rsi*1],ecx
ffff800000809c05:	89 d0                	mov    eax,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:703
}
ffff800000809c07:	5d                   	pop    rbp
ffff800000809c08:	c3                   	ret    

ffff800000809c09 <dl_runtime_resolve>:
dl_runtime_resolve():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:704
void dl_runtime_resolve(){
ffff800000809c09:	f3 0f 1e fa          	endbr64 
ffff800000809c0d:	55                   	push   rbp
ffff800000809c0e:	48 89 e5             	mov    rbp,rsp
ffff800000809c11:	41 57                	push   r15
ffff800000809c13:	53                   	push   rbx
ffff800000809c14:	48 83 ec 30          	sub    rsp,0x30
ffff800000809c18:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809c18 <dl_runtime_resolve+0xf>
ffff800000809c1f:	49 bb b8 3e 11 00 00 	movabs r11,0x113eb8
ffff800000809c26:	00 00 00 
ffff800000809c29:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:707
    //获取modid
    unsigned long modid,rel_offset;
    asm volatile("push %%rax\n mov 8(%%rsp),%%rax\n mov %%rax,%0":"=m"(modid));
ffff800000809c2c:	50                   	push   rax
ffff800000809c2d:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
ffff800000809c32:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:708
    asm volatile("push %%rax\n mov 16(%%rsp),%%rax\n mov %%rax,%0":"=m"(rel_offset));
ffff800000809c36:	50                   	push   rax
ffff800000809c37:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
ffff800000809c3c:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:709
    Elf64_Rel* rel=rel_offset;
ffff800000809c40:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809c44:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:710
    int symi=ELF64_R_SYM(rel->r_info),type=ELF64_R_TYPE(rel->r_info);
ffff800000809c48:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809c4c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000809c4f:	ba 20 00 00 00       	mov    edx,0x20
ffff800000809c54:	89 d1                	mov    ecx,edx
ffff800000809c56:	d3 e8                	shr    eax,cl
ffff800000809c58:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffff800000809c5b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809c5f:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000809c62:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:711
    off_t sym_off=get_sym_addr(modid,symi);
ffff800000809c65:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809c68:	48 63 d0             	movsxd rdx,eax
ffff800000809c6b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809c6f:	48 89 d6             	mov    rsi,rdx
ffff800000809c72:	48 89 c7             	mov    rdi,rax
ffff800000809c75:	49 89 df             	mov    r15,rbx
ffff800000809c78:	48 b8 f4 c2 ee ff ff 	movabs rax,0xffffffffffeec2f4
ffff800000809c7f:	ff ff ff 
ffff800000809c82:	48 01 d8             	add    rax,rbx
ffff800000809c85:	ff d0                	call   rax
ffff800000809c87:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:714
    //这里假定获取符号的地址是正确的，可以不修改符号表，而是通过记录模块整体加载地址，
    //来加上偏移量获取正确的符号地址
    off_t* v_rel=rel->r_offset;
ffff800000809c8a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809c8e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809c91:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:715
    switch (type)
ffff800000809c95:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000809c98:	83 e8 03             	sub    eax,0x3
ffff800000809c9b:	83 f8 07             	cmp    eax,0x7
ffff800000809c9e:	0f 87 0a 01 00 00    	ja     ffff800000809dae <dl_runtime_resolve+0x1a5>
ffff800000809ca4:	89 c0                	mov    eax,eax
ffff800000809ca6:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809cad:	00 
ffff800000809cae:	48 8d 05 43 15 11 00 	lea    rax,[rip+0x111543]        # ffff80000091b1f8 <.LC3+0x28>
ffff800000809cb5:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000809cb9:	48 8d 15 38 15 11 00 	lea    rdx,[rip+0x111538]        # ffff80000091b1f8 <.LC3+0x28>
ffff800000809cc0:	48 01 d0             	add    rax,rdx
ffff800000809cc3:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:719
    {
    case R_X86_64_GLOB_DAT:
    case R_X86_64_JUMP_SLOT:
        *v_rel=sym_off;
ffff800000809cc6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809cca:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000809ccd:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:720
        break;
ffff800000809ccf:	e9 db 00 00 00       	jmp    ffff800000809daf <dl_runtime_resolve+0x1a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:722
    case R_X86_64_PLT32:
        *v_rel=get_sym_plt(modid,symi);
ffff800000809cd4:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809cd7:	48 63 d0             	movsxd rdx,eax
ffff800000809cda:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809cde:	48 89 d6             	mov    rsi,rdx
ffff800000809ce1:	48 89 c7             	mov    rdi,rax
ffff800000809ce4:	49 89 df             	mov    r15,rbx
ffff800000809ce7:	48 b8 36 c4 ee ff ff 	movabs rax,0xffffffffffeec436
ffff800000809cee:	ff ff ff 
ffff800000809cf1:	48 01 d8             	add    rax,rbx
ffff800000809cf4:	ff d0                	call   rax
ffff800000809cf6:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000809cfa:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:723
        break;
ffff800000809cfc:	e9 ae 00 00 00       	jmp    ffff800000809daf <dl_runtime_resolve+0x1a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:725
    case R_X86_64_RELATIVE:
        *v_rel+=get_load_base(modid);
ffff800000809d01:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809d05:	48 89 c7             	mov    rdi,rax
ffff800000809d08:	49 89 df             	mov    r15,rbx
ffff800000809d0b:	48 b8 5d c4 ee ff ff 	movabs rax,0xffffffffffeec45d
ffff800000809d12:	ff ff ff 
ffff800000809d15:	48 01 d8             	add    rax,rbx
ffff800000809d18:	ff d0                	call   rax
ffff800000809d1a:	89 c2                	mov    edx,eax
ffff800000809d1c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809d20:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809d22:	01 c2                	add    edx,eax
ffff800000809d24:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809d28:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:726
        break;
ffff800000809d2a:	e9 80 00 00 00       	jmp    ffff800000809daf <dl_runtime_resolve+0x1a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:728
    case R_X86_64_GOTOFF:
        *v_rel+=sym_off-get_got(modid);
ffff800000809d2f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809d33:	48 89 c7             	mov    rdi,rax
ffff800000809d36:	49 89 df             	mov    r15,rbx
ffff800000809d39:	48 b8 a4 c4 ee ff ff 	movabs rax,0xffffffffffeec4a4
ffff800000809d40:	ff ff ff 
ffff800000809d43:	48 01 d8             	add    rax,rbx
ffff800000809d46:	ff d0                	call   rax
ffff800000809d48:	89 c2                	mov    edx,eax
ffff800000809d4a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809d4d:	29 d0                	sub    eax,edx
ffff800000809d4f:	89 c1                	mov    ecx,eax
ffff800000809d51:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809d55:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809d57:	8d 14 01             	lea    edx,[rcx+rax*1]
ffff800000809d5a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809d5e:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:729
        break;
ffff800000809d60:	eb 4d                	jmp    ffff800000809daf <dl_runtime_resolve+0x1a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:731
    case R_X86_64_GOTPC:
        *v_rel+=get_got(modid)-rel_offset;
ffff800000809d62:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809d66:	48 89 c7             	mov    rdi,rax
ffff800000809d69:	49 89 df             	mov    r15,rbx
ffff800000809d6c:	48 b8 a4 c4 ee ff ff 	movabs rax,0xffffffffffeec4a4
ffff800000809d73:	ff ff ff 
ffff800000809d76:	48 01 d8             	add    rax,rbx
ffff800000809d79:	ff d0                	call   rax
ffff800000809d7b:	48 98                	cdqe   
ffff800000809d7d:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff800000809d81:	48 29 c8             	sub    rax,rcx
ffff800000809d84:	48 89 c2             	mov    rdx,rax
ffff800000809d87:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809d8b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809d8d:	89 c1                	mov    ecx,eax
ffff800000809d8f:	89 d0                	mov    eax,edx
ffff800000809d91:	01 c8                	add    eax,ecx
ffff800000809d93:	89 c2                	mov    edx,eax
ffff800000809d95:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809d99:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:732
        break;
ffff800000809d9b:	eb 12                	jmp    ffff800000809daf <dl_runtime_resolve+0x1a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:735
    case R_X86_64_GOT32:
    //这一项,rel里面指向的符号的地址就是got
        *v_rel+=sym_off;
ffff800000809d9d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809da1:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000809da3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809da6:	01 c2                	add    edx,eax
ffff800000809da8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809dac:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:737
    default:
        break;
ffff800000809dae:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:741
    }
    //重定位完毕，直接返回到目标地址

    asm volatile("mov %0,%%rax\n mov %%rax,0(%%rsp)"::"m"(*v_rel));
ffff800000809daf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809db3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809db6:	48 89 04 24          	mov    QWORD PTR [rsp],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:742
}
ffff800000809dba:	90                   	nop
ffff800000809dbb:	48 83 c4 30          	add    rsp,0x30
ffff800000809dbf:	5b                   	pop    rbx
ffff800000809dc0:	41 5f                	pop    r15
ffff800000809dc2:	5d                   	pop    rbp
ffff800000809dc3:	c3                   	ret    

ffff800000809dc4 <get_sym_addr>:
get_sym_addr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:743
off_t get_sym_addr(unsigned long modid,unsigned long symi){
ffff800000809dc4:	f3 0f 1e fa          	endbr64 
ffff800000809dc8:	55                   	push   rbp
ffff800000809dc9:	48 89 e5             	mov    rbp,rsp
ffff800000809dcc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809dcc <get_sym_addr+0x8>
ffff800000809dd3:	49 bb 04 3d 11 00 00 	movabs r11,0x113d04
ffff800000809dda:	00 00 00 
ffff800000809ddd:	4c 01 d8             	add    rax,r11
ffff800000809de0:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000809de4:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:744
    struct Elf64_Sym *sym=modules[modid].p_symbol;
ffff800000809de8:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000809def:	ff ff ff 
ffff800000809df2:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff800000809df6:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000809dfa:	48 89 ca             	mov    rdx,rcx
ffff800000809dfd:	48 c1 e2 02          	shl    rdx,0x2
ffff800000809e01:	48 01 ca             	add    rdx,rcx
ffff800000809e04:	48 c1 e2 03          	shl    rdx,0x3
ffff800000809e08:	48 01 f2             	add    rdx,rsi
ffff800000809e0b:	48 83 c2 1c          	add    rdx,0x1c
ffff800000809e0f:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000809e11:	48 63 d2             	movsxd rdx,edx
ffff800000809e14:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:745
    sym+=symi;
ffff800000809e18:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff800000809e1c:	48 89 ca             	mov    rdx,rcx
ffff800000809e1f:	48 c1 e2 02          	shl    rdx,0x2
ffff800000809e23:	48 01 ca             	add    rdx,rcx
ffff800000809e26:	48 c1 e2 02          	shl    rdx,0x2
ffff800000809e2a:	48 01 55 f0          	add    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:751
    if(sym->st_shndx==SHN_COMMON){
        //还没分配空间的符号，需要分配空间，st_value表示地址对齐约束

    }

    off_t symaddr=sym->st_value+modules[modid].load_offset;
ffff800000809e2e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000809e32:	48 8b 52 04          	mov    rdx,QWORD PTR [rdx+0x4]
ffff800000809e36:	89 d7                	mov    edi,edx
ffff800000809e38:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000809e3f:	ff ff ff 
ffff800000809e42:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff800000809e46:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000809e4a:	48 89 ca             	mov    rdx,rcx
ffff800000809e4d:	48 c1 e2 02          	shl    rdx,0x2
ffff800000809e51:	48 01 ca             	add    rdx,rcx
ffff800000809e54:	48 c1 e2 03          	shl    rdx,0x3
ffff800000809e58:	48 01 f2             	add    rdx,rsi
ffff800000809e5b:	48 83 c2 04          	add    rdx,0x4
ffff800000809e5f:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000809e61:	01 fa                	add    edx,edi
ffff800000809e63:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:752
    if(modules[modid].type==ET_DYN){
ffff800000809e66:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000809e6d:	ff ff ff 
ffff800000809e70:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff800000809e74:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000809e78:	48 89 ca             	mov    rdx,rcx
ffff800000809e7b:	48 c1 e2 02          	shl    rdx,0x2
ffff800000809e7f:	48 01 ca             	add    rdx,rcx
ffff800000809e82:	48 c1 e2 03          	shl    rdx,0x3
ffff800000809e86:	48 01 f2             	add    rdx,rsi
ffff800000809e89:	48 83 c2 10          	add    rdx,0x10
ffff800000809e8d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000809e90:	48 83 fa 03          	cmp    rdx,0x3
ffff800000809e94:	75 6b                	jne    ffff800000809f01 <get_sym_addr+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:754
        //还要加上节地址
        Elf64_Ehdr* ehdr=modules[modid].header;
ffff800000809e96:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000809e9d:	ff ff ff 
ffff800000809ea0:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000809ea4:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000809ea8:	48 89 d0             	mov    rax,rdx
ffff800000809eab:	48 c1 e0 02          	shl    rax,0x2
ffff800000809eaf:	48 01 d0             	add    rax,rdx
ffff800000809eb2:	48 c1 e0 03          	shl    rax,0x3
ffff800000809eb6:	48 01 c8             	add    rax,rcx
ffff800000809eb9:	48 83 c0 08          	add    rax,0x8
ffff800000809ebd:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809ebf:	48 98                	cdqe   
ffff800000809ec1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:755
        struct Elf64_Shdr* shdr=ehdr->e_shoff;
ffff800000809ec5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809ec9:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff800000809ecd:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:756
        symaddr+=shdr[sym->st_shndx].sh_addr;
ffff800000809ed1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000809ed5:	0f b7 40 12          	movzx  eax,WORD PTR [rax+0x12]
ffff800000809ed9:	0f b7 d0             	movzx  edx,ax
ffff800000809edc:	48 89 d0             	mov    rax,rdx
ffff800000809edf:	48 01 c0             	add    rax,rax
ffff800000809ee2:	48 01 d0             	add    rax,rdx
ffff800000809ee5:	48 c1 e0 04          	shl    rax,0x4
ffff800000809ee9:	48 89 c2             	mov    rdx,rax
ffff800000809eec:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809ef0:	48 01 d0             	add    rax,rdx
ffff800000809ef3:	48 8b 40 0c          	mov    rax,QWORD PTR [rax+0xc]
ffff800000809ef7:	89 c2                	mov    edx,eax
ffff800000809ef9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000809efc:	01 d0                	add    eax,edx
ffff800000809efe:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:758
    }
    return symaddr;
ffff800000809f01:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:759
}
ffff800000809f04:	5d                   	pop    rbp
ffff800000809f05:	c3                   	ret    

ffff800000809f06 <get_sym_plt>:
get_sym_plt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:760
off_t get_sym_plt(unsigned long modid,unsigned long symi){
ffff800000809f06:	f3 0f 1e fa          	endbr64 
ffff800000809f0a:	55                   	push   rbp
ffff800000809f0b:	48 89 e5             	mov    rbp,rsp
ffff800000809f0e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809f0e <get_sym_plt+0x8>
ffff800000809f15:	49 bb c2 3b 11 00 00 	movabs r11,0x113bc2
ffff800000809f1c:	00 00 00 
ffff800000809f1f:	4c 01 d8             	add    rax,r11
ffff800000809f22:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000809f26:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:762

}
ffff800000809f2a:	90                   	nop
ffff800000809f2b:	5d                   	pop    rbp
ffff800000809f2c:	c3                   	ret    

ffff800000809f2d <get_load_base>:
get_load_base():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:763
off_t get_load_base(unsigned long modid){
ffff800000809f2d:	f3 0f 1e fa          	endbr64 
ffff800000809f31:	55                   	push   rbp
ffff800000809f32:	48 89 e5             	mov    rbp,rsp
ffff800000809f35:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809f35 <get_load_base+0x8>
ffff800000809f3c:	49 bb 9b 3b 11 00 00 	movabs r11,0x113b9b
ffff800000809f43:	00 00 00 
ffff800000809f46:	4c 01 d8             	add    rax,r11
ffff800000809f49:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:764
    return modules[modid].base;
ffff800000809f4d:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000809f54:	ff ff ff 
ffff800000809f57:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000809f5b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000809f5f:	48 89 d0             	mov    rax,rdx
ffff800000809f62:	48 c1 e0 02          	shl    rax,0x2
ffff800000809f66:	48 01 d0             	add    rax,rdx
ffff800000809f69:	48 c1 e0 03          	shl    rax,0x3
ffff800000809f6d:	48 01 c8             	add    rax,rcx
ffff800000809f70:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:765
}
ffff800000809f72:	5d                   	pop    rbp
ffff800000809f73:	c3                   	ret    

ffff800000809f74 <get_got>:
get_got():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:766
off_t get_got(unsigned long modid){
ffff800000809f74:	f3 0f 1e fa          	endbr64 
ffff800000809f78:	55                   	push   rbp
ffff800000809f79:	48 89 e5             	mov    rbp,rsp
ffff800000809f7c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809f7c <get_got+0x8>
ffff800000809f83:	49 bb 54 3b 11 00 00 	movabs r11,0x113b54
ffff800000809f8a:	00 00 00 
ffff800000809f8d:	4c 01 d8             	add    rax,r11
ffff800000809f90:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:767
    return modules[modid].p_got;
ffff800000809f94:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000809f9b:	ff ff ff 
ffff800000809f9e:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000809fa2:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000809fa6:	48 89 d0             	mov    rax,rdx
ffff800000809fa9:	48 c1 e0 02          	shl    rax,0x2
ffff800000809fad:	48 01 d0             	add    rax,rdx
ffff800000809fb0:	48 c1 e0 03          	shl    rax,0x3
ffff800000809fb4:	48 01 c8             	add    rax,rcx
ffff800000809fb7:	48 83 c0 20          	add    rax,0x20
ffff800000809fbb:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:768
}
ffff800000809fbd:	5d                   	pop    rbp
ffff800000809fbe:	c3                   	ret    

ffff800000809fbf <fill_reloc>:
fill_reloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:770

void fill_reloc(Elf64_Rel* rel,int modid){
ffff800000809fbf:	f3 0f 1e fa          	endbr64 
ffff800000809fc3:	55                   	push   rbp
ffff800000809fc4:	48 89 e5             	mov    rbp,rsp
ffff800000809fc7:	41 57                	push   r15
ffff800000809fc9:	53                   	push   rbx
ffff800000809fca:	48 83 ec 30          	sub    rsp,0x30
ffff800000809fce:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809fce <fill_reloc+0xf>
ffff800000809fd5:	49 bb 02 3b 11 00 00 	movabs r11,0x113b02
ffff800000809fdc:	00 00 00 
ffff800000809fdf:	4c 01 db             	add    rbx,r11
ffff800000809fe2:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000809fe6:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:771
    int symi=ELF64_R_SYM(rel->r_info),type=ELF64_R_TYPE(rel->r_info);
ffff800000809fe9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809fed:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000809ff0:	ba 20 00 00 00       	mov    edx,0x20
ffff800000809ff5:	89 d1                	mov    ecx,edx
ffff800000809ff7:	d3 e8                	shr    eax,cl
ffff800000809ff9:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffff800000809ffc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a000:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080a003:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:772
    off_t sym_off=get_sym_addr(modid,symi);
ffff80000080a006:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a009:	48 63 d0             	movsxd rdx,eax
ffff80000080a00c:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080a00f:	48 98                	cdqe   
ffff80000080a011:	48 89 d6             	mov    rsi,rdx
ffff80000080a014:	48 89 c7             	mov    rdi,rax
ffff80000080a017:	49 89 df             	mov    r15,rbx
ffff80000080a01a:	48 b8 f4 c2 ee ff ff 	movabs rax,0xffffffffffeec2f4
ffff80000080a021:	ff ff ff 
ffff80000080a024:	48 01 d8             	add    rax,rbx
ffff80000080a027:	ff d0                	call   rax
ffff80000080a029:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:775
    //这里假定获取符号的地址是正确的，可以不修改符号表，而是通过记录模块整体加载地址，
    //来加上偏移量获取正确的符号地址
    off_t* v_rel=rel->r_offset;
ffff80000080a02c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a030:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a033:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:776
    switch (type)
ffff80000080a037:	83 7d e8 0b          	cmp    DWORD PTR [rbp-0x18],0xb
ffff80000080a03b:	0f 87 37 01 00 00    	ja     ffff80000080a178 <fill_reloc+0x1b9>
ffff80000080a041:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080a044:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080a04b:	00 
ffff80000080a04c:	48 8d 05 e5 11 11 00 	lea    rax,[rip+0x1111e5]        # ffff80000091b238 <.LC3+0x68>
ffff80000080a053:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080a057:	48 8d 15 da 11 11 00 	lea    rdx,[rip+0x1111da]        # ffff80000091b238 <.LC3+0x68>
ffff80000080a05e:	48 01 d0             	add    rax,rdx
ffff80000080a061:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:780
    {
    case R_X86_64_GLOB_DAT:
    case R_X86_64_JUMP_SLOT:
        *v_rel=sym_off;
ffff80000080a064:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a068:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080a06b:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:781
        break;
ffff80000080a06d:	e9 07 01 00 00       	jmp    ffff80000080a179 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:783
    case R_X86_64_PLT32:
        *v_rel=get_sym_plt(modid,symi);
ffff80000080a072:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a075:	48 63 d0             	movsxd rdx,eax
ffff80000080a078:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080a07b:	48 98                	cdqe   
ffff80000080a07d:	48 89 d6             	mov    rsi,rdx
ffff80000080a080:	48 89 c7             	mov    rdi,rax
ffff80000080a083:	49 89 df             	mov    r15,rbx
ffff80000080a086:	48 b8 36 c4 ee ff ff 	movabs rax,0xffffffffffeec436
ffff80000080a08d:	ff ff ff 
ffff80000080a090:	48 01 d8             	add    rax,rbx
ffff80000080a093:	ff d0                	call   rax
ffff80000080a095:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080a099:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:784
        break;
ffff80000080a09b:	e9 d9 00 00 00       	jmp    ffff80000080a179 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:786
    case R_X86_64_RELATIVE:
        *v_rel+=get_load_base(modid);
ffff80000080a0a0:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080a0a3:	48 98                	cdqe   
ffff80000080a0a5:	48 89 c7             	mov    rdi,rax
ffff80000080a0a8:	49 89 df             	mov    r15,rbx
ffff80000080a0ab:	48 b8 5d c4 ee ff ff 	movabs rax,0xffffffffffeec45d
ffff80000080a0b2:	ff ff ff 
ffff80000080a0b5:	48 01 d8             	add    rax,rbx
ffff80000080a0b8:	ff d0                	call   rax
ffff80000080a0ba:	89 c2                	mov    edx,eax
ffff80000080a0bc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a0c0:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a0c2:	01 c2                	add    edx,eax
ffff80000080a0c4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a0c8:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:787
        break;
ffff80000080a0ca:	e9 aa 00 00 00       	jmp    ffff80000080a179 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:789
    case R_X86_64_GOTOFF:
        *v_rel+=sym_off-get_got(modid);
ffff80000080a0cf:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080a0d2:	48 98                	cdqe   
ffff80000080a0d4:	48 89 c7             	mov    rdi,rax
ffff80000080a0d7:	49 89 df             	mov    r15,rbx
ffff80000080a0da:	48 b8 a4 c4 ee ff ff 	movabs rax,0xffffffffffeec4a4
ffff80000080a0e1:	ff ff ff 
ffff80000080a0e4:	48 01 d8             	add    rax,rbx
ffff80000080a0e7:	ff d0                	call   rax
ffff80000080a0e9:	89 c2                	mov    edx,eax
ffff80000080a0eb:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080a0ee:	29 d0                	sub    eax,edx
ffff80000080a0f0:	89 c1                	mov    ecx,eax
ffff80000080a0f2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a0f6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a0f8:	8d 14 01             	lea    edx,[rcx+rax*1]
ffff80000080a0fb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a0ff:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:790
        break;
ffff80000080a101:	eb 76                	jmp    ffff80000080a179 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:792
    case R_X86_64_GOTPC:
        *v_rel+=get_got(modid)-(off_t)rel;
ffff80000080a103:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080a106:	48 98                	cdqe   
ffff80000080a108:	48 89 c7             	mov    rdi,rax
ffff80000080a10b:	49 89 df             	mov    r15,rbx
ffff80000080a10e:	48 b8 a4 c4 ee ff ff 	movabs rax,0xffffffffffeec4a4
ffff80000080a115:	ff ff ff 
ffff80000080a118:	48 01 d8             	add    rax,rbx
ffff80000080a11b:	ff d0                	call   rax
ffff80000080a11d:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080a121:	89 d1                	mov    ecx,edx
ffff80000080a123:	29 c8                	sub    eax,ecx
ffff80000080a125:	89 c2                	mov    edx,eax
ffff80000080a127:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a12b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a12d:	01 c2                	add    edx,eax
ffff80000080a12f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a133:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:793
        break;
ffff80000080a135:	eb 42                	jmp    ffff80000080a179 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:796
    case R_X86_64_GOT32:
    //这一项,rel里面指向的符号的地址就是got
        *v_rel+=sym_off;
ffff80000080a137:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a13b:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080a13d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080a140:	01 c2                	add    edx,eax
ffff80000080a142:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a146:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:797
        break;
ffff80000080a148:	eb 2f                	jmp    ffff80000080a179 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:800
    case R_X86_64_32S:
    case R_X86_64_64:
        *v_rel+=sym_off;
ffff80000080a14a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a14e:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080a150:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080a153:	01 c2                	add    edx,eax
ffff80000080a155:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a159:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:801
        break;
ffff80000080a15b:	eb 1c                	jmp    ffff80000080a179 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:803
    case R_X86_64_PC32:
        *v_rel+=sym_off-(off_t)rel;
ffff80000080a15d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a161:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080a163:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a167:	89 c1                	mov    ecx,eax
ffff80000080a169:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080a16c:	29 c8                	sub    eax,ecx
ffff80000080a16e:	01 c2                	add    edx,eax
ffff80000080a170:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a174:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:804
        break;
ffff80000080a176:	eb 01                	jmp    ffff80000080a179 <fill_reloc+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:806
    default:
        break;
ffff80000080a178:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:808
    }
ffff80000080a179:	90                   	nop
ffff80000080a17a:	48 83 c4 30          	add    rsp,0x30
ffff80000080a17e:	5b                   	pop    rbx
ffff80000080a17f:	41 5f                	pop    r15
ffff80000080a181:	5d                   	pop    rbp
ffff80000080a182:	c3                   	ret    
ffff80000080a183:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff80000080a18a:	00 00 00 
ffff80000080a18d:	0f 1f 00             	nop    DWORD PTR [rax]

ffff80000080a190 <_syscall>:
_syscall():
ffff80000080a190:	55                   	push   rbp
ffff80000080a191:	48 bd 00 80 10 00 00 	movabs rbp,0xffff800000108000
ffff80000080a198:	80 ff ff 
ffff80000080a19b:	48 89 65 14          	mov    QWORD PTR [rbp+0x14],rsp
ffff80000080a19f:	48 8b 65 24          	mov    rsp,QWORD PTR [rbp+0x24]
ffff80000080a1a3:	6a 2b                	push   0x2b
ffff80000080a1a5:	54                   	push   rsp
ffff80000080a1a6:	9c                   	pushf  
ffff80000080a1a7:	6a 33                	push   0x33
ffff80000080a1a9:	51                   	push   rcx
ffff80000080a1aa:	50                   	push   rax
ffff80000080a1ab:	53                   	push   rbx
ffff80000080a1ac:	51                   	push   rcx
ffff80000080a1ad:	52                   	push   rdx
ffff80000080a1ae:	57                   	push   rdi
ffff80000080a1af:	56                   	push   rsi
ffff80000080a1b0:	41 50                	push   r8
ffff80000080a1b2:	41 51                	push   r9
ffff80000080a1b4:	41 52                	push   r10
ffff80000080a1b6:	41 53                	push   r11
ffff80000080a1b8:	41 54                	push   r12
ffff80000080a1ba:	41 55                	push   r13
ffff80000080a1bc:	41 56                	push   r14
ffff80000080a1be:	41 57                	push   r15
ffff80000080a1c0:	66 8c c0             	mov    ax,es
ffff80000080a1c3:	50                   	push   rax
ffff80000080a1c4:	66 8c d8             	mov    ax,ds
ffff80000080a1c7:	50                   	push   rax
ffff80000080a1c8:	66 b8 10 00          	mov    ax,0x10
ffff80000080a1cc:	8e c0                	mov    es,eax
ffff80000080a1ce:	8e d8                	mov    ds,eax
ffff80000080a1d0:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
ffff80000080a1d5:	41 53                	push   r11
ffff80000080a1d7:	51                   	push   rcx
ffff80000080a1d8:	49 87 ca             	xchg   r10,rcx
ffff80000080a1db:	57                   	push   rdi
ffff80000080a1dc:	48 bf e8 02 40 00 00 	movabs rdi,0xffff8000004002e8
ffff80000080a1e3:	80 ff ff 
ffff80000080a1e6:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
ffff80000080a1e9:	4c 89 97 6c 02 00 00 	mov    QWORD PTR [rdi+0x26c],r10
ffff80000080a1f0:	5f                   	pop    rdi
ffff80000080a1f1:	e8 2b 69 ff ff       	call   ffff800000800b21 <syscall>

ffff80000080a1f6 <_syscall_sysret>:
_syscall_sysret():
ffff80000080a1f6:	4c 87 d1             	xchg   rcx,r10
ffff80000080a1f9:	59                   	pop    rcx
ffff80000080a1fa:	41 5b                	pop    r11
ffff80000080a1fc:	58                   	pop    rax
ffff80000080a1fd:	8e d8                	mov    ds,eax
ffff80000080a1ff:	58                   	pop    rax
ffff80000080a200:	8e c0                	mov    es,eax
ffff80000080a202:	41 5f                	pop    r15
ffff80000080a204:	41 5e                	pop    r14
ffff80000080a206:	41 5d                	pop    r13
ffff80000080a208:	41 5c                	pop    r12
ffff80000080a20a:	41 5b                	pop    r11
ffff80000080a20c:	41 5a                	pop    r10
ffff80000080a20e:	41 59                	pop    r9
ffff80000080a210:	41 58                	pop    r8
ffff80000080a212:	5e                   	pop    rsi
ffff80000080a213:	5f                   	pop    rdi
ffff80000080a214:	5a                   	pop    rdx
ffff80000080a215:	59                   	pop    rcx
ffff80000080a216:	5b                   	pop    rbx
ffff80000080a217:	48 83 c4 08          	add    rsp,0x8
ffff80000080a21b:	48 8b 65 14          	mov    rsp,QWORD PTR [rbp+0x14]
ffff80000080a21f:	5d                   	pop    rbp
ffff80000080a220:	fb                   	sti    
ffff80000080a221:	48 0f 07             	sysretq 

ffff80000080a224 <init_framebuffer>:
init_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:27
static u32 font_width_bytes;
static u8 *glyph_table;
static u32 bytes_per_glyph, glyph_nr;
int font_size=1;
void init_framebuffer()
{
ffff80000080a224:	f3 0f 1e fa          	endbr64 
ffff80000080a228:	55                   	push   rbp
ffff80000080a229:	48 89 e5             	mov    rbp,rsp
ffff80000080a22c:	41 57                	push   r15
ffff80000080a22e:	53                   	push   rbx
ffff80000080a22f:	48 83 ec 50          	sub    rsp,0x50
ffff80000080a233:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a233 <init_framebuffer+0xf>
ffff80000080a23a:	49 bb 9d 38 11 00 00 	movabs r11,0x11389d
ffff80000080a241:	00 00 00 
ffff80000080a244:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:29
    //映射页帧内存
    size_t w=framebuffer.common.framebuffer_width;
ffff80000080a247:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a24e:	ff ff ff 
ffff80000080a251:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a255:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080a258:	89 c0                	mov    eax,eax
ffff80000080a25a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:30
    size_t h=framebuffer.common.framebuffer_height;
ffff80000080a25e:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a265:	ff ff ff 
ffff80000080a268:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a26c:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080a26f:	89 c0                	mov    eax,eax
ffff80000080a271:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:31
    size_t bypp=framebuffer.common.framebuffer_bpp/8;
ffff80000080a275:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a27c:	ff ff ff 
ffff80000080a27f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a283:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
ffff80000080a287:	c0 e8 03             	shr    al,0x3
ffff80000080a28a:	0f b6 c0             	movzx  eax,al
ffff80000080a28d:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:32
    size_t inter=framebuffer.common.framebuffer_pitch;
ffff80000080a291:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a298:	ff ff ff 
ffff80000080a29b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a29f:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080a2a2:	89 c0                	mov    eax,eax
ffff80000080a2a4:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:33
    size_t pc=w*h;
ffff80000080a2a8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a2ac:	48 0f af 45 c8       	imul   rax,QWORD PTR [rbp-0x38]
ffff80000080a2b1:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:34
    size_t size=h*inter;
ffff80000080a2b5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a2b9:	48 0f af 45 b8       	imul   rax,QWORD PTR [rbp-0x48]
ffff80000080a2be:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:35
    int pgc=size/PAGE_SIZE;
ffff80000080a2c2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a2c6:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080a2ca:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:36
    addr_t p=FRAMEBUFFER_ADDR;
ffff80000080a2cd:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080a2d4:	80 ff ff 
ffff80000080a2d7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:37
    addr_t pp=framebuffer.common.framebuffer_addr;
ffff80000080a2db:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a2e2:	ff ff ff 
ffff80000080a2e5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a2e9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080a2ed:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38
    for (size_t i = 0; i < pgc; i++)
ffff80000080a2f1:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080a2f8:	00 
ffff80000080a2f9:	eb 44                	jmp    ffff80000080a33f <init_framebuffer+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:40 (discriminator 3)
    {
        smmap(pp,p,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,PML4_ADDR);
ffff80000080a2fb:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff80000080a2ff:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a303:	48 ba 00 10 10 00 00 	movabs rdx,0xffff800000101000
ffff80000080a30a:	80 ff ff 
ffff80000080a30d:	48 89 d1             	mov    rcx,rdx
ffff80000080a310:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080a315:	48 89 c7             	mov    rdi,rax
ffff80000080a318:	49 89 df             	mov    r15,rbx
ffff80000080a31b:	48 b8 29 40 ee ff ff 	movabs rax,0xffffffffffee4029
ffff80000080a322:	ff ff ff 
ffff80000080a325:	48 01 d8             	add    rax,rbx
ffff80000080a328:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:41 (discriminator 3)
        pp+=PAGE_SIZE;
ffff80000080a32a:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffff80000080a331:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:42 (discriminator 3)
        p+=PAGE_SIZE;
ffff80000080a332:	48 81 45 e8 00 10 00 	add    QWORD PTR [rbp-0x18],0x1000
ffff80000080a339:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38 (discriminator 3)
    for (size_t i = 0; i < pgc; i++)
ffff80000080a33a:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38 (discriminator 1)
ffff80000080a33f:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff80000080a342:	48 98                	cdqe   
ffff80000080a344:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000080a348:	72 b1                	jb     ffff80000080a2fb <init_framebuffer+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:46
    }
    
    
}
ffff80000080a34a:	90                   	nop
ffff80000080a34b:	90                   	nop
ffff80000080a34c:	48 83 c4 50          	add    rsp,0x50
ffff80000080a350:	5b                   	pop    rbx
ffff80000080a351:	41 5f                	pop    r15
ffff80000080a353:	5d                   	pop    rbp
ffff80000080a354:	c3                   	ret    

ffff80000080a355 <init_font>:
init_font():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:47
void init_font(){
ffff80000080a355:	f3 0f 1e fa          	endbr64 
ffff80000080a359:	55                   	push   rbp
ffff80000080a35a:	48 89 e5             	mov    rbp,rsp
ffff80000080a35d:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff80000080a35d <init_font+0x8>
ffff80000080a364:	49 bb 73 37 11 00 00 	movabs r11,0x113773
ffff80000080a36b:	00 00 00 
ffff80000080a36e:	4c 01 d9             	add    rcx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:48
    boot_font = (struct psf2_header*) (_binary_res_font_psf_start);
ffff80000080a371:	48 b8 10 69 af ff ff 	movabs rax,0xffffffffffaf6910
ffff80000080a378:	ff ff ff 
ffff80000080a37b:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff80000080a382:	ff ff ff 
ffff80000080a385:	48 8b 14 11          	mov    rdx,QWORD PTR [rcx+rdx*1]
ffff80000080a389:	48 89 14 01          	mov    QWORD PTR [rcx+rax*1],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:50

    font_width_bytes = (boot_font->width + 7) / 8;
ffff80000080a38d:	48 b8 10 69 af ff ff 	movabs rax,0xffffffffffaf6910
ffff80000080a394:	ff ff ff 
ffff80000080a397:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a39b:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff80000080a39e:	83 c0 07             	add    eax,0x7
ffff80000080a3a1:	c1 e8 03             	shr    eax,0x3
ffff80000080a3a4:	89 c2                	mov    edx,eax
ffff80000080a3a6:	48 b8 20 69 af ff ff 	movabs rax,0xffffffffffaf6920
ffff80000080a3ad:	ff ff ff 
ffff80000080a3b0:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:51
    font_width = font_width_bytes * 8;
ffff80000080a3b3:	48 b8 20 69 af ff ff 	movabs rax,0xffffffffffaf6920
ffff80000080a3ba:	ff ff ff 
ffff80000080a3bd:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff80000080a3c0:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
ffff80000080a3c7:	48 b8 18 69 af ff ff 	movabs rax,0xffffffffffaf6918
ffff80000080a3ce:	ff ff ff 
ffff80000080a3d1:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:52
    font_height = boot_font->height;
ffff80000080a3d4:	48 b8 10 69 af ff ff 	movabs rax,0xffffffffffaf6910
ffff80000080a3db:	ff ff ff 
ffff80000080a3de:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a3e2:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080a3e5:	48 ba 1c 69 af ff ff 	movabs rdx,0xffffffffffaf691c
ffff80000080a3ec:	ff ff ff 
ffff80000080a3ef:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:54

    glyph_table = (u8*)(_binary_res_font_psf_start)+boot_font->header_size;
ffff80000080a3f2:	48 b8 10 69 af ff ff 	movabs rax,0xffffffffffaf6910
ffff80000080a3f9:	ff ff ff 
ffff80000080a3fc:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a400:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080a403:	89 c2                	mov    edx,eax
ffff80000080a405:	48 b8 b8 fd ff ff ff 	movabs rax,0xfffffffffffffdb8
ffff80000080a40c:	ff ff ff 
ffff80000080a40f:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a413:	48 01 c2             	add    rdx,rax
ffff80000080a416:	48 b8 28 69 af ff ff 	movabs rax,0xffffffffffaf6928
ffff80000080a41d:	ff ff ff 
ffff80000080a420:	48 89 14 01          	mov    QWORD PTR [rcx+rax*1],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:55
    glyph_nr = boot_font->glyph_nr;
ffff80000080a424:	48 b8 10 69 af ff ff 	movabs rax,0xffffffffffaf6910
ffff80000080a42b:	ff ff ff 
ffff80000080a42e:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a432:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080a435:	48 ba 34 69 af ff ff 	movabs rdx,0xffffffffffaf6934
ffff80000080a43c:	ff ff ff 
ffff80000080a43f:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:56
    bytes_per_glyph = boot_font->bytes_per_glyph;
ffff80000080a442:	48 b8 10 69 af ff ff 	movabs rax,0xffffffffffaf6910
ffff80000080a449:	ff ff ff 
ffff80000080a44c:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a450:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080a453:	48 ba 30 69 af ff ff 	movabs rdx,0xffffffffffaf6930
ffff80000080a45a:	ff ff ff 
ffff80000080a45d:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:58

    fb_cursor_x = fb_cursor_y = 0;
ffff80000080a460:	48 b8 00 69 af ff ff 	movabs rax,0xffffffffffaf6900
ffff80000080a467:	ff ff ff 
ffff80000080a46a:	c7 04 01 00 00 00 00 	mov    DWORD PTR [rcx+rax*1],0x0
ffff80000080a471:	48 b8 00 69 af ff ff 	movabs rax,0xffffffffffaf6900
ffff80000080a478:	ff ff ff 
ffff80000080a47b:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff80000080a47e:	48 ba fc 68 af ff ff 	movabs rdx,0xffffffffffaf68fc
ffff80000080a485:	ff ff ff 
ffff80000080a488:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:59
    max_ch_nr_x = framebuffer.common.framebuffer_width / font_width;
ffff80000080a48b:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a492:	ff ff ff 
ffff80000080a495:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a499:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080a49c:	48 ba 18 69 af ff ff 	movabs rdx,0xffffffffffaf6918
ffff80000080a4a3:	ff ff ff 
ffff80000080a4a6:	8b 34 11             	mov    esi,DWORD PTR [rcx+rdx*1]
ffff80000080a4a9:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080a4ae:	f7 f6                	div    esi
ffff80000080a4b0:	89 c2                	mov    edx,eax
ffff80000080a4b2:	48 b8 04 69 af ff ff 	movabs rax,0xffffffffffaf6904
ffff80000080a4b9:	ff ff ff 
ffff80000080a4bc:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:60
    max_ch_nr_y = framebuffer.common.framebuffer_height / font_height;
ffff80000080a4bf:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a4c6:	ff ff ff 
ffff80000080a4c9:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a4cd:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080a4d0:	48 ba 1c 69 af ff ff 	movabs rdx,0xffffffffffaf691c
ffff80000080a4d7:	ff ff ff 
ffff80000080a4da:	8b 3c 11             	mov    edi,DWORD PTR [rcx+rdx*1]
ffff80000080a4dd:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080a4e2:	f7 f7                	div    edi
ffff80000080a4e4:	89 c2                	mov    edx,eax
ffff80000080a4e6:	48 b8 08 69 af ff ff 	movabs rax,0xffffffffffaf6908
ffff80000080a4ed:	ff ff ff 
ffff80000080a4f0:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:61
    font_size=1;
ffff80000080a4f3:	48 b8 38 fe ff ff ff 	movabs rax,0xfffffffffffffe38
ffff80000080a4fa:	ff ff ff 
ffff80000080a4fd:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080a501:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:62
}
ffff80000080a507:	90                   	nop
ffff80000080a508:	5d                   	pop    rbp
ffff80000080a509:	c3                   	ret    

ffff80000080a50a <set_framebuffer>:
set_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:64
void set_framebuffer(struct multiboot_tag_framebuffer tag)
{
ffff80000080a50a:	f3 0f 1e fa          	endbr64 
ffff80000080a50e:	55                   	push   rbp
ffff80000080a50f:	48 89 e5             	mov    rbp,rsp
ffff80000080a512:	53                   	push   rbx
ffff80000080a513:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a513 <set_framebuffer+0x9>
ffff80000080a51a:	49 bb bd 35 11 00 00 	movabs r11,0x1135bd
ffff80000080a521:	00 00 00 
ffff80000080a524:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:65
    framebuffer=tag;
ffff80000080a527:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a52e:	ff ff ff 
ffff80000080a531:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080a535:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
ffff80000080a539:	48 8b 5d 18          	mov    rbx,QWORD PTR [rbp+0x18]
ffff80000080a53d:	48 89 08             	mov    QWORD PTR [rax],rcx
ffff80000080a540:	48 89 58 08          	mov    QWORD PTR [rax+0x8],rbx
ffff80000080a544:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
ffff80000080a548:	48 8b 5d 28          	mov    rbx,QWORD PTR [rbp+0x28]
ffff80000080a54c:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
ffff80000080a550:	48 89 58 18          	mov    QWORD PTR [rax+0x18],rbx
ffff80000080a554:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
ffff80000080a558:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:66
}
ffff80000080a55c:	90                   	nop
ffff80000080a55d:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff80000080a561:	c9                   	leave  
ffff80000080a562:	c3                   	ret    

ffff80000080a563 <fill_rect>:
fill_rect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:68

void fill_rect(int x,int y,int w,int h,unsigned int color){
ffff80000080a563:	f3 0f 1e fa          	endbr64 
ffff80000080a567:	55                   	push   rbp
ffff80000080a568:	48 89 e5             	mov    rbp,rsp
ffff80000080a56b:	4c 8d 0d f9 ff ff ff 	lea    r9,[rip+0xfffffffffffffff9]        # ffff80000080a56b <fill_rect+0x8>
ffff80000080a572:	49 bb 65 35 11 00 00 	movabs r11,0x113565
ffff80000080a579:	00 00 00 
ffff80000080a57c:	4d 01 d9             	add    r9,r11
ffff80000080a57f:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080a582:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080a585:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080a588:	89 4d d0             	mov    DWORD PTR [rbp-0x30],ecx
ffff80000080a58b:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:69
    unsigned int* fb= (unsigned int*) FRAMEBUFFER_ADDR;
ffff80000080a58f:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080a596:	80 ff ff 
ffff80000080a599:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71
    //目前只写32bpp
    for(int py=x;py<h+x;py++){
ffff80000080a59d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a5a0:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffff80000080a5a3:	e9 82 00 00 00       	jmp    ffff80000080a62a <fill_rect+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72
        for(int px=y;px<w+y;px++){
ffff80000080a5a8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080a5ab:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffff80000080a5ae:	eb 69                	jmp    ffff80000080a619 <fill_rect+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080a5b0:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a5b7:	ff ff ff 
ffff80000080a5ba:	49 8b 04 01          	mov    rax,QWORD PTR [r9+rax*1]
ffff80000080a5be:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
ffff80000080a5c1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080a5c4:	0f af c2             	imul   eax,edx
ffff80000080a5c7:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:74 (discriminator 3)
                       +px*framebuffer.common.framebuffer_bpp/8;
ffff80000080a5c9:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080a5d0:	ff ff ff 
ffff80000080a5d3:	49 8b 04 01          	mov    rax,QWORD PTR [r9+rax*1]
ffff80000080a5d7:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
ffff80000080a5db:	0f b6 c0             	movzx  eax,al
ffff80000080a5de:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
ffff80000080a5e2:	8d 50 07             	lea    edx,[rax+0x7]
ffff80000080a5e5:	85 c0                	test   eax,eax
ffff80000080a5e7:	0f 48 c2             	cmovs  eax,edx
ffff80000080a5ea:	c1 f8 03             	sar    eax,0x3
ffff80000080a5ed:	48 98                	cdqe   
ffff80000080a5ef:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080a5f3:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080a5fa:	80 ff ff 
ffff80000080a5fd:	48 01 d0             	add    rax,rdx
ffff80000080a600:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:75 (discriminator 3)
            fb=(unsigned int*)ptr;
ffff80000080a604:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a608:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:76 (discriminator 3)
            *fb=color;
ffff80000080a60c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080a610:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080a613:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72 (discriminator 3)
        for(int px=y;px<w+y;px++){
ffff80000080a615:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72 (discriminator 1)
ffff80000080a619:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080a61c:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080a61f:	01 d0                	add    eax,edx
ffff80000080a621:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
ffff80000080a624:	7c 8a                	jl     ffff80000080a5b0 <fill_rect+0x4d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71 (discriminator 2)
    for(int py=x;py<h+x;py++){
ffff80000080a626:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71 (discriminator 1)
ffff80000080a62a:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080a62d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a630:	01 d0                	add    eax,edx
ffff80000080a632:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
ffff80000080a635:	0f 8c 6d ff ff ff    	jl     ffff80000080a5a8 <fill_rect+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:79
        }
    }
}
ffff80000080a63b:	90                   	nop
ffff80000080a63c:	90                   	nop
ffff80000080a63d:	5d                   	pop    rbp
ffff80000080a63e:	c3                   	ret    

ffff80000080a63f <draw_text>:
draw_text():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:82
unsigned char letters[];
void draw_text(int x, int y, int size, char *str)
{
ffff80000080a63f:	f3 0f 1e fa          	endbr64 
ffff80000080a643:	55                   	push   rbp
ffff80000080a644:	48 89 e5             	mov    rbp,rsp
ffff80000080a647:	41 57                	push   r15
ffff80000080a649:	53                   	push   rbx
ffff80000080a64a:	48 83 ec 30          	sub    rsp,0x30
ffff80000080a64e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a64e <draw_text+0xf>
ffff80000080a655:	49 bb 82 34 11 00 00 	movabs r11,0x113482
ffff80000080a65c:	00 00 00 
ffff80000080a65f:	4c 01 db             	add    rbx,r11
ffff80000080a662:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080a665:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080a668:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080a66b:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:83
    int tx=x;
ffff80000080a66f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a672:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:84
    while(*str!='\0')
ffff80000080a675:	eb 75                	jmp    ffff80000080a6ec <draw_text+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:86
    {
        if(*str=='\n')
ffff80000080a677:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a67b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a67e:	3c 0a                	cmp    al,0xa
ffff80000080a680:	75 23                	jne    ffff80000080a6a5 <draw_text+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:88
        {
            y+=font_height*size;
ffff80000080a682:	48 b8 1c 69 af ff ff 	movabs rax,0xffffffffffaf691c
ffff80000080a689:	ff ff ff 
ffff80000080a68c:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080a68f:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080a692:	0f af d0             	imul   edx,eax
ffff80000080a695:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080a698:	01 d0                	add    eax,edx
ffff80000080a69a:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:89
            tx=x;
ffff80000080a69d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a6a0:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffff80000080a6a3:	eb 42                	jmp    ffff80000080a6e7 <draw_text+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:93
        }
        else
        {
            draw_letter(tx,y,size,*str);
ffff80000080a6a5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a6a9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a6ac:	0f be c8             	movsx  ecx,al
ffff80000080a6af:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080a6b2:	8b 75 d8             	mov    esi,DWORD PTR [rbp-0x28]
ffff80000080a6b5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a6b8:	89 c7                	mov    edi,eax
ffff80000080a6ba:	49 89 df             	mov    r15,rbx
ffff80000080a6bd:	48 b8 32 cc ee ff ff 	movabs rax,0xffffffffffeecc32
ffff80000080a6c4:	ff ff ff 
ffff80000080a6c7:	48 01 d8             	add    rax,rbx
ffff80000080a6ca:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:94
            tx+=size*font_width;
ffff80000080a6cc:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080a6cf:	48 b8 18 69 af ff ff 	movabs rax,0xffffffffffaf6918
ffff80000080a6d6:	ff ff ff 
ffff80000080a6d9:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080a6dc:	0f af d0             	imul   edx,eax
ffff80000080a6df:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a6e2:	01 d0                	add    eax,edx
ffff80000080a6e4:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:96
        }
        str++;
ffff80000080a6e7:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:84
    while(*str!='\0')
ffff80000080a6ec:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a6f0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a6f3:	84 c0                	test   al,al
ffff80000080a6f5:	75 80                	jne    ffff80000080a677 <draw_text+0x38>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:98
    }
}
ffff80000080a6f7:	90                   	nop
ffff80000080a6f8:	90                   	nop
ffff80000080a6f9:	48 83 c4 30          	add    rsp,0x30
ffff80000080a6fd:	5b                   	pop    rbx
ffff80000080a6fe:	41 5f                	pop    r15
ffff80000080a700:	5d                   	pop    rbp
ffff80000080a701:	c3                   	ret    

ffff80000080a702 <draw_letter>:
draw_letter():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:99
void draw_letter(int x, volatile int y, int size, char c) {
ffff80000080a702:	f3 0f 1e fa          	endbr64 
ffff80000080a706:	55                   	push   rbp
ffff80000080a707:	48 89 e5             	mov    rbp,rsp
ffff80000080a70a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a70a <draw_letter+0x8>
ffff80000080a711:	49 bb c6 33 11 00 00 	movabs r11,0x1133c6
ffff80000080a718:	00 00 00 
ffff80000080a71b:	4c 01 d8             	add    rax,r11
ffff80000080a71e:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
ffff80000080a721:	89 75 c8             	mov    DWORD PTR [rbp-0x38],esi
ffff80000080a724:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
ffff80000080a727:	89 ca                	mov    edx,ecx
ffff80000080a729:	88 55 c0             	mov    BYTE PTR [rbp-0x40],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:100
    u8 *glyph = glyph_table;
ffff80000080a72c:	48 ba 28 69 af ff ff 	movabs rdx,0xffffffffffaf6928
ffff80000080a733:	ff ff ff 
ffff80000080a736:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a73a:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:101
    if (c < glyph_nr) {
ffff80000080a73e:	0f be 4d c0          	movsx  ecx,BYTE PTR [rbp-0x40]
ffff80000080a742:	48 ba 34 69 af ff ff 	movabs rdx,0xffffffffffaf6934
ffff80000080a749:	ff ff ff 
ffff80000080a74c:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080a74f:	39 d1                	cmp    ecx,edx
ffff80000080a751:	73 1a                	jae    ffff80000080a76d <draw_letter+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:102
        glyph += c * bytes_per_glyph;
ffff80000080a753:	0f be 4d c0          	movsx  ecx,BYTE PTR [rbp-0x40]
ffff80000080a757:	48 ba 30 69 af ff ff 	movabs rdx,0xffffffffffaf6930
ffff80000080a75e:	ff ff ff 
ffff80000080a761:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080a764:	0f af d1             	imul   edx,ecx
ffff80000080a767:	89 d2                	mov    edx,edx
ffff80000080a769:	48 01 55 f8          	add    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105
    }
    /* output the font to frame buffer */
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
ffff80000080a76d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080a774:	e9 f8 00 00 00       	jmp    ffff80000080a871 <draw_letter+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:106
        u8 mask = 1 << 7;
ffff80000080a779:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108

        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
ffff80000080a77d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080a784:	e9 bb 00 00 00       	jmp    ffff80000080a844 <draw_letter+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:109
            int px=x+ch_x*size;
ffff80000080a789:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000080a78c:	89 d1                	mov    ecx,edx
ffff80000080a78e:	0f af 4d ec          	imul   ecx,DWORD PTR [rbp-0x14]
ffff80000080a792:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080a795:	01 ca                	add    edx,ecx
ffff80000080a797:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:110
            int py=y+ch_y*size;
ffff80000080a79a:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000080a79d:	89 d1                	mov    ecx,edx
ffff80000080a79f:	0f af 4d f4          	imul   ecx,DWORD PTR [rbp-0xc]
ffff80000080a7a3:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
ffff80000080a7a6:	01 ca                	add    edx,ecx
ffff80000080a7a8:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:111
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080a7ab:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a7b2:	ff ff ff 
ffff80000080a7b5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a7b9:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080a7bc:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080a7bf:	0f af d1             	imul   edx,ecx
ffff80000080a7c2:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:112
                     +px*framebuffer.common.framebuffer_bpp/8;
ffff80000080a7c4:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a7cb:	ff ff ff 
ffff80000080a7ce:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a7d2:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080a7d6:	0f b6 d2             	movzx  edx,dl
ffff80000080a7d9:	0f af 55 e8          	imul   edx,DWORD PTR [rbp-0x18]
ffff80000080a7dd:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080a7e0:	85 d2                	test   edx,edx
ffff80000080a7e2:	0f 48 d1             	cmovs  edx,ecx
ffff80000080a7e5:	c1 fa 03             	sar    edx,0x3
ffff80000080a7e8:	48 63 d2             	movsxd rdx,edx
ffff80000080a7eb:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080a7ef:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080a7f6:	80 ff ff 
ffff80000080a7f9:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:111
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080a7fc:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:113
            if ((*(glyph + ch_x / 8) & mask) != 0) {
ffff80000080a800:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080a803:	c1 ea 03             	shr    edx,0x3
ffff80000080a806:	89 d1                	mov    ecx,edx
ffff80000080a808:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080a80c:	48 01 ca             	add    rdx,rcx
ffff80000080a80f:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080a812:	22 55 f3             	and    dl,BYTE PTR [rbp-0xd]
ffff80000080a815:	84 d2                	test   dl,dl
ffff80000080a817:	74 0c                	je     ffff80000080a825 <draw_letter+0x123>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:114
                *ptr=-1;
ffff80000080a819:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080a81d:	c7 02 ff ff ff ff    	mov    DWORD PTR [rdx],0xffffffff
ffff80000080a823:	eb 0a                	jmp    ffff80000080a82f <draw_letter+0x12d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:116
            } else {
                *ptr=0;
ffff80000080a825:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080a829:	c7 02 00 00 00 00    	mov    DWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:119
            }

            mask >>= 1;
ffff80000080a82f:	d0 6d f3             	shr    BYTE PTR [rbp-0xd],1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:120
            if (ch_x % 8 == 0) {
ffff80000080a832:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080a835:	83 e2 07             	and    edx,0x7
ffff80000080a838:	85 d2                	test   edx,edx
ffff80000080a83a:	75 04                	jne    ffff80000080a840 <draw_letter+0x13e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:121
                mask = 1 << 7;
ffff80000080a83c:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108 (discriminator 2)
        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
ffff80000080a840:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108 (discriminator 1)
ffff80000080a844:	48 ba 18 69 af ff ff 	movabs rdx,0xffffffffffaf6918
ffff80000080a84b:	ff ff ff 
ffff80000080a84e:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080a851:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff80000080a854:	0f 82 2f ff ff ff    	jb     ffff80000080a789 <draw_letter+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:125 (discriminator 2)
            }
        }

        glyph += font_width_bytes;
ffff80000080a85a:	48 ba 20 69 af ff ff 	movabs rdx,0xffffffffffaf6920
ffff80000080a861:	ff ff ff 
ffff80000080a864:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080a867:	89 d2                	mov    edx,edx
ffff80000080a869:	48 01 55 f8          	add    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105 (discriminator 2)
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
ffff80000080a86d:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105 (discriminator 1)
ffff80000080a871:	48 ba 1c 69 af ff ff 	movabs rdx,0xffffffffffaf691c
ffff80000080a878:	ff ff ff 
ffff80000080a87b:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080a87e:	39 55 f4             	cmp    DWORD PTR [rbp-0xc],edx
ffff80000080a881:	0f 82 f2 fe ff ff    	jb     ffff80000080a779 <draw_letter+0x77>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:127
    }
}
ffff80000080a887:	90                   	nop
ffff80000080a888:	90                   	nop
ffff80000080a889:	5d                   	pop    rbp
ffff80000080a88a:	c3                   	ret    

ffff80000080a88b <scr_up>:
scr_up():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:129
//向上滚动一个像素
void scr_up(){
ffff80000080a88b:	f3 0f 1e fa          	endbr64 
ffff80000080a88f:	55                   	push   rbp
ffff80000080a890:	48 89 e5             	mov    rbp,rsp
ffff80000080a893:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a893 <scr_up+0x8>
ffff80000080a89a:	49 bb 3d 32 11 00 00 	movabs r11,0x11323d
ffff80000080a8a1:	00 00 00 
ffff80000080a8a4:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130
    for(int dy=0;dy<framebuffer.common.framebuffer_height-1;dy++){
ffff80000080a8a7:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080a8ae:	e9 ad 00 00 00       	jmp    ffff80000080a960 <scr_up+0xd5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131
        for(int dx=0;dx<framebuffer.common.framebuffer_width;dx++){
ffff80000080a8b3:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080a8ba:	e9 81 00 00 00       	jmp    ffff80000080a940 <scr_up+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:133 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+
                    dy*framebuffer.common.framebuffer_pitch
ffff80000080a8bf:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a8c6:	ff ff ff 
ffff80000080a8c9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a8cd:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080a8d0:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080a8d3:	0f af d1             	imul   edx,ecx
ffff80000080a8d6:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:134 (discriminator 3)
                    +dx*framebuffer.common.framebuffer_bpp/8);
ffff80000080a8d8:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a8df:	ff ff ff 
ffff80000080a8e2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a8e6:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080a8ea:	0f b6 d2             	movzx  edx,dl
ffff80000080a8ed:	0f af 55 f8          	imul   edx,DWORD PTR [rbp-0x8]
ffff80000080a8f1:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080a8f4:	85 d2                	test   edx,edx
ffff80000080a8f6:	0f 48 d1             	cmovs  edx,ecx
ffff80000080a8f9:	c1 fa 03             	sar    edx,0x3
ffff80000080a8fc:	48 63 d2             	movsxd rdx,edx
ffff80000080a8ff:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080a903:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080a90a:	80 ff ff 
ffff80000080a90d:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:132 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+
ffff80000080a910:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:135 (discriminator 3)
            *p=*(p+framebuffer.common.framebuffer_pitch);
ffff80000080a914:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a91b:	ff ff ff 
ffff80000080a91e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a922:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000080a925:	89 d1                	mov    ecx,edx
ffff80000080a927:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080a92b:	48 01 ca             	add    rdx,rcx
ffff80000080a92e:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
ffff80000080a931:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080a935:	88 0a                	mov    BYTE PTR [rdx],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:136 (discriminator 3)
            p++;
ffff80000080a937:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131 (discriminator 3)
        for(int dx=0;dx<framebuffer.common.framebuffer_width;dx++){
ffff80000080a93c:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131 (discriminator 1)
ffff80000080a940:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a947:	ff ff ff 
ffff80000080a94a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a94e:	8b 4a 14             	mov    ecx,DWORD PTR [rdx+0x14]
ffff80000080a951:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080a954:	39 d1                	cmp    ecx,edx
ffff80000080a956:	0f 87 63 ff ff ff    	ja     ffff80000080a8bf <scr_up+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130 (discriminator 2)
    for(int dy=0;dy<framebuffer.common.framebuffer_height-1;dy++){
ffff80000080a95c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130 (discriminator 1)
ffff80000080a960:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a967:	ff ff ff 
ffff80000080a96a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a96e:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080a971:	8d 4a ff             	lea    ecx,[rdx-0x1]
ffff80000080a974:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080a977:	39 d1                	cmp    ecx,edx
ffff80000080a979:	0f 87 34 ff ff ff    	ja     ffff80000080a8b3 <scr_up+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:142
        }

    }
//    for(int i=0;i< framebuffer.common.framebuffer_width*framebuffer.common.framebuffer_bpp/8;i++)
//        *(p++)=0;
}
ffff80000080a97f:	90                   	nop
ffff80000080a980:	90                   	nop
ffff80000080a981:	5d                   	pop    rbp
ffff80000080a982:	c3                   	ret    

ffff80000080a983 <scr_down>:
scr_down():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:143
void scr_down(){
ffff80000080a983:	f3 0f 1e fa          	endbr64 
ffff80000080a987:	55                   	push   rbp
ffff80000080a988:	48 89 e5             	mov    rbp,rsp
ffff80000080a98b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a98b <scr_down+0x8>
ffff80000080a992:	49 bb 45 31 11 00 00 	movabs r11,0x113145
ffff80000080a999:	00 00 00 
ffff80000080a99c:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144
    for(int dy=1;dy<max_ch_nr_y;dy++){
ffff80000080a99f:	c7 45 fc 01 00 00 00 	mov    DWORD PTR [rbp-0x4],0x1
ffff80000080a9a6:	e9 aa 00 00 00       	jmp    ffff80000080aa55 <scr_down+0xd2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145
        for(int dx=0;dx<max_ch_nr_x;dx++){
ffff80000080a9ab:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080a9b2:	e9 82 00 00 00       	jmp    ffff80000080aa39 <scr_down+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:146 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
ffff80000080a9b7:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a9be:	ff ff ff 
ffff80000080a9c1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a9c5:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080a9c8:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080a9cb:	0f af d1             	imul   edx,ecx
ffff80000080a9ce:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:147 (discriminator 3)
                            +dx*framebuffer.common.framebuffer_bpp/8);
ffff80000080a9d0:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080a9d7:	ff ff ff 
ffff80000080a9da:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a9de:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080a9e2:	0f b6 d2             	movzx  edx,dl
ffff80000080a9e5:	0f af 55 f8          	imul   edx,DWORD PTR [rbp-0x8]
ffff80000080a9e9:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080a9ec:	85 d2                	test   edx,edx
ffff80000080a9ee:	0f 48 d1             	cmovs  edx,ecx
ffff80000080a9f1:	c1 fa 03             	sar    edx,0x3
ffff80000080a9f4:	48 63 d2             	movsxd rdx,edx
ffff80000080a9f7:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080a9fb:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080aa02:	80 ff ff 
ffff80000080aa05:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:146 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
ffff80000080aa08:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:148 (discriminator 3)
            *p=*(p-framebuffer.common.framebuffer_pitch);
ffff80000080aa0c:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080aa13:	ff ff ff 
ffff80000080aa16:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080aa1a:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000080aa1d:	89 d2                	mov    edx,edx
ffff80000080aa1f:	48 89 d1             	mov    rcx,rdx
ffff80000080aa22:	48 f7 d9             	neg    rcx
ffff80000080aa25:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080aa29:	48 01 ca             	add    rdx,rcx
ffff80000080aa2c:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
ffff80000080aa2f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080aa33:	88 0a                	mov    BYTE PTR [rdx],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145 (discriminator 3)
        for(int dx=0;dx<max_ch_nr_x;dx++){
ffff80000080aa35:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145 (discriminator 1)
ffff80000080aa39:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff80000080aa3c:	48 ba 04 69 af ff ff 	movabs rdx,0xffffffffffaf6904
ffff80000080aa43:	ff ff ff 
ffff80000080aa46:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080aa49:	39 d1                	cmp    ecx,edx
ffff80000080aa4b:	0f 82 66 ff ff ff    	jb     ffff80000080a9b7 <scr_down+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144 (discriminator 2)
    for(int dy=1;dy<max_ch_nr_y;dy++){
ffff80000080aa51:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144 (discriminator 1)
ffff80000080aa55:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080aa58:	48 ba 08 69 af ff ff 	movabs rdx,0xffffffffffaf6908
ffff80000080aa5f:	ff ff ff 
ffff80000080aa62:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080aa65:	39 d1                	cmp    ecx,edx
ffff80000080aa67:	0f 82 3e ff ff ff    	jb     ffff80000080a9ab <scr_down+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:152
        }

    }
}
ffff80000080aa6d:	90                   	nop
ffff80000080aa6e:	90                   	nop
ffff80000080aa6f:	5d                   	pop    rbp
ffff80000080aa70:	c3                   	ret    

ffff80000080aa71 <print>:
print():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:153
void print(char* s){
ffff80000080aa71:	f3 0f 1e fa          	endbr64 
ffff80000080aa75:	55                   	push   rbp
ffff80000080aa76:	48 89 e5             	mov    rbp,rsp
ffff80000080aa79:	41 57                	push   r15
ffff80000080aa7b:	53                   	push   rbx
ffff80000080aa7c:	48 83 ec 10          	sub    rsp,0x10
ffff80000080aa80:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080aa80 <print+0xf>
ffff80000080aa87:	49 bb 50 30 11 00 00 	movabs r11,0x113050
ffff80000080aa8e:	00 00 00 
ffff80000080aa91:	4c 01 db             	add    rbx,r11
ffff80000080aa94:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
    for(;*s;s++){
ffff80000080aa98:	e9 55 01 00 00       	jmp    ffff80000080abf2 <print+0x181>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155
        if(fb_cursor_x>max_ch_nr_x||*s=='\n')
ffff80000080aa9d:	48 b8 fc 68 af ff ff 	movabs rax,0xffffffffffaf68fc
ffff80000080aaa4:	ff ff ff 
ffff80000080aaa7:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080aaaa:	48 b8 04 69 af ff ff 	movabs rax,0xffffffffffaf6904
ffff80000080aab1:	ff ff ff 
ffff80000080aab4:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080aab7:	39 c2                	cmp    edx,eax
ffff80000080aab9:	77 0b                	ja     ffff80000080aac6 <print+0x55>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155 (discriminator 1)
ffff80000080aabb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080aabf:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080aac2:	3c 0a                	cmp    al,0xa
ffff80000080aac4:	75 2e                	jne    ffff80000080aaf4 <print+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:157
        {
            fb_cursor_y+=1;
ffff80000080aac6:	48 b8 00 69 af ff ff 	movabs rax,0xffffffffffaf6900
ffff80000080aacd:	ff ff ff 
ffff80000080aad0:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080aad3:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080aad6:	48 b8 00 69 af ff ff 	movabs rax,0xffffffffffaf6900
ffff80000080aadd:	ff ff ff 
ffff80000080aae0:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:158
            fb_cursor_x=0;
ffff80000080aae3:	48 b8 fc 68 af ff ff 	movabs rax,0xffffffffffaf68fc
ffff80000080aaea:	ff ff ff 
ffff80000080aaed:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:160
        }
        if(*s=='\n')continue;
ffff80000080aaf4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080aaf8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080aafb:	3c 0a                	cmp    al,0xa
ffff80000080aafd:	0f 84 e9 00 00 00    	je     ffff80000080abec <print+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:161
        if(fb_cursor_y>=max_ch_nr_y-1){
ffff80000080ab03:	48 b8 08 69 af ff ff 	movabs rax,0xffffffffffaf6908
ffff80000080ab0a:	ff ff ff 
ffff80000080ab0d:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080ab10:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080ab13:	48 b8 00 69 af ff ff 	movabs rax,0xffffffffffaf6900
ffff80000080ab1a:	ff ff ff 
ffff80000080ab1d:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080ab20:	39 c2                	cmp    edx,eax
ffff80000080ab22:	77 11                	ja     ffff80000080ab35 <print+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:165
//            for(int i=0;i<font_height*font_size;i++)
////                scr_up();
////            fb_cursor_y=max_ch_nr_y-1;
            fb_cursor_y=0;
ffff80000080ab24:	48 b8 00 69 af ff ff 	movabs rax,0xffffffffffaf6900
ffff80000080ab2b:	ff ff ff 
ffff80000080ab2e:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:167
        }
        draw_letter(fb_cursor_x*font_width*font_size,fb_cursor_y*font_height*font_size,font_size,*s);
ffff80000080ab35:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ab39:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080ab3c:	0f be d0             	movsx  edx,al
ffff80000080ab3f:	48 b8 38 fe ff ff ff 	movabs rax,0xfffffffffffffe38
ffff80000080ab46:	ff ff ff 
ffff80000080ab49:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ab4d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080ab4f:	48 b9 00 69 af ff ff 	movabs rcx,0xffffffffffaf6900
ffff80000080ab56:	ff ff ff 
ffff80000080ab59:	8b 34 0b             	mov    esi,DWORD PTR [rbx+rcx*1]
ffff80000080ab5c:	48 b9 1c 69 af ff ff 	movabs rcx,0xffffffffffaf691c
ffff80000080ab63:	ff ff ff 
ffff80000080ab66:	8b 0c 0b             	mov    ecx,DWORD PTR [rbx+rcx*1]
ffff80000080ab69:	0f af f1             	imul   esi,ecx
ffff80000080ab6c:	48 b9 38 fe ff ff ff 	movabs rcx,0xfffffffffffffe38
ffff80000080ab73:	ff ff ff 
ffff80000080ab76:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080ab7a:	8b 09                	mov    ecx,DWORD PTR [rcx]
ffff80000080ab7c:	0f af ce             	imul   ecx,esi
ffff80000080ab7f:	41 89 c8             	mov    r8d,ecx
ffff80000080ab82:	48 b9 fc 68 af ff ff 	movabs rcx,0xffffffffffaf68fc
ffff80000080ab89:	ff ff ff 
ffff80000080ab8c:	8b 34 0b             	mov    esi,DWORD PTR [rbx+rcx*1]
ffff80000080ab8f:	48 b9 18 69 af ff ff 	movabs rcx,0xffffffffffaf6918
ffff80000080ab96:	ff ff ff 
ffff80000080ab99:	8b 0c 0b             	mov    ecx,DWORD PTR [rbx+rcx*1]
ffff80000080ab9c:	0f af f1             	imul   esi,ecx
ffff80000080ab9f:	48 b9 38 fe ff ff ff 	movabs rcx,0xfffffffffffffe38
ffff80000080aba6:	ff ff ff 
ffff80000080aba9:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080abad:	8b 09                	mov    ecx,DWORD PTR [rcx]
ffff80000080abaf:	0f af ce             	imul   ecx,esi
ffff80000080abb2:	89 cf                	mov    edi,ecx
ffff80000080abb4:	89 d1                	mov    ecx,edx
ffff80000080abb6:	89 c2                	mov    edx,eax
ffff80000080abb8:	44 89 c6             	mov    esi,r8d
ffff80000080abbb:	49 89 df             	mov    r15,rbx
ffff80000080abbe:	48 b8 32 cc ee ff ff 	movabs rax,0xffffffffffeecc32
ffff80000080abc5:	ff ff ff 
ffff80000080abc8:	48 01 d8             	add    rax,rbx
ffff80000080abcb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:168
        fb_cursor_x+=1;
ffff80000080abcd:	48 b8 fc 68 af ff ff 	movabs rax,0xffffffffffaf68fc
ffff80000080abd4:	ff ff ff 
ffff80000080abd7:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080abda:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080abdd:	48 b8 fc 68 af ff ff 	movabs rax,0xffffffffffaf68fc
ffff80000080abe4:	ff ff ff 
ffff80000080abe7:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
ffff80000080abea:	eb 01                	jmp    ffff80000080abed <print+0x17c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:160
        if(*s=='\n')continue;
ffff80000080abec:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
    for(;*s;s++){
ffff80000080abed:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154 (discriminator 1)
ffff80000080abf2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080abf6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080abf9:	84 c0                	test   al,al
ffff80000080abfb:	0f 85 9c fe ff ff    	jne    ffff80000080aa9d <print+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:170
    }
}
ffff80000080ac01:	90                   	nop
ffff80000080ac02:	90                   	nop
ffff80000080ac03:	48 83 c4 10          	add    rsp,0x10
ffff80000080ac07:	5b                   	pop    rbx
ffff80000080ac08:	41 5f                	pop    r15
ffff80000080ac0a:	5d                   	pop    rbp
ffff80000080ac0b:	c3                   	ret    

ffff80000080ac0c <open_framebuffer>:
open_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:175
struct file_operations framebuffer_fops={
        .open=open_framebuffer,.close=close_framebuffer,.read=read_framebuffer,.write=write_framebuffer,
        .ioctl=ioctl_framebuffer
};
long open_framebuffer(struct index_node * inode,struct file * filp){
ffff80000080ac0c:	f3 0f 1e fa          	endbr64 
ffff80000080ac10:	55                   	push   rbp
ffff80000080ac11:	48 89 e5             	mov    rbp,rsp
ffff80000080ac14:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ac14 <open_framebuffer+0x8>
ffff80000080ac1b:	49 bb bc 2e 11 00 00 	movabs r11,0x112ebc
ffff80000080ac22:	00 00 00 
ffff80000080ac25:	4c 01 d8             	add    rax,r11
ffff80000080ac28:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080ac2c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:176
    inode->f_ops=&framebuffer_fops;
ffff80000080ac30:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080ac34:	48 b9 50 fe ff ff ff 	movabs rcx,0xfffffffffffffe50
ffff80000080ac3b:	ff ff ff 
ffff80000080ac3e:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080ac42:	48 89 4a 28          	mov    QWORD PTR [rdx+0x28],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:177
    filp->f_ops=&framebuffer_fops;
ffff80000080ac46:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080ac4a:	48 b9 50 fe ff ff ff 	movabs rcx,0xfffffffffffffe50
ffff80000080ac51:	ff ff ff 
ffff80000080ac54:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080ac58:	48 89 42 18          	mov    QWORD PTR [rdx+0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:178
    return 1;
ffff80000080ac5c:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:179
}
ffff80000080ac61:	5d                   	pop    rbp
ffff80000080ac62:	c3                   	ret    

ffff80000080ac63 <close_framebuffer>:
close_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:180
long close_framebuffer(struct index_node * inode,struct file * filp){
ffff80000080ac63:	f3 0f 1e fa          	endbr64 
ffff80000080ac67:	55                   	push   rbp
ffff80000080ac68:	48 89 e5             	mov    rbp,rsp
ffff80000080ac6b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ac6b <close_framebuffer+0x8>
ffff80000080ac72:	49 bb 65 2e 11 00 00 	movabs r11,0x112e65
ffff80000080ac79:	00 00 00 
ffff80000080ac7c:	4c 01 d8             	add    rax,r11
ffff80000080ac7f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080ac83:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:182

}
ffff80000080ac87:	90                   	nop
ffff80000080ac88:	5d                   	pop    rbp
ffff80000080ac89:	c3                   	ret    

ffff80000080ac8a <read_framebuffer>:
read_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:183
long read_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080ac8a:	f3 0f 1e fa          	endbr64 
ffff80000080ac8e:	55                   	push   rbp
ffff80000080ac8f:	48 89 e5             	mov    rbp,rsp
ffff80000080ac92:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ac92 <read_framebuffer+0x8>
ffff80000080ac99:	49 bb 3e 2e 11 00 00 	movabs r11,0x112e3e
ffff80000080aca0:	00 00 00 
ffff80000080aca3:	4c 01 d8             	add    rax,r11
ffff80000080aca6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080acaa:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080acae:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080acb2:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:185

}
ffff80000080acb6:	90                   	nop
ffff80000080acb7:	5d                   	pop    rbp
ffff80000080acb8:	c3                   	ret    

ffff80000080acb9 <write_framebuffer>:
write_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:186
long write_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080acb9:	f3 0f 1e fa          	endbr64 
ffff80000080acbd:	55                   	push   rbp
ffff80000080acbe:	48 89 e5             	mov    rbp,rsp
ffff80000080acc1:	41 57                	push   r15
ffff80000080acc3:	53                   	push   rbx
ffff80000080acc4:	48 83 ec 40          	sub    rsp,0x40
ffff80000080acc8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080acc8 <write_framebuffer+0xf>
ffff80000080accf:	49 bb 08 2e 11 00 00 	movabs r11,0x112e08
ffff80000080acd6:	00 00 00 
ffff80000080acd9:	4c 01 db             	add    rbx,r11
ffff80000080acdc:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080ace0:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff80000080ace4:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff80000080ace8:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:187
    char *tmp= (char*) kmalloc();
ffff80000080acec:	49 89 df             	mov    r15,rbx
ffff80000080acef:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080acf4:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff80000080acfb:	ff ff ff 
ffff80000080acfe:	48 01 da             	add    rdx,rbx
ffff80000080ad01:	ff d2                	call   rdx
ffff80000080ad03:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:188
    int c=count/(PAGE_4K_SIZE-1),p=0;
ffff80000080ad07:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff80000080ad0b:	48 ba 11 00 01 10 00 	movabs rdx,0x10010010010011
ffff80000080ad12:	01 10 00 
ffff80000080ad15:	48 89 c8             	mov    rax,rcx
ffff80000080ad18:	48 f7 e2             	mul    rdx
ffff80000080ad1b:	48 89 c8             	mov    rax,rcx
ffff80000080ad1e:	48 29 d0             	sub    rax,rdx
ffff80000080ad21:	48 d1 e8             	shr    rax,1
ffff80000080ad24:	48 01 d0             	add    rax,rdx
ffff80000080ad27:	48 c1 e8 0b          	shr    rax,0xb
ffff80000080ad2b:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080ad2e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190
    //一块一块输出
    for(int i=0;i<(c?c:1);i++){
ffff80000080ad35:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080ad3c:	eb 60                	jmp    ffff80000080ad9e <write_framebuffer+0xe5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:191 (discriminator 7)
        memcpy(tmp,buf+p,PAGE_4K_SIZE-1);
ffff80000080ad3e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080ad41:	48 63 d0             	movsxd rdx,eax
ffff80000080ad44:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080ad48:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000080ad4c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ad50:	ba ff 0f 00 00       	mov    edx,0xfff
ffff80000080ad55:	48 89 ce             	mov    rsi,rcx
ffff80000080ad58:	48 89 c7             	mov    rdi,rax
ffff80000080ad5b:	49 89 df             	mov    r15,rbx
ffff80000080ad5e:	48 b8 c4 50 ef ff ff 	movabs rax,0xffffffffffef50c4
ffff80000080ad65:	ff ff ff 
ffff80000080ad68:	48 01 d8             	add    rax,rbx
ffff80000080ad6b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:192 (discriminator 7)
        tmp[PAGE_4K_SIZE-1]=0;
ffff80000080ad6d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ad71:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080ad77:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:193 (discriminator 7)
        print(tmp);
ffff80000080ad7a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ad7e:	48 89 c7             	mov    rdi,rax
ffff80000080ad81:	49 89 df             	mov    r15,rbx
ffff80000080ad84:	48 b8 a1 cf ee ff ff 	movabs rax,0xffffffffffeecfa1
ffff80000080ad8b:	ff ff ff 
ffff80000080ad8e:	48 01 d8             	add    rax,rbx
ffff80000080ad91:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:194 (discriminator 7)
        p+=PAGE_4K_SIZE-1;
ffff80000080ad93:	81 45 ec ff 0f 00 00 	add    DWORD PTR [rbp-0x14],0xfff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 7)
    for(int i=0;i<(c?c:1);i++){
ffff80000080ad9a:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 1)
ffff80000080ad9e:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080ada2:	74 05                	je     ffff80000080ada9 <write_framebuffer+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 3)
ffff80000080ada4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080ada7:	eb 05                	jmp    ffff80000080adae <write_framebuffer+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 4)
ffff80000080ada9:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 6)
ffff80000080adae:	3b 45 e8             	cmp    eax,DWORD PTR [rbp-0x18]
ffff80000080adb1:	7f 8b                	jg     ffff80000080ad3e <write_framebuffer+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:196
    }
    kmfree(tmp);
ffff80000080adb3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080adb7:	48 89 c7             	mov    rdi,rax
ffff80000080adba:	49 89 df             	mov    r15,rbx
ffff80000080adbd:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff80000080adc4:	ff ff ff 
ffff80000080adc7:	48 01 d8             	add    rax,rbx
ffff80000080adca:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:197
    return 0;
ffff80000080adcc:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:198
}
ffff80000080add1:	48 83 c4 40          	add    rsp,0x40
ffff80000080add5:	5b                   	pop    rbx
ffff80000080add6:	41 5f                	pop    r15
ffff80000080add8:	5d                   	pop    rbp
ffff80000080add9:	c3                   	ret    

ffff80000080adda <ioctl_framebuffer>:
ioctl_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:199
long ioctl_framebuffer(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff80000080adda:	f3 0f 1e fa          	endbr64 
ffff80000080adde:	55                   	push   rbp
ffff80000080addf:	48 89 e5             	mov    rbp,rsp
ffff80000080ade2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ade2 <ioctl_framebuffer+0x8>
ffff80000080ade9:	49 bb ee 2c 11 00 00 	movabs r11,0x112cee
ffff80000080adf0:	00 00 00 
ffff80000080adf3:	4c 01 d8             	add    rax,r11
ffff80000080adf6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080adfa:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080adfe:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080ae02:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:201

}
ffff80000080ae06:	90                   	nop
ffff80000080ae07:	5d                   	pop    rbp
ffff80000080ae08:	c3                   	ret    

ffff80000080ae09 <path_walk>:
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:14
#include "mem.h"
#include "str.h"
#include <ramdisk.h>

struct dir_entry * path_walk(char * name,unsigned long flags)
{
ffff80000080ae09:	f3 0f 1e fa          	endbr64 
ffff80000080ae0d:	55                   	push   rbp
ffff80000080ae0e:	48 89 e5             	mov    rbp,rsp
ffff80000080ae11:	41 57                	push   r15
ffff80000080ae13:	53                   	push   rbx
ffff80000080ae14:	48 83 ec 70          	sub    rsp,0x70
ffff80000080ae18:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ae18 <path_walk+0xf>
ffff80000080ae1f:	49 bb b8 2c 11 00 00 	movabs r11,0x112cb8
ffff80000080ae26:	00 00 00 
ffff80000080ae29:	4c 01 db             	add    rbx,r11
ffff80000080ae2c:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff80000080ae30:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:15
    char * tmpname = NULL;
ffff80000080ae34:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080ae3b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:16
    int tmpnamelen = 0;
ffff80000080ae3c:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:17
    struct dir_entry * parent = root_sb->root;
ffff80000080ae43:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080ae4a:	ff ff ff 
ffff80000080ae4d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ae51:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ae54:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ae57:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:18
    struct dir_entry * path = NULL;
ffff80000080ae5b:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080ae62:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:20

    while(*name == '/')
ffff80000080ae63:	eb 05                	jmp    ffff80000080ae6a <path_walk+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:21
        name++;
ffff80000080ae65:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:20
    while(*name == '/')
ffff80000080ae6a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ae6e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080ae71:	3c 2f                	cmp    al,0x2f
ffff80000080ae73:	74 f0                	je     ffff80000080ae65 <path_walk+0x5c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:23

    if(!*name)
ffff80000080ae75:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ae79:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080ae7c:	84 c0                	test   al,al
ffff80000080ae7e:	75 09                	jne    ffff80000080ae89 <path_walk+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:25
    {
        return parent;
ffff80000080ae80:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ae84:	e9 c0 02 00 00       	jmp    ffff80000080b149 <path_walk+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30
    }

    for(;;)
    {
        tmpname = name;
ffff80000080ae89:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ae8d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:31
        while(*name && (*name != '/'))
ffff80000080ae91:	eb 05                	jmp    ffff80000080ae98 <path_walk+0x8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:32
            name++;
ffff80000080ae93:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:31
        while(*name && (*name != '/'))
ffff80000080ae98:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ae9c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080ae9f:	84 c0                	test   al,al
ffff80000080aea1:	74 0b                	je     ffff80000080aeae <path_walk+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:31 (discriminator 1)
ffff80000080aea3:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080aea7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080aeaa:	3c 2f                	cmp    al,0x2f
ffff80000080aeac:	75 e5                	jne    ffff80000080ae93 <path_walk+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:33
        tmpnamelen = name - tmpname;
ffff80000080aeae:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080aeb2:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
ffff80000080aeb6:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:35

        path = (struct dir_entry *) kmalloc(sizeof(struct dir_entry), 0);
ffff80000080aeb9:	be 00 00 00 00       	mov    esi,0x0
ffff80000080aebe:	bf 58 00 00 00       	mov    edi,0x58
ffff80000080aec3:	49 89 df             	mov    r15,rbx
ffff80000080aec6:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080aecb:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff80000080aed2:	ff ff ff 
ffff80000080aed5:	48 01 da             	add    rdx,rbx
ffff80000080aed8:	ff d2                	call   rdx
ffff80000080aeda:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:36
        memset(path,0,sizeof(struct dir_entry));
ffff80000080aede:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080aee2:	ba 58 00 00 00       	mov    edx,0x58
ffff80000080aee7:	be 00 00 00 00       	mov    esi,0x0
ffff80000080aeec:	48 89 c7             	mov    rdi,rax
ffff80000080aeef:	49 89 df             	mov    r15,rbx
ffff80000080aef2:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff80000080aef9:	ff ff ff 
ffff80000080aefc:	48 01 d8             	add    rax,rbx
ffff80000080aeff:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:38

        path->name = kmalloc();
ffff80000080af01:	49 89 df             	mov    r15,rbx
ffff80000080af04:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080af09:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff80000080af10:	ff ff ff 
ffff80000080af13:	48 01 da             	add    rdx,rbx
ffff80000080af16:	ff d2                	call   rdx
ffff80000080af18:	48 89 c2             	mov    rdx,rax
ffff80000080af1b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080af1f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:39
        memset(path->name,0,tmpnamelen+1);
ffff80000080af22:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080af25:	83 c0 01             	add    eax,0x1
ffff80000080af28:	89 c2                	mov    edx,eax
ffff80000080af2a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080af2e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080af31:	be 00 00 00 00       	mov    esi,0x0
ffff80000080af36:	48 89 c7             	mov    rdi,rax
ffff80000080af39:	49 89 df             	mov    r15,rbx
ffff80000080af3c:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff80000080af43:	ff ff ff 
ffff80000080af46:	48 01 d8             	add    rax,rbx
ffff80000080af49:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:40
        memcpy(path->name,tmpname,tmpnamelen);
ffff80000080af4b:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080af4e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080af52:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080af55:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080af59:	48 89 ce             	mov    rsi,rcx
ffff80000080af5c:	48 89 c7             	mov    rdi,rax
ffff80000080af5f:	49 89 df             	mov    r15,rbx
ffff80000080af62:	48 b8 c4 50 ef ff ff 	movabs rax,0xffffffffffef50c4
ffff80000080af69:	ff ff ff 
ffff80000080af6c:	48 01 d8             	add    rax,rbx
ffff80000080af6f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:41
        path->name_length = tmpnamelen;
ffff80000080af71:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080af75:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080af78:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:43

        path=parent->dir_inode->inode_ops->lookup(parent->dir_inode,path);
ffff80000080af7b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080af7f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080af83:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080af87:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080af8b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080af8f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080af93:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080af97:	48 89 d6             	mov    rsi,rdx
ffff80000080af9a:	48 89 c7             	mov    rdi,rax
ffff80000080af9d:	ff d1                	call   rcx
ffff80000080af9f:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:44
        if(path == NULL)
ffff80000080afa3:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
ffff80000080afa8:	75 39                	jne    ffff80000080afe3 <path_walk+0x1da>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:46
        {
            printf("can not find file or dir:%s\n",name);
ffff80000080afaa:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080afae:	48 89 c6             	mov    rsi,rax
ffff80000080afb1:	48 b8 c8 d7 ff ff ff 	movabs rax,0xffffffffffffd7c8
ffff80000080afb8:	ff ff ff 
ffff80000080afbb:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080afbf:	48 89 c7             	mov    rdi,rax
ffff80000080afc2:	49 89 df             	mov    r15,rbx
ffff80000080afc5:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080afca:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff80000080afd1:	ff ff ff 
ffff80000080afd4:	48 01 da             	add    rdx,rbx
ffff80000080afd7:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:49
            // kmfree(path->name);
            // kmfree(path);
            return NULL;
ffff80000080afd9:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080afde:	e9 66 01 00 00       	jmp    ffff80000080b149 <path_walk+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:54
        }

//        list_init(&path->child_node);
//        list_init(&path->subdirs_list);
        path->parent = parent;
ffff80000080afe3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080afe7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080afeb:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:57
        //list_add会查重，如果链表里面已经有了data指针值相同的项，就不添加。
        //对于/dev这样的文件夹，lookup返回的就是链表里的dentry，data会一样
        list_add(&parent->subdirs_list,&path->child_node);
ffff80000080afef:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080aff3:	48 83 c0 10          	add    rax,0x10
ffff80000080aff7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080affb:	48 83 c2 28          	add    rdx,0x28
ffff80000080afff:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff80000080b003:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff80000080b007:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b00b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b00f:	48 85 c0             	test   rax,rax
ffff80000080b012:	75 50                	jne    ffff80000080b064 <path_walk+0x25b>
ffff80000080b014:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b018:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff80000080b01c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b020:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080b024:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080b028:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080b02c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080b030:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080b034:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080b038:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080b03c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080b03f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080b043:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b047:	48 85 c0             	test   rax,rax
ffff80000080b04a:	0f 84 a3 00 00 00    	je     ffff80000080b0f3 <path_walk+0x2ea>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080b050:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080b054:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b058:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff80000080b05c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080b05f:	e9 8f 00 00 00       	jmp    ffff80000080b0f3 <path_walk+0x2ea>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff80000080b064:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b068:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080b06c:	eb 21                	jmp    ffff80000080b08f <path_walk+0x286>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff80000080b06e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b072:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080b076:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b07a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080b07e:	48 39 c2             	cmp    rdx,rax
ffff80000080b081:	74 73                	je     ffff80000080b0f6 <path_walk+0x2ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080b083:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b087:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b08b:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffff80000080b08f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b093:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b097:	48 85 c0             	test   rax,rax
ffff80000080b09a:	74 0e                	je     ffff80000080b0aa <path_walk+0x2a1>
ffff80000080b09c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b0a0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b0a4:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff80000080b0a8:	75 c4                	jne    ffff80000080b06e <path_walk+0x265>
ffff80000080b0aa:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b0ae:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffff80000080b0b2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b0b6:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080b0ba:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080b0be:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080b0c2:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b0c6:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080b0ca:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b0ce:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080b0d2:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080b0d5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b0d9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b0dd:	48 85 c0             	test   rax,rax
ffff80000080b0e0:	74 17                	je     ffff80000080b0f9 <path_walk+0x2f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080b0e2:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b0e6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b0ea:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff80000080b0ee:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080b0f1:	eb 06                	jmp    ffff80000080b0f9 <path_walk+0x2f0>
ffff80000080b0f3:	90                   	nop
ffff80000080b0f4:	eb 04                	jmp    ffff80000080b0fa <path_walk+0x2f1>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff80000080b0f6:	90                   	nop
ffff80000080b0f7:	eb 01                	jmp    ffff80000080b0fa <path_walk+0x2f1>
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080b0f9:	90                   	nop
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:59

        if(!*name)
ffff80000080b0fa:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080b0fe:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b101:	84 c0                	test   al,al
ffff80000080b103:	74 2a                	je     ffff80000080b12f <path_walk+0x326>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:61
            goto last_component;
        while(*name == '/')
ffff80000080b105:	eb 05                	jmp    ffff80000080b10c <path_walk+0x303>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:62
            name++;
ffff80000080b107:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:61
        while(*name == '/')
ffff80000080b10c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080b110:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b113:	3c 2f                	cmp    al,0x2f
ffff80000080b115:	74 f0                	je     ffff80000080b107 <path_walk+0x2fe>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:63
        if(!*name)
ffff80000080b117:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080b11b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b11e:	84 c0                	test   al,al
ffff80000080b120:	74 10                	je     ffff80000080b132 <path_walk+0x329>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:66
            goto last_slash;

        parent = path;
ffff80000080b122:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b126:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30
        tmpname = name;
ffff80000080b12a:	e9 5a fd ff ff       	jmp    ffff80000080ae89 <path_walk+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:60
            goto last_component;
ffff80000080b12f:	90                   	nop
ffff80000080b130:	eb 01                	jmp    ffff80000080b133 <path_walk+0x32a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:64
            goto last_slash;
ffff80000080b132:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:72
    }

    last_slash:
    last_component:

    if(flags & 1)
ffff80000080b133:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080b137:	83 e0 01             	and    eax,0x1
ffff80000080b13a:	48 85 c0             	test   rax,rax
ffff80000080b13d:	74 06                	je     ffff80000080b145 <path_walk+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:74
    {
        return parent;
ffff80000080b13f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b143:	eb 04                	jmp    ffff80000080b149 <path_walk+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:77
    }

    return path;
ffff80000080b145:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:78
}
ffff80000080b149:	48 83 c4 70          	add    rsp,0x70
ffff80000080b14d:	5b                   	pop    rbx
ffff80000080b14e:	41 5f                	pop    r15
ffff80000080b150:	5d                   	pop    rbp
ffff80000080b151:	c3                   	ret    

ffff80000080b152 <fill_dentry>:
fill_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:82


int fill_dentry(void *buf,char *name, long namelen,long type,long offset)
{
ffff80000080b152:	f3 0f 1e fa          	endbr64 
ffff80000080b156:	55                   	push   rbp
ffff80000080b157:	48 89 e5             	mov    rbp,rsp
ffff80000080b15a:	41 57                	push   r15
ffff80000080b15c:	48 83 ec 48          	sub    rsp,0x48
ffff80000080b160:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b160 <fill_dentry+0xe>
ffff80000080b167:	49 bb 70 29 11 00 00 	movabs r11,0x112970
ffff80000080b16e:	00 00 00 
ffff80000080b171:	4c 01 d8             	add    rax,r11
ffff80000080b174:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080b178:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080b17c:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff80000080b180:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffff80000080b184:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:83
    struct dirent* dent = (struct dirent*)buf;
ffff80000080b188:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b18c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:85

    if((unsigned long)buf < PAGE_4K_SIZE)
ffff80000080b190:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b194:	48 81 fa ff 0f 00 00 	cmp    rdx,0xfff
ffff80000080b19b:	77 07                	ja     ffff80000080b1a4 <fill_dentry+0x52>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:86
        return -EFAULT;
ffff80000080b19d:	b8 eb ff ff ff       	mov    eax,0xffffffeb
ffff80000080b1a2:	eb 53                	jmp    ffff80000080b1f7 <fill_dentry+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:88

    memcpy(name,dent->d_name,namelen);
ffff80000080b1a4:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080b1a8:	89 d7                	mov    edi,edx
ffff80000080b1aa:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b1ae:	48 8d 72 18          	lea    rsi,[rdx+0x18]
ffff80000080b1b2:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080b1b6:	89 fa                	mov    edx,edi
ffff80000080b1b8:	48 89 cf             	mov    rdi,rcx
ffff80000080b1bb:	49 89 c7             	mov    r15,rax
ffff80000080b1be:	48 b9 c4 50 ef ff ff 	movabs rcx,0xffffffffffef50c4
ffff80000080b1c5:	ff ff ff 
ffff80000080b1c8:	48 01 c1             	add    rcx,rax
ffff80000080b1cb:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:89
    dent->d_namelen = namelen;
ffff80000080b1cd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b1d1:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080b1d5:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:90
    dent->d_type = type;
ffff80000080b1d9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b1dd:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080b1e1:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:91
    dent->d_offset = offset;
ffff80000080b1e5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b1e9:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080b1ed:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:92
    return sizeof(struct dirent) + namelen;
ffff80000080b1f0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b1f4:	83 c0 18             	add    eax,0x18
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:93
}
ffff80000080b1f7:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080b1fb:	c9                   	leave  
ffff80000080b1fc:	c3                   	ret    

ffff80000080b1fd <mount_fs>:
mount_fs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:100
//function mount_root
struct super_block * root_sb = NULL;
struct file_system_type filesystem = {"filesystem",0};

struct super_block* mount_fs(char * name,struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
ffff80000080b1fd:	f3 0f 1e fa          	endbr64 
ffff80000080b201:	55                   	push   rbp
ffff80000080b202:	48 89 e5             	mov    rbp,rsp
ffff80000080b205:	41 57                	push   r15
ffff80000080b207:	53                   	push   rbx
ffff80000080b208:	48 83 ec 30          	sub    rsp,0x30
ffff80000080b20c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b20c <mount_fs+0xf>
ffff80000080b213:	49 bb c4 28 11 00 00 	movabs r11,0x1128c4
ffff80000080b21a:	00 00 00 
ffff80000080b21d:	4c 01 db             	add    rbx,r11
ffff80000080b220:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080b224:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080b228:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:101
    struct file_system_type * p = NULL;
ffff80000080b22c:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080b233:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:103

    for(p = &filesystem;p;p = p->next)
ffff80000080b234:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080b23b:	ff ff ff 
ffff80000080b23e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b242:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080b246:	eb 4d                	jmp    ffff80000080b295 <mount_fs+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:104
        if(!strcmp(p->name,name))
ffff80000080b248:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b24c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b24f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b253:	48 89 d6             	mov    rsi,rdx
ffff80000080b256:	48 89 c7             	mov    rdi,rax
ffff80000080b259:	49 89 df             	mov    r15,rbx
ffff80000080b25c:	48 b8 16 54 ef ff ff 	movabs rax,0xffffffffffef5416
ffff80000080b263:	ff ff ff 
ffff80000080b266:	48 01 d8             	add    rax,rbx
ffff80000080b269:	ff d0                	call   rax
ffff80000080b26b:	85 c0                	test   eax,eax
ffff80000080b26d:	75 1a                	jne    ffff80000080b289 <mount_fs+0x8c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:106
        {
            return p->read_superblock(DPTE,buf);
ffff80000080b26f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b273:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
ffff80000080b277:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080b27b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b27f:	48 89 d6             	mov    rsi,rdx
ffff80000080b282:	48 89 c7             	mov    rdi,rax
ffff80000080b285:	ff d1                	call   rcx
ffff80000080b287:	eb 18                	jmp    ffff80000080b2a1 <mount_fs+0xa4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:103 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
ffff80000080b289:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b28d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b291:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:103 (discriminator 1)
ffff80000080b295:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080b29a:	75 ac                	jne    ffff80000080b248 <mount_fs+0x4b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:108
        }
    return 0;
ffff80000080b29c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:109
}
ffff80000080b2a1:	48 83 c4 30          	add    rsp,0x30
ffff80000080b2a5:	5b                   	pop    rbx
ffff80000080b2a6:	41 5f                	pop    r15
ffff80000080b2a8:	5d                   	pop    rbp
ffff80000080b2a9:	c3                   	ret    

ffff80000080b2aa <register_filesystem>:
register_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:112

unsigned long register_filesystem(struct file_system_type * fs)
{
ffff80000080b2aa:	f3 0f 1e fa          	endbr64 
ffff80000080b2ae:	55                   	push   rbp
ffff80000080b2af:	48 89 e5             	mov    rbp,rsp
ffff80000080b2b2:	41 57                	push   r15
ffff80000080b2b4:	53                   	push   rbx
ffff80000080b2b5:	48 83 ec 20          	sub    rsp,0x20
ffff80000080b2b9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b2b9 <register_filesystem+0xf>
ffff80000080b2c0:	49 bb 17 28 11 00 00 	movabs r11,0x112817
ffff80000080b2c7:	00 00 00 
ffff80000080b2ca:	4c 01 db             	add    rbx,r11
ffff80000080b2cd:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:113
    struct file_system_type * p = NULL;
ffff80000080b2d1:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080b2d8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:115

    for(p = &filesystem;p;p = p->next)
ffff80000080b2d9:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080b2e0:	ff ff ff 
ffff80000080b2e3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b2e7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080b2eb:	eb 3d                	jmp    ffff80000080b32a <register_filesystem+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:116
        if(!strcmp(fs->name,p->name))
ffff80000080b2ed:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b2f1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b2f4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b2f8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b2fb:	48 89 d6             	mov    rsi,rdx
ffff80000080b2fe:	48 89 c7             	mov    rdi,rax
ffff80000080b301:	49 89 df             	mov    r15,rbx
ffff80000080b304:	48 b8 16 54 ef ff ff 	movabs rax,0xffffffffffef5416
ffff80000080b30b:	ff ff ff 
ffff80000080b30e:	48 01 d8             	add    rax,rbx
ffff80000080b311:	ff d0                	call   rax
ffff80000080b313:	85 c0                	test   eax,eax
ffff80000080b315:	75 07                	jne    ffff80000080b31e <register_filesystem+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:117
            return 0;
ffff80000080b317:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b31c:	eb 48                	jmp    ffff80000080b366 <register_filesystem+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:115 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
ffff80000080b31e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b322:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b326:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:115 (discriminator 1)
ffff80000080b32a:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080b32f:	75 bc                	jne    ffff80000080b2ed <register_filesystem+0x43>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:119

    fs->next = filesystem.next;
ffff80000080b331:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080b338:	ff ff ff 
ffff80000080b33b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b33f:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080b343:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b347:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:120
    filesystem.next = fs;
ffff80000080b34b:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080b352:	ff ff ff 
ffff80000080b355:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b359:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b35d:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:122

    return 1;
ffff80000080b361:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:123
}
ffff80000080b366:	48 83 c4 20          	add    rsp,0x20
ffff80000080b36a:	5b                   	pop    rbx
ffff80000080b36b:	41 5f                	pop    r15
ffff80000080b36d:	5d                   	pop    rbp
ffff80000080b36e:	c3                   	ret    

ffff80000080b36f <unregister_filesystem>:
unregister_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:126

unsigned long unregister_filesystem(struct file_system_type * fs)
{
ffff80000080b36f:	f3 0f 1e fa          	endbr64 
ffff80000080b373:	55                   	push   rbp
ffff80000080b374:	48 89 e5             	mov    rbp,rsp
ffff80000080b377:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b377 <unregister_filesystem+0x8>
ffff80000080b37e:	49 bb 59 27 11 00 00 	movabs r11,0x112759
ffff80000080b385:	00 00 00 
ffff80000080b388:	4c 01 d8             	add    rax,r11
ffff80000080b38b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:127
    struct file_system_type * p = &filesystem;
ffff80000080b38f:	48 ba 50 ff ff ff ff 	movabs rdx,0xffffffffffffff50
ffff80000080b396:	ff ff ff 
ffff80000080b399:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080b39d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:129

    while(p->next)
ffff80000080b3a1:	eb 41                	jmp    ffff80000080b3e4 <unregister_filesystem+0x75>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:130
        if(p->next == fs)
ffff80000080b3a3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b3a7:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b3ab:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff80000080b3af:	75 27                	jne    ffff80000080b3d8 <unregister_filesystem+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:132
        {
            p->next = p->next->next;
ffff80000080b3b1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b3b5:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b3b9:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080b3bd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b3c1:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:133
            fs->next = NULL;
ffff80000080b3c5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b3c9:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff80000080b3d0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:134
            return 1;
ffff80000080b3d1:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080b3d6:	eb 1e                	jmp    ffff80000080b3f6 <unregister_filesystem+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:137
        }
        else
            p = p->next;
ffff80000080b3d8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b3dc:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b3e0:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:129
    while(p->next)
ffff80000080b3e4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b3e8:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b3ec:	48 85 c0             	test   rax,rax
ffff80000080b3ef:	75 b2                	jne    ffff80000080b3a3 <unregister_filesystem+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:138
    return 0;
ffff80000080b3f1:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:139
}
ffff80000080b3f6:	5d                   	pop    rbp
ffff80000080b3f7:	c3                   	ret    

ffff80000080b3f8 <root_lookup>:
root_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:141
//在parent inode下查找dest dentry
struct dir_entry* root_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry){
ffff80000080b3f8:	f3 0f 1e fa          	endbr64 
ffff80000080b3fc:	55                   	push   rbp
ffff80000080b3fd:	48 89 e5             	mov    rbp,rsp
ffff80000080b400:	41 57                	push   r15
ffff80000080b402:	53                   	push   rbx
ffff80000080b403:	48 83 ec 30          	sub    rsp,0x30
ffff80000080b407:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b407 <root_lookup+0xf>
ffff80000080b40e:	49 bb c9 26 11 00 00 	movabs r11,0x1126c9
ffff80000080b415:	00 00 00 
ffff80000080b418:	4c 01 db             	add    rbx,r11
ffff80000080b41b:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080b41f:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:142
    struct dir_entry* tmp= (struct dir_entry *) parent_inode->private_index_info;
ffff80000080b423:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b427:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080b42b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:143
    struct List* p= tmp->subdirs_list.next;
ffff80000080b42f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b433:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080b437:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:144
    while (p){
ffff80000080b43b:	eb 61                	jmp    ffff80000080b49e <root_lookup+0xa6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:145
        struct dir_entry* dp=p->data;
ffff80000080b43d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b441:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080b445:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:146
        if(strcmp(dp->name,dest_dentry->name)==0){
ffff80000080b449:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b44d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b450:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b454:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b457:	48 89 d6             	mov    rsi,rdx
ffff80000080b45a:	48 89 c7             	mov    rdi,rax
ffff80000080b45d:	49 89 df             	mov    r15,rbx
ffff80000080b460:	48 b8 16 54 ef ff ff 	movabs rax,0xffffffffffef5416
ffff80000080b467:	ff ff ff 
ffff80000080b46a:	48 01 d8             	add    rax,rbx
ffff80000080b46d:	ff d0                	call   rax
ffff80000080b46f:	85 c0                	test   eax,eax
ffff80000080b471:	75 1f                	jne    ffff80000080b492 <root_lookup+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:147
            kmfree(dest_dentry);
ffff80000080b473:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b477:	48 89 c7             	mov    rdi,rax
ffff80000080b47a:	49 89 df             	mov    r15,rbx
ffff80000080b47d:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff80000080b484:	ff ff ff 
ffff80000080b487:	48 01 d8             	add    rax,rbx
ffff80000080b48a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:148
            return dp;
ffff80000080b48c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b490:	eb 31                	jmp    ffff80000080b4c3 <root_lookup+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:150
        }
        p=p->next;
ffff80000080b492:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b496:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b49a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:144
    while (p){
ffff80000080b49e:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080b4a3:	75 98                	jne    ffff80000080b43d <root_lookup+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:152
    }
    kmfree(dest_dentry);
ffff80000080b4a5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b4a9:	48 89 c7             	mov    rdi,rax
ffff80000080b4ac:	49 89 df             	mov    r15,rbx
ffff80000080b4af:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff80000080b4b6:	ff ff ff 
ffff80000080b4b9:	48 01 d8             	add    rax,rbx
ffff80000080b4bc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:153
    return NULL;
ffff80000080b4be:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:154
}
ffff80000080b4c3:	48 83 c4 30          	add    rsp,0x30
ffff80000080b4c7:	5b                   	pop    rbx
ffff80000080b4c8:	41 5f                	pop    r15
ffff80000080b4ca:	5d                   	pop    rbp
ffff80000080b4cb:	c3                   	ret    

ffff80000080b4cc <init_rootfs>:
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:158
struct index_node_operations root_iops={
    .lookup=root_lookup
};
void init_rootfs(){
ffff80000080b4cc:	f3 0f 1e fa          	endbr64 
ffff80000080b4d0:	55                   	push   rbp
ffff80000080b4d1:	48 89 e5             	mov    rbp,rsp
ffff80000080b4d4:	41 57                	push   r15
ffff80000080b4d6:	53                   	push   rbx
ffff80000080b4d7:	48 83 ec 20          	sub    rsp,0x20
ffff80000080b4db:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b4db <init_rootfs+0xf>
ffff80000080b4e2:	49 bb f5 25 11 00 00 	movabs r11,0x1125f5
ffff80000080b4e9:	00 00 00 
ffff80000080b4ec:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:159
    root_sb=(struct super_block*) kmalloc();
ffff80000080b4ef:	49 89 df             	mov    r15,rbx
ffff80000080b4f2:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b4f7:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff80000080b4fe:	ff ff ff 
ffff80000080b501:	48 01 da             	add    rdx,rbx
ffff80000080b504:	ff d2                	call   rdx
ffff80000080b506:	48 89 c2             	mov    rdx,rax
ffff80000080b509:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b510:	ff ff ff 
ffff80000080b513:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b517:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:160
    root_sb->root=root_sb+1;//紧凑跟在后面
ffff80000080b51a:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b521:	ff ff ff 
ffff80000080b524:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b528:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b52b:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b532:	ff ff ff 
ffff80000080b535:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b539:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b53c:	48 83 c2 28          	add    rdx,0x28
ffff80000080b540:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:161
    root_sb->sb_ops=NULL;
ffff80000080b543:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b54a:	ff ff ff 
ffff80000080b54d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b551:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b554:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff80000080b55b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:163
    
    struct index_node* ir=root_sb->root+1;
ffff80000080b55c:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b563:	ff ff ff 
ffff80000080b566:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b56a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b56d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b570:	48 83 c0 58          	add    rax,0x58
ffff80000080b574:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:164
    root_sb->root->dir_inode=ir;
ffff80000080b578:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b57f:	ff ff ff 
ffff80000080b582:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b586:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b589:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b58c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b590:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:165
    ir->sb=root_sb;
ffff80000080b594:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b59b:	ff ff ff 
ffff80000080b59e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b5a2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b5a5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b5a9:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:166
    ir->attribute=FS_ATTR_DIR;
ffff80000080b5ad:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b5b1:	48 c7 40 10 02 00 00 	mov    QWORD PTR [rax+0x10],0x2
ffff80000080b5b8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:167
    ir->file_size=0;
ffff80000080b5b9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b5bd:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:168
    ir->inode_ops=&root_iops;//lookup函数是必要的
ffff80000080b5c4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b5c8:	48 ba 50 fd ff ff ff 	movabs rdx,0xfffffffffffffd50
ffff80000080b5cf:	ff ff ff 
ffff80000080b5d2:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080b5d6:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:169
    ir->f_ops=NULL;
ffff80000080b5da:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b5de:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffff80000080b5e5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:170
    ir->private_index_info=root_sb->root;
ffff80000080b5e6:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b5ed:	ff ff ff 
ffff80000080b5f0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b5f4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b5f7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b5fa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b5fe:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:172

    root_sb->root->name=ir+1;//紧凑跟在后面
ffff80000080b602:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b609:	ff ff ff 
ffff80000080b60c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b610:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b613:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b616:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b61a:	48 83 c2 40          	add    rdx,0x40
ffff80000080b61e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:173
    strcpy(root_sb->root->name,"/");
ffff80000080b621:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b628:	ff ff ff 
ffff80000080b62b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b62f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b632:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b635:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b638:	48 ba f0 d7 ff ff ff 	movabs rdx,0xffffffffffffd7f0
ffff80000080b63f:	ff ff ff 
ffff80000080b642:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080b646:	48 89 d6             	mov    rsi,rdx
ffff80000080b649:	48 89 c7             	mov    rdi,rax
ffff80000080b64c:	49 89 df             	mov    r15,rbx
ffff80000080b64f:	48 b8 c8 51 ef ff ff 	movabs rax,0xffffffffffef51c8
ffff80000080b656:	ff ff ff 
ffff80000080b659:	48 01 d8             	add    rax,rbx
ffff80000080b65c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:174
    root_sb->root->name_length=1;
ffff80000080b65e:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b665:	ff ff ff 
ffff80000080b668:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b66c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b66f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b672:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:175
    root_sb->root->parent=root_sb->root;
ffff80000080b679:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b680:	ff ff ff 
ffff80000080b683:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b687:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b68a:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b691:	ff ff ff 
ffff80000080b694:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b698:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b69b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b69e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080b6a1:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:176
    list_init(&root_sb->root->subdirs_list);
ffff80000080b6a5:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b6ac:	ff ff ff 
ffff80000080b6af:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b6b3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b6b6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b6b9:	48 83 c0 28          	add    rax,0x28
ffff80000080b6bd:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080b6c1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b6c5:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080b6cc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b6d0:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080b6d7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080b6d8:	90                   	nop
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:177
    list_init(&root_sb->root->child_node);
ffff80000080b6d9:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b6e0:	ff ff ff 
ffff80000080b6e3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b6e7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b6ea:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b6ed:	48 83 c0 10          	add    rax,0x10
ffff80000080b6f1:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080b6f5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b6f9:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080b700:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b704:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080b70b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080b70c:	90                   	nop
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:179

    root_sb->dev=dev_ramdisk<<8;
ffff80000080b70d:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff80000080b714:	ff ff ff 
ffff80000080b717:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b71b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b71d:	89 c2                	mov    edx,eax
ffff80000080b71f:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b726:	ff ff ff 
ffff80000080b729:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b72d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b730:	c1 e2 08             	shl    edx,0x8
ffff80000080b733:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:180
    root_sb->p_dev=&bd_ramdisk;
ffff80000080b737:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080b73e:	ff ff ff 
ffff80000080b741:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b745:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b748:	48 ba a8 ff ff ff ff 	movabs rdx,0xffffffffffffffa8
ffff80000080b74f:	ff ff ff 
ffff80000080b752:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080b756:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:181
}
ffff80000080b75a:	90                   	nop
ffff80000080b75b:	48 83 c4 20          	add    rsp,0x20
ffff80000080b75f:	5b                   	pop    rbx
ffff80000080b760:	41 5f                	pop    r15
ffff80000080b762:	5d                   	pop    rbp
ffff80000080b763:	c3                   	ret    

ffff80000080b764 <sys_putstring>:
sys_putstring():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:21
#include "int.h"
#include <sys/mman.h>


unsigned long sys_putstring(char *string)
{
ffff80000080b764:	f3 0f 1e fa          	endbr64 
ffff80000080b768:	55                   	push   rbp
ffff80000080b769:	48 89 e5             	mov    rbp,rsp
ffff80000080b76c:	41 57                	push   r15
ffff80000080b76e:	48 83 ec 18          	sub    rsp,0x18
ffff80000080b772:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080b772 <sys_putstring+0xe>
ffff80000080b779:	49 bb 5e 23 11 00 00 	movabs r11,0x11235e
ffff80000080b780:	00 00 00 
ffff80000080b783:	4c 01 da             	add    rdx,r11
ffff80000080b786:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:22
    printf(string);
ffff80000080b78a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b78e:	48 89 c7             	mov    rdi,rax
ffff80000080b791:	49 89 d7             	mov    r15,rdx
ffff80000080b794:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b799:	48 b9 23 3c ee ff ff 	movabs rcx,0xffffffffffee3c23
ffff80000080b7a0:	ff ff ff 
ffff80000080b7a3:	48 01 d1             	add    rcx,rdx
ffff80000080b7a6:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:23
    return 0;
ffff80000080b7a8:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:24
}
ffff80000080b7ad:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080b7b1:	c9                   	leave  
ffff80000080b7b2:	c3                   	ret    

ffff80000080b7b3 <sys_open>:
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:27

unsigned long sys_open(char *filename,int flags)
{
ffff80000080b7b3:	f3 0f 1e fa          	endbr64 
ffff80000080b7b7:	55                   	push   rbp
ffff80000080b7b8:	48 89 e5             	mov    rbp,rsp
ffff80000080b7bb:	41 57                	push   r15
ffff80000080b7bd:	53                   	push   rbx
ffff80000080b7be:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
ffff80000080b7c5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b7c5 <sys_open+0x12>
ffff80000080b7cc:	49 bb 0b 23 11 00 00 	movabs r11,0x11230b
ffff80000080b7d3:	00 00 00 
ffff80000080b7d6:	4c 01 db             	add    rbx,r11
ffff80000080b7d9:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
ffff80000080b7e0:	89 b5 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:28
    char * path = NULL;
ffff80000080b7e6:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080b7ed:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:29
    long pathlen = 0;
ffff80000080b7ee:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080b7f5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:30
    long error = 0;
ffff80000080b7f6:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080b7fd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:31
    struct dir_entry * dentry = NULL;
ffff80000080b7fe:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080b805:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:32
    struct file * filp = NULL;
ffff80000080b806:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000080b80d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:33
    struct file ** f = NULL;
ffff80000080b80e:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff80000080b815:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:34
    int fd = -1;
ffff80000080b816:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [rbp-0x24],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:38
    int i;

//	printf("sys_open\n");
    path = (char *) kmalloc();
ffff80000080b81d:	49 89 df             	mov    r15,rbx
ffff80000080b820:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b825:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff80000080b82c:	ff ff ff 
ffff80000080b82f:	48 01 da             	add    rdx,rbx
ffff80000080b832:	ff d2                	call   rdx
ffff80000080b834:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:39
    if(path == NULL)
ffff80000080b838:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080b83d:	75 0c                	jne    ffff80000080b84b <sys_open+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:40
        return -ENOMEM;
ffff80000080b83f:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
ffff80000080b846:	e9 fc 05 00 00       	jmp    ffff80000080be47 <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:41
    memset(path,0,PAGE_4K_SIZE);
ffff80000080b84b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b84f:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080b854:	be 00 00 00 00       	mov    esi,0x0
ffff80000080b859:	48 89 c7             	mov    rdi,rax
ffff80000080b85c:	49 89 df             	mov    r15,rbx
ffff80000080b85f:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff80000080b866:	ff ff ff 
ffff80000080b869:	48 01 d8             	add    rax,rbx
ffff80000080b86c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:42
    pathlen = strlen(filename);
ffff80000080b86e:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff80000080b875:	48 89 c7             	mov    rdi,rax
ffff80000080b878:	49 89 df             	mov    r15,rbx
ffff80000080b87b:	48 b8 95 54 ef ff ff 	movabs rax,0xffffffffffef5495
ffff80000080b882:	ff ff ff 
ffff80000080b885:	48 01 d8             	add    rax,rbx
ffff80000080b888:	ff d0                	call   rax
ffff80000080b88a:	48 98                	cdqe   
ffff80000080b88c:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:43
    if(pathlen <= 0)
ffff80000080b890:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080b895:	7f 25                	jg     ffff80000080b8bc <sys_open+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:45
    {
        kmfree(path);
ffff80000080b897:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b89b:	48 89 c7             	mov    rdi,rax
ffff80000080b89e:	49 89 df             	mov    r15,rbx
ffff80000080b8a1:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff80000080b8a8:	ff ff ff 
ffff80000080b8ab:	48 01 d8             	add    rax,rbx
ffff80000080b8ae:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:46
        return -EFAULT;
ffff80000080b8b0:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080b8b7:	e9 8b 05 00 00       	jmp    ffff80000080be47 <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:48
    }
    else if(pathlen >= PAGE_4K_SIZE)
ffff80000080b8bc:	48 81 7d c0 ff 0f 00 	cmp    QWORD PTR [rbp-0x40],0xfff
ffff80000080b8c3:	00 
ffff80000080b8c4:	7e 25                	jle    ffff80000080b8eb <sys_open+0x138>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:50
    {
        kmfree(path);
ffff80000080b8c6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b8ca:	48 89 c7             	mov    rdi,rax
ffff80000080b8cd:	49 89 df             	mov    r15,rbx
ffff80000080b8d0:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff80000080b8d7:	ff ff ff 
ffff80000080b8da:	48 01 d8             	add    rax,rbx
ffff80000080b8dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:51
        return -ENAMETOOLONG;
ffff80000080b8df:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
ffff80000080b8e6:	e9 5c 05 00 00       	jmp    ffff80000080be47 <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:53
    }
    strcpy(path,filename);
ffff80000080b8eb:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
ffff80000080b8f2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b8f6:	48 89 d6             	mov    rsi,rdx
ffff80000080b8f9:	48 89 c7             	mov    rdi,rax
ffff80000080b8fc:	49 89 df             	mov    r15,rbx
ffff80000080b8ff:	48 b8 c8 51 ef ff ff 	movabs rax,0xffffffffffef51c8
ffff80000080b906:	ff ff ff 
ffff80000080b909:	48 01 d8             	add    rax,rbx
ffff80000080b90c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:55

    dentry = path_walk(path,0);
ffff80000080b90e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b912:	be 00 00 00 00       	mov    esi,0x0
ffff80000080b917:	48 89 c7             	mov    rdi,rax
ffff80000080b91a:	49 89 df             	mov    r15,rbx
ffff80000080b91d:	48 b8 39 d3 ee ff ff 	movabs rax,0xffffffffffeed339
ffff80000080b924:	ff ff ff 
ffff80000080b927:	48 01 d8             	add    rax,rbx
ffff80000080b92a:	ff d0                	call   rax
ffff80000080b92c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:57

    if(dentry == NULL){
ffff80000080b930:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080b935:	0f 85 a8 02 00 00    	jne    ffff80000080bbe3 <sys_open+0x430>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62
        if(!flags&O_CREAT)
            return -ENOENT;
        //创建文件
        //找到上一级目录
        char* p=path+strlen(path)-1;
ffff80000080b93b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b93f:	48 89 c7             	mov    rdi,rax
ffff80000080b942:	49 89 df             	mov    r15,rbx
ffff80000080b945:	48 b8 95 54 ef ff ff 	movabs rax,0xffffffffffef5495
ffff80000080b94c:	ff ff ff 
ffff80000080b94f:	48 01 d8             	add    rax,rbx
ffff80000080b952:	ff d0                	call   rax
ffff80000080b954:	48 98                	cdqe   
ffff80000080b956:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff80000080b95a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b95e:	48 01 d0             	add    rax,rdx
ffff80000080b961:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63
        for(;*p!='/'&&p>path;p--);
ffff80000080b965:	eb 05                	jmp    ffff80000080b96c <sys_open+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63 (discriminator 3)
ffff80000080b967:	48 83 6d d0 01       	sub    QWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63 (discriminator 1)
ffff80000080b96c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b970:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b973:	3c 2f                	cmp    al,0x2f
ffff80000080b975:	74 0a                	je     ffff80000080b981 <sys_open+0x1ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63 (discriminator 2)
ffff80000080b977:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b97b:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
ffff80000080b97f:	77 e6                	ja     ffff80000080b967 <sys_open+0x1b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:64
        *p='\0';
ffff80000080b981:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b985:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:65
        struct dir_entry *parent= path_walk(path,O_DIRECTORY);
ffff80000080b988:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b98c:	be 00 40 00 00       	mov    esi,0x4000
ffff80000080b991:	48 89 c7             	mov    rdi,rax
ffff80000080b994:	49 89 df             	mov    r15,rbx
ffff80000080b997:	48 b8 39 d3 ee ff ff 	movabs rax,0xffffffffffeed339
ffff80000080b99e:	ff ff ff 
ffff80000080b9a1:	48 01 d8             	add    rax,rbx
ffff80000080b9a4:	ff d0                	call   rax
ffff80000080b9a6:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:66
        if(parent==NULL)
ffff80000080b9aa:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff80000080b9af:	75 0c                	jne    ffff80000080b9bd <sys_open+0x20a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:67
            return -ENOENT;//上级目录也不在
ffff80000080b9b1:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
ffff80000080b9b8:	e9 8a 04 00 00       	jmp    ffff80000080be47 <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:69
        //创建新的文件
        dentry=(struct dir_entry*) kmalloc();
ffff80000080b9bd:	49 89 df             	mov    r15,rbx
ffff80000080b9c0:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b9c5:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff80000080b9cc:	ff ff ff 
ffff80000080b9cf:	48 01 da             	add    rdx,rbx
ffff80000080b9d2:	ff d2                	call   rdx
ffff80000080b9d4:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:70
        list_init(&dentry->subdirs_list);
ffff80000080b9d8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b9dc:	48 83 c0 28          	add    rax,0x28
ffff80000080b9e0:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080b9e7:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080b9ee:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080b9f5:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080b9fc:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080ba03:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080ba04:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:71
        list_init(&dentry->child_node);
ffff80000080ba05:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ba09:	48 83 c0 10          	add    rax,0x10
ffff80000080ba0d:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080ba14:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080ba1b:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080ba22:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080ba29:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080ba30:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080ba31:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:72
        dentry->child_node.data=dentry;
ffff80000080ba32:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ba36:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080ba3a:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:73
        list_add(&parent->subdirs_list,&dentry->child_node);
ffff80000080ba3e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ba42:	48 83 c0 10          	add    rax,0x10
ffff80000080ba46:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080ba4a:	48 83 c2 28          	add    rdx,0x28
ffff80000080ba4e:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
ffff80000080ba52:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff80000080ba56:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080ba5a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ba5e:	48 85 c0             	test   rax,rax
ffff80000080ba61:	75 50                	jne    ffff80000080bab3 <sys_open+0x300>
ffff80000080ba63:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080ba67:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffff80000080ba6b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080ba6f:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080ba73:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080ba77:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080ba7b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ba7f:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080ba83:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ba87:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff80000080ba8b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080ba8e:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ba92:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ba96:	48 85 c0             	test   rax,rax
ffff80000080ba99:	0f 84 c2 00 00 00    	je     ffff80000080bb61 <sys_open+0x3ae>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080ba9f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080baa3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080baa7:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080baab:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080baae:	e9 ae 00 00 00       	jmp    ffff80000080bb61 <sys_open+0x3ae>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff80000080bab3:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080bab7:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080babb:	eb 25                	jmp    ffff80000080bae2 <sys_open+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff80000080babd:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080bac1:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080bac5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080bac9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080bacd:	48 39 c2             	cmp    rdx,rax
ffff80000080bad0:	0f 84 8e 00 00 00    	je     ffff80000080bb64 <sys_open+0x3b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080bad6:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080bada:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bade:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffff80000080bae2:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080bae6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080baea:	48 85 c0             	test   rax,rax
ffff80000080baed:	74 0e                	je     ffff80000080bafd <sys_open+0x34a>
ffff80000080baef:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080baf3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080baf7:	48 39 45 80          	cmp    QWORD PTR [rbp-0x80],rax
ffff80000080bafb:	75 c0                	jne    ffff80000080babd <sys_open+0x30a>
ffff80000080bafd:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080bb01:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffff80000080bb08:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080bb0c:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080bb13:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080bb1a:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080bb1e:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080bb25:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080bb29:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080bb30:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff80000080bb37:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080bb3a:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080bb41:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bb45:	48 85 c0             	test   rax,rax
ffff80000080bb48:	74 1d                	je     ffff80000080bb67 <sys_open+0x3b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080bb4a:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080bb51:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bb55:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffff80000080bb5c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080bb5f:	eb 06                	jmp    ffff80000080bb67 <sys_open+0x3b4>
ffff80000080bb61:	90                   	nop
ffff80000080bb62:	eb 04                	jmp    ffff80000080bb68 <sys_open+0x3b5>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff80000080bb64:	90                   	nop
ffff80000080bb65:	eb 01                	jmp    ffff80000080bb68 <sys_open+0x3b5>
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080bb67:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:74
        dentry->parent=parent;
ffff80000080bb68:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bb6c:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080bb70:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:75
        dentry->dir_inode=dentry+1;//放在后面
ffff80000080bb74:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bb78:	48 8d 50 58          	lea    rdx,[rax+0x58]
ffff80000080bb7c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bb80:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:76
        dentry->dir_inode->file_size=0;
ffff80000080bb84:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bb88:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bb8c:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:78
        //继承操作方法
        dentry->dir_inode->f_ops=parent->dir_inode->f_ops;
ffff80000080bb93:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080bb97:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080bb9b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bb9f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bba3:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080bba7:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:79
        dentry->dir_inode->inode_ops=parent->dir_inode->inode_ops;
ffff80000080bbab:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080bbaf:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080bbb3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bbb7:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bbbb:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080bbbf:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:80
        dentry->dir_ops=parent->dir_ops;
ffff80000080bbc3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080bbc7:	48 8b 50 50          	mov    rdx,QWORD PTR [rax+0x50]
ffff80000080bbcb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bbcf:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:82
        //这样的创建文件只能创建普通文件，设备文件要通过devman创建
        dentry->dir_inode->attribute=FS_ATTR_FILE;
ffff80000080bbd3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bbd7:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bbdb:	48 c7 40 10 01 00 00 	mov    QWORD PTR [rax+0x10],0x1
ffff80000080bbe2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:84
    }
    kmfree(path);
ffff80000080bbe3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080bbe7:	48 89 c7             	mov    rdi,rax
ffff80000080bbea:	49 89 df             	mov    r15,rbx
ffff80000080bbed:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff80000080bbf4:	ff ff ff 
ffff80000080bbf7:	48 01 d8             	add    rax,rbx
ffff80000080bbfa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:86

    if((flags & O_DIRECTORY) && (dentry->dir_inode->attribute != FS_ATTR_DIR))
ffff80000080bbfc:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080bc02:	25 00 40 00 00       	and    eax,0x4000
ffff80000080bc07:	85 c0                	test   eax,eax
ffff80000080bc09:	74 1e                	je     ffff80000080bc29 <sys_open+0x476>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:86 (discriminator 1)
ffff80000080bc0b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bc0f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bc13:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bc17:	48 83 f8 02          	cmp    rax,0x2
ffff80000080bc1b:	74 0c                	je     ffff80000080bc29 <sys_open+0x476>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:87
        return -ENOTDIR;
ffff80000080bc1d:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
ffff80000080bc24:	e9 1e 02 00 00       	jmp    ffff80000080be47 <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:88
    if(!(flags & O_DIRECTORY) && (dentry->dir_inode->attribute == FS_ATTR_DIR))
ffff80000080bc29:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080bc2f:	25 00 40 00 00       	and    eax,0x4000
ffff80000080bc34:	85 c0                	test   eax,eax
ffff80000080bc36:	75 1e                	jne    ffff80000080bc56 <sys_open+0x4a3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:88 (discriminator 1)
ffff80000080bc38:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bc3c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bc40:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bc44:	48 83 f8 02          	cmp    rax,0x2
ffff80000080bc48:	75 0c                	jne    ffff80000080bc56 <sys_open+0x4a3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:89
        return -EISDIR;
ffff80000080bc4a:	48 c7 c0 e1 ff ff ff 	mov    rax,0xffffffffffffffe1
ffff80000080bc51:	e9 f1 01 00 00       	jmp    ffff80000080be47 <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:91

    filp = (struct file *) kmalloc();
ffff80000080bc56:	49 89 df             	mov    r15,rbx
ffff80000080bc59:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080bc5e:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff80000080bc65:	ff ff ff 
ffff80000080bc68:	48 01 da             	add    rdx,rbx
ffff80000080bc6b:	ff d2                	call   rdx
ffff80000080bc6d:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:92
    memset(filp,0,sizeof(struct file));
ffff80000080bc71:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bc75:	ba 28 00 00 00       	mov    edx,0x28
ffff80000080bc7a:	be 00 00 00 00       	mov    esi,0x0
ffff80000080bc7f:	48 89 c7             	mov    rdi,rax
ffff80000080bc82:	49 89 df             	mov    r15,rbx
ffff80000080bc85:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff80000080bc8c:	ff ff ff 
ffff80000080bc8f:	48 01 d8             	add    rax,rbx
ffff80000080bc92:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:93
    filp->dentry = dentry;
ffff80000080bc94:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bc98:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080bc9c:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:94
    filp->mode = flags;
ffff80000080bca0:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080bca6:	48 63 d0             	movsxd rdx,eax
ffff80000080bca9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bcad:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:96

    if(dentry->dir_inode->attribute & FS_ATTR_DEVICE){
ffff80000080bcb1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bcb5:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bcb9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bcbd:	83 e0 04             	and    eax,0x4
ffff80000080bcc0:	48 85 c0             	test   rax,rax
ffff80000080bcc3:	74 18                	je     ffff80000080bcdd <sys_open+0x52a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:98
        extern struct file_operations devfs_fops;
        filp->f_ops = &devfs_fops;	//////	find device file operation function
ffff80000080bcc5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bcc9:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff80000080bcd0:	ff ff ff 
ffff80000080bcd3:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080bcd7:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
ffff80000080bcdb:	eb 14                	jmp    ffff80000080bcf1 <sys_open+0x53e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:101
    }
    else
        filp->f_ops = dentry->dir_inode->f_ops;
ffff80000080bcdd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bce1:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bce5:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080bce9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bced:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:102
    if(filp->f_ops && filp->f_ops->open)
ffff80000080bcf1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bcf5:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bcf9:	48 85 c0             	test   rax,rax
ffff80000080bcfc:	74 33                	je     ffff80000080bd31 <sys_open+0x57e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:102 (discriminator 1)
ffff80000080bcfe:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bd02:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bd06:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bd09:	48 85 c0             	test   rax,rax
ffff80000080bd0c:	74 23                	je     ffff80000080bd31 <sys_open+0x57e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:103
        error = filp->f_ops->open(dentry->dir_inode,filp);
ffff80000080bd0e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bd12:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bd16:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080bd19:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bd1d:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bd21:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080bd25:	48 89 d6             	mov    rsi,rdx
ffff80000080bd28:	48 89 c7             	mov    rdi,rax
ffff80000080bd2b:	ff d1                	call   rcx
ffff80000080bd2d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:104
    if(error != 1)
ffff80000080bd31:	48 83 7d e8 01       	cmp    QWORD PTR [rbp-0x18],0x1
ffff80000080bd36:	74 25                	je     ffff80000080bd5d <sys_open+0x5aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:106
    {
        kmfree(filp);
ffff80000080bd38:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bd3c:	48 89 c7             	mov    rdi,rax
ffff80000080bd3f:	49 89 df             	mov    r15,rbx
ffff80000080bd42:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff80000080bd49:	ff ff ff 
ffff80000080bd4c:	48 01 d8             	add    rax,rbx
ffff80000080bd4f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:107
        return -EFAULT;
ffff80000080bd51:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080bd58:	e9 ea 00 00 00       	jmp    ffff80000080be47 <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:110
    }

    if(filp->mode & O_TRUNC)
ffff80000080bd5d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bd61:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080bd65:	25 00 02 00 00       	and    eax,0x200
ffff80000080bd6a:	48 85 c0             	test   rax,rax
ffff80000080bd6d:	74 13                	je     ffff80000080bd82 <sys_open+0x5cf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:112
    {
        filp->dentry->dir_inode->file_size = 0;
ffff80000080bd6f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bd73:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bd77:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bd7b:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:114
    }
    if(filp->mode & O_APPEND)
ffff80000080bd82:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bd86:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080bd8a:	25 00 04 00 00       	and    eax,0x400
ffff80000080bd8f:	48 85 c0             	test   rax,rax
ffff80000080bd92:	74 19                	je     ffff80000080bdad <sys_open+0x5fa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:116
    {
        filp->position = filp->dentry->dir_inode->file_size;
ffff80000080bd94:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bd98:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bd9c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bda0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bda3:	48 89 c2             	mov    rdx,rax
ffff80000080bda6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080bdaa:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:119
    }

    f = current->openf;
ffff80000080bdad:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080bdb4:	ff ff ff 
ffff80000080bdb7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bdbb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bdbe:	48 05 f8 00 00 00    	add    rax,0xf8
ffff80000080bdc4:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:120
    for(i = 0;i < MAX_TASKS;i++)
ffff80000080bdc8:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080bdcf:	eb 28                	jmp    ffff80000080bdf9 <sys_open+0x646>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:121
        if(f[i] == NULL)
ffff80000080bdd1:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080bdd4:	48 98                	cdqe   
ffff80000080bdd6:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080bddd:	00 
ffff80000080bdde:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080bde2:	48 01 d0             	add    rax,rdx
ffff80000080bde5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bde8:	48 85 c0             	test   rax,rax
ffff80000080bdeb:	75 08                	jne    ffff80000080bdf5 <sys_open+0x642>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:123
        {
            fd = i;
ffff80000080bded:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080bdf0:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:124
            break;
ffff80000080bdf3:	eb 0a                	jmp    ffff80000080bdff <sys_open+0x64c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:120 (discriminator 2)
    for(i = 0;i < MAX_TASKS;i++)
ffff80000080bdf5:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:120 (discriminator 1)
ffff80000080bdf9:	83 7d d8 1f          	cmp    DWORD PTR [rbp-0x28],0x1f
ffff80000080bdfd:	7e d2                	jle    ffff80000080bdd1 <sys_open+0x61e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:126
        }
    if(i == MAX_TASKS)
ffff80000080bdff:	83 7d d8 20          	cmp    DWORD PTR [rbp-0x28],0x20
ffff80000080be03:	75 22                	jne    ffff80000080be27 <sys_open+0x674>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:128
    {
        kmfree(filp);
ffff80000080be05:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080be09:	48 89 c7             	mov    rdi,rax
ffff80000080be0c:	49 89 df             	mov    r15,rbx
ffff80000080be0f:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff80000080be16:	ff ff ff 
ffff80000080be19:	48 01 d8             	add    rax,rbx
ffff80000080be1c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:130
        //// reclaim struct index_node & struct dir_entry
        return -EMFILE;
ffff80000080be1e:	48 c7 c0 df ff ff ff 	mov    rax,0xffffffffffffffdf
ffff80000080be25:	eb 20                	jmp    ffff80000080be47 <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:132
    }
    f[fd] = filp;
ffff80000080be27:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080be2a:	48 98                	cdqe   
ffff80000080be2c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080be33:	00 
ffff80000080be34:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080be38:	48 01 c2             	add    rdx,rax
ffff80000080be3b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080be3f:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:134

    return fd;
ffff80000080be42:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080be45:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:135
}
ffff80000080be47:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffff80000080be4e:	5b                   	pop    rbx
ffff80000080be4f:	41 5f                	pop    r15
ffff80000080be51:	5d                   	pop    rbp
ffff80000080be52:	c3                   	ret    

ffff80000080be53 <sys_close>:
sys_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:138

unsigned long sys_close(int fd)
{
ffff80000080be53:	f3 0f 1e fa          	endbr64 
ffff80000080be57:	55                   	push   rbp
ffff80000080be58:	48 89 e5             	mov    rbp,rsp
ffff80000080be5b:	41 57                	push   r15
ffff80000080be5d:	53                   	push   rbx
ffff80000080be5e:	48 83 ec 20          	sub    rsp,0x20
ffff80000080be62:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080be62 <sys_close+0xf>
ffff80000080be69:	49 bb 6e 1c 11 00 00 	movabs r11,0x111c6e
ffff80000080be70:	00 00 00 
ffff80000080be73:	4c 01 db             	add    rbx,r11
ffff80000080be76:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:139
    struct file * filp = NULL;
ffff80000080be79:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080be80:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:142

//	printf("sys_close:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080be81:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080be85:	78 06                	js     ffff80000080be8d <sys_close+0x3a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:142 (discriminator 1)
ffff80000080be87:	83 7d dc 1f          	cmp    DWORD PTR [rbp-0x24],0x1f
ffff80000080be8b:	7e 0c                	jle    ffff80000080be99 <sys_close+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:143
        return -EBADF;
ffff80000080be8d:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080be94:	e9 a8 00 00 00       	jmp    ffff80000080bf41 <sys_close+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:145

    filp = current->openf[fd];
ffff80000080be99:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080bea0:	ff ff ff 
ffff80000080bea3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bea7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080beaa:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080bead:	48 63 d2             	movsxd rdx,edx
ffff80000080beb0:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080beb4:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080beb9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:146
    if(filp->f_ops && filp->f_ops->close)
ffff80000080bebd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bec1:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bec5:	48 85 c0             	test   rax,rax
ffff80000080bec8:	74 35                	je     ffff80000080beff <sys_close+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:146 (discriminator 1)
ffff80000080beca:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bece:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bed2:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080bed6:	48 85 c0             	test   rax,rax
ffff80000080bed9:	74 24                	je     ffff80000080beff <sys_close+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:147
        filp->f_ops->close(filp->dentry->dir_inode,filp);
ffff80000080bedb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bedf:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bee3:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080bee7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080beeb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080beef:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080bef3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080bef7:	48 89 d6             	mov    rsi,rdx
ffff80000080befa:	48 89 c7             	mov    rdi,rax
ffff80000080befd:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:149

    kmfree(filp);
ffff80000080beff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bf03:	48 89 c7             	mov    rdi,rax
ffff80000080bf06:	49 89 df             	mov    r15,rbx
ffff80000080bf09:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff80000080bf10:	ff ff ff 
ffff80000080bf13:	48 01 d8             	add    rax,rbx
ffff80000080bf16:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:150
    current->openf[fd] = NULL;
ffff80000080bf18:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080bf1f:	ff ff ff 
ffff80000080bf22:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bf26:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bf29:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080bf2c:	48 63 d2             	movsxd rdx,edx
ffff80000080bf2f:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080bf33:	48 c7 44 d0 08 00 00 	mov    QWORD PTR [rax+rdx*8+0x8],0x0
ffff80000080bf3a:	00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:152

    return 0;
ffff80000080bf3c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:153
}
ffff80000080bf41:	48 83 c4 20          	add    rsp,0x20
ffff80000080bf45:	5b                   	pop    rbx
ffff80000080bf46:	41 5f                	pop    r15
ffff80000080bf48:	5d                   	pop    rbp
ffff80000080bf49:	c3                   	ret    

ffff80000080bf4a <sys_read>:
sys_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:156

unsigned long sys_read(int fd,void * buf,long count)
{
ffff80000080bf4a:	f3 0f 1e fa          	endbr64 
ffff80000080bf4e:	55                   	push   rbp
ffff80000080bf4f:	48 89 e5             	mov    rbp,rsp
ffff80000080bf52:	48 83 ec 30          	sub    rsp,0x30
ffff80000080bf56:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bf56 <sys_read+0xc>
ffff80000080bf5d:	49 bb 7a 1b 11 00 00 	movabs r11,0x111b7a
ffff80000080bf64:	00 00 00 
ffff80000080bf67:	4c 01 d8             	add    rax,r11
ffff80000080bf6a:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080bf6d:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080bf71:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:157
    struct file * filp = NULL;
ffff80000080bf75:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080bf7c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:158
    unsigned long ret = 0;
ffff80000080bf7d:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080bf84:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:161

//	printf("sys_read:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080bf85:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080bf89:	78 06                	js     ffff80000080bf91 <sys_read+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:161 (discriminator 1)
ffff80000080bf8b:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080bf8f:	7e 09                	jle    ffff80000080bf9a <sys_read+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:162
        return -EBADF;
ffff80000080bf91:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080bf98:	eb 7c                	jmp    ffff80000080c016 <sys_read+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:163
    if(count < 0)
ffff80000080bf9a:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080bf9f:	79 09                	jns    ffff80000080bfaa <sys_read+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:164
        return -EINVAL;
ffff80000080bfa1:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080bfa8:	eb 6c                	jmp    ffff80000080c016 <sys_read+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:166

    filp = current->openf[fd];
ffff80000080bfaa:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080bfb1:	ff ff ff 
ffff80000080bfb4:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080bfb8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bfbb:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080bfbe:	48 63 d2             	movsxd rdx,edx
ffff80000080bfc1:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080bfc5:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080bfca:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:167
    if(filp->f_ops && filp->f_ops->read)
ffff80000080bfce:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080bfd2:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bfd6:	48 85 c0             	test   rax,rax
ffff80000080bfd9:	74 37                	je     ffff80000080c012 <sys_read+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:167 (discriminator 1)
ffff80000080bfdb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080bfdf:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bfe3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080bfe7:	48 85 c0             	test   rax,rax
ffff80000080bfea:	74 26                	je     ffff80000080c012 <sys_read+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:168
        ret = filp->f_ops->read(filp,buf,count,&filp->position);
ffff80000080bfec:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080bff0:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080bff4:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff80000080bff8:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080bffc:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c000:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080c004:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c008:	48 89 c7             	mov    rdi,rax
ffff80000080c00b:	41 ff d0             	call   r8
ffff80000080c00e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:169
    return ret;
ffff80000080c012:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:170
}
ffff80000080c016:	c9                   	leave  
ffff80000080c017:	c3                   	ret    

ffff80000080c018 <sys_write>:
sys_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:173

unsigned long sys_write(int fd,void * buf,long count)
{
ffff80000080c018:	f3 0f 1e fa          	endbr64 
ffff80000080c01c:	55                   	push   rbp
ffff80000080c01d:	48 89 e5             	mov    rbp,rsp
ffff80000080c020:	48 83 ec 30          	sub    rsp,0x30
ffff80000080c024:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c024 <sys_write+0xc>
ffff80000080c02b:	49 bb ac 1a 11 00 00 	movabs r11,0x111aac
ffff80000080c032:	00 00 00 
ffff80000080c035:	4c 01 d8             	add    rax,r11
ffff80000080c038:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080c03b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080c03f:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:174
    struct file * filp = NULL;
ffff80000080c043:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080c04a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:175
    unsigned long ret = 0;
ffff80000080c04b:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080c052:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:178

//	printf("sys_write:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080c053:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080c057:	78 06                	js     ffff80000080c05f <sys_write+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:178 (discriminator 1)
ffff80000080c059:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080c05d:	7e 09                	jle    ffff80000080c068 <sys_write+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:179
        return -EBADF;
ffff80000080c05f:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080c066:	eb 7c                	jmp    ffff80000080c0e4 <sys_write+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:180
    if(count < 0)
ffff80000080c068:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080c06d:	79 09                	jns    ffff80000080c078 <sys_write+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:181
        return -EINVAL;
ffff80000080c06f:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080c076:	eb 6c                	jmp    ffff80000080c0e4 <sys_write+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:183

    filp = current->openf[fd];
ffff80000080c078:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c07f:	ff ff ff 
ffff80000080c082:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080c086:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c089:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080c08c:	48 63 d2             	movsxd rdx,edx
ffff80000080c08f:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080c093:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080c098:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:184
    if(filp->f_ops && filp->f_ops->write)
ffff80000080c09c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c0a0:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c0a4:	48 85 c0             	test   rax,rax
ffff80000080c0a7:	74 37                	je     ffff80000080c0e0 <sys_write+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:184 (discriminator 1)
ffff80000080c0a9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c0ad:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c0b1:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c0b5:	48 85 c0             	test   rax,rax
ffff80000080c0b8:	74 26                	je     ffff80000080c0e0 <sys_write+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:185
        ret = filp->f_ops->write(filp,buf,count,&filp->position);
ffff80000080c0ba:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c0be:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c0c2:	4c 8b 40 18          	mov    r8,QWORD PTR [rax+0x18]
ffff80000080c0c6:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080c0ca:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c0ce:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080c0d2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c0d6:	48 89 c7             	mov    rdi,rax
ffff80000080c0d9:	41 ff d0             	call   r8
ffff80000080c0dc:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:186
    return ret;
ffff80000080c0e0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:187
}
ffff80000080c0e4:	c9                   	leave  
ffff80000080c0e5:	c3                   	ret    

ffff80000080c0e6 <sys_lseek>:
sys_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:191


unsigned long sys_lseek(int filds,long offset,int whence)
{
ffff80000080c0e6:	f3 0f 1e fa          	endbr64 
ffff80000080c0ea:	55                   	push   rbp
ffff80000080c0eb:	48 89 e5             	mov    rbp,rsp
ffff80000080c0ee:	48 83 ec 20          	sub    rsp,0x20
ffff80000080c0f2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c0f2 <sys_lseek+0xc>
ffff80000080c0f9:	49 bb de 19 11 00 00 	movabs r11,0x1119de
ffff80000080c100:	00 00 00 
ffff80000080c103:	4c 01 d8             	add    rax,r11
ffff80000080c106:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080c109:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080c10d:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:192
    struct file * filp = NULL;
ffff80000080c110:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080c117:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:193
    unsigned long ret = 0;
ffff80000080c118:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080c11f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:196

//	printf("sys_lseek:%d\n",filds);
    if(filds < 0 || filds >= MAX_TASKS)
ffff80000080c120:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080c124:	78 06                	js     ffff80000080c12c <sys_lseek+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:196 (discriminator 1)
ffff80000080c126:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080c12a:	7e 0c                	jle    ffff80000080c138 <sys_lseek+0x52>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:197
        return -EBADF;
ffff80000080c12c:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080c133:	e9 82 00 00 00       	jmp    ffff80000080c1ba <sys_lseek+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:198
    if(whence < 0 || whence >= SEEK_MAX)
ffff80000080c138:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080c13c:	78 06                	js     ffff80000080c144 <sys_lseek+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:198 (discriminator 1)
ffff80000080c13e:	83 7d e8 02          	cmp    DWORD PTR [rbp-0x18],0x2
ffff80000080c142:	7e 09                	jle    ffff80000080c14d <sys_lseek+0x67>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:199
        return -EINVAL;
ffff80000080c144:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080c14b:	eb 6d                	jmp    ffff80000080c1ba <sys_lseek+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:201

    filp = current->openf[filds];
ffff80000080c14d:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c154:	ff ff ff 
ffff80000080c157:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080c15b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c15e:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080c161:	48 63 d2             	movsxd rdx,edx
ffff80000080c164:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080c168:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080c16d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:202
    if(filp->f_ops && filp->f_ops->lseek)
ffff80000080c171:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c175:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c179:	48 85 c0             	test   rax,rax
ffff80000080c17c:	74 38                	je     ffff80000080c1b6 <sys_lseek+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:202 (discriminator 1)
ffff80000080c17e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c182:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c186:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080c18a:	48 85 c0             	test   rax,rax
ffff80000080c18d:	74 27                	je     ffff80000080c1b6 <sys_lseek+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:203
        ret = filp->f_ops->lseek(filp,offset,whence);
ffff80000080c18f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c193:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c197:	4c 8b 40 20          	mov    r8,QWORD PTR [rax+0x20]
ffff80000080c19b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080c19e:	48 63 d0             	movsxd rdx,eax
ffff80000080c1a1:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080c1a5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c1a9:	48 89 ce             	mov    rsi,rcx
ffff80000080c1ac:	48 89 c7             	mov    rdi,rax
ffff80000080c1af:	41 ff d0             	call   r8
ffff80000080c1b2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:204
    return ret;
ffff80000080c1b6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:205
}
ffff80000080c1ba:	c9                   	leave  
ffff80000080c1bb:	c3                   	ret    

ffff80000080c1bc <sys_vfork>:
sys_vfork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:215
//    printf("sys_fork\n");
//    //return do_fork(regs,0,regs->rsp,0);
//}

unsigned long sys_vfork()
{
ffff80000080c1bc:	f3 0f 1e fa          	endbr64 
ffff80000080c1c0:	55                   	push   rbp
ffff80000080c1c1:	48 89 e5             	mov    rbp,rsp
ffff80000080c1c4:	41 57                	push   r15
ffff80000080c1c6:	48 83 ec 18          	sub    rsp,0x18
ffff80000080c1ca:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080c1ca <sys_vfork+0xe>
ffff80000080c1d1:	49 bb 06 19 11 00 00 	movabs r11,0x111906
ffff80000080c1d8:	00 00 00 
ffff80000080c1db:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:216
    regs_t *regs = (regs_t *)current->tss.rsp0 -1;
ffff80000080c1de:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080c1e5:	ff ff ff 
ffff80000080c1e8:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080c1ec:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c1ef:	48 8b 80 fc 01 00 00 	mov    rax,QWORD PTR [rax+0x1fc]
ffff80000080c1f6:	48 2d d0 00 00 00    	sub    rax,0xd0
ffff80000080c1fc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:217
    printf("sys_vfork\n");
ffff80000080c200:	48 b8 f8 d7 ff ff ff 	movabs rax,0xffffffffffffd7f8
ffff80000080c207:	ff ff ff 
ffff80000080c20a:	48 8d 04 02          	lea    rax,[rdx+rax*1]
ffff80000080c20e:	48 89 c7             	mov    rdi,rax
ffff80000080c211:	49 89 d7             	mov    r15,rdx
ffff80000080c214:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c219:	48 b9 23 3c ee ff ff 	movabs rcx,0xffffffffffee3c23
ffff80000080c220:	ff ff ff 
ffff80000080c223:	48 01 d1             	add    rcx,rdx
ffff80000080c226:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:219
    //return do_fork(regs,CLONE_VM | CLONE_FS | CLONE_SIGNAL,regs->rsp,0);
}
ffff80000080c228:	90                   	nop
ffff80000080c229:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080c22d:	c9                   	leave  
ffff80000080c22e:	c3                   	ret    

ffff80000080c22f <sys_wait>:
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:262

/*
	rusage reserved
*/

unsigned long sys_wait(pid_t pid, int *stat_loc, int options){
ffff80000080c22f:	f3 0f 1e fa          	endbr64 
ffff80000080c233:	55                   	push   rbp
ffff80000080c234:	48 89 e5             	mov    rbp,rsp
ffff80000080c237:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c237 <sys_wait+0x8>
ffff80000080c23e:	49 bb 99 18 11 00 00 	movabs r11,0x111899
ffff80000080c245:	00 00 00 
ffff80000080c248:	4c 01 d8             	add    rax,r11
ffff80000080c24b:	89 7d bc             	mov    DWORD PTR [rbp-0x44],edi
ffff80000080c24e:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff80000080c252:	89 55 b8             	mov    DWORD PTR [rbp-0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:263
    struct process* waitee=NULL;
ffff80000080c255:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080c25c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:265
    extern struct process task[];
    if(!current->child_procs)
ffff80000080c25d:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c264:	ff ff ff 
ffff80000080c267:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c26b:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c26e:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080c275:	48 85 d2             	test   rdx,rdx
ffff80000080c278:	75 0c                	jne    ffff80000080c286 <sys_wait+0x57>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:266
        return -ECHILD;//没有子进程可以等
ffff80000080c27a:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
ffff80000080c281:	e9 ef 01 00 00       	jmp    ffff80000080c475 <sys_wait+0x246>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:267
    if(pid==-1){
ffff80000080c286:	83 7d bc ff          	cmp    DWORD PTR [rbp-0x44],0xffffffff
ffff80000080c28a:	75 58                	jne    ffff80000080c2e4 <sys_wait+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270
        //任意一个子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080c28c:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c293:	ff ff ff 
ffff80000080c296:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c29a:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c29d:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080c2a4:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff80000080c2a8:	eb 31                	jmp    ffff80000080c2db <sys_wait+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:271
                struct process* p=l->data;
ffff80000080c2aa:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c2ae:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080c2b2:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:272
                if(p->stat == TASK_ZOMBIE) {
ffff80000080c2b6:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080c2ba:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080c2bd:	83 fa 04             	cmp    edx,0x4
ffff80000080c2c0:	75 0d                	jne    ffff80000080c2cf <sys_wait+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:273
                    waitee=p;
ffff80000080c2c2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c2c6:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:274
                    goto done;
ffff80000080c2ca:	e9 46 01 00 00       	jmp    ffff80000080c415 <sys_wait+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080c2cf:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c2d3:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080c2d7:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270 (discriminator 1)
ffff80000080c2db:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffff80000080c2e0:	75 c8                	jne    ffff80000080c2aa <sys_wait+0x7b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270
ffff80000080c2e2:	eb a8                	jmp    ffff80000080c28c <sys_wait+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:279
                }
            }
        }

    }else if(pid==0) {
ffff80000080c2e4:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080c2e8:	75 77                	jne    ffff80000080c361 <sys_wait+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282
        //等待任意一个和父进程同一个进程组的子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080c2ea:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c2f1:	ff ff ff 
ffff80000080c2f4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c2f8:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c2fb:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080c302:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080c306:	eb 50                	jmp    ffff80000080c358 <sys_wait+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:283
                struct process* p=l->data;
ffff80000080c308:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c30c:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080c310:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:284
                if(p->gpid==current->gpid&& p->stat == TASK_ZOMBIE) {
ffff80000080c314:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c318:	8b 4a 04             	mov    ecx,DWORD PTR [rdx+0x4]
ffff80000080c31b:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c322:	ff ff ff 
ffff80000080c325:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c329:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c32c:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080c32f:	39 d1                	cmp    ecx,edx
ffff80000080c331:	75 19                	jne    ffff80000080c34c <sys_wait+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:284 (discriminator 1)
ffff80000080c333:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c337:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080c33a:	83 fa 04             	cmp    edx,0x4
ffff80000080c33d:	75 0d                	jne    ffff80000080c34c <sys_wait+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:285
                    waitee=p;
ffff80000080c33f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c343:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:286
                    goto done;
ffff80000080c347:	e9 c9 00 00 00       	jmp    ffff80000080c415 <sys_wait+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080c34c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c350:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080c354:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282 (discriminator 1)
ffff80000080c358:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080c35d:	75 a9                	jne    ffff80000080c308 <sys_wait+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282
ffff80000080c35f:	eb 89                	jmp    ffff80000080c2ea <sys_wait+0xbb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:291
                }
            }
        }
    }else{
        if(pid<0)pid=-pid;
ffff80000080c361:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080c365:	79 03                	jns    ffff80000080c36a <sys_wait+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:291 (discriminator 1)
ffff80000080c367:	f7 5d bc             	neg    DWORD PTR [rbp-0x44]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:293
        //检查是不是本进程的子进程
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080c36a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080c371:	eb 4f                	jmp    ffff80000080c3c2 <sys_wait+0x193>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:294
            if(task[i].pid==pid){
ffff80000080c373:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080c37a:	ff ff ff 
ffff80000080c37d:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080c381:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080c384:	48 63 d2             	movsxd rdx,edx
ffff80000080c387:	48 69 d2 58 03 00 00 	imul   rdx,rdx,0x358
ffff80000080c38e:	48 01 ca             	add    rdx,rcx
ffff80000080c391:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff80000080c393:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff80000080c396:	39 d1                	cmp    ecx,edx
ffff80000080c398:	75 24                	jne    ffff80000080c3be <sys_wait+0x18f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:295
                waitee=&task[i];
ffff80000080c39a:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080c39d:	48 63 d2             	movsxd rdx,edx
ffff80000080c3a0:	48 69 ca 58 03 00 00 	imul   rcx,rdx,0x358
ffff80000080c3a7:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff80000080c3ae:	ff ff ff 
ffff80000080c3b1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c3b5:	48 01 ca             	add    rdx,rcx
ffff80000080c3b8:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:296
                break;
ffff80000080c3bc:	eb 0a                	jmp    ffff80000080c3c8 <sys_wait+0x199>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:293 (discriminator 2)
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080c3be:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:293 (discriminator 1)
ffff80000080c3c2:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
ffff80000080c3c6:	7e ab                	jle    ffff80000080c373 <sys_wait+0x144>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:299
            }
        }
        if(waitee==NULL||waitee->parent_pid!=current->pid)
ffff80000080c3c8:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080c3cd:	74 21                	je     ffff80000080c3f0 <sys_wait+0x1c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:299 (discriminator 1)
ffff80000080c3cf:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080c3d3:	8b 92 bc 00 00 00    	mov    edx,DWORD PTR [rdx+0xbc]
ffff80000080c3d9:	48 b9 a0 fe ff ff ff 	movabs rcx,0xfffffffffffffea0
ffff80000080c3e0:	ff ff ff 
ffff80000080c3e3:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080c3e7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c3ea:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080c3ec:	39 c2                	cmp    edx,eax
ffff80000080c3ee:	74 09                	je     ffff80000080c3f9 <sys_wait+0x1ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:300
            return -ECHILD;//没有这个进程或者不是子进程
ffff80000080c3f0:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
ffff80000080c3f7:	eb 7c                	jmp    ffff80000080c475 <sys_wait+0x246>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:302
        //TODO 等待结束以及等待信号
        while (waitee->stat != TASK_ZOMBIE);
ffff80000080c3f9:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:302 (discriminator 1)
ffff80000080c3fa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c3fe:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080c401:	83 f8 04             	cmp    eax,0x4
ffff80000080c404:	75 f4                	jne    ffff80000080c3fa <sys_wait+0x1cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:303
        *stat_loc=waitee->exit_code;
ffff80000080c406:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c40a:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff80000080c40d:	89 c2                	mov    edx,eax
ffff80000080c40f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080c413:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:307
    }
    done:
    //清除子进程
    waitee->stat=TASK_EMPTY;
ffff80000080c415:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c419:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:309
    //从链表中删除，不再是子进程
    list_drop(&waitee->node);
ffff80000080c420:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c424:	48 05 34 03 00 00    	add    rax,0x334
ffff80000080c42a:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_drop():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:47
    }
}
__attribute__((always_inline)) inline void list_drop(struct List * entry)
{
    //从链表中删除
    if(entry->prev)
ffff80000080c42e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c432:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c435:	48 85 c0             	test   rax,rax
ffff80000080c438:	74 13                	je     ffff80000080c44d <sys_wait+0x21e>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:48
        entry->prev->next=entry->next;
ffff80000080c43a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c43e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c441:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080c445:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080c449:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:49
    if(entry->next)
ffff80000080c44d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c451:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c455:	48 85 c0             	test   rax,rax
ffff80000080c458:	74 12                	je     ffff80000080c46c <sys_wait+0x23d>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:50
        entry->next->prev=entry->prev;
ffff80000080c45a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c45e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c462:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080c466:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c469:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:51
}
ffff80000080c46c:	90                   	nop
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:311
    //TODO 被信号中断时返回-1
    return waitee->pid;
ffff80000080c46d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c471:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080c473:	89 c0                	mov    eax,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:312
}
ffff80000080c475:	5d                   	pop    rbp
ffff80000080c476:	c3                   	ret    

ffff80000080c477 <sys_wait4>:
sys_wait4():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:314
unsigned long sys_wait4(unsigned long pid,int *status,int options,void *rusage)
{
ffff80000080c477:	f3 0f 1e fa          	endbr64 
ffff80000080c47b:	55                   	push   rbp
ffff80000080c47c:	48 89 e5             	mov    rbp,rsp
ffff80000080c47f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c47f <sys_wait4+0x8>
ffff80000080c486:	49 bb 51 16 11 00 00 	movabs r11,0x111651
ffff80000080c48d:	00 00 00 
ffff80000080c490:	4c 01 d8             	add    rax,r11
ffff80000080c493:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080c497:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080c49b:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080c49e:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:350
//    copy_to_user(&child->exit_code,status,sizeof(long));
//    tsk->next = child->next;
//    exit_mm(child);
//    vmfree(child);
//    return retval;
}
ffff80000080c4a2:	90                   	nop
ffff80000080c4a3:	5d                   	pop    rbp
ffff80000080c4a4:	c3                   	ret    

ffff80000080c4a5 <sys_brk>:
sys_brk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:353

unsigned long sys_brk(unsigned long brk)
{
ffff80000080c4a5:	f3 0f 1e fa          	endbr64 
ffff80000080c4a9:	55                   	push   rbp
ffff80000080c4aa:	48 89 e5             	mov    rbp,rsp
ffff80000080c4ad:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c4ad <sys_brk+0x8>
ffff80000080c4b4:	49 bb 23 16 11 00 00 	movabs r11,0x111623
ffff80000080c4bb:	00 00 00 
ffff80000080c4be:	4c 01 d8             	add    rax,r11
ffff80000080c4c1:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:367
//
//    new_brk = do_brk(current->mm->end_brk,new_brk - current->mm->end_brk);	//expand brk space
//
//    current->mm->end_brk = new_brk;
//    return new_brk;
}
ffff80000080c4c5:	90                   	nop
ffff80000080c4c6:	5d                   	pop    rbp
ffff80000080c4c7:	c3                   	ret    

ffff80000080c4c8 <sys_reboot>:
sys_reboot():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:370

unsigned long sys_reboot(unsigned long cmd,void * arg)
{
ffff80000080c4c8:	f3 0f 1e fa          	endbr64 
ffff80000080c4cc:	55                   	push   rbp
ffff80000080c4cd:	48 89 e5             	mov    rbp,rsp
ffff80000080c4d0:	41 57                	push   r15
ffff80000080c4d2:	53                   	push   rbx
ffff80000080c4d3:	48 83 ec 10          	sub    rsp,0x10
ffff80000080c4d7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c4d7 <sys_reboot+0xf>
ffff80000080c4de:	49 bb f9 15 11 00 00 	movabs r11,0x1115f9
ffff80000080c4e5:	00 00 00 
ffff80000080c4e8:	4c 01 db             	add    rbx,r11
ffff80000080c4eb:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080c4ef:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:371
    printf("sys_reboot\n");
ffff80000080c4f3:	48 b8 03 d8 ff ff ff 	movabs rax,0xffffffffffffd803
ffff80000080c4fa:	ff ff ff 
ffff80000080c4fd:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080c501:	48 89 c7             	mov    rdi,rax
ffff80000080c504:	49 89 df             	mov    r15,rbx
ffff80000080c507:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c50c:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff80000080c513:	ff ff ff 
ffff80000080c516:	48 01 da             	add    rdx,rbx
ffff80000080c519:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:372
    switch(cmd)
ffff80000080c51b:	48 83 7d e8 01       	cmp    QWORD PTR [rbp-0x18],0x1
ffff80000080c520:	74 09                	je     ffff80000080c52b <sys_reboot+0x63>
ffff80000080c522:	48 83 7d e8 02       	cmp    QWORD PTR [rbp-0x18],0x2
ffff80000080c527:	74 20                	je     ffff80000080c549 <sys_reboot+0x81>
ffff80000080c529:	eb 48                	jmp    ffff80000080c573 <sys_reboot+0xab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:375
    {
        case SYSTEM_REBOOT:
            outb(0x64,0xFE);
ffff80000080c52b:	be fe 00 00 00       	mov    esi,0xfe
ffff80000080c530:	bf 64 00 00 00       	mov    edi,0x64
ffff80000080c535:	49 89 df             	mov    r15,rbx
ffff80000080c538:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff80000080c53f:	ff ff ff 
ffff80000080c542:	48 01 d8             	add    rax,rbx
ffff80000080c545:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:376
            break;
ffff80000080c547:	eb 53                	jmp    ffff80000080c59c <sys_reboot+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:379

        case SYSTEM_POWEROFF:
            printf("sys_reboot cmd SYSTEM_POWEROFF\n");
ffff80000080c549:	48 b8 10 d8 ff ff ff 	movabs rax,0xffffffffffffd810
ffff80000080c550:	ff ff ff 
ffff80000080c553:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080c557:	48 89 c7             	mov    rdi,rax
ffff80000080c55a:	49 89 df             	mov    r15,rbx
ffff80000080c55d:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c562:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff80000080c569:	ff ff ff 
ffff80000080c56c:	48 01 da             	add    rdx,rbx
ffff80000080c56f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:380
            break;
ffff80000080c571:	eb 29                	jmp    ffff80000080c59c <sys_reboot+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:383

        default:
            printf("sys_reboot cmd ERROR!\n");
ffff80000080c573:	48 b8 30 d8 ff ff ff 	movabs rax,0xffffffffffffd830
ffff80000080c57a:	ff ff ff 
ffff80000080c57d:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080c581:	48 89 c7             	mov    rdi,rax
ffff80000080c584:	49 89 df             	mov    r15,rbx
ffff80000080c587:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c58c:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff80000080c593:	ff ff ff 
ffff80000080c596:	48 01 da             	add    rdx,rbx
ffff80000080c599:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:384
            break;
ffff80000080c59b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:386
    }
    return 0;
ffff80000080c59c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:387
}
ffff80000080c5a1:	48 83 c4 10          	add    rsp,0x10
ffff80000080c5a5:	5b                   	pop    rbx
ffff80000080c5a6:	41 5f                	pop    r15
ffff80000080c5a8:	5d                   	pop    rbp
ffff80000080c5a9:	c3                   	ret    

ffff80000080c5aa <sys_chdir>:
sys_chdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:391


unsigned long sys_chdir(char *filename)
{
ffff80000080c5aa:	f3 0f 1e fa          	endbr64 
ffff80000080c5ae:	55                   	push   rbp
ffff80000080c5af:	48 89 e5             	mov    rbp,rsp
ffff80000080c5b2:	41 57                	push   r15
ffff80000080c5b4:	53                   	push   rbx
ffff80000080c5b5:	48 83 ec 30          	sub    rsp,0x30
ffff80000080c5b9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c5b9 <sys_chdir+0xf>
ffff80000080c5c0:	49 bb 17 15 11 00 00 	movabs r11,0x111517
ffff80000080c5c7:	00 00 00 
ffff80000080c5ca:	4c 01 db             	add    rbx,r11
ffff80000080c5cd:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:392
    char * path = NULL;
ffff80000080c5d1:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080c5d8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:393
    long pathlen = 0;
ffff80000080c5d9:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080c5e0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:394
    struct dir_entry * dentry = NULL;
ffff80000080c5e1:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080c5e8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:396

    printf("sys_chdir\n");
ffff80000080c5e9:	48 b8 47 d8 ff ff ff 	movabs rax,0xffffffffffffd847
ffff80000080c5f0:	ff ff ff 
ffff80000080c5f3:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080c5f7:	48 89 c7             	mov    rdi,rax
ffff80000080c5fa:	49 89 df             	mov    r15,rbx
ffff80000080c5fd:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c602:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff80000080c609:	ff ff ff 
ffff80000080c60c:	48 01 da             	add    rdx,rbx
ffff80000080c60f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:397
    path = (char *) kmalloc();
ffff80000080c611:	49 89 df             	mov    r15,rbx
ffff80000080c614:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c619:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff80000080c620:	ff ff ff 
ffff80000080c623:	48 01 da             	add    rdx,rbx
ffff80000080c626:	ff d2                	call   rdx
ffff80000080c628:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:399

    if(path == NULL)
ffff80000080c62c:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080c631:	75 0c                	jne    ffff80000080c63f <sys_chdir+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:400
        return -ENOMEM;
ffff80000080c633:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
ffff80000080c63a:	e9 28 01 00 00       	jmp    ffff80000080c767 <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:401
    memset(path,0,PAGE_4K_SIZE);
ffff80000080c63f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c643:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080c648:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c64d:	48 89 c7             	mov    rdi,rax
ffff80000080c650:	49 89 df             	mov    r15,rbx
ffff80000080c653:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff80000080c65a:	ff ff ff 
ffff80000080c65d:	48 01 d8             	add    rax,rbx
ffff80000080c660:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:402
    pathlen = strlen(filename);
ffff80000080c662:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c666:	48 89 c7             	mov    rdi,rax
ffff80000080c669:	49 89 df             	mov    r15,rbx
ffff80000080c66c:	48 b8 95 54 ef ff ff 	movabs rax,0xffffffffffef5495
ffff80000080c673:	ff ff ff 
ffff80000080c676:	48 01 d8             	add    rax,rbx
ffff80000080c679:	ff d0                	call   rax
ffff80000080c67b:	48 98                	cdqe   
ffff80000080c67d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:403
    if(pathlen <= 0)
ffff80000080c681:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080c686:	7f 25                	jg     ffff80000080c6ad <sys_chdir+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:405
    {
        kmfree(path);
ffff80000080c688:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c68c:	48 89 c7             	mov    rdi,rax
ffff80000080c68f:	49 89 df             	mov    r15,rbx
ffff80000080c692:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff80000080c699:	ff ff ff 
ffff80000080c69c:	48 01 d8             	add    rax,rbx
ffff80000080c69f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:406
        return -EFAULT;
ffff80000080c6a1:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080c6a8:	e9 ba 00 00 00       	jmp    ffff80000080c767 <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:408
    }
    else if(pathlen >= PAGE_4K_SIZE)
ffff80000080c6ad:	48 81 7d e0 ff 0f 00 	cmp    QWORD PTR [rbp-0x20],0xfff
ffff80000080c6b4:	00 
ffff80000080c6b5:	7e 25                	jle    ffff80000080c6dc <sys_chdir+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:410
    {
        kmfree(path);
ffff80000080c6b7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c6bb:	48 89 c7             	mov    rdi,rax
ffff80000080c6be:	49 89 df             	mov    r15,rbx
ffff80000080c6c1:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff80000080c6c8:	ff ff ff 
ffff80000080c6cb:	48 01 d8             	add    rax,rbx
ffff80000080c6ce:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:411
        return -ENAMETOOLONG;
ffff80000080c6d0:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
ffff80000080c6d7:	e9 8b 00 00 00       	jmp    ffff80000080c767 <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:413
    }
    strcpy(filename,path);
ffff80000080c6dc:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c6e0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c6e4:	48 89 d6             	mov    rsi,rdx
ffff80000080c6e7:	48 89 c7             	mov    rdi,rax
ffff80000080c6ea:	49 89 df             	mov    r15,rbx
ffff80000080c6ed:	48 b8 c8 51 ef ff ff 	movabs rax,0xffffffffffef51c8
ffff80000080c6f4:	ff ff ff 
ffff80000080c6f7:	48 01 d8             	add    rax,rbx
ffff80000080c6fa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:415

    dentry = path_walk(path,0);
ffff80000080c6fc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c700:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c705:	48 89 c7             	mov    rdi,rax
ffff80000080c708:	49 89 df             	mov    r15,rbx
ffff80000080c70b:	48 b8 39 d3 ee ff ff 	movabs rax,0xffffffffffeed339
ffff80000080c712:	ff ff ff 
ffff80000080c715:	48 01 d8             	add    rax,rbx
ffff80000080c718:	ff d0                	call   rax
ffff80000080c71a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:416
    kmfree(path);
ffff80000080c71e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c722:	48 89 c7             	mov    rdi,rax
ffff80000080c725:	49 89 df             	mov    r15,rbx
ffff80000080c728:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff80000080c72f:	ff ff ff 
ffff80000080c732:	48 01 d8             	add    rax,rbx
ffff80000080c735:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:418

    if(dentry == NULL)
ffff80000080c737:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080c73c:	75 09                	jne    ffff80000080c747 <sys_chdir+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:419
        return -ENOENT;
ffff80000080c73e:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
ffff80000080c745:	eb 20                	jmp    ffff80000080c767 <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:420
    if(dentry->dir_inode->attribute != FS_ATTR_DIR)
ffff80000080c747:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c74b:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c74f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c753:	48 83 f8 02          	cmp    rax,0x2
ffff80000080c757:	74 09                	je     ffff80000080c762 <sys_chdir+0x1b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:421
        return -ENOTDIR;
ffff80000080c759:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
ffff80000080c760:	eb 05                	jmp    ffff80000080c767 <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:422
    return 0;
ffff80000080c762:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:423
}
ffff80000080c767:	48 83 c4 30          	add    rsp,0x30
ffff80000080c76b:	5b                   	pop    rbx
ffff80000080c76c:	41 5f                	pop    r15
ffff80000080c76e:	5d                   	pop    rbp
ffff80000080c76f:	c3                   	ret    

ffff80000080c770 <sys_getdents>:
sys_getdents():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:426

unsigned long sys_getdents(int fd, void * dirent, long count)
{
ffff80000080c770:	f3 0f 1e fa          	endbr64 
ffff80000080c774:	55                   	push   rbp
ffff80000080c775:	48 89 e5             	mov    rbp,rsp
ffff80000080c778:	48 83 ec 30          	sub    rsp,0x30
ffff80000080c77c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c77c <sys_getdents+0xc>
ffff80000080c783:	49 bb 54 13 11 00 00 	movabs r11,0x111354
ffff80000080c78a:	00 00 00 
ffff80000080c78d:	4c 01 d8             	add    rax,r11
ffff80000080c790:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080c793:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080c797:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:427
    struct file * filp = NULL;
ffff80000080c79b:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080c7a2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:428
    unsigned long ret = 0;
ffff80000080c7a3:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080c7aa:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:431

//	printf("sys_getdents:%d\n",fd);
    if(fd < 0 || fd > MAX_TASKS)
ffff80000080c7ab:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080c7af:	78 06                	js     ffff80000080c7b7 <sys_getdents+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:431 (discriminator 1)
ffff80000080c7b1:	83 7d ec 20          	cmp    DWORD PTR [rbp-0x14],0x20
ffff80000080c7b5:	7e 0c                	jle    ffff80000080c7c3 <sys_getdents+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:432
        return -EBADF;
ffff80000080c7b7:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080c7be:	e9 85 00 00 00       	jmp    ffff80000080c848 <sys_getdents+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:433
    if(count < 0)
ffff80000080c7c3:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080c7c8:	79 09                	jns    ffff80000080c7d3 <sys_getdents+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:434
        return -EINVAL;
ffff80000080c7ca:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080c7d1:	eb 75                	jmp    ffff80000080c848 <sys_getdents+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:436

    filp = current->openf[fd];
ffff80000080c7d3:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080c7da:	ff ff ff 
ffff80000080c7dd:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c7e1:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c7e4:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffff80000080c7e7:	48 63 c9             	movsxd rcx,ecx
ffff80000080c7ea:	48 83 c1 1e          	add    rcx,0x1e
ffff80000080c7ee:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff80000080c7f3:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:437
    if(filp->f_ops && filp->f_ops->readdir)
ffff80000080c7f7:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c7fb:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080c7ff:	48 85 d2             	test   rdx,rdx
ffff80000080c802:	74 40                	je     ffff80000080c844 <sys_getdents+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:437 (discriminator 1)
ffff80000080c804:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c808:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080c80c:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080c810:	48 85 d2             	test   rdx,rdx
ffff80000080c813:	74 2f                	je     ffff80000080c844 <sys_getdents+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:438
        ret = filp->f_ops->readdir(filp,dirent,&fill_dentry);
ffff80000080c815:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c819:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080c81d:	4c 8b 42 30          	mov    r8,QWORD PTR [rdx+0x30]
ffff80000080c821:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080c825:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080c829:	48 ba 80 ff ff ff ff 	movabs rdx,0xffffffffffffff80
ffff80000080c830:	ff ff ff 
ffff80000080c833:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080c837:	48 89 c2             	mov    rdx,rax
ffff80000080c83a:	48 89 cf             	mov    rdi,rcx
ffff80000080c83d:	41 ff d0             	call   r8
ffff80000080c840:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:439
    return ret;
ffff80000080c844:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:440
}
ffff80000080c848:	c9                   	leave  
ffff80000080c849:	c3                   	ret    

ffff80000080c84a <sys_mmap>:
sys_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:442

void *sys_mmap(void *addr, size_t len, int prot, int flags,int fildes, off_t off){
ffff80000080c84a:	f3 0f 1e fa          	endbr64 
ffff80000080c84e:	55                   	push   rbp
ffff80000080c84f:	48 89 e5             	mov    rbp,rsp
ffff80000080c852:	41 57                	push   r15
ffff80000080c854:	41 56                	push   r14
ffff80000080c856:	41 55                	push   r13
ffff80000080c858:	41 54                	push   r12
ffff80000080c85a:	53                   	push   rbx
ffff80000080c85b:	48 83 ec 48          	sub    rsp,0x48
ffff80000080c85f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c85f <sys_mmap+0x15>
ffff80000080c866:	49 bb 71 12 11 00 00 	movabs r11,0x111271
ffff80000080c86d:	00 00 00 
ffff80000080c870:	4c 01 db             	add    rbx,r11
ffff80000080c873:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffff80000080c877:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
ffff80000080c87b:	89 55 9c             	mov    DWORD PTR [rbp-0x64],edx
ffff80000080c87e:	89 4d 98             	mov    DWORD PTR [rbp-0x68],ecx
ffff80000080c881:	44 89 45 94          	mov    DWORD PTR [rbp-0x6c],r8d
ffff80000080c885:	44 89 4d 90          	mov    DWORD PTR [rbp-0x70],r9d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:443
    int attr=PAGE_PRESENT|PAGE_FOR_ALL;
ffff80000080c889:	c7 45 c4 05 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x5
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:445
    if((prot|PROT_WRITE)||(prot|PROT_EXEC))
        attr|=PAGE_RWX;
ffff80000080c890:	83 4d c4 02          	or     DWORD PTR [rbp-0x3c],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:446
    if(addr){
ffff80000080c894:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff80000080c899:	0f 84 16 01 00 00    	je     ffff80000080c9b5 <sys_mmap+0x16b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:447
        if(chk_mmap(addr,len)){
ffff80000080c89f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c8a3:	89 c2                	mov    edx,eax
ffff80000080c8a5:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080c8a9:	48 89 c6             	mov    rsi,rax
ffff80000080c8ac:	89 d7                	mov    edi,edx
ffff80000080c8ae:	49 89 df             	mov    r15,rbx
ffff80000080c8b1:	48 b8 8d 9b ee ff ff 	movabs rax,0xffffffffffee9b8d
ffff80000080c8b8:	ff ff ff 
ffff80000080c8bb:	48 01 d8             	add    rax,rbx
ffff80000080c8be:	ff d0                	call   rax
ffff80000080c8c0:	85 c0                	test   eax,eax
ffff80000080c8c2:	0f 84 8f 00 00 00    	je     ffff80000080c957 <sys_mmap+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:448
            int pgc=(len-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff80000080c8c8:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080c8cc:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080c8d2:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080c8d6:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:449
            for(int i=0;i<pgc;i++){
ffff80000080c8d9:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff80000080c8e0:	eb 68                	jmp    ffff80000080c94a <sys_mmap+0x100>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:450 (discriminator 3)
                smmap(pmalloc(),addr+i*PAGE_4K_SIZE,attr,current->pml4);
ffff80000080c8e2:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080c8e9:	ff ff ff 
ffff80000080c8ec:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c8f0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c8f3:	4c 8b a8 e0 00 00 00 	mov    r13,QWORD PTR [rax+0xe0]
ffff80000080c8fa:	44 8b 65 c4          	mov    r12d,DWORD PTR [rbp-0x3c]
ffff80000080c8fe:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080c901:	c1 e0 0c             	shl    eax,0xc
ffff80000080c904:	48 63 d0             	movsxd rdx,eax
ffff80000080c907:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c90b:	48 01 d0             	add    rax,rdx
ffff80000080c90e:	49 89 c6             	mov    r14,rax
ffff80000080c911:	49 89 df             	mov    r15,rbx
ffff80000080c914:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c919:	48 ba 6e 50 ee ff ff 	movabs rdx,0xffffffffffee506e
ffff80000080c920:	ff ff ff 
ffff80000080c923:	48 01 da             	add    rdx,rbx
ffff80000080c926:	ff d2                	call   rdx
ffff80000080c928:	4c 89 e9             	mov    rcx,r13
ffff80000080c92b:	44 89 e2             	mov    edx,r12d
ffff80000080c92e:	4c 89 f6             	mov    rsi,r14
ffff80000080c931:	48 89 c7             	mov    rdi,rax
ffff80000080c934:	49 89 df             	mov    r15,rbx
ffff80000080c937:	48 b8 29 40 ee ff ff 	movabs rax,0xffffffffffee4029
ffff80000080c93e:	ff ff ff 
ffff80000080c941:	48 01 d8             	add    rax,rbx
ffff80000080c944:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:449 (discriminator 3)
            for(int i=0;i<pgc;i++){
ffff80000080c946:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:449 (discriminator 1)
ffff80000080c94a:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080c94d:	3b 45 bc             	cmp    eax,DWORD PTR [rbp-0x44]
ffff80000080c950:	7c 90                	jl     ffff80000080c8e2 <sys_mmap+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:453

            }
            goto sync_f;
ffff80000080c952:	e9 0e 01 00 00       	jmp    ffff80000080ca65 <sys_mmap+0x21b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:456
        }
        if(flags|MAP_FIXED){
            set_errno(-ENOMEM);
ffff80000080c957:	bf cf ff ff ff       	mov    edi,0xffffffcf
ffff80000080c95c:	49 89 df             	mov    r15,rbx
ffff80000080c95f:	48 b8 4e a2 ee ff ff 	movabs rax,0xffffffffffeea24e
ffff80000080c966:	ff ff ff 
ffff80000080c969:	48 01 d8             	add    rax,rbx
ffff80000080c96c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:457
            return MAP_FAILED;
ffff80000080c96e:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080c975:	e9 ef 00 00 00       	jmp    ffff80000080ca69 <sys_mmap+0x21f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:463
        }
    }
    //寻找一块空的虚拟内存
    while (!chk_mmap(addr,len))
    {
        addr+=PAGE_4K_SIZE;
ffff80000080c97a:	48 81 45 a8 00 10 00 	add    QWORD PTR [rbp-0x58],0x1000
ffff80000080c981:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:464
        if(addr>=KNL_BASE){
ffff80000080c982:	48 b8 ff ff ff ff ff 	movabs rax,0xffff7fffffffffff
ffff80000080c989:	7f ff ff 
ffff80000080c98c:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff80000080c990:	76 23                	jbe    ffff80000080c9b5 <sys_mmap+0x16b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:465
            set_errno(-ENOMEM);
ffff80000080c992:	bf cf ff ff ff       	mov    edi,0xffffffcf
ffff80000080c997:	49 89 df             	mov    r15,rbx
ffff80000080c99a:	48 b8 4e a2 ee ff ff 	movabs rax,0xffffffffffeea24e
ffff80000080c9a1:	ff ff ff 
ffff80000080c9a4:	48 01 d8             	add    rax,rbx
ffff80000080c9a7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:466
            return MAP_FAILED;
ffff80000080c9a9:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080c9b0:	e9 b4 00 00 00       	jmp    ffff80000080ca69 <sys_mmap+0x21f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:461
    while (!chk_mmap(addr,len))
ffff80000080c9b5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c9b9:	89 c2                	mov    edx,eax
ffff80000080c9bb:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080c9bf:	48 89 c6             	mov    rsi,rax
ffff80000080c9c2:	89 d7                	mov    edi,edx
ffff80000080c9c4:	49 89 df             	mov    r15,rbx
ffff80000080c9c7:	48 b8 8d 9b ee ff ff 	movabs rax,0xffffffffffee9b8d
ffff80000080c9ce:	ff ff ff 
ffff80000080c9d1:	48 01 d8             	add    rax,rbx
ffff80000080c9d4:	ff d0                	call   rax
ffff80000080c9d6:	85 c0                	test   eax,eax
ffff80000080c9d8:	74 a0                	je     ffff80000080c97a <sys_mmap+0x130>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:469
        }
    }
    int pgc=(len-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff80000080c9da:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080c9de:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080c9e4:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080c9e8:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:470
    for(int i=0;i<pgc;i++){
ffff80000080c9eb:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
ffff80000080c9f2:	eb 68                	jmp    ffff80000080ca5c <sys_mmap+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:471 (discriminator 3)
        smmap(pmalloc(),addr+i*PAGE_4K_SIZE,attr,current->pml4);
ffff80000080c9f4:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080c9fb:	ff ff ff 
ffff80000080c9fe:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ca02:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ca05:	4c 8b a8 e0 00 00 00 	mov    r13,QWORD PTR [rax+0xe0]
ffff80000080ca0c:	44 8b 65 c4          	mov    r12d,DWORD PTR [rbp-0x3c]
ffff80000080ca10:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff80000080ca13:	c1 e0 0c             	shl    eax,0xc
ffff80000080ca16:	48 63 d0             	movsxd rdx,eax
ffff80000080ca19:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ca1d:	48 01 d0             	add    rax,rdx
ffff80000080ca20:	49 89 c6             	mov    r14,rax
ffff80000080ca23:	49 89 df             	mov    r15,rbx
ffff80000080ca26:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ca2b:	48 ba 6e 50 ee ff ff 	movabs rdx,0xffffffffffee506e
ffff80000080ca32:	ff ff ff 
ffff80000080ca35:	48 01 da             	add    rdx,rbx
ffff80000080ca38:	ff d2                	call   rdx
ffff80000080ca3a:	4c 89 e9             	mov    rcx,r13
ffff80000080ca3d:	44 89 e2             	mov    edx,r12d
ffff80000080ca40:	4c 89 f6             	mov    rsi,r14
ffff80000080ca43:	48 89 c7             	mov    rdi,rax
ffff80000080ca46:	49 89 df             	mov    r15,rbx
ffff80000080ca49:	48 b8 29 40 ee ff ff 	movabs rax,0xffffffffffee4029
ffff80000080ca50:	ff ff ff 
ffff80000080ca53:	48 01 d8             	add    rax,rbx
ffff80000080ca56:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:470 (discriminator 3)
    for(int i=0;i<pgc;i++){
ffff80000080ca58:	83 45 c8 01          	add    DWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:470 (discriminator 1)
ffff80000080ca5c:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff80000080ca5f:	3b 45 c0             	cmp    eax,DWORD PTR [rbp-0x40]
ffff80000080ca62:	7c 90                	jl     ffff80000080c9f4 <sys_mmap+0x1aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:473
    }
sync_f:
ffff80000080ca64:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:476
    if(flags|MAP_ANNONYMOUS){
        //不需要映射到文件，匿名映射
        return addr;
ffff80000080ca65:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:484
    //目前先一致读取
    sys_lseek(fildes,off,SEEK_SET);
    sys_read(fildes,addr,len);
    return addr;
    
}
ffff80000080ca69:	48 83 c4 48          	add    rsp,0x48
ffff80000080ca6d:	5b                   	pop    rbx
ffff80000080ca6e:	41 5c                	pop    r12
ffff80000080ca70:	41 5d                	pop    r13
ffff80000080ca72:	41 5e                	pop    r14
ffff80000080ca74:	41 5f                	pop    r15
ffff80000080ca76:	5d                   	pop    rbp
ffff80000080ca77:	c3                   	ret    

ffff80000080ca78 <init_ramfs>:
init_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:28
};
struct index_node_operations ramfs_iops={
        .lookup=lookup_inode_ramfs,.create=create_inode_ramfs
};
struct index_node* test;
void init_ramfs(){
ffff80000080ca78:	f3 0f 1e fa          	endbr64 
ffff80000080ca7c:	55                   	push   rbp
ffff80000080ca7d:	48 89 e5             	mov    rbp,rsp
ffff80000080ca80:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ca80 <init_ramfs+0x8>
ffff80000080ca87:	49 bb 50 10 11 00 00 	movabs r11,0x111050
ffff80000080ca8e:	00 00 00 
ffff80000080ca91:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:31
    //挂载新文件系统到/mnt,设备为/dev/ram

    ramfs_sb.sb_ops=&ramfs_fops;
ffff80000080ca94:	48 ba 58 fe ff ff ff 	movabs rdx,0xfffffffffffffe58
ffff80000080ca9b:	ff ff ff 
ffff80000080ca9e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080caa2:	48 b9 40 fd ff ff ff 	movabs rcx,0xfffffffffffffd40
ffff80000080caa9:	ff ff ff 
ffff80000080caac:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080cab0:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:32
    ramfs_sb.root=dmnt;
ffff80000080cab4:	48 ba e0 fe ff ff ff 	movabs rdx,0xfffffffffffffee0
ffff80000080cabb:	ff ff ff 
ffff80000080cabe:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cac2:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080cac5:	48 ba 58 fe ff ff ff 	movabs rdx,0xfffffffffffffe58
ffff80000080cacc:	ff ff ff 
ffff80000080cacf:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cad3:	48 89 0a             	mov    QWORD PTR [rdx],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:33
    ramfs_sb.p_dev=&bd_ramdisk;
ffff80000080cad6:	48 ba 58 fe ff ff ff 	movabs rdx,0xfffffffffffffe58
ffff80000080cadd:	ff ff ff 
ffff80000080cae0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cae4:	48 b9 a8 ff ff ff ff 	movabs rcx,0xffffffffffffffa8
ffff80000080caeb:	ff ff ff 
ffff80000080caee:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080caf2:	48 89 4a 18          	mov    QWORD PTR [rdx+0x18],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:34
    ramfs_sb.dev=dev_ramdisk;
ffff80000080caf6:	48 ba c8 fe ff ff ff 	movabs rdx,0xfffffffffffffec8
ffff80000080cafd:	ff ff ff 
ffff80000080cb00:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cb04:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080cb06:	89 d1                	mov    ecx,edx
ffff80000080cb08:	48 ba 58 fe ff ff ff 	movabs rdx,0xfffffffffffffe58
ffff80000080cb0f:	ff ff ff 
ffff80000080cb12:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080cb16:	66 89 48 10          	mov    WORD PTR [rax+0x10],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:45
    // test->sb=&ramfs_sb;
    // test->attribute=FS_ATTR_FILE;
    // test->inode_ops=&ramfs_iops;
    //设置一下dmnt的inode的操作，查找的时候会用到
    // dmnt->dir_inode->inode_ops=&ramfs_iops;
}
ffff80000080cb1a:	90                   	nop
ffff80000080cb1b:	5d                   	pop    rbp
ffff80000080cb1c:	c3                   	ret    

ffff80000080cb1d <create_inode_ramfs>:
create_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:47

long create_inode_ramfs(struct index_node * inode,struct dir_entry * dentry,int mode){}
ffff80000080cb1d:	f3 0f 1e fa          	endbr64 
ffff80000080cb21:	55                   	push   rbp
ffff80000080cb22:	48 89 e5             	mov    rbp,rsp
ffff80000080cb25:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cb25 <create_inode_ramfs+0x8>
ffff80000080cb2c:	49 bb ab 0f 11 00 00 	movabs r11,0x110fab
ffff80000080cb33:	00 00 00 
ffff80000080cb36:	4c 01 d8             	add    rax,r11
ffff80000080cb39:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080cb3d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080cb41:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080cb44:	90                   	nop
ffff80000080cb45:	5d                   	pop    rbp
ffff80000080cb46:	c3                   	ret    

ffff80000080cb47 <lookup_inode_ramfs>:
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:48
struct dir_entry* lookup_inode_ramfs(struct index_node * parent_inode,struct dir_entry * dest_dentry){
ffff80000080cb47:	f3 0f 1e fa          	endbr64 
ffff80000080cb4b:	55                   	push   rbp
ffff80000080cb4c:	48 89 e5             	mov    rbp,rsp
ffff80000080cb4f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cb4f <lookup_inode_ramfs+0x8>
ffff80000080cb56:	49 bb 81 0f 11 00 00 	movabs r11,0x110f81
ffff80000080cb5d:	00 00 00 
ffff80000080cb60:	4c 01 d8             	add    rax,r11
ffff80000080cb63:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080cb67:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:49
    list_init(&dest_dentry->subdirs_list);
ffff80000080cb6b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080cb6f:	48 83 c2 28          	add    rdx,0x28
ffff80000080cb73:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080cb77:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080cb7b:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080cb82:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080cb86:	48 c7 42 10 00 00 00 	mov    QWORD PTR [rdx+0x10],0x0
ffff80000080cb8d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080cb8e:	90                   	nop
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:50
    list_init(&dest_dentry->child_node);
ffff80000080cb8f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080cb93:	48 83 c2 10          	add    rdx,0x10
ffff80000080cb97:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080cb9b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080cb9f:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080cba6:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080cbaa:	48 c7 42 10 00 00 00 	mov    QWORD PTR [rdx+0x10],0x0
ffff80000080cbb1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080cbb2:	90                   	nop
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:51
    dest_dentry->dir_inode=test;
ffff80000080cbb3:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080cbba:	ff ff ff 
ffff80000080cbbd:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080cbc1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080cbc4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cbc8:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:52
    dest_dentry->child_node.data=dest_dentry;
ffff80000080cbcc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cbd0:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080cbd4:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:53
    return dest_dentry;
ffff80000080cbd8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:54
}
ffff80000080cbdc:	5d                   	pop    rbp
ffff80000080cbdd:	c3                   	ret    

ffff80000080cbde <open_ramfs>:
open_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:55
long open_ramfs(struct index_node * inode,struct file * filp){
ffff80000080cbde:	f3 0f 1e fa          	endbr64 
ffff80000080cbe2:	55                   	push   rbp
ffff80000080cbe3:	48 89 e5             	mov    rbp,rsp
ffff80000080cbe6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cbe6 <open_ramfs+0x8>
ffff80000080cbed:	49 bb ea 0e 11 00 00 	movabs r11,0x110eea
ffff80000080cbf4:	00 00 00 
ffff80000080cbf7:	4c 01 d8             	add    rax,r11
ffff80000080cbfa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080cbfe:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:56
    filp->f_ops=inode->f_ops;
ffff80000080cc02:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080cc06:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080cc0a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080cc0e:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:57
    filp->position=0;
ffff80000080cc12:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080cc16:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:58
    return 1;
ffff80000080cc1d:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:59
}
ffff80000080cc22:	5d                   	pop    rbp
ffff80000080cc23:	c3                   	ret    

ffff80000080cc24 <close_ramfs>:
close_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:61

long close_ramfs(struct index_node * inode,struct file * filp){
ffff80000080cc24:	f3 0f 1e fa          	endbr64 
ffff80000080cc28:	55                   	push   rbp
ffff80000080cc29:	48 89 e5             	mov    rbp,rsp
ffff80000080cc2c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cc2c <close_ramfs+0x8>
ffff80000080cc33:	49 bb a4 0e 11 00 00 	movabs r11,0x110ea4
ffff80000080cc3a:	00 00 00 
ffff80000080cc3d:	4c 01 d8             	add    rax,r11
ffff80000080cc40:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080cc44:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:62
    return 0;
ffff80000080cc48:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:63
}
ffff80000080cc4d:	5d                   	pop    rbp
ffff80000080cc4e:	c3                   	ret    

ffff80000080cc4f <read_ramfs>:
read_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:65
//注意一下:position是指针
long read_ramfs(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080cc4f:	f3 0f 1e fa          	endbr64 
ffff80000080cc53:	55                   	push   rbp
ffff80000080cc54:	48 89 e5             	mov    rbp,rsp
ffff80000080cc57:	41 57                	push   r15
ffff80000080cc59:	48 83 ec 28          	sub    rsp,0x28
ffff80000080cc5d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cc5d <read_ramfs+0xe>
ffff80000080cc64:	49 bb 73 0e 11 00 00 	movabs r11,0x110e73
ffff80000080cc6b:	00 00 00 
ffff80000080cc6e:	4c 01 d8             	add    rax,r11
ffff80000080cc71:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080cc75:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080cc79:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff80000080cc7d:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:66
    blkdev_read(filp->dentry->dir_inode->dev,*position,count,buf);
ffff80000080cc81:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080cc85:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080cc88:	89 d6                	mov    esi,edx
ffff80000080cc8a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080cc8e:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080cc92:	48 8b 52 40          	mov    rdx,QWORD PTR [rdx+0x40]
ffff80000080cc96:	0f b7 52 18          	movzx  edx,WORD PTR [rdx+0x18]
ffff80000080cc9a:	0f b7 fa             	movzx  edi,dx
ffff80000080cc9d:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080cca1:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080cca5:	49 89 c7             	mov    r15,rax
ffff80000080cca8:	49 b8 4c 00 ef ff ff 	movabs r8,0xffffffffffef004c
ffff80000080ccaf:	ff ff ff 
ffff80000080ccb2:	49 01 c0             	add    r8,rax
ffff80000080ccb5:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:73
    if(len>count)len=count;
    for(int i=0;i<len;i++){
        buf[i]=_binary_bin_test_elf_start[i + *position];
    }
    *position+=len; */
    return 0;
ffff80000080ccb8:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:74
}
ffff80000080ccbd:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080ccc1:	c9                   	leave  
ffff80000080ccc2:	c3                   	ret    

ffff80000080ccc3 <write_ramfs>:
write_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:75
long write_ramfs(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080ccc3:	f3 0f 1e fa          	endbr64 
ffff80000080ccc7:	55                   	push   rbp
ffff80000080ccc8:	48 89 e5             	mov    rbp,rsp
ffff80000080cccb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cccb <write_ramfs+0x8>
ffff80000080ccd2:	49 bb 05 0e 11 00 00 	movabs r11,0x110e05
ffff80000080ccd9:	00 00 00 
ffff80000080ccdc:	4c 01 d8             	add    rax,r11
ffff80000080ccdf:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080cce3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080cce7:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080cceb:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:76
    return 0;
ffff80000080ccef:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:77
}
ffff80000080ccf4:	5d                   	pop    rbp
ffff80000080ccf5:	c3                   	ret    

ffff80000080ccf6 <ioctl_ramfs>:
ioctl_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:78
long ioctl_ramfs(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff80000080ccf6:	f3 0f 1e fa          	endbr64 
ffff80000080ccfa:	55                   	push   rbp
ffff80000080ccfb:	48 89 e5             	mov    rbp,rsp
ffff80000080ccfe:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ccfe <ioctl_ramfs+0x8>
ffff80000080cd05:	49 bb d2 0d 11 00 00 	movabs r11,0x110dd2
ffff80000080cd0c:	00 00 00 
ffff80000080cd0f:	4c 01 d8             	add    rax,r11
ffff80000080cd12:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080cd16:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080cd1a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080cd1e:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:79
    return 0;
ffff80000080cd22:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:80
ffff80000080cd27:	5d                   	pop    rbp
ffff80000080cd28:	c3                   	ret    

ffff80000080cd29 <ramdisk_do_req>:
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:22
long ramdisk_size;
int dev_ramdisk=-1;
struct blk_dev bd_ramdisk={
    .do_request=ramdisk_do_req
};
void ramdisk_do_req(struct request* req){
ffff80000080cd29:	f3 0f 1e fa          	endbr64 
ffff80000080cd2d:	55                   	push   rbp
ffff80000080cd2e:	48 89 e5             	mov    rbp,rsp
ffff80000080cd31:	48 83 ec 40          	sub    rsp,0x40
ffff80000080cd35:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cd35 <ramdisk_do_req+0xc>
ffff80000080cd3c:	49 bb 9b 0d 11 00 00 	movabs r11,0x110d9b
ffff80000080cd43:	00 00 00 
ffff80000080cd46:	4c 01 d8             	add    rax,r11
ffff80000080cd49:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:23
    if(!req)
ffff80000080cd4d:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080cd52:	0f 84 1b 02 00 00    	je     ffff80000080cf73 <ramdisk_do_req+0x24a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:25
        return;
    start_request(req->dev);
ffff80000080cd58:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cd5c:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080cd5f:	0f b7 d2             	movzx  edx,dx
ffff80000080cd62:	66 89 55 e6          	mov    WORD PTR [rbp-0x1a],dx
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:69
    int major=BLKDEV_MAJOR(dev);
    blk_devs[major].current_request->dev=-1;
    blk_devs[major].current_request=blk_devs[major].current_request->next;
}
__attribute__((__always_inline__))inline void start_request(unsigned short dev){
    wait_on_req(blk_devs[BLKDEV_MAJOR(dev)].current_request->waiting);
ffff80000080cd66:	0f b7 55 e6          	movzx  edx,WORD PTR [rbp-0x1a]
ffff80000080cd6a:	c1 fa 04             	sar    edx,0x4
ffff80000080cd6d:	89 d1                	mov    ecx,edx
ffff80000080cd6f:	83 e1 0f             	and    ecx,0xf
ffff80000080cd72:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080cd79:	ff ff ff 
ffff80000080cd7c:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080cd80:	48 63 d1             	movsxd rdx,ecx
ffff80000080cd83:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080cd87:	48 01 f2             	add    rdx,rsi
ffff80000080cd8a:	48 83 c2 08          	add    rdx,0x8
ffff80000080cd8e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080cd91:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080cd95:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
wait_on_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:195
    unsigned int argv;
    unsigned int argc;
}proc_ret_stack;

__attribute__((__always_inline__))inline void wait_on_req(struct process* p){
        if(p->stat==TASK_READY||p->stat==TASK_RUNNING)
ffff80000080cd99:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080cd9d:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080cda0:	83 fa 02             	cmp    edx,0x2
ffff80000080cda3:	74 0c                	je     ffff80000080cdb1 <ramdisk_do_req+0x88>
ffff80000080cda5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080cda9:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080cdac:	83 fa 01             	cmp    edx,0x1
ffff80000080cdaf:	75 0b                	jne    ffff80000080cdbc <ramdisk_do_req+0x93>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:196
            p->stat=TASK_SUSPENDED;
ffff80000080cdb1:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080cdb5:	c7 42 18 03 00 00 00 	mov    DWORD PTR [rdx+0x18],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:197
}
ffff80000080cdbc:	90                   	nop
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:70
ffff80000080cdbd:	90                   	nop
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:26
    switch (req->cmd)
ffff80000080cdbe:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cdc2:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080cdc5:	85 d2                	test   edx,edx
ffff80000080cdc7:	74 0a                	je     ffff80000080cdd3 <ramdisk_do_req+0xaa>
ffff80000080cdc9:	83 fa 01             	cmp    edx,0x1
ffff80000080cdcc:	74 6e                	je     ffff80000080ce3c <ramdisk_do_req+0x113>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:43
        for(int i=0;i<lenw;i++){
            ramdisk_base[i + basew]=req->buffer[i];
        }
        break;
    default:
        break;
ffff80000080cdce:	e9 d1 00 00 00       	jmp    ffff80000080cea4 <ramdisk_do_req+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:29
        int len= req->nr_sectors*SECTOR_SIZE;
ffff80000080cdd3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cdd7:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080cddb:	c1 e2 09             	shl    edx,0x9
ffff80000080cdde:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:30
        int base=req->sector*SECTOR_SIZE;
ffff80000080cde1:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cde5:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080cde9:	c1 e2 09             	shl    edx,0x9
ffff80000080cdec:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31
        for(int i=0;i<len;i++){
ffff80000080cdef:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080cdf6:	eb 3a                	jmp    ffff80000080ce32 <ramdisk_do_req+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:32 (discriminator 3)
            req->buffer[i]=ramdisk_base[i + base];
ffff80000080cdf8:	48 ba e8 ff ff ff ff 	movabs rdx,0xffffffffffffffe8
ffff80000080cdff:	ff ff ff 
ffff80000080ce02:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ce06:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080ce09:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
ffff80000080ce0c:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080ce0f:	01 f2                	add    edx,esi
ffff80000080ce11:	48 63 d2             	movsxd rdx,edx
ffff80000080ce14:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080ce18:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ce1c:	48 8b 4a 28          	mov    rcx,QWORD PTR [rdx+0x28]
ffff80000080ce20:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080ce23:	48 63 d2             	movsxd rdx,edx
ffff80000080ce26:	48 01 d1             	add    rcx,rdx
ffff80000080ce29:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff80000080ce2c:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31 (discriminator 3)
        for(int i=0;i<len;i++){
ffff80000080ce2e:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31 (discriminator 1)
ffff80000080ce32:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080ce35:	3b 55 ec             	cmp    edx,DWORD PTR [rbp-0x14]
ffff80000080ce38:	7c be                	jl     ffff80000080cdf8 <ramdisk_do_req+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:34
        break;
ffff80000080ce3a:	eb 68                	jmp    ffff80000080cea4 <ramdisk_do_req+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:36
        int lenw= req->nr_sectors*BLOCK_SIZE;
ffff80000080ce3c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ce40:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080ce44:	c1 e2 0c             	shl    edx,0xc
ffff80000080ce47:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:37
        int basew=req->sector*BLOCK_SIZE;
ffff80000080ce4a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ce4e:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080ce52:	c1 e2 0c             	shl    edx,0xc
ffff80000080ce55:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:38
        for(int i=0;i<lenw;i++){
ffff80000080ce58:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080ce5f:	eb 3a                	jmp    ffff80000080ce9b <ramdisk_do_req+0x172>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:39 (discriminator 3)
            ramdisk_base[i + basew]=req->buffer[i];
ffff80000080ce61:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ce65:	48 8b 4a 28          	mov    rcx,QWORD PTR [rdx+0x28]
ffff80000080ce69:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080ce6c:	48 63 d2             	movsxd rdx,edx
ffff80000080ce6f:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080ce73:	48 ba e8 ff ff ff ff 	movabs rdx,0xffffffffffffffe8
ffff80000080ce7a:	ff ff ff 
ffff80000080ce7d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ce81:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080ce84:	8b 7d f8             	mov    edi,DWORD PTR [rbp-0x8]
ffff80000080ce87:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080ce8a:	01 fa                	add    edx,edi
ffff80000080ce8c:	48 63 d2             	movsxd rdx,edx
ffff80000080ce8f:	48 01 d1             	add    rcx,rdx
ffff80000080ce92:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff80000080ce95:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:38 (discriminator 3)
        for(int i=0;i<lenw;i++){
ffff80000080ce97:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:38 (discriminator 1)
ffff80000080ce9b:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080ce9e:	3b 55 f4             	cmp    edx,DWORD PTR [rbp-0xc]
ffff80000080cea1:	7c be                	jl     ffff80000080ce61 <ramdisk_do_req+0x138>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:41
        break;
ffff80000080cea3:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:45
    }
    end_request(req->dev);
ffff80000080cea4:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cea8:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080ceab:	0f b7 d2             	movzx  edx,dx
ffff80000080ceae:	66 89 55 d6          	mov    WORD PTR [rbp-0x2a],dx
end_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:64
    int major=BLKDEV_MAJOR(dev);
ffff80000080ceb2:	0f b7 55 d6          	movzx  edx,WORD PTR [rbp-0x2a]
ffff80000080ceb6:	c1 fa 04             	sar    edx,0x4
ffff80000080ceb9:	83 e2 0f             	and    edx,0xf
ffff80000080cebc:	89 55 d0             	mov    DWORD PTR [rbp-0x30],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:65
    blk_devs[major].current_request->dev=-1;
ffff80000080cebf:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080cec6:	ff ff ff 
ffff80000080cec9:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080cecd:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080ced0:	48 63 d2             	movsxd rdx,edx
ffff80000080ced3:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080ced7:	48 01 ca             	add    rdx,rcx
ffff80000080ceda:	48 83 c2 08          	add    rdx,0x8
ffff80000080cede:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080cee1:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:66
    blk_devs[major].current_request=blk_devs[major].current_request->next;
ffff80000080cee6:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080ceed:	ff ff ff 
ffff80000080cef0:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080cef4:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080cef7:	48 63 d2             	movsxd rdx,edx
ffff80000080cefa:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080cefe:	48 01 ca             	add    rdx,rcx
ffff80000080cf01:	48 83 c2 08          	add    rdx,0x8
ffff80000080cf05:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080cf08:	48 8b 52 38          	mov    rdx,QWORD PTR [rdx+0x38]
ffff80000080cf0c:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080cf13:	ff ff ff 
ffff80000080cf16:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080cf1a:	8b 4d d0             	mov    ecx,DWORD PTR [rbp-0x30]
ffff80000080cf1d:	48 63 c9             	movsxd rcx,ecx
ffff80000080cf20:	48 c1 e1 04          	shl    rcx,0x4
ffff80000080cf24:	48 01 f1             	add    rcx,rsi
ffff80000080cf27:	48 83 c1 08          	add    rcx,0x8
ffff80000080cf2b:	48 89 11             	mov    QWORD PTR [rcx],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:67
}
ffff80000080cf2e:	90                   	nop
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:46
    ramdisk_do_req(blk_devs[dev_ramdisk].current_request);
ffff80000080cf2f:	48 ba c8 fe ff ff ff 	movabs rdx,0xfffffffffffffec8
ffff80000080cf36:	ff ff ff 
ffff80000080cf39:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cf3d:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080cf3f:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080cf46:	ff ff ff 
ffff80000080cf49:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080cf4d:	48 63 d2             	movsxd rdx,edx
ffff80000080cf50:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080cf54:	48 01 ca             	add    rdx,rcx
ffff80000080cf57:	48 83 c2 08          	add    rdx,0x8
ffff80000080cf5b:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080cf5e:	48 89 d7             	mov    rdi,rdx
ffff80000080cf61:	48 ba 59 f2 ee ff ff 	movabs rdx,0xffffffffffeef259
ffff80000080cf68:	ff ff ff 
ffff80000080cf6b:	48 8d 04 10          	lea    rax,[rax+rdx*1]
ffff80000080cf6f:	ff d0                	call   rax
ffff80000080cf71:	eb 01                	jmp    ffff80000080cf74 <ramdisk_do_req+0x24b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:24
        return;
ffff80000080cf73:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:47
}
ffff80000080cf74:	c9                   	leave  
ffff80000080cf75:	c3                   	ret    

ffff80000080cf76 <init_ramdisk>:
init_ramdisk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:48
void init_ramdisk(){
ffff80000080cf76:	f3 0f 1e fa          	endbr64 
ffff80000080cf7a:	55                   	push   rbp
ffff80000080cf7b:	48 89 e5             	mov    rbp,rsp
ffff80000080cf7e:	41 57                	push   r15
ffff80000080cf80:	41 54                	push   r12
ffff80000080cf82:	53                   	push   rbx
ffff80000080cf83:	48 83 ec 18          	sub    rsp,0x18
ffff80000080cf87:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080cf87 <init_ramdisk+0x11>
ffff80000080cf8e:	49 bb 49 0b 11 00 00 	movabs r11,0x110b49
ffff80000080cf95:	00 00 00 
ffff80000080cf98:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:50
    //初始化ramdisk，在/dev下创建一个ram
    ramdisk_base= KNL_BASE+0x81000000;//(char *) kmallocat(0, 100);
ffff80000080cf9b:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff80000080cfa2:	ff ff ff 
ffff80000080cfa5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cfa9:	48 be 00 00 00 81 00 	movabs rsi,0xffff800081000000
ffff80000080cfb0:	80 ff ff 
ffff80000080cfb3:	48 89 30             	mov    QWORD PTR [rax],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:51
    if(ramdisk_base==-1){
ffff80000080cfb6:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff80000080cfbd:	ff ff ff 
ffff80000080cfc0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cfc4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cfc7:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
ffff80000080cfcb:	75 2d                	jne    ffff80000080cffa <init_ramdisk+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:52
        comprintf("failed to init ramdisk.\n");
ffff80000080cfcd:	48 b8 52 d8 ff ff ff 	movabs rax,0xffffffffffffd852
ffff80000080cfd4:	ff ff ff 
ffff80000080cfd7:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080cfdb:	48 89 c7             	mov    rdi,rax
ffff80000080cfde:	49 89 df             	mov    r15,rbx
ffff80000080cfe1:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080cfe6:	48 ba 23 4c ef ff ff 	movabs rdx,0xffffffffffef4c23
ffff80000080cfed:	ff ff ff 
ffff80000080cff0:	48 01 da             	add    rdx,rbx
ffff80000080cff3:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:53
        return;
ffff80000080cff5:	e9 a3 01 00 00       	jmp    ffff80000080d19d <init_ramdisk+0x227>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:55
    }
    ramdisk_size= (char*)_binary_rd_img_end - (char*)_binary_rd_img_start;//PAGE_4K_SIZE*100;
ffff80000080cffa:	48 b8 a8 fd ff ff ff 	movabs rax,0xfffffffffffffda8
ffff80000080d001:	ff ff ff 
ffff80000080d004:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d008:	48 89 c2             	mov    rdx,rax
ffff80000080d00b:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080d012:	ff ff ff 
ffff80000080d015:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d019:	48 29 c2             	sub    rdx,rax
ffff80000080d01c:	48 b8 c8 fd ff ff ff 	movabs rax,0xfffffffffffffdc8
ffff80000080d023:	ff ff ff 
ffff80000080d026:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d02a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:56
    if((dev_ramdisk=reg_blkdev(&bd_ramdisk))<0){
ffff80000080d02d:	48 b8 a8 ff ff ff ff 	movabs rax,0xffffffffffffffa8
ffff80000080d034:	ff ff ff 
ffff80000080d037:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d03b:	48 89 c7             	mov    rdi,rax
ffff80000080d03e:	49 89 df             	mov    r15,rbx
ffff80000080d041:	48 b8 d8 f6 ee ff ff 	movabs rax,0xffffffffffeef6d8
ffff80000080d048:	ff ff ff 
ffff80000080d04b:	48 01 d8             	add    rax,rbx
ffff80000080d04e:	ff d0                	call   rax
ffff80000080d050:	48 ba c8 fe ff ff ff 	movabs rdx,0xfffffffffffffec8
ffff80000080d057:	ff ff ff 
ffff80000080d05a:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080d05e:	89 02                	mov    DWORD PTR [rdx],eax
ffff80000080d060:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff80000080d067:	ff ff ff 
ffff80000080d06a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d06e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080d070:	85 c0                	test   eax,eax
ffff80000080d072:	79 2d                	jns    ffff80000080d0a1 <init_ramdisk+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:57
        comprintf("no place for more blkdev.\n");
ffff80000080d074:	48 b8 6b d8 ff ff ff 	movabs rax,0xffffffffffffd86b
ffff80000080d07b:	ff ff ff 
ffff80000080d07e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080d082:	48 89 c7             	mov    rdi,rax
ffff80000080d085:	49 89 df             	mov    r15,rbx
ffff80000080d088:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d08d:	48 ba 23 4c ef ff ff 	movabs rdx,0xffffffffffef4c23
ffff80000080d094:	ff ff ff 
ffff80000080d097:	48 01 da             	add    rdx,rbx
ffff80000080d09a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:58
        return;
ffff80000080d09c:	e9 fc 00 00 00       	jmp    ffff80000080d19d <init_ramdisk+0x227>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:60
    }
    for(int i=0;i<(ramdisk_size+PAGE_4K_SIZE-1)/PAGE_4K_SIZE;i++){
ffff80000080d0a1:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080d0a8:	e9 b8 00 00 00       	jmp    ffff80000080d165 <init_ramdisk+0x1ef>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:61 (discriminator 3)
        smmap(pmalloc(),ramdisk_base+i*PAGE_4K_SIZE,PAGE_PRESENT|PAGE_RWX,PML4_ADDR);
ffff80000080d0ad:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff80000080d0b4:	ff ff ff 
ffff80000080d0b7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d0bb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d0be:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d0c1:	c1 e0 0c             	shl    eax,0xc
ffff80000080d0c4:	48 98                	cdqe   
ffff80000080d0c6:	48 01 d0             	add    rax,rdx
ffff80000080d0c9:	49 89 c4             	mov    r12,rax
ffff80000080d0cc:	49 89 df             	mov    r15,rbx
ffff80000080d0cf:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d0d4:	48 ba 6e 50 ee ff ff 	movabs rdx,0xffffffffffee506e
ffff80000080d0db:	ff ff ff 
ffff80000080d0de:	48 01 da             	add    rdx,rbx
ffff80000080d0e1:	ff d2                	call   rdx
ffff80000080d0e3:	48 89 c7             	mov    rdi,rax
ffff80000080d0e6:	48 b8 00 10 10 00 00 	movabs rax,0xffff800000101000
ffff80000080d0ed:	80 ff ff 
ffff80000080d0f0:	48 89 c1             	mov    rcx,rax
ffff80000080d0f3:	ba 03 00 00 00       	mov    edx,0x3
ffff80000080d0f8:	4c 89 e6             	mov    rsi,r12
ffff80000080d0fb:	49 89 df             	mov    r15,rbx
ffff80000080d0fe:	48 b8 29 40 ee ff ff 	movabs rax,0xffffffffffee4029
ffff80000080d105:	ff ff ff 
ffff80000080d108:	48 01 d8             	add    rax,rbx
ffff80000080d10b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:63 (discriminator 3)
        //解压img里面的test程序
        memcpy(ramdisk_base+i*PAGE_4K_SIZE, _binary_rd_img_start+i*PAGE_4K_SIZE,PAGE_4K_SIZE);
ffff80000080d10d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d110:	c1 e0 0c             	shl    eax,0xc
ffff80000080d113:	48 63 d0             	movsxd rdx,eax
ffff80000080d116:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080d11d:	ff ff ff 
ffff80000080d120:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d124:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000080d128:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff80000080d12f:	ff ff ff 
ffff80000080d132:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d136:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d139:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d13c:	c1 e0 0c             	shl    eax,0xc
ffff80000080d13f:	48 98                	cdqe   
ffff80000080d141:	48 01 d0             	add    rax,rdx
ffff80000080d144:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080d149:	48 89 ce             	mov    rsi,rcx
ffff80000080d14c:	48 89 c7             	mov    rdi,rax
ffff80000080d14f:	49 89 df             	mov    r15,rbx
ffff80000080d152:	48 b8 c4 50 ef ff ff 	movabs rax,0xffffffffffef50c4
ffff80000080d159:	ff ff ff 
ffff80000080d15c:	48 01 d8             	add    rax,rbx
ffff80000080d15f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:60 (discriminator 3)
    for(int i=0;i<(ramdisk_size+PAGE_4K_SIZE-1)/PAGE_4K_SIZE;i++){
ffff80000080d161:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:60 (discriminator 1)
ffff80000080d165:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d168:	48 63 d0             	movsxd rdx,eax
ffff80000080d16b:	48 b8 c8 fd ff ff ff 	movabs rax,0xfffffffffffffdc8
ffff80000080d172:	ff ff ff 
ffff80000080d175:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d179:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d17c:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080d182:	48 8d 88 ff 0f 00 00 	lea    rcx,[rax+0xfff]
ffff80000080d189:	48 85 c0             	test   rax,rax
ffff80000080d18c:	48 0f 48 c1          	cmovs  rax,rcx
ffff80000080d190:	48 c1 f8 0c          	sar    rax,0xc
ffff80000080d194:	48 39 c2             	cmp    rdx,rax
ffff80000080d197:	0f 8c 10 ff ff ff    	jl     ffff80000080d0ad <init_ramdisk+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:68

    }

    
}
ffff80000080d19d:	48 83 c4 18          	add    rsp,0x18
ffff80000080d1a1:	5b                   	pop    rbx
ffff80000080d1a2:	41 5c                	pop    r12
ffff80000080d1a4:	41 5f                	pop    r15
ffff80000080d1a6:	5d                   	pop    rbp
ffff80000080d1a7:	c3                   	ret    

ffff80000080d1a8 <reg_blkdev>:
reg_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:5
#include <blk_dev.h>
#include <errno.h>
struct blk_dev blk_devs[MAX_BLKDEVS];
struct request requests[MAX_REQUESTS];
int reg_blkdev(struct blk_dev* dev){
ffff80000080d1a8:	f3 0f 1e fa          	endbr64 
ffff80000080d1ac:	55                   	push   rbp
ffff80000080d1ad:	48 89 e5             	mov    rbp,rsp
ffff80000080d1b0:	53                   	push   rbx
ffff80000080d1b1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d1b1 <reg_blkdev+0x9>
ffff80000080d1b8:	49 bb 1f 09 11 00 00 	movabs r11,0x11091f
ffff80000080d1bf:	00 00 00 
ffff80000080d1c2:	4c 01 d8             	add    rax,r11
ffff80000080d1c5:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6
    for(int i=0;i<MAX_BLKDEVS;i++){
ffff80000080d1c9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080d1d0:	e9 80 00 00 00       	jmp    ffff80000080d255 <reg_blkdev+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:7
        if(blk_devs[i].do_request)continue;
ffff80000080d1d5:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080d1dc:	ff ff ff 
ffff80000080d1df:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d1e3:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080d1e6:	48 63 d2             	movsxd rdx,edx
ffff80000080d1e9:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d1ed:	48 01 ca             	add    rdx,rcx
ffff80000080d1f0:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d1f3:	48 85 d2             	test   rdx,rdx
ffff80000080d1f6:	75 58                	jne    ffff80000080d250 <reg_blkdev+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:8
        blk_devs[i]=*dev;
ffff80000080d1f8:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080d1ff:	ff ff ff 
ffff80000080d202:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d206:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080d209:	48 63 d2             	movsxd rdx,edx
ffff80000080d20c:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d210:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080d214:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080d218:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080d21b:	48 8b 5a 08          	mov    rbx,QWORD PTR [rdx+0x8]
ffff80000080d21f:	48 89 0e             	mov    QWORD PTR [rsi],rcx
ffff80000080d222:	48 89 5e 08          	mov    QWORD PTR [rsi+0x8],rbx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:9
        blk_devs[i].current_request=NULL;
ffff80000080d226:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080d22d:	ff ff ff 
ffff80000080d230:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d234:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff80000080d237:	48 98                	cdqe   
ffff80000080d239:	48 c1 e0 04          	shl    rax,0x4
ffff80000080d23d:	48 01 d0             	add    rax,rdx
ffff80000080d240:	48 83 c0 08          	add    rax,0x8
ffff80000080d244:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:10
        return i;
ffff80000080d24b:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff80000080d24e:	eb 14                	jmp    ffff80000080d264 <reg_blkdev+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:7
        if(blk_devs[i].do_request)continue;
ffff80000080d250:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6
    for(int i=0;i<MAX_BLKDEVS;i++){
ffff80000080d251:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6 (discriminator 1)
ffff80000080d255:	83 7d f4 0b          	cmp    DWORD PTR [rbp-0xc],0xb
ffff80000080d259:	0f 8e 76 ff ff ff    	jle    ffff80000080d1d5 <reg_blkdev+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:12
    }
    return -ENOMEM;
ffff80000080d25f:	b8 cf ff ff ff       	mov    eax,0xffffffcf
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:13
}
ffff80000080d264:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff80000080d268:	c9                   	leave  
ffff80000080d269:	c3                   	ret    

ffff80000080d26a <unreg_blkdev>:
unreg_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:14
int unreg_blkdev(unsigned short dev){
ffff80000080d26a:	f3 0f 1e fa          	endbr64 
ffff80000080d26e:	55                   	push   rbp
ffff80000080d26f:	48 89 e5             	mov    rbp,rsp
ffff80000080d272:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d272 <unreg_blkdev+0x8>
ffff80000080d279:	49 bb 5e 08 11 00 00 	movabs r11,0x11085e
ffff80000080d280:	00 00 00 
ffff80000080d283:	4c 01 d8             	add    rax,r11
ffff80000080d286:	89 fa                	mov    edx,edi
ffff80000080d288:	66 89 55 fc          	mov    WORD PTR [rbp-0x4],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:15
    if(blk_devs[dev].current_request)
ffff80000080d28c:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffff80000080d290:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080d297:	ff ff ff 
ffff80000080d29a:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080d29e:	48 63 d2             	movsxd rdx,edx
ffff80000080d2a1:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d2a5:	48 01 ca             	add    rdx,rcx
ffff80000080d2a8:	48 83 c2 08          	add    rdx,0x8
ffff80000080d2ac:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d2af:	48 85 d2             	test   rdx,rdx
ffff80000080d2b2:	74 07                	je     ffff80000080d2bb <unreg_blkdev+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:16
        return -EBUSY;//设备还有没完成的请求
ffff80000080d2b4:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
ffff80000080d2b9:	eb 23                	jmp    ffff80000080d2de <unreg_blkdev+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:17
    blk_devs[dev].do_request=0;//清除
ffff80000080d2bb:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffff80000080d2bf:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080d2c6:	ff ff ff 
ffff80000080d2c9:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080d2cd:	48 63 c2             	movsxd rax,edx
ffff80000080d2d0:	48 c1 e0 04          	shl    rax,0x4
ffff80000080d2d4:	48 01 c8             	add    rax,rcx
ffff80000080d2d7:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:18
}
ffff80000080d2de:	5d                   	pop    rbp
ffff80000080d2df:	c3                   	ret    

ffff80000080d2e0 <make_request>:
make_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:19
int make_request(unsigned short dev,int cmd,unsigned long sector, unsigned long count,char * buffer){
ffff80000080d2e0:	f3 0f 1e fa          	endbr64 
ffff80000080d2e4:	55                   	push   rbp
ffff80000080d2e5:	48 89 e5             	mov    rbp,rsp
ffff80000080d2e8:	48 83 ec 40          	sub    rsp,0x40
ffff80000080d2ec:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d2ec <make_request+0xc>
ffff80000080d2f3:	49 bb e4 07 11 00 00 	movabs r11,0x1107e4
ffff80000080d2fa:	00 00 00 
ffff80000080d2fd:	4c 01 d8             	add    rax,r11
ffff80000080d300:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080d303:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffff80000080d307:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffff80000080d30b:	4c 89 45 c0          	mov    QWORD PTR [rbp-0x40],r8
ffff80000080d30f:	89 fa                	mov    edx,edi
ffff80000080d311:	66 89 55 dc          	mov    WORD PTR [rbp-0x24],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:20
    struct blk_dev* d=&blk_devs[BLKDEV_MAJOR(dev)];
ffff80000080d315:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080d319:	c1 fa 04             	sar    edx,0x4
ffff80000080d31c:	83 e2 0f             	and    edx,0xf
ffff80000080d31f:	48 63 d2             	movsxd rdx,edx
ffff80000080d322:	48 89 d1             	mov    rcx,rdx
ffff80000080d325:	48 c1 e1 04          	shl    rcx,0x4
ffff80000080d329:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080d330:	ff ff ff 
ffff80000080d333:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d337:	48 01 ca             	add    rdx,rcx
ffff80000080d33a:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:21
    if(!d->do_request)
ffff80000080d33e:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080d342:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d345:	48 85 d2             	test   rdx,rdx
ffff80000080d348:	75 0a                	jne    ffff80000080d354 <make_request+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:22
        return -ENODEV;//没有这个设备
ffff80000080d34a:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080d34f:	e9 62 01 00 00       	jmp    ffff80000080d4b6 <make_request+0x1d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:24
    //找一个空的请求
    struct request* req=NULL;
ffff80000080d354:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080d35b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080d35c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080d363:	eb 4c                	jmp    ffff80000080d3b1 <make_request+0xd1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:26
        if(requests[i].dev==(unsigned short)-1){
ffff80000080d365:	48 ba 00 fe ff ff ff 	movabs rdx,0xfffffffffffffe00
ffff80000080d36c:	ff ff ff 
ffff80000080d36f:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d373:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080d376:	48 63 d2             	movsxd rdx,edx
ffff80000080d379:	48 c1 e2 06          	shl    rdx,0x6
ffff80000080d37d:	48 01 ca             	add    rdx,rcx
ffff80000080d380:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080d383:	66 83 fa ff          	cmp    dx,0xffff
ffff80000080d387:	75 24                	jne    ffff80000080d3ad <make_request+0xcd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:27
            req=requests+i;
ffff80000080d389:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080d38c:	48 63 d2             	movsxd rdx,edx
ffff80000080d38f:	48 89 d1             	mov    rcx,rdx
ffff80000080d392:	48 c1 e1 06          	shl    rcx,0x6
ffff80000080d396:	48 ba 00 fe ff ff ff 	movabs rdx,0xfffffffffffffe00
ffff80000080d39d:	ff ff ff 
ffff80000080d3a0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d3a4:	48 01 ca             	add    rdx,rcx
ffff80000080d3a7:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:28
            break;
ffff80000080d3ab:	eb 0a                	jmp    ffff80000080d3b7 <make_request+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25 (discriminator 2)
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080d3ad:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25 (discriminator 1)
ffff80000080d3b1:	83 7d f4 3f          	cmp    DWORD PTR [rbp-0xc],0x3f
ffff80000080d3b5:	7e ae                	jle    ffff80000080d365 <make_request+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:32
        }
    }
    //下面的处理不太好。感觉最好是等到有空位置为止。
    if(!req)
ffff80000080d3b7:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080d3bc:	75 0a                	jne    ffff80000080d3c8 <make_request+0xe8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:33
        return -ENOMEM;//没有空的请求位置。
ffff80000080d3be:	b8 cf ff ff ff       	mov    eax,0xffffffcf
ffff80000080d3c3:	e9 ee 00 00 00       	jmp    ffff80000080d4b6 <make_request+0x1d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:38
    /*
    检查有没有请求正在运行，有的话接到后面，没有的话直接接上去，前面请求完成之后顺着链表下一个，
    这样就能保证所有请求都可以被访问到。
    */
    req->dev=dev;
ffff80000080d3c8:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d3cc:	0f b7 4d dc          	movzx  ecx,WORD PTR [rbp-0x24]
ffff80000080d3d0:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:39
    req->cmd=cmd;
ffff80000080d3d3:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d3d7:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffff80000080d3da:	89 4a 04             	mov    DWORD PTR [rdx+0x4],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:40
    req->buffer=buffer;
ffff80000080d3dd:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d3e1:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff80000080d3e5:	48 89 4a 28          	mov    QWORD PTR [rdx+0x28],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:41
    req->count=count;
ffff80000080d3e9:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d3ed:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080d3f1:	48 89 4a 20          	mov    QWORD PTR [rdx+0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:42
    req->next=NULL;
ffff80000080d3f5:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d3f9:	48 c7 42 38 00 00 00 	mov    QWORD PTR [rdx+0x38],0x0
ffff80000080d400:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:43
    req->nr_sectors=TO_BLKN(count);
ffff80000080d401:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d405:	48 89 d1             	mov    rcx,rdx
ffff80000080d408:	48 c1 e9 0c          	shr    rcx,0xc
ffff80000080d40c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d410:	81 e2 ff 0f 00 00    	and    edx,0xfff
ffff80000080d416:	48 01 ca             	add    rdx,rcx
ffff80000080d419:	48 85 d2             	test   rdx,rdx
ffff80000080d41c:	0f 95 c2             	setne  dl
ffff80000080d41f:	0f b6 ca             	movzx  ecx,dl
ffff80000080d422:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d426:	48 89 4a 18          	mov    QWORD PTR [rdx+0x18],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:44
    req->sector=sector;
ffff80000080d42a:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d42e:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080d432:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:45
    req->waiting=current;
ffff80000080d436:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080d43d:	ff ff ff 
ffff80000080d440:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080d444:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d447:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d44b:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:47
    //这里可能不需要阻塞进程，有的设备不需要阻塞。    
    if(!d->current_request)
ffff80000080d44f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d453:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d457:	48 85 c0             	test   rax,rax
ffff80000080d45a:	75 22                	jne    ffff80000080d47e <make_request+0x19e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:49
    {
        d->current_request=req;
ffff80000080d45c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d460:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d464:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:50
        d->do_request(d->current_request);
ffff80000080d468:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d46c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d46f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d473:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d477:	48 89 c7             	mov    rdi,rax
ffff80000080d47a:	ff d2                	call   rdx
ffff80000080d47c:	eb 33                	jmp    ffff80000080d4b1 <make_request+0x1d1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:52
    }else{
        struct request* rp=d->current_request;
ffff80000080d47e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d482:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d486:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53
        for(;rp->next;rp=rp->next);
ffff80000080d48a:	eb 0c                	jmp    ffff80000080d498 <make_request+0x1b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53 (discriminator 2)
ffff80000080d48c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d490:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080d494:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53 (discriminator 1)
ffff80000080d498:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d49c:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080d4a0:	48 85 c0             	test   rax,rax
ffff80000080d4a3:	75 e7                	jne    ffff80000080d48c <make_request+0x1ac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:54
        rp->next=req;
ffff80000080d4a5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d4a9:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d4ad:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:56
    }
    return 1;
ffff80000080d4b1:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:57
}
ffff80000080d4b6:	c9                   	leave  
ffff80000080d4b7:	c3                   	ret    

ffff80000080d4b8 <init_blkdev>:
init_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:58
void init_blkdev(void){
ffff80000080d4b8:	f3 0f 1e fa          	endbr64 
ffff80000080d4bc:	55                   	push   rbp
ffff80000080d4bd:	48 89 e5             	mov    rbp,rsp
ffff80000080d4c0:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d4c0 <init_blkdev+0x8>
ffff80000080d4c7:	49 bb 10 06 11 00 00 	movabs r11,0x110610
ffff80000080d4ce:	00 00 00 
ffff80000080d4d1:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080d4d4:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080d4db:	eb 24                	jmp    ffff80000080d501 <init_blkdev+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:60 (discriminator 3)
        requests[i].dev=-1;
ffff80000080d4dd:	48 ba 00 fe ff ff ff 	movabs rdx,0xfffffffffffffe00
ffff80000080d4e4:	ff ff ff 
ffff80000080d4e7:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d4eb:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080d4ee:	48 63 d2             	movsxd rdx,edx
ffff80000080d4f1:	48 c1 e2 06          	shl    rdx,0x6
ffff80000080d4f5:	48 01 ca             	add    rdx,rcx
ffff80000080d4f8:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59 (discriminator 3)
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080d4fd:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59 (discriminator 1)
ffff80000080d501:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff80000080d505:	7e d6                	jle    ffff80000080d4dd <init_blkdev+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:62
    }
ffff80000080d507:	90                   	nop
ffff80000080d508:	90                   	nop
ffff80000080d509:	5d                   	pop    rbp
ffff80000080d50a:	c3                   	ret    

ffff80000080d50b <init_blkbuf>:
init_blkbuf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:9
#include <errno.h>
#include <memory.h>
buffer_head l_buffer_heads[MAX_BUFFERHEADS];
//这个存储的是各个块设备映射的缓冲区链表中的头
buffer_head* l_blk_bh_heads[MAX_BLKDEVS];
void init_blkbuf(){
ffff80000080d50b:	f3 0f 1e fa          	endbr64 
ffff80000080d50f:	55                   	push   rbp
ffff80000080d510:	48 89 e5             	mov    rbp,rsp
ffff80000080d513:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d513 <init_blkbuf+0x8>
ffff80000080d51a:	49 bb bd 05 11 00 00 	movabs r11,0x1105bd
ffff80000080d521:	00 00 00 
ffff80000080d524:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080d527:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080d52e:	eb 44                	jmp    ffff80000080d574 <init_blkbuf+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:11 (discriminator 3)
        l_buffer_heads[i].dev=-1;
ffff80000080d530:	48 ba e8 fd ff ff ff 	movabs rdx,0xfffffffffffffde8
ffff80000080d537:	ff ff ff 
ffff80000080d53a:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d53e:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080d541:	48 63 d2             	movsxd rdx,edx
ffff80000080d544:	48 c1 e2 06          	shl    rdx,0x6
ffff80000080d548:	48 01 ca             	add    rdx,rcx
ffff80000080d54b:	48 83 c2 10          	add    rdx,0x10
ffff80000080d54f:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:12 (discriminator 3)
        l_blk_bh_heads[i]=NULL;
ffff80000080d554:	48 ba d8 fe ff ff ff 	movabs rdx,0xfffffffffffffed8
ffff80000080d55b:	ff ff ff 
ffff80000080d55e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d562:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080d565:	48 63 c9             	movsxd rcx,ecx
ffff80000080d568:	48 c7 04 ca 00 00 00 	mov    QWORD PTR [rdx+rcx*8],0x0
ffff80000080d56f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10 (discriminator 3)
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080d570:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10 (discriminator 1)
ffff80000080d574:	83 7d fc 7f          	cmp    DWORD PTR [rbp-0x4],0x7f
ffff80000080d578:	7e b6                	jle    ffff80000080d530 <init_blkbuf+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:14
    }
}
ffff80000080d57a:	90                   	nop
ffff80000080d57b:	90                   	nop
ffff80000080d57c:	5d                   	pop    rbp
ffff80000080d57d:	c3                   	ret    

ffff80000080d57e <bget>:
bget():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:15
buffer_head *bget(){
ffff80000080d57e:	f3 0f 1e fa          	endbr64 
ffff80000080d582:	55                   	push   rbp
ffff80000080d583:	48 89 e5             	mov    rbp,rsp
ffff80000080d586:	41 57                	push   r15
ffff80000080d588:	53                   	push   rbx
ffff80000080d589:	48 83 ec 10          	sub    rsp,0x10
ffff80000080d58d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d58d <bget+0xf>
ffff80000080d594:	49 bb 43 05 11 00 00 	movabs r11,0x110543
ffff80000080d59b:	00 00 00 
ffff80000080d59e:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080d5a1:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080d5a8:	e9 a2 00 00 00       	jmp    ffff80000080d64f <bget+0xd1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:17
        if(l_buffer_heads[i].dev==(unsigned short)-1)
ffff80000080d5ad:	48 b8 e8 fd ff ff ff 	movabs rax,0xfffffffffffffde8
ffff80000080d5b4:	ff ff ff 
ffff80000080d5b7:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080d5bb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080d5be:	48 98                	cdqe   
ffff80000080d5c0:	48 c1 e0 06          	shl    rax,0x6
ffff80000080d5c4:	48 01 d0             	add    rax,rdx
ffff80000080d5c7:	48 83 c0 10          	add    rax,0x10
ffff80000080d5cb:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080d5ce:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000080d5d2:	75 77                	jne    ffff80000080d64b <bget+0xcd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:19
        {
            l_buffer_heads[i].data=kmalloc();
ffff80000080d5d4:	49 89 df             	mov    r15,rbx
ffff80000080d5d7:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d5dc:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff80000080d5e3:	ff ff ff 
ffff80000080d5e6:	48 01 da             	add    rdx,rbx
ffff80000080d5e9:	ff d2                	call   rdx
ffff80000080d5eb:	48 89 c2             	mov    rdx,rax
ffff80000080d5ee:	48 b8 e8 fd ff ff ff 	movabs rax,0xfffffffffffffde8
ffff80000080d5f5:	ff ff ff 
ffff80000080d5f8:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080d5fc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080d5ff:	48 98                	cdqe   
ffff80000080d601:	48 c1 e0 06          	shl    rax,0x6
ffff80000080d605:	48 01 c8             	add    rax,rcx
ffff80000080d608:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:20
            l_buffer_heads[i].count=0;
ffff80000080d60b:	48 b8 e8 fd ff ff ff 	movabs rax,0xfffffffffffffde8
ffff80000080d612:	ff ff ff 
ffff80000080d615:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080d619:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080d61c:	48 98                	cdqe   
ffff80000080d61e:	48 c1 e0 06          	shl    rax,0x6
ffff80000080d622:	48 01 d0             	add    rax,rdx
ffff80000080d625:	48 83 c0 14          	add    rax,0x14
ffff80000080d629:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:21
            return l_buffer_heads+i;
ffff80000080d62c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080d62f:	48 98                	cdqe   
ffff80000080d631:	48 c1 e0 06          	shl    rax,0x6
ffff80000080d635:	48 89 c2             	mov    rdx,rax
ffff80000080d638:	48 b8 e8 fd ff ff ff 	movabs rax,0xfffffffffffffde8
ffff80000080d63f:	ff ff ff 
ffff80000080d642:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d646:	48 01 d0             	add    rax,rdx
ffff80000080d649:	eb 13                	jmp    ffff80000080d65e <bget+0xe0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16 (discriminator 2)
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080d64b:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16 (discriminator 1)
ffff80000080d64f:	83 7d ec 7f          	cmp    DWORD PTR [rbp-0x14],0x7f
ffff80000080d653:	0f 8e 54 ff ff ff    	jle    ffff80000080d5ad <bget+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:25
        }
    }
    //errno = -ENOBUF
    return NULL;
ffff80000080d659:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:26
}
ffff80000080d65e:	48 83 c4 10          	add    rsp,0x10
ffff80000080d662:	5b                   	pop    rbx
ffff80000080d663:	41 5f                	pop    r15
ffff80000080d665:	5d                   	pop    rbp
ffff80000080d666:	c3                   	ret    

ffff80000080d667 <get_block>:
get_block():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:28

buffer_head *get_block(unsigned short dev,int blocknr){
ffff80000080d667:	f3 0f 1e fa          	endbr64 
ffff80000080d66b:	55                   	push   rbp
ffff80000080d66c:	48 89 e5             	mov    rbp,rsp
ffff80000080d66f:	41 57                	push   r15
ffff80000080d671:	53                   	push   rbx
ffff80000080d672:	48 83 ec 20          	sub    rsp,0x20
ffff80000080d676:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d676 <get_block+0xf>
ffff80000080d67d:	49 bb 5a 04 11 00 00 	movabs r11,0x11045a
ffff80000080d684:	00 00 00 
ffff80000080d687:	4c 01 db             	add    rbx,r11
ffff80000080d68a:	89 f8                	mov    eax,edi
ffff80000080d68c:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080d68f:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:29
    buffer_head *bh=l_blk_bh_heads[BLKDEV_MAJOR(dev)];
ffff80000080d693:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080d697:	c1 f8 04             	sar    eax,0x4
ffff80000080d69a:	83 e0 0f             	and    eax,0xf
ffff80000080d69d:	89 c2                	mov    edx,eax
ffff80000080d69f:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff80000080d6a6:	ff ff ff 
ffff80000080d6a9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d6ad:	48 63 d2             	movsxd rdx,edx
ffff80000080d6b0:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffff80000080d6b4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:30
    if(!bh){
ffff80000080d6b8:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d6bd:	75 7c                	jne    ffff80000080d73b <get_block+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:32
        //这个设备没有任何的缓冲区
        bh=bget();
ffff80000080d6bf:	49 89 df             	mov    r15,rbx
ffff80000080d6c2:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d6c7:	48 ba ae fa ee ff ff 	movabs rdx,0xffffffffffeefaae
ffff80000080d6ce:	ff ff ff 
ffff80000080d6d1:	48 01 da             	add    rdx,rbx
ffff80000080d6d4:	ff d2                	call   rdx
ffff80000080d6d6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:33
        if(!bh){
ffff80000080d6da:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d6df:	75 0a                	jne    ffff80000080d6eb <get_block+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:35
            //errno=-ENOBUFS
            return NULL;
ffff80000080d6e1:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d6e6:	e9 f0 00 00 00       	jmp    ffff80000080d7db <get_block+0x174>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:37
        }
        bh->dev=dev;
ffff80000080d6eb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d6ef:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080d6f3:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:38
        bh->blocknr=blocknr;
ffff80000080d6f7:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d6fa:	48 63 d0             	movsxd rdx,eax
ffff80000080d6fd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d701:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:39
        l_blk_bh_heads[BLKDEV_MAJOR(dev)]=bh;
ffff80000080d705:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080d709:	c1 f8 04             	sar    eax,0x4
ffff80000080d70c:	83 e0 0f             	and    eax,0xf
ffff80000080d70f:	89 c2                	mov    edx,eax
ffff80000080d711:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff80000080d718:	ff ff ff 
ffff80000080d71b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d71f:	48 63 d2             	movsxd rdx,edx
ffff80000080d722:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080d726:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
ffff80000080d72a:	e9 96 00 00 00       	jmp    ffff80000080d7c5 <get_block+0x15e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:41 (discriminator 3)
    }else{
        for(;bh->next&&bh->blocknr!=blocknr;bh=bh->next);
ffff80000080d72f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d733:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080d737:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:41 (discriminator 1)
ffff80000080d73b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d73f:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080d743:	48 85 c0             	test   rax,rax
ffff80000080d746:	74 12                	je     ffff80000080d75a <get_block+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:41 (discriminator 2)
ffff80000080d748:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d74c:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080d750:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d753:	48 98                	cdqe   
ffff80000080d755:	48 39 c2             	cmp    rdx,rax
ffff80000080d758:	75 d5                	jne    ffff80000080d72f <get_block+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:42
        if(bh->blocknr!=blocknr)
ffff80000080d75a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d75e:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080d762:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d765:	48 98                	cdqe   
ffff80000080d767:	48 39 c2             	cmp    rdx,rax
ffff80000080d76a:	74 59                	je     ffff80000080d7c5 <get_block+0x15e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:46
        {
            //这块数据没有缓冲
            //这个时候肯定处于链表最后一个了
            bh->next=bget();
ffff80000080d76c:	49 89 df             	mov    r15,rbx
ffff80000080d76f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d774:	48 ba ae fa ee ff ff 	movabs rdx,0xffffffffffeefaae
ffff80000080d77b:	ff ff ff 
ffff80000080d77e:	48 01 da             	add    rdx,rbx
ffff80000080d781:	ff d2                	call   rdx
ffff80000080d783:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d787:	48 89 42 28          	mov    QWORD PTR [rdx+0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:47
            buffer_head *bhn=bh->next;
ffff80000080d78b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d78f:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080d793:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:48
            bhn->prev=bh;
ffff80000080d797:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d79b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d79f:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:49
            bh=bhn;
ffff80000080d7a3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d7a7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:50
            bh->dev=dev;
ffff80000080d7ab:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d7af:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080d7b3:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:51
            bh->blocknr=blocknr;
ffff80000080d7b7:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d7ba:	48 63 d0             	movsxd rdx,eax
ffff80000080d7bd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d7c1:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:55
        }
    }
    //TODO 等待缓冲解锁
    bh->count++;
ffff80000080d7c5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d7c9:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080d7cd:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080d7d0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d7d4:	88 50 14             	mov    BYTE PTR [rax+0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:56
    return bh;
ffff80000080d7d7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:57
}
ffff80000080d7db:	48 83 c4 20          	add    rsp,0x20
ffff80000080d7df:	5b                   	pop    rbx
ffff80000080d7e0:	41 5f                	pop    r15
ffff80000080d7e2:	5d                   	pop    rbp
ffff80000080d7e3:	c3                   	ret    

ffff80000080d7e4 <bread>:
bread():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:59
//从指定的块设备中读取一块数据，然后返回这块数据。
buffer_head* bread(unsigned short dev,int blkn){
ffff80000080d7e4:	f3 0f 1e fa          	endbr64 
ffff80000080d7e8:	55                   	push   rbp
ffff80000080d7e9:	48 89 e5             	mov    rbp,rsp
ffff80000080d7ec:	41 57                	push   r15
ffff80000080d7ee:	53                   	push   rbx
ffff80000080d7ef:	48 83 ec 20          	sub    rsp,0x20
ffff80000080d7f3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d7f3 <bread+0xf>
ffff80000080d7fa:	49 bb dd 02 11 00 00 	movabs r11,0x1102dd
ffff80000080d801:	00 00 00 
ffff80000080d804:	4c 01 db             	add    rbx,r11
ffff80000080d807:	89 f8                	mov    eax,edi
ffff80000080d809:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080d80c:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:60
    if(!blk_devs[BLKDEV_MAJOR(dev)].do_request)
ffff80000080d810:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080d814:	c1 f8 04             	sar    eax,0x4
ffff80000080d817:	83 e0 0f             	and    eax,0xf
ffff80000080d81a:	89 c2                	mov    edx,eax
ffff80000080d81c:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080d823:	ff ff ff 
ffff80000080d826:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080d82a:	48 63 c2             	movsxd rax,edx
ffff80000080d82d:	48 c1 e0 04          	shl    rax,0x4
ffff80000080d831:	48 01 c8             	add    rax,rcx
ffff80000080d834:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d837:	48 85 c0             	test   rax,rax
ffff80000080d83a:	75 07                	jne    ffff80000080d843 <bread+0x5f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:61
        return NULL;
ffff80000080d83c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d841:	eb 7a                	jmp    ffff80000080d8bd <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:62
    buffer_head *bh=get_block(dev,blkn);
ffff80000080d843:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080d847:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080d84a:	89 d6                	mov    esi,edx
ffff80000080d84c:	89 c7                	mov    edi,eax
ffff80000080d84e:	49 89 df             	mov    r15,rbx
ffff80000080d851:	48 b8 97 fb ee ff ff 	movabs rax,0xffffffffffeefb97
ffff80000080d858:	ff ff ff 
ffff80000080d85b:	48 01 d8             	add    rax,rbx
ffff80000080d85e:	ff d0                	call   rax
ffff80000080d860:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:63
    if(!bh)
ffff80000080d864:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d869:	75 07                	jne    ffff80000080d872 <bread+0x8e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:64
        return NULL;
ffff80000080d86b:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d870:	eb 4b                	jmp    ffff80000080d8bd <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:65
    if(bh->uptodate)
ffff80000080d872:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d876:	0f b6 40 12          	movzx  eax,BYTE PTR [rax+0x12]
ffff80000080d87a:	84 c0                	test   al,al
ffff80000080d87c:	74 06                	je     ffff80000080d884 <bread+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:66
        return bh;//数据没变，可以直接返回
ffff80000080d87e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d882:	eb 39                	jmp    ffff80000080d8bd <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:69
    //这里的疑点是，可以直接返回吗？
    //应该要等数据准备完毕之后再返回的
    make_request(dev,BLKDEV_REQ_READ,blkn*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE/SECTOR_SIZE,bh->data);
ffff80000080d884:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d888:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080d88b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d88e:	c1 e0 03             	shl    eax,0x3
ffff80000080d891:	48 63 d0             	movsxd rdx,eax
ffff80000080d894:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080d898:	49 89 c8             	mov    r8,rcx
ffff80000080d89b:	b9 08 00 00 00       	mov    ecx,0x8
ffff80000080d8a0:	be 00 00 00 00       	mov    esi,0x0
ffff80000080d8a5:	89 c7                	mov    edi,eax
ffff80000080d8a7:	49 89 df             	mov    r15,rbx
ffff80000080d8aa:	48 b8 10 f8 ee ff ff 	movabs rax,0xffffffffffeef810
ffff80000080d8b1:	ff ff ff 
ffff80000080d8b4:	48 01 d8             	add    rax,rbx
ffff80000080d8b7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:71
    //TODO 等待读取完成
    return bh;
ffff80000080d8b9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:72
}
ffff80000080d8bd:	48 83 c4 20          	add    rsp,0x20
ffff80000080d8c1:	5b                   	pop    rbx
ffff80000080d8c2:	41 5f                	pop    r15
ffff80000080d8c4:	5d                   	pop    rbp
ffff80000080d8c5:	c3                   	ret    

ffff80000080d8c6 <bwrite>:
bwrite():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:77
/*
向缓冲区写入数据。注意缓冲区的大小固定BLOCK_SIZE。
这会使得dirty置位。
*/
int bwrite(buffer_head* bh,char* src,int pos,int count){
ffff80000080d8c6:	f3 0f 1e fa          	endbr64 
ffff80000080d8ca:	55                   	push   rbp
ffff80000080d8cb:	48 89 e5             	mov    rbp,rsp
ffff80000080d8ce:	41 57                	push   r15
ffff80000080d8d0:	48 83 ec 28          	sub    rsp,0x28
ffff80000080d8d4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d8d4 <bwrite+0xe>
ffff80000080d8db:	49 bb fc 01 11 00 00 	movabs r11,0x1101fc
ffff80000080d8e2:	00 00 00 
ffff80000080d8e5:	4c 01 d8             	add    rax,r11
ffff80000080d8e8:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080d8ec:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080d8f0:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff80000080d8f3:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:78
    if(!bh)
ffff80000080d8f6:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d8fb:	75 07                	jne    ffff80000080d904 <bwrite+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:79
        return -ENOBUFS;
ffff80000080d8fd:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff80000080d902:	eb 5d                	jmp    ffff80000080d961 <bwrite+0x9b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:80
    if (count+pos>BLOCK_SIZE)
ffff80000080d904:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffff80000080d907:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080d90a:	01 ca                	add    edx,ecx
ffff80000080d90c:	81 fa 00 10 00 00    	cmp    edx,0x1000
ffff80000080d912:	7e 0b                	jle    ffff80000080d91f <bwrite+0x59>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:81
        count=BLOCK_SIZE-pos;//truncate
ffff80000080d914:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080d919:	2b 55 dc             	sub    edx,DWORD PTR [rbp-0x24]
ffff80000080d91c:	89 55 d8             	mov    DWORD PTR [rbp-0x28],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:82
    memcpy(bh->data+pos,src,count);
ffff80000080d91f:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080d922:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080d926:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
ffff80000080d929:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
ffff80000080d92c:	48 63 c9             	movsxd rcx,ecx
ffff80000080d92f:	48 8d 3c 0e          	lea    rdi,[rsi+rcx*1]
ffff80000080d933:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080d937:	48 89 ce             	mov    rsi,rcx
ffff80000080d93a:	49 89 c7             	mov    r15,rax
ffff80000080d93d:	48 b9 c4 50 ef ff ff 	movabs rcx,0xffffffffffef50c4
ffff80000080d944:	ff ff ff 
ffff80000080d947:	48 01 c1             	add    rcx,rax
ffff80000080d94a:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:83
    bh->dirt=1;
ffff80000080d94c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d950:	c6 40 13 01          	mov    BYTE PTR [rax+0x13],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:84
    bh->uptodate=0;
ffff80000080d954:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d958:	c6 40 12 00          	mov    BYTE PTR [rax+0x12],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:85
    return 1;
ffff80000080d95c:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:86
}
ffff80000080d961:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080d965:	c9                   	leave  
ffff80000080d966:	c3                   	ret    

ffff80000080d967 <bflush>:
bflush():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:90
/*
立即把缓冲区里面的更新应用到块设备上。
*/
int bflush(buffer_head* bh){
ffff80000080d967:	f3 0f 1e fa          	endbr64 
ffff80000080d96b:	55                   	push   rbp
ffff80000080d96c:	48 89 e5             	mov    rbp,rsp
ffff80000080d96f:	41 57                	push   r15
ffff80000080d971:	48 83 ec 18          	sub    rsp,0x18
ffff80000080d975:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d975 <bflush+0xe>
ffff80000080d97c:	49 bb 5b 01 11 00 00 	movabs r11,0x11015b
ffff80000080d983:	00 00 00 
ffff80000080d986:	4c 01 d8             	add    rax,r11
ffff80000080d989:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:91
    if(!blk_devs[bh->dev].do_request)
ffff80000080d98d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d991:	0f b7 52 10          	movzx  edx,WORD PTR [rdx+0x10]
ffff80000080d995:	0f b7 d2             	movzx  edx,dx
ffff80000080d998:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080d99f:	ff ff ff 
ffff80000080d9a2:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080d9a6:	48 63 d2             	movsxd rdx,edx
ffff80000080d9a9:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d9ad:	48 01 ca             	add    rdx,rcx
ffff80000080d9b0:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d9b3:	48 85 d2             	test   rdx,rdx
ffff80000080d9b6:	75 07                	jne    ffff80000080d9bf <bflush+0x58>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:92
        return -ENODEV;
ffff80000080d9b8:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080d9bd:	eb 5a                	jmp    ffff80000080da19 <bflush+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:93
    if(!bh->dirt)
ffff80000080d9bf:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d9c3:	0f b6 52 13          	movzx  edx,BYTE PTR [rdx+0x13]
ffff80000080d9c7:	84 d2                	test   dl,dl
ffff80000080d9c9:	75 07                	jne    ffff80000080d9d2 <bflush+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:94
        return 1;
ffff80000080d9cb:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080d9d0:	eb 47                	jmp    ffff80000080da19 <bflush+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:95
    make_request(bh->dev,BLKDEV_REQ_WRITE,bh->blocknr*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE/SECTOR_SIZE,bh->data);
ffff80000080d9d2:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d9d6:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080d9d9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d9dd:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080d9e1:	48 c1 e2 0c          	shl    rdx,0xc
ffff80000080d9e5:	48 c1 ea 09          	shr    rdx,0x9
ffff80000080d9e9:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080d9ed:	0f b7 49 10          	movzx  ecx,WORD PTR [rcx+0x10]
ffff80000080d9f1:	0f b7 f9             	movzx  edi,cx
ffff80000080d9f4:	49 89 f0             	mov    r8,rsi
ffff80000080d9f7:	b9 08 00 00 00       	mov    ecx,0x8
ffff80000080d9fc:	be 01 00 00 00       	mov    esi,0x1
ffff80000080da01:	49 89 c7             	mov    r15,rax
ffff80000080da04:	49 b9 10 f8 ee ff ff 	movabs r9,0xffffffffffeef810
ffff80000080da0b:	ff ff ff 
ffff80000080da0e:	49 01 c1             	add    r9,rax
ffff80000080da11:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:97
    //这个不用等
    return 1;
ffff80000080da14:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:98
}
ffff80000080da19:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080da1d:	c9                   	leave  
ffff80000080da1e:	c3                   	ret    

ffff80000080da1f <bdiscard>:
bdiscard():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:100
//丢弃更改。
int bdiscard(buffer_head *bh){
ffff80000080da1f:	f3 0f 1e fa          	endbr64 
ffff80000080da23:	55                   	push   rbp
ffff80000080da24:	48 89 e5             	mov    rbp,rsp
ffff80000080da27:	41 57                	push   r15
ffff80000080da29:	48 83 ec 18          	sub    rsp,0x18
ffff80000080da2d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080da2d <bdiscard+0xe>
ffff80000080da34:	49 bb a3 00 11 00 00 	movabs r11,0x1100a3
ffff80000080da3b:	00 00 00 
ffff80000080da3e:	4c 01 d8             	add    rax,r11
ffff80000080da41:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:101
    if(bh->dev==-1||!blk_devs[bh->dev].do_request)
ffff80000080da45:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080da49:	0f b7 52 10          	movzx  edx,WORD PTR [rdx+0x10]
ffff80000080da4d:	0f b7 d2             	movzx  edx,dx
ffff80000080da50:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080da57:	ff ff ff 
ffff80000080da5a:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080da5e:	48 63 d2             	movsxd rdx,edx
ffff80000080da61:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080da65:	48 01 ca             	add    rdx,rcx
ffff80000080da68:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080da6b:	48 85 d2             	test   rdx,rdx
ffff80000080da6e:	75 07                	jne    ffff80000080da77 <bdiscard+0x58>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:102
        return -ENODEV;
ffff80000080da70:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080da75:	eb 5a                	jmp    ffff80000080dad1 <bdiscard+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:104
    
    if(bh->uptodate)
ffff80000080da77:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080da7b:	0f b6 52 12          	movzx  edx,BYTE PTR [rdx+0x12]
ffff80000080da7f:	84 d2                	test   dl,dl
ffff80000080da81:	74 07                	je     ffff80000080da8a <bdiscard+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:105
        return 1;//数据没变，可以直接返回
ffff80000080da83:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080da88:	eb 47                	jmp    ffff80000080dad1 <bdiscard+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:108
    //这里的疑点是，可以直接返回吗？
    //应该要等数据准备完毕之后再返回的
    make_request(bh->dev,BLKDEV_REQ_READ,bh->blocknr*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE/SECTOR_SIZE,bh->data);
ffff80000080da8a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080da8e:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080da91:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080da95:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080da99:	48 c1 e2 0c          	shl    rdx,0xc
ffff80000080da9d:	48 c1 ea 09          	shr    rdx,0x9
ffff80000080daa1:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080daa5:	0f b7 49 10          	movzx  ecx,WORD PTR [rcx+0x10]
ffff80000080daa9:	0f b7 f9             	movzx  edi,cx
ffff80000080daac:	49 89 f0             	mov    r8,rsi
ffff80000080daaf:	b9 08 00 00 00       	mov    ecx,0x8
ffff80000080dab4:	be 00 00 00 00       	mov    esi,0x0
ffff80000080dab9:	49 89 c7             	mov    r15,rax
ffff80000080dabc:	49 b9 10 f8 ee ff ff 	movabs r9,0xffffffffffeef810
ffff80000080dac3:	ff ff ff 
ffff80000080dac6:	49 01 c1             	add    r9,rax
ffff80000080dac9:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:110
    //TODO 等待读取完成
    return 1;
ffff80000080dacc:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:111
}
ffff80000080dad1:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080dad5:	c9                   	leave  
ffff80000080dad6:	c3                   	ret    

ffff80000080dad7 <bupdate>:
bupdate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:113

int bupdate(buffer_head *bh){
ffff80000080dad7:	f3 0f 1e fa          	endbr64 
ffff80000080dadb:	55                   	push   rbp
ffff80000080dadc:	48 89 e5             	mov    rbp,rsp
ffff80000080dadf:	41 57                	push   r15
ffff80000080dae1:	48 83 ec 18          	sub    rsp,0x18
ffff80000080dae5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080dae5 <bupdate+0xe>
ffff80000080daec:	49 bb eb ff 10 00 00 	movabs r11,0x10ffeb
ffff80000080daf3:	00 00 00 
ffff80000080daf6:	4c 01 d8             	add    rax,r11
ffff80000080daf9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:114
    return bdiscard(bh);
ffff80000080dafd:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080db01:	48 89 d7             	mov    rdi,rdx
ffff80000080db04:	49 89 c7             	mov    r15,rax
ffff80000080db07:	48 ba 4f ff ee ff ff 	movabs rdx,0xffffffffffeeff4f
ffff80000080db0e:	ff ff ff 
ffff80000080db11:	48 01 c2             	add    rdx,rax
ffff80000080db14:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:115
}
ffff80000080db16:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080db1a:	c9                   	leave  
ffff80000080db1b:	c3                   	ret    

ffff80000080db1c <blkdev_read>:
blkdev_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:119
/*
bread的更高级封装，可以不以块为单位读取到buf。
*/
int blkdev_read(unsigned short dev,off_t offset, size_t count, char *buf){
ffff80000080db1c:	f3 0f 1e fa          	endbr64 
ffff80000080db20:	55                   	push   rbp
ffff80000080db21:	48 89 e5             	mov    rbp,rsp
ffff80000080db24:	41 57                	push   r15
ffff80000080db26:	53                   	push   rbx
ffff80000080db27:	48 83 ec 50          	sub    rsp,0x50
ffff80000080db2b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080db2b <blkdev_read+0xf>
ffff80000080db32:	49 bb a5 ff 10 00 00 	movabs r11,0x10ffa5
ffff80000080db39:	00 00 00 
ffff80000080db3c:	4c 01 db             	add    rbx,r11
ffff80000080db3f:	89 f8                	mov    eax,edi
ffff80000080db41:	89 75 b8             	mov    DWORD PTR [rbp-0x48],esi
ffff80000080db44:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
ffff80000080db48:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
ffff80000080db4c:	66 89 45 bc          	mov    WORD PTR [rbp-0x44],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:120
    int n=TO_BLKN(count);
ffff80000080db50:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080db54:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080db58:	48 89 c2             	mov    rdx,rax
ffff80000080db5b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080db5f:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080db64:	48 01 d0             	add    rax,rdx
ffff80000080db67:	48 85 c0             	test   rax,rax
ffff80000080db6a:	0f 95 c0             	setne  al
ffff80000080db6d:	0f b6 c0             	movzx  eax,al
ffff80000080db70:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:121
    off_t blkn=BLOCK_FLOOR(offset);
ffff80000080db73:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080db76:	99                   	cdq    
ffff80000080db77:	c1 ea 14             	shr    edx,0x14
ffff80000080db7a:	01 d0                	add    eax,edx
ffff80000080db7c:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080db81:	29 d0                	sub    eax,edx
ffff80000080db83:	89 c2                	mov    edx,eax
ffff80000080db85:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080db88:	29 d0                	sub    eax,edx
ffff80000080db8a:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:122
    off_t first_off=offset%BLOCK_SIZE;
ffff80000080db8d:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080db90:	99                   	cdq    
ffff80000080db91:	c1 ea 14             	shr    edx,0x14
ffff80000080db94:	01 d0                	add    eax,edx
ffff80000080db96:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080db9b:	29 d0                	sub    eax,edx
ffff80000080db9d:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:123
    char* p=buf;
ffff80000080dba0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080dba4:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:124
    size_t mod_count=count%BLOCK_SIZE;
ffff80000080dba8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080dbac:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080dbb1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:125
    int len=BLOCK_SIZE-first_off;
ffff80000080dbb5:	b8 00 10 00 00       	mov    eax,0x1000
ffff80000080dbba:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
ffff80000080dbbd:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:126
    for(int i=0;i<n;i++){
ffff80000080dbc0:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080dbc7:	e9 b1 00 00 00       	jmp    ffff80000080dc7d <blkdev_read+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:127
        buffer_head *bh=bread(dev,blkn);
ffff80000080dbcc:	0f b7 45 bc          	movzx  eax,WORD PTR [rbp-0x44]
ffff80000080dbd0:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080dbd3:	89 d6                	mov    esi,edx
ffff80000080dbd5:	89 c7                	mov    edi,eax
ffff80000080dbd7:	49 89 df             	mov    r15,rbx
ffff80000080dbda:	48 b8 14 fd ee ff ff 	movabs rax,0xffffffffffeefd14
ffff80000080dbe1:	ff ff ff 
ffff80000080dbe4:	48 01 d8             	add    rax,rbx
ffff80000080dbe7:	ff d0                	call   rax
ffff80000080dbe9:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:128
        if(!bh)
ffff80000080dbed:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080dbf2:	75 0a                	jne    ffff80000080dbfe <blkdev_read+0xe2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:129
            return -ENOBUFS;//buffer不够了
ffff80000080dbf4:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff80000080dbf9:	e9 90 00 00 00       	jmp    ffff80000080dc8e <blkdev_read+0x172>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:130
        if(i==n-1)
ffff80000080dbfe:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080dc01:	83 e8 01             	sub    eax,0x1
ffff80000080dc04:	39 45 d8             	cmp    DWORD PTR [rbp-0x28],eax
ffff80000080dc07:	75 09                	jne    ffff80000080dc12 <blkdev_read+0xf6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:131
            len=mod_count;
ffff80000080dc09:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080dc0d:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080dc10:	eb 0d                	jmp    ffff80000080dc1f <blkdev_read+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:132
        else if(i==2)
ffff80000080dc12:	83 7d d8 02          	cmp    DWORD PTR [rbp-0x28],0x2
ffff80000080dc16:	75 07                	jne    ffff80000080dc1f <blkdev_read+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:133
            len=BLOCK_SIZE;
ffff80000080dc18:	c7 45 dc 00 10 00 00 	mov    DWORD PTR [rbp-0x24],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:134 (discriminator 2)
        memcpy(p,bh->data+first_off,len);
ffff80000080dc1f:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080dc22:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080dc26:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080dc29:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080dc2c:	48 98                	cdqe   
ffff80000080dc2e:	48 01 c1             	add    rcx,rax
ffff80000080dc31:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dc35:	48 89 ce             	mov    rsi,rcx
ffff80000080dc38:	48 89 c7             	mov    rdi,rax
ffff80000080dc3b:	49 89 df             	mov    r15,rbx
ffff80000080dc3e:	48 b8 c4 50 ef ff ff 	movabs rax,0xffffffffffef50c4
ffff80000080dc45:	ff ff ff 
ffff80000080dc48:	48 01 d8             	add    rax,rbx
ffff80000080dc4b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:135 (discriminator 2)
        brelse(bh);
ffff80000080dc4d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080dc51:	48 89 c7             	mov    rdi,rax
ffff80000080dc54:	49 89 df             	mov    r15,rbx
ffff80000080dc57:	48 b8 42 03 ef ff ff 	movabs rax,0xffffffffffef0342
ffff80000080dc5e:	ff ff ff 
ffff80000080dc61:	48 01 d8             	add    rax,rbx
ffff80000080dc64:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:136 (discriminator 2)
        blkn++;
ffff80000080dc66:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:137 (discriminator 2)
        p+=BLOCK_SIZE;
ffff80000080dc6a:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffff80000080dc71:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:138 (discriminator 2)
        first_off=0;
ffff80000080dc72:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:126 (discriminator 2)
    for(int i=0;i<n;i++){
ffff80000080dc79:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:126 (discriminator 1)
ffff80000080dc7d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080dc80:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff80000080dc83:	0f 8c 43 ff ff ff    	jl     ffff80000080dbcc <blkdev_read+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:140
    }
    return 1;
ffff80000080dc89:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:141
}
ffff80000080dc8e:	48 83 c4 50          	add    rsp,0x50
ffff80000080dc92:	5b                   	pop    rbx
ffff80000080dc93:	41 5f                	pop    r15
ffff80000080dc95:	5d                   	pop    rbp
ffff80000080dc96:	c3                   	ret    

ffff80000080dc97 <blkdev_write>:
blkdev_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:143

int blkdev_write(unsigned short dev,off_t offset, size_t count, char *buf){
ffff80000080dc97:	f3 0f 1e fa          	endbr64 
ffff80000080dc9b:	55                   	push   rbp
ffff80000080dc9c:	48 89 e5             	mov    rbp,rsp
ffff80000080dc9f:	41 57                	push   r15
ffff80000080dca1:	53                   	push   rbx
ffff80000080dca2:	48 83 ec 50          	sub    rsp,0x50
ffff80000080dca6:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080dca6 <blkdev_write+0xf>
ffff80000080dcad:	49 bb 2a fe 10 00 00 	movabs r11,0x10fe2a
ffff80000080dcb4:	00 00 00 
ffff80000080dcb7:	4c 01 db             	add    rbx,r11
ffff80000080dcba:	89 f8                	mov    eax,edi
ffff80000080dcbc:	89 75 b8             	mov    DWORD PTR [rbp-0x48],esi
ffff80000080dcbf:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
ffff80000080dcc3:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
ffff80000080dcc7:	66 89 45 bc          	mov    WORD PTR [rbp-0x44],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:144
    int n=TO_BLKN(count);
ffff80000080dccb:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080dccf:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080dcd3:	48 89 c2             	mov    rdx,rax
ffff80000080dcd6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080dcda:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080dcdf:	48 01 d0             	add    rax,rdx
ffff80000080dce2:	48 85 c0             	test   rax,rax
ffff80000080dce5:	0f 95 c0             	setne  al
ffff80000080dce8:	0f b6 c0             	movzx  eax,al
ffff80000080dceb:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:145
    off_t blkn=BLOCK_FLOOR(offset);
ffff80000080dcee:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080dcf1:	99                   	cdq    
ffff80000080dcf2:	c1 ea 14             	shr    edx,0x14
ffff80000080dcf5:	01 d0                	add    eax,edx
ffff80000080dcf7:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080dcfc:	29 d0                	sub    eax,edx
ffff80000080dcfe:	89 c2                	mov    edx,eax
ffff80000080dd00:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080dd03:	29 d0                	sub    eax,edx
ffff80000080dd05:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:146
    off_t first_off=offset%BLOCK_SIZE;
ffff80000080dd08:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080dd0b:	99                   	cdq    
ffff80000080dd0c:	c1 ea 14             	shr    edx,0x14
ffff80000080dd0f:	01 d0                	add    eax,edx
ffff80000080dd11:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080dd16:	29 d0                	sub    eax,edx
ffff80000080dd18:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:147
    char* p=buf;
ffff80000080dd1b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080dd1f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:148
    size_t mod_count=count%BLOCK_SIZE;
ffff80000080dd23:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080dd27:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080dd2c:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:149
    int len=BLOCK_SIZE-first_off;
ffff80000080dd30:	b8 00 10 00 00       	mov    eax,0x1000
ffff80000080dd35:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
ffff80000080dd38:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:150
    for(int i=0;i<n;i++){
ffff80000080dd3b:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080dd42:	e9 b1 00 00 00       	jmp    ffff80000080ddf8 <blkdev_write+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:151
        buffer_head *bh=get_block(dev,blkn);
ffff80000080dd47:	0f b7 45 bc          	movzx  eax,WORD PTR [rbp-0x44]
ffff80000080dd4b:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080dd4e:	89 d6                	mov    esi,edx
ffff80000080dd50:	89 c7                	mov    edi,eax
ffff80000080dd52:	49 89 df             	mov    r15,rbx
ffff80000080dd55:	48 b8 97 fb ee ff ff 	movabs rax,0xffffffffffeefb97
ffff80000080dd5c:	ff ff ff 
ffff80000080dd5f:	48 01 d8             	add    rax,rbx
ffff80000080dd62:	ff d0                	call   rax
ffff80000080dd64:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:152
        if(!bh)
ffff80000080dd68:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080dd6d:	75 0a                	jne    ffff80000080dd79 <blkdev_write+0xe2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:153
            return -ENOBUFS;//buffer不够了
ffff80000080dd6f:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff80000080dd74:	e9 90 00 00 00       	jmp    ffff80000080de09 <blkdev_write+0x172>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:154
        if(i==n-1)
ffff80000080dd79:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080dd7c:	83 e8 01             	sub    eax,0x1
ffff80000080dd7f:	39 45 d8             	cmp    DWORD PTR [rbp-0x28],eax
ffff80000080dd82:	75 09                	jne    ffff80000080dd8d <blkdev_write+0xf6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:155
            len=mod_count;
ffff80000080dd84:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080dd88:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080dd8b:	eb 0d                	jmp    ffff80000080dd9a <blkdev_write+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:156
        else if(i==2)
ffff80000080dd8d:	83 7d d8 02          	cmp    DWORD PTR [rbp-0x28],0x2
ffff80000080dd91:	75 07                	jne    ffff80000080dd9a <blkdev_write+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:157
            len=BLOCK_SIZE;
ffff80000080dd93:	c7 45 dc 00 10 00 00 	mov    DWORD PTR [rbp-0x24],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:158 (discriminator 2)
        memcpy(bh->data+first_off,p,len);
ffff80000080dd9a:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080dd9d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080dda1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080dda4:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080dda7:	48 98                	cdqe   
ffff80000080dda9:	48 01 c1             	add    rcx,rax
ffff80000080ddac:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ddb0:	48 89 c6             	mov    rsi,rax
ffff80000080ddb3:	48 89 cf             	mov    rdi,rcx
ffff80000080ddb6:	49 89 df             	mov    r15,rbx
ffff80000080ddb9:	48 b8 c4 50 ef ff ff 	movabs rax,0xffffffffffef50c4
ffff80000080ddc0:	ff ff ff 
ffff80000080ddc3:	48 01 d8             	add    rax,rbx
ffff80000080ddc6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:159 (discriminator 2)
        brelse(bh);
ffff80000080ddc8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080ddcc:	48 89 c7             	mov    rdi,rax
ffff80000080ddcf:	49 89 df             	mov    r15,rbx
ffff80000080ddd2:	48 b8 42 03 ef ff ff 	movabs rax,0xffffffffffef0342
ffff80000080ddd9:	ff ff ff 
ffff80000080dddc:	48 01 d8             	add    rax,rbx
ffff80000080dddf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:160 (discriminator 2)
        blkn++;
ffff80000080dde1:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:161 (discriminator 2)
        p+=BLOCK_SIZE;
ffff80000080dde5:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffff80000080ddec:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:162 (discriminator 2)
        first_off=0;
ffff80000080dded:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:150 (discriminator 2)
    for(int i=0;i<n;i++){
ffff80000080ddf4:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:150 (discriminator 1)
ffff80000080ddf8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ddfb:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff80000080ddfe:	0f 8c 43 ff ff ff    	jl     ffff80000080dd47 <blkdev_write+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:164
    }
    return 1;
ffff80000080de04:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:166

}
ffff80000080de09:	48 83 c4 50          	add    rsp,0x50
ffff80000080de0d:	5b                   	pop    rbx
ffff80000080de0e:	41 5f                	pop    r15
ffff80000080de10:	5d                   	pop    rbp
ffff80000080de11:	c3                   	ret    

ffff80000080de12 <brelse>:
brelse():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:167
int brelse(buffer_head *bh){
ffff80000080de12:	f3 0f 1e fa          	endbr64 
ffff80000080de16:	55                   	push   rbp
ffff80000080de17:	48 89 e5             	mov    rbp,rsp
ffff80000080de1a:	41 57                	push   r15
ffff80000080de1c:	53                   	push   rbx
ffff80000080de1d:	48 83 ec 10          	sub    rsp,0x10
ffff80000080de21:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080de21 <brelse+0xf>
ffff80000080de28:	49 bb af fc 10 00 00 	movabs r11,0x10fcaf
ffff80000080de2f:	00 00 00 
ffff80000080de32:	4c 01 db             	add    rbx,r11
ffff80000080de35:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:168
    if(bh->dev==(unsigned short)-1||!blk_devs[BLKDEV_MAJOR(bh->dev)].do_request)
ffff80000080de39:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080de3d:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080de41:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000080de45:	74 33                	je     ffff80000080de7a <brelse+0x68>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:168 (discriminator 1)
ffff80000080de47:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080de4b:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080de4f:	0f b7 c0             	movzx  eax,ax
ffff80000080de52:	c1 f8 04             	sar    eax,0x4
ffff80000080de55:	83 e0 0f             	and    eax,0xf
ffff80000080de58:	89 c2                	mov    edx,eax
ffff80000080de5a:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080de61:	ff ff ff 
ffff80000080de64:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080de68:	48 63 c2             	movsxd rax,edx
ffff80000080de6b:	48 c1 e0 04          	shl    rax,0x4
ffff80000080de6f:	48 01 c8             	add    rax,rcx
ffff80000080de72:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080de75:	48 85 c0             	test   rax,rax
ffff80000080de78:	75 0a                	jne    ffff80000080de84 <brelse+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:169
        return -ENODEV;
ffff80000080de7a:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080de7f:	e9 b0 00 00 00       	jmp    ffff80000080df34 <brelse+0x122>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:170
    if(bh->dirt)
ffff80000080de84:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080de88:	0f b6 40 13          	movzx  eax,BYTE PTR [rax+0x13]
ffff80000080de8c:	84 c0                	test   al,al
ffff80000080de8e:	74 19                	je     ffff80000080dea9 <brelse+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:171
        bflush(bh);
ffff80000080de90:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080de94:	48 89 c7             	mov    rdi,rax
ffff80000080de97:	49 89 df             	mov    r15,rbx
ffff80000080de9a:	48 b8 97 fe ee ff ff 	movabs rax,0xffffffffffeefe97
ffff80000080dea1:	ff ff ff 
ffff80000080dea4:	48 01 d8             	add    rax,rbx
ffff80000080dea7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:172
    bh->count--;
ffff80000080dea9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080dead:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080deb1:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080deb4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080deb8:	88 50 14             	mov    BYTE PTR [rax+0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:173
    if(bh->count==0)
ffff80000080debb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080debf:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080dec3:	84 c0                	test   al,al
ffff80000080dec5:	75 68                	jne    ffff80000080df2f <brelse+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:175
    {
        if(bh->prev)
ffff80000080dec7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080decb:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080decf:	48 85 c0             	test   rax,rax
ffff80000080ded2:	74 14                	je     ffff80000080dee8 <brelse+0xd6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:176
            bh->prev->next=bh->next;
ffff80000080ded4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ded8:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080dedc:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080dee0:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080dee4:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:177
        if(bh->next)
ffff80000080dee8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080deec:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080def0:	48 85 c0             	test   rax,rax
ffff80000080def3:	74 14                	je     ffff80000080df09 <brelse+0xf7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:178
            bh->next->prev=bh->prev;
ffff80000080def5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080def9:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080defd:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080df01:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000080df05:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:179
        bh->dev=-1;
ffff80000080df09:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080df0d:	66 c7 40 10 ff ff    	mov    WORD PTR [rax+0x10],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:180
        kmfree(bh->data);
ffff80000080df13:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080df17:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080df1a:	48 89 c7             	mov    rdi,rax
ffff80000080df1d:	49 89 df             	mov    r15,rbx
ffff80000080df20:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff80000080df27:	ff ff ff 
ffff80000080df2a:	48 01 d8             	add    rax,rbx
ffff80000080df2d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:182
    }
    return 1;
ffff80000080df2f:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:183
ffff80000080df34:	48 83 c4 10          	add    rsp,0x10
ffff80000080df38:	5b                   	pop    rbx
ffff80000080df39:	41 5f                	pop    r15
ffff80000080df3b:	5d                   	pop    rbp
ffff80000080df3c:	c3                   	ret    

ffff80000080df3d <shift>:
shift():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:123
/* 0x5D - Apps      */ {  0,        0,       0x5D,      0x5D }
        };
char k_shift=0,k_ctrl=0,k_capslock=0;

void shift()
{
ffff80000080df3d:	f3 0f 1e fa          	endbr64 
ffff80000080df41:	55                   	push   rbp
ffff80000080df42:	48 89 e5             	mov    rbp,rsp
ffff80000080df45:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080df45 <shift+0x8>
ffff80000080df4c:	49 bb 8b fb 10 00 00 	movabs r11,0x10fb8b
ffff80000080df53:	00 00 00 
ffff80000080df56:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:124
    k_shift=!k_shift;
ffff80000080df59:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080df60:	ff ff ff 
ffff80000080df63:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080df67:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080df6a:	84 d2                	test   dl,dl
ffff80000080df6c:	0f 94 c2             	sete   dl
ffff80000080df6f:	89 d1                	mov    ecx,edx
ffff80000080df71:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080df78:	ff ff ff 
ffff80000080df7b:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080df7f:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:125
}
ffff80000080df81:	90                   	nop
ffff80000080df82:	5d                   	pop    rbp
ffff80000080df83:	c3                   	ret    

ffff80000080df84 <ctrl>:
ctrl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:127
void ctrl()
{
ffff80000080df84:	f3 0f 1e fa          	endbr64 
ffff80000080df88:	55                   	push   rbp
ffff80000080df89:	48 89 e5             	mov    rbp,rsp
ffff80000080df8c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080df8c <ctrl+0x8>
ffff80000080df93:	49 bb 44 fb 10 00 00 	movabs r11,0x10fb44
ffff80000080df9a:	00 00 00 
ffff80000080df9d:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:128
    k_ctrl=!k_ctrl;
ffff80000080dfa0:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff80000080dfa7:	ff ff ff 
ffff80000080dfaa:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080dfae:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080dfb1:	84 d2                	test   dl,dl
ffff80000080dfb3:	0f 94 c2             	sete   dl
ffff80000080dfb6:	89 d1                	mov    ecx,edx
ffff80000080dfb8:	48 ba 30 fd ff ff ff 	movabs rdx,0xfffffffffffffd30
ffff80000080dfbf:	ff ff ff 
ffff80000080dfc2:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080dfc6:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:129
}
ffff80000080dfc8:	90                   	nop
ffff80000080dfc9:	5d                   	pop    rbp
ffff80000080dfca:	c3                   	ret    

ffff80000080dfcb <capslock>:
capslock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:131
void capslock()
{
ffff80000080dfcb:	f3 0f 1e fa          	endbr64 
ffff80000080dfcf:	55                   	push   rbp
ffff80000080dfd0:	48 89 e5             	mov    rbp,rsp
ffff80000080dfd3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080dfd3 <capslock+0x8>
ffff80000080dfda:	49 bb fd fa 10 00 00 	movabs r11,0x10fafd
ffff80000080dfe1:	00 00 00 
ffff80000080dfe4:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:132
    k_capslock=k_capslock==0?1:0;
ffff80000080dfe7:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080dfee:	ff ff ff 
ffff80000080dff1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080dff5:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080dff8:	84 d2                	test   dl,dl
ffff80000080dffa:	0f 94 c2             	sete   dl
ffff80000080dffd:	89 d1                	mov    ecx,edx
ffff80000080dfff:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080e006:	ff ff ff 
ffff80000080e009:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080e00d:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:133
}
ffff80000080e00f:	90                   	nop
ffff80000080e010:	5d                   	pop    rbp
ffff80000080e011:	c3                   	ret    

ffff80000080e012 <to_ascii>:
to_ascii():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:135
char to_ascii(char scan_code)
{
ffff80000080e012:	f3 0f 1e fa          	endbr64 
ffff80000080e016:	55                   	push   rbp
ffff80000080e017:	48 89 e5             	mov    rbp,rsp
ffff80000080e01a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e01a <to_ascii+0x8>
ffff80000080e021:	49 bb b6 fa 10 00 00 	movabs r11,0x10fab6
ffff80000080e028:	00 00 00 
ffff80000080e02b:	4c 01 d8             	add    rax,r11
ffff80000080e02e:	89 fa                	mov    edx,edi
ffff80000080e030:	88 55 ec             	mov    BYTE PTR [rbp-0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
ffff80000080e033:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080e03a:	e9 25 01 00 00       	jmp    ffff80000080e164 <to_ascii+0x152>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:137
        if(key_map[i].scan_code==scan_code)
ffff80000080e03f:	48 be 90 d8 ff ff ff 	movabs rsi,0xffffffffffffd890
ffff80000080e046:	ff ff ff 
ffff80000080e049:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e04c:	48 63 ca             	movsxd rcx,edx
ffff80000080e04f:	48 89 ca             	mov    rdx,rcx
ffff80000080e052:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e056:	48 01 ca             	add    rdx,rcx
ffff80000080e059:	48 01 c2             	add    rdx,rax
ffff80000080e05c:	48 01 f2             	add    rdx,rsi
ffff80000080e05f:	48 83 c2 02          	add    rdx,0x2
ffff80000080e063:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e066:	38 55 ec             	cmp    BYTE PTR [rbp-0x14],dl
ffff80000080e069:	0f 85 f1 00 00 00    	jne    ffff80000080e160 <to_ascii+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139
        {
            if(k_capslock&&key_map[i].ascii>='a'&&key_map[i].ascii<='z')return key_map[i].ascii_shift;
ffff80000080e06f:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080e076:	ff ff ff 
ffff80000080e079:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e07d:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e080:	84 d2                	test   dl,dl
ffff80000080e082:	74 79                	je     ffff80000080e0fd <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 1)
ffff80000080e084:	48 be 90 d8 ff ff ff 	movabs rsi,0xffffffffffffd890
ffff80000080e08b:	ff ff ff 
ffff80000080e08e:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e091:	48 63 ca             	movsxd rcx,edx
ffff80000080e094:	48 01 c6             	add    rsi,rax
ffff80000080e097:	48 89 ca             	mov    rdx,rcx
ffff80000080e09a:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e09e:	48 01 ca             	add    rdx,rcx
ffff80000080e0a1:	48 01 f2             	add    rdx,rsi
ffff80000080e0a4:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e0a7:	80 fa 60             	cmp    dl,0x60
ffff80000080e0aa:	7e 51                	jle    ffff80000080e0fd <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 2)
ffff80000080e0ac:	48 be 90 d8 ff ff ff 	movabs rsi,0xffffffffffffd890
ffff80000080e0b3:	ff ff ff 
ffff80000080e0b6:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e0b9:	48 63 ca             	movsxd rcx,edx
ffff80000080e0bc:	48 01 c6             	add    rsi,rax
ffff80000080e0bf:	48 89 ca             	mov    rdx,rcx
ffff80000080e0c2:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e0c6:	48 01 ca             	add    rdx,rcx
ffff80000080e0c9:	48 01 f2             	add    rdx,rsi
ffff80000080e0cc:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e0cf:	80 fa 7a             	cmp    dl,0x7a
ffff80000080e0d2:	7f 29                	jg     ffff80000080e0fd <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 3)
ffff80000080e0d4:	48 be 90 d8 ff ff ff 	movabs rsi,0xffffffffffffd890
ffff80000080e0db:	ff ff ff 
ffff80000080e0de:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e0e1:	48 63 ca             	movsxd rcx,edx
ffff80000080e0e4:	48 89 ca             	mov    rdx,rcx
ffff80000080e0e7:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e0eb:	48 01 ca             	add    rdx,rcx
ffff80000080e0ee:	48 01 d0             	add    rax,rdx
ffff80000080e0f1:	48 01 f0             	add    rax,rsi
ffff80000080e0f4:	48 83 c0 01          	add    rax,0x1
ffff80000080e0f8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080e0fb:	eb 76                	jmp    ffff80000080e173 <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:140
            else if(k_shift)return key_map[i].ascii_shift;
ffff80000080e0fd:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080e104:	ff ff ff 
ffff80000080e107:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e10b:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080e10e:	84 d2                	test   dl,dl
ffff80000080e110:	74 29                	je     ffff80000080e13b <to_ascii+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:140 (discriminator 1)
ffff80000080e112:	48 be 90 d8 ff ff ff 	movabs rsi,0xffffffffffffd890
ffff80000080e119:	ff ff ff 
ffff80000080e11c:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e11f:	48 63 ca             	movsxd rcx,edx
ffff80000080e122:	48 89 ca             	mov    rdx,rcx
ffff80000080e125:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080e129:	48 01 ca             	add    rdx,rcx
ffff80000080e12c:	48 01 d0             	add    rax,rdx
ffff80000080e12f:	48 01 f0             	add    rax,rsi
ffff80000080e132:	48 83 c0 01          	add    rax,0x1
ffff80000080e136:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080e139:	eb 38                	jmp    ffff80000080e173 <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:141
            else return key_map[i].ascii;
ffff80000080e13b:	48 b9 90 d8 ff ff ff 	movabs rcx,0xffffffffffffd890
ffff80000080e142:	ff ff ff 
ffff80000080e145:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080e148:	48 63 d2             	movsxd rdx,edx
ffff80000080e14b:	48 01 c1             	add    rcx,rax
ffff80000080e14e:	48 89 d0             	mov    rax,rdx
ffff80000080e151:	48 c1 e0 02          	shl    rax,0x2
ffff80000080e155:	48 01 d0             	add    rax,rdx
ffff80000080e158:	48 01 c8             	add    rax,rcx
ffff80000080e15b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080e15e:	eb 13                	jmp    ffff80000080e173 <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136 (discriminator 2)
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
ffff80000080e160:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136 (discriminator 1)
ffff80000080e164:	83 7d fc 5d          	cmp    DWORD PTR [rbp-0x4],0x5d
ffff80000080e168:	0f 8e d1 fe ff ff    	jle    ffff80000080e03f <to_ascii+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:144
        }

    return '\0';
ffff80000080e16e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:145
}
ffff80000080e173:	5d                   	pop    rbp
ffff80000080e174:	c3                   	ret    

ffff80000080e175 <init_kb>:
init_kb():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:147
int init_kb()
{
ffff80000080e175:	f3 0f 1e fa          	endbr64 
ffff80000080e179:	55                   	push   rbp
ffff80000080e17a:	48 89 e5             	mov    rbp,rsp
ffff80000080e17d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e17d <init_kb+0x8>
ffff80000080e184:	49 bb 53 f9 10 00 00 	movabs r11,0x10f953
ffff80000080e18b:	00 00 00 
ffff80000080e18e:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:148
}
ffff80000080e191:	90                   	nop
ffff80000080e192:	5d                   	pop    rbp
ffff80000080e193:	c3                   	ret    

ffff80000080e194 <key_proc>:
key_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:150
int key_proc()
{
ffff80000080e194:	f3 0f 1e fa          	endbr64 
ffff80000080e198:	55                   	push   rbp
ffff80000080e199:	48 89 e5             	mov    rbp,rsp
ffff80000080e19c:	41 57                	push   r15
ffff80000080e19e:	53                   	push   rbx
ffff80000080e19f:	48 83 ec 20          	sub    rsp,0x20
ffff80000080e1a3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e1a3 <key_proc+0xf>
ffff80000080e1aa:	49 bb 2d f9 10 00 00 	movabs r11,0x10f92d
ffff80000080e1b1:	00 00 00 
ffff80000080e1b4:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:151
    asm volatile("cli");
ffff80000080e1b7:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:153
    //获取完整的扫描码
    u8 scan1=0,scan2=0,ch=0;
ffff80000080e1b8:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
ffff80000080e1bc:	c6 45 ee 00          	mov    BYTE PTR [rbp-0x12],0x0
ffff80000080e1c0:	c6 45 ed 00          	mov    BYTE PTR [rbp-0x13],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:155
    key_code tmpc;
    scan1=inb(0x60);
ffff80000080e1c4:	bf 60 00 00 00       	mov    edi,0x60
ffff80000080e1c9:	49 89 df             	mov    r15,rbx
ffff80000080e1cc:	48 b8 a9 a2 ee ff ff 	movabs rax,0xffffffffffeea2a9
ffff80000080e1d3:	ff ff ff 
ffff80000080e1d6:	48 01 d8             	add    rax,rbx
ffff80000080e1d9:	ff d0                	call   rax
ffff80000080e1db:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:167
//    tmpc.scan_code2=scan2;
//    tmpc.ascii= ch;


//    ENQUEUE(key_bufq,tmpc)
    if((key_bufq.tail+1)%key_bufq.size!=key_bufq.head)
ffff80000080e1de:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e1e5:	ff ff ff 
ffff80000080e1e8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e1ec:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e1ef:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080e1f2:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e1f9:	ff ff ff 
ffff80000080e1fc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e200:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080e203:	89 d0                	mov    eax,edx
ffff80000080e205:	99                   	cdq    
ffff80000080e206:	f7 f9                	idiv   ecx
ffff80000080e208:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e20f:	ff ff ff 
ffff80000080e212:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e216:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e219:	39 c2                	cmp    edx,eax
ffff80000080e21b:	74 68                	je     ffff80000080e285 <key_proc+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:169
    {
        key_bufq.data[key_bufq.tail]=scan1;
ffff80000080e21d:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e224:	ff ff ff 
ffff80000080e227:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e22b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080e22e:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e235:	ff ff ff 
ffff80000080e238:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e23c:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e23f:	48 98                	cdqe   
ffff80000080e241:	48 01 c2             	add    rdx,rax
ffff80000080e244:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e248:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:170
        key_bufq.tail=(key_bufq.tail+1)%key_bufq.size;
ffff80000080e24a:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e251:	ff ff ff 
ffff80000080e254:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e258:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e25b:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080e25e:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e265:	ff ff ff 
ffff80000080e268:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e26c:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080e26f:	89 d0                	mov    eax,edx
ffff80000080e271:	99                   	cdq    
ffff80000080e272:	f7 f9                	idiv   ecx
ffff80000080e274:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e27b:	ff ff ff 
ffff80000080e27e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e282:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:173
    }

    if(scan1==0x48)
ffff80000080e285:	80 7d ef 48          	cmp    BYTE PTR [rbp-0x11],0x48
ffff80000080e289:	75 17                	jne    ffff80000080e2a2 <key_proc+0x10e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:174
        scr_up();
ffff80000080e28b:	49 89 df             	mov    r15,rbx
ffff80000080e28e:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e293:	48 ba bb cd ee ff ff 	movabs rdx,0xffffffffffeecdbb
ffff80000080e29a:	ff ff ff 
ffff80000080e29d:	48 01 da             	add    rdx,rbx
ffff80000080e2a0:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:175
    if(scan1==0x50)
ffff80000080e2a2:	80 7d ef 50          	cmp    BYTE PTR [rbp-0x11],0x50
ffff80000080e2a6:	75 17                	jne    ffff80000080e2bf <key_proc+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:176
        scr_down();
ffff80000080e2a8:	49 89 df             	mov    r15,rbx
ffff80000080e2ab:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e2b0:	48 ba b3 ce ee ff ff 	movabs rdx,0xffffffffffeeceb3
ffff80000080e2b7:	ff ff ff 
ffff80000080e2ba:	48 01 da             	add    rdx,rbx
ffff80000080e2bd:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:177
    switch (scan1)
ffff80000080e2bf:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e2c3:	3d b6 00 00 00       	cmp    eax,0xb6
ffff80000080e2c8:	74 45                	je     ffff80000080e30f <key_proc+0x17b>
ffff80000080e2ca:	3d b6 00 00 00       	cmp    eax,0xb6
ffff80000080e2cf:	0f 8f 85 00 00 00    	jg     ffff80000080e35a <key_proc+0x1c6>
ffff80000080e2d5:	3d aa 00 00 00       	cmp    eax,0xaa
ffff80000080e2da:	74 33                	je     ffff80000080e30f <key_proc+0x17b>
ffff80000080e2dc:	3d aa 00 00 00       	cmp    eax,0xaa
ffff80000080e2e1:	7f 77                	jg     ffff80000080e35a <key_proc+0x1c6>
ffff80000080e2e3:	3d 9d 00 00 00       	cmp    eax,0x9d
ffff80000080e2e8:	74 3e                	je     ffff80000080e328 <key_proc+0x194>
ffff80000080e2ea:	3d 9d 00 00 00       	cmp    eax,0x9d
ffff80000080e2ef:	7f 69                	jg     ffff80000080e35a <key_proc+0x1c6>
ffff80000080e2f1:	83 f8 3a             	cmp    eax,0x3a
ffff80000080e2f4:	74 4b                	je     ffff80000080e341 <key_proc+0x1ad>
ffff80000080e2f6:	83 f8 3a             	cmp    eax,0x3a
ffff80000080e2f9:	7f 5f                	jg     ffff80000080e35a <key_proc+0x1c6>
ffff80000080e2fb:	83 f8 36             	cmp    eax,0x36
ffff80000080e2fe:	74 0f                	je     ffff80000080e30f <key_proc+0x17b>
ffff80000080e300:	83 f8 36             	cmp    eax,0x36
ffff80000080e303:	7f 55                	jg     ffff80000080e35a <key_proc+0x1c6>
ffff80000080e305:	83 f8 1d             	cmp    eax,0x1d
ffff80000080e308:	74 1e                	je     ffff80000080e328 <key_proc+0x194>
ffff80000080e30a:	83 f8 2a             	cmp    eax,0x2a
ffff80000080e30d:	75 4b                	jne    ffff80000080e35a <key_proc+0x1c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:183
    {
        case 0x36:
        case 0x2a:
        case 0xaa:
        case 0xb6:
            shift();
ffff80000080e30f:	49 89 df             	mov    r15,rbx
ffff80000080e312:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e317:	48 ba 6d 04 ef ff ff 	movabs rdx,0xffffffffffef046d
ffff80000080e31e:	ff ff ff 
ffff80000080e321:	48 01 da             	add    rdx,rbx
ffff80000080e324:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:184
            break;
ffff80000080e326:	eb 33                	jmp    ffff80000080e35b <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:187
        case 0x1d:
        case 0x9d:
            ctrl();
ffff80000080e328:	49 89 df             	mov    r15,rbx
ffff80000080e32b:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e330:	48 ba b4 04 ef ff ff 	movabs rdx,0xffffffffffef04b4
ffff80000080e337:	ff ff ff 
ffff80000080e33a:	48 01 da             	add    rdx,rbx
ffff80000080e33d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:188
            break;
ffff80000080e33f:	eb 1a                	jmp    ffff80000080e35b <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:190
        case 0x3a:
            capslock();
ffff80000080e341:	49 89 df             	mov    r15,rbx
ffff80000080e344:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e349:	48 ba fb 04 ef ff ff 	movabs rdx,0xffffffffffef04fb
ffff80000080e350:	ff ff ff 
ffff80000080e353:	48 01 da             	add    rdx,rbx
ffff80000080e356:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:191
            break;
ffff80000080e358:	eb 01                	jmp    ffff80000080e35b <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:193
        default:
            break;
ffff80000080e35a:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:196
    }
    //发送到std
    if(!(scan1&FLAG_BREAK)){
ffff80000080e35b:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e35f:	84 c0                	test   al,al
ffff80000080e361:	78 51                	js     ffff80000080e3b4 <key_proc+0x220>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:197
        char ch= to_ascii(scan1);
ffff80000080e363:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080e367:	0f be c0             	movsx  eax,al
ffff80000080e36a:	89 c7                	mov    edi,eax
ffff80000080e36c:	49 89 df             	mov    r15,rbx
ffff80000080e36f:	48 b8 42 05 ef ff ff 	movabs rax,0xffffffffffef0542
ffff80000080e376:	ff ff ff 
ffff80000080e379:	48 01 d8             	add    rax,rbx
ffff80000080e37c:	ff d0                	call   rax
ffff80000080e37e:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:198
        unsigned long args[]={(unsigned long) &ch, 1};
ffff80000080e381:	48 8d 45 e7          	lea    rax,[rbp-0x19]
ffff80000080e385:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffff80000080e389:	48 c7 45 d8 01 00 00 	mov    QWORD PTR [rbp-0x28],0x1
ffff80000080e390:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:200
        //写入stdin
        sys_ioctl(0,TTY_WSTDIN,(unsigned long)args);
ffff80000080e391:	48 8d 45 d0          	lea    rax,[rbp-0x30]
ffff80000080e395:	48 89 c2             	mov    rdx,rax
ffff80000080e398:	be 03 00 00 00       	mov    esi,0x3
ffff80000080e39d:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080e3a2:	49 89 df             	mov    r15,rbx
ffff80000080e3a5:	48 b8 a1 a1 ee ff ff 	movabs rax,0xffffffffffeea1a1
ffff80000080e3ac:	ff ff ff 
ffff80000080e3af:	48 01 d8             	add    rax,rbx
ffff80000080e3b2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:219
//        //logf("%x\n",stdin.w_ptr);
//        //print_stdin();
//        //printchar(ch);
//        //flush_screen(0);*/
//    }
    eoi();
ffff80000080e3b4:	49 89 df             	mov    r15,rbx
ffff80000080e3b7:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e3bc:	48 ba be a2 ee ff ff 	movabs rdx,0xffffffffffeea2be
ffff80000080e3c3:	ff ff ff 
ffff80000080e3c6:	48 01 da             	add    rdx,rbx
ffff80000080e3c9:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:220
    asm volatile("leave\r\n iretq");
ffff80000080e3cb:	c9                   	leave  
ffff80000080e3cc:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:221
}
ffff80000080e3ce:	90                   	nop
ffff80000080e3cf:	48 83 c4 20          	add    rsp,0x20
ffff80000080e3d3:	5b                   	pop    rbx
ffff80000080e3d4:	41 5f                	pop    r15
ffff80000080e3d6:	5d                   	pop    rbp
ffff80000080e3d7:	c3                   	ret    

ffff80000080e3d8 <sys_analyse_key>:
sys_analyse_key():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:224

char sys_analyse_key()
{
ffff80000080e3d8:	f3 0f 1e fa          	endbr64 
ffff80000080e3dc:	55                   	push   rbp
ffff80000080e3dd:	48 89 e5             	mov    rbp,rsp
ffff80000080e3e0:	41 57                	push   r15
ffff80000080e3e2:	53                   	push   rbx
ffff80000080e3e3:	48 83 ec 30          	sub    rsp,0x30
ffff80000080e3e7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e3e7 <sys_analyse_key+0xf>
ffff80000080e3ee:	49 bb e9 f6 10 00 00 	movabs r11,0x10f6e9
ffff80000080e3f5:	00 00 00 
ffff80000080e3f8:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:225
    if(key_bufq.tail==key_bufq.head)return -1;
ffff80000080e3fb:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e402:	ff ff ff 
ffff80000080e405:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e409:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff80000080e40c:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e413:	ff ff ff 
ffff80000080e416:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e41a:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e41d:	39 c2                	cmp    edx,eax
ffff80000080e41f:	75 0a                	jne    ffff80000080e42b <sys_analyse_key+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:225 (discriminator 1)
ffff80000080e421:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080e426:	e9 b1 01 00 00       	jmp    ffff80000080e5dc <sys_analyse_key+0x204>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:226
    char c=key_buf[key_bufq.head];
ffff80000080e42b:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e432:	ff ff ff 
ffff80000080e435:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e439:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e43c:	48 ba 88 fd ff ff ff 	movabs rdx,0xfffffffffffffd88
ffff80000080e443:	ff ff ff 
ffff80000080e446:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080e44a:	48 98                	cdqe   
ffff80000080e44c:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080e450:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:227
    key_bufq.head=(key_bufq.head+1)%key_bufq.size;
ffff80000080e453:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e45a:	ff ff ff 
ffff80000080e45d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e461:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080e464:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080e467:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e46e:	ff ff ff 
ffff80000080e471:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e475:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080e478:	89 d0                	mov    eax,edx
ffff80000080e47a:	99                   	cdq    
ffff80000080e47b:	f7 f9                	idiv   ecx
ffff80000080e47d:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080e484:	ff ff ff 
ffff80000080e487:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e48b:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:229
//    QHEAD(key_bufq)=(QHEAD(key_bufq)+1)%QSIZE(key_bufq);
    printf("scan code:");
ffff80000080e48e:	48 b8 66 da ff ff ff 	movabs rax,0xffffffffffffda66
ffff80000080e495:	ff ff ff 
ffff80000080e498:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e49c:	48 89 c7             	mov    rdi,rax
ffff80000080e49f:	49 89 df             	mov    r15,rbx
ffff80000080e4a2:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e4a7:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff80000080e4ae:	ff ff ff 
ffff80000080e4b1:	48 01 da             	add    rdx,rbx
ffff80000080e4b4:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:230
    char res[33]={0};
ffff80000080e4b6:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080e4bd:	00 
ffff80000080e4be:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080e4c5:	00 
ffff80000080e4c6:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080e4cd:	00 
ffff80000080e4ce:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080e4d5:	00 
ffff80000080e4d6:	c6 45 e0 00          	mov    BYTE PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:231
    itoa(res,16,c);
ffff80000080e4da:	0f be 55 ef          	movsx  edx,BYTE PTR [rbp-0x11]
ffff80000080e4de:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffff80000080e4e2:	be 10 00 00 00       	mov    esi,0x10
ffff80000080e4e7:	48 89 c7             	mov    rdi,rax
ffff80000080e4ea:	49 89 df             	mov    r15,rbx
ffff80000080e4ed:	48 b8 a9 3a ee ff ff 	movabs rax,0xffffffffffee3aa9
ffff80000080e4f4:	ff ff ff 
ffff80000080e4f7:	48 01 d8             	add    rax,rbx
ffff80000080e4fa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:232
    printf(res);
ffff80000080e4fc:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffff80000080e500:	48 89 c7             	mov    rdi,rax
ffff80000080e503:	49 89 df             	mov    r15,rbx
ffff80000080e506:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e50b:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff80000080e512:	ff ff ff 
ffff80000080e515:	48 01 da             	add    rdx,rbx
ffff80000080e518:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:233
    if(c&FLAG_BREAK){
ffff80000080e51a:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffff80000080e51e:	79 32                	jns    ffff80000080e552 <sys_analyse_key+0x17a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:234
        printf("\n");
ffff80000080e520:	48 b8 71 da ff ff ff 	movabs rax,0xffffffffffffda71
ffff80000080e527:	ff ff ff 
ffff80000080e52a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e52e:	48 89 c7             	mov    rdi,rax
ffff80000080e531:	49 89 df             	mov    r15,rbx
ffff80000080e534:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e539:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff80000080e540:	ff ff ff 
ffff80000080e543:	48 01 da             	add    rdx,rbx
ffff80000080e546:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:235
        return -1;
ffff80000080e548:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080e54d:	e9 8a 00 00 00       	jmp    ffff80000080e5dc <sys_analyse_key+0x204>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:237
    }
    c= to_ascii(c&0x7f);
ffff80000080e552:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff80000080e556:	83 e0 7f             	and    eax,0x7f
ffff80000080e559:	89 c7                	mov    edi,eax
ffff80000080e55b:	49 89 df             	mov    r15,rbx
ffff80000080e55e:	48 b8 42 05 ef ff ff 	movabs rax,0xffffffffffef0542
ffff80000080e565:	ff ff ff 
ffff80000080e568:	48 01 d8             	add    rax,rbx
ffff80000080e56b:	ff d0                	call   rax
ffff80000080e56d:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:238
    printf(" char:");
ffff80000080e570:	48 b8 73 da ff ff ff 	movabs rax,0xffffffffffffda73
ffff80000080e577:	ff ff ff 
ffff80000080e57a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e57e:	48 89 c7             	mov    rdi,rax
ffff80000080e581:	49 89 df             	mov    r15,rbx
ffff80000080e584:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e589:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff80000080e590:	ff ff ff 
ffff80000080e593:	48 01 da             	add    rdx,rbx
ffff80000080e596:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:239
    putchar(c);
ffff80000080e598:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff80000080e59c:	89 c7                	mov    edi,eax
ffff80000080e59e:	49 89 df             	mov    r15,rbx
ffff80000080e5a1:	48 b8 d2 3b ee ff ff 	movabs rax,0xffffffffffee3bd2
ffff80000080e5a8:	ff ff ff 
ffff80000080e5ab:	48 01 d8             	add    rax,rbx
ffff80000080e5ae:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:240
    printf("\n");
ffff80000080e5b0:	48 b8 71 da ff ff ff 	movabs rax,0xffffffffffffda71
ffff80000080e5b7:	ff ff ff 
ffff80000080e5ba:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e5be:	48 89 c7             	mov    rdi,rax
ffff80000080e5c1:	49 89 df             	mov    r15,rbx
ffff80000080e5c4:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e5c9:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff80000080e5d0:	ff ff ff 
ffff80000080e5d3:	48 01 da             	add    rdx,rbx
ffff80000080e5d6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:241
    return c;
ffff80000080e5d8:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:242 (discriminator 1)
ffff80000080e5dc:	48 83 c4 30          	add    rsp,0x30
ffff80000080e5e0:	5b                   	pop    rbx
ffff80000080e5e1:	41 5f                	pop    r15
ffff80000080e5e3:	5d                   	pop    rbp
ffff80000080e5e4:	c3                   	ret    

ffff80000080e5e5 <init_disk>:
init_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:20
struct blk_dev bd_hd={
    .do_request=hd_do_req
};
int dev_hd=-1,last_chk_res=0;
int init_disk()
{
ffff80000080e5e5:	f3 0f 1e fa          	endbr64 
ffff80000080e5e9:	55                   	push   rbp
ffff80000080e5ea:	48 89 e5             	mov    rbp,rsp
ffff80000080e5ed:	41 57                	push   r15
ffff80000080e5ef:	53                   	push   rbx
ffff80000080e5f0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e5f0 <init_disk+0xb>
ffff80000080e5f7:	49 bb e0 f4 10 00 00 	movabs r11,0x10f4e0
ffff80000080e5fe:	00 00 00 
ffff80000080e601:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:21
    if((dev_hd= reg_blkdev(&bd_hd))<0)
ffff80000080e604:	48 b8 98 fd ff ff ff 	movabs rax,0xfffffffffffffd98
ffff80000080e60b:	ff ff ff 
ffff80000080e60e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e612:	48 89 c7             	mov    rdi,rax
ffff80000080e615:	49 89 df             	mov    r15,rbx
ffff80000080e618:	48 b8 d8 f6 ee ff ff 	movabs rax,0xffffffffffeef6d8
ffff80000080e61f:	ff ff ff 
ffff80000080e622:	48 01 d8             	add    rax,rbx
ffff80000080e625:	ff d0                	call   rax
ffff80000080e627:	48 ba 10 ff ff ff ff 	movabs rdx,0xffffffffffffff10
ffff80000080e62e:	ff ff ff 
ffff80000080e631:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080e635:	89 02                	mov    DWORD PTR [rdx],eax
ffff80000080e637:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff80000080e63e:	ff ff ff 
ffff80000080e641:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e645:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080e647:	85 c0                	test   eax,eax
ffff80000080e649:	79 07                	jns    ffff80000080e652 <init_disk+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:22
        return -1;
ffff80000080e64b:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080e650:	eb 05                	jmp    ffff80000080e657 <init_disk+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:27
    //disk_devi= reg_device(&dev_disk);
    //disk_drvi= reg_driver(&drv_disk);
    //dev_disk.drv=&drv_disk;
    // hd_iterate();
    return 0;
ffff80000080e652:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:28
}
ffff80000080e657:	5b                   	pop    rbx
ffff80000080e658:	41 5f                	pop    r15
ffff80000080e65a:	5d                   	pop    rbp
ffff80000080e65b:	c3                   	ret    

ffff80000080e65c <disk_int_handler_c>:
disk_int_handler_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:31

int disk_int_handler_c()
{
ffff80000080e65c:	f3 0f 1e fa          	endbr64 
ffff80000080e660:	55                   	push   rbp
ffff80000080e661:	48 89 e5             	mov    rbp,rsp
ffff80000080e664:	41 57                	push   r15
ffff80000080e666:	53                   	push   rbx
ffff80000080e667:	48 83 ec 30          	sub    rsp,0x30
ffff80000080e66b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e66b <disk_int_handler_c+0xf>
ffff80000080e672:	49 bb 65 f4 10 00 00 	movabs r11,0x10f465
ffff80000080e679:	00 00 00 
ffff80000080e67c:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:32
    if(r_running==NULL)
ffff80000080e67f:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e686:	ff ff ff 
ffff80000080e689:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e68d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e690:	48 85 c0             	test   rax,rax
ffff80000080e693:	75 32                	jne    ffff80000080e6c7 <disk_int_handler_c+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:34
    {
        comprintf("err:null running dreq\n");
ffff80000080e695:	48 b8 7a da ff ff ff 	movabs rax,0xffffffffffffda7a
ffff80000080e69c:	ff ff ff 
ffff80000080e69f:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e6a3:	48 89 c7             	mov    rdi,rax
ffff80000080e6a6:	49 89 df             	mov    r15,rbx
ffff80000080e6a9:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e6ae:	48 ba 23 4c ef ff ff 	movabs rdx,0xffffffffffef4c23
ffff80000080e6b5:	ff ff ff 
ffff80000080e6b8:	48 01 da             	add    rdx,rbx
ffff80000080e6bb:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:35
        return 1;//同步读写硬盘
ffff80000080e6bd:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080e6c2:	e9 20 03 00 00       	jmp    ffff80000080e9e7 <disk_int_handler_c+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:37
    }
    short *p=r_running->buffer;
ffff80000080e6c7:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e6ce:	ff ff ff 
ffff80000080e6d1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e6d5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e6d8:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080e6dc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:38
    int port=PORT_DISK_MAJOR;
ffff80000080e6e0:	c7 45 e4 f0 01 00 00 	mov    DWORD PTR [rbp-0x1c],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:39
    if(BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_MAJOR||\
ffff80000080e6e7:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e6ee:	ff ff ff 
ffff80000080e6f1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e6f5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e6f8:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080e6fb:	0f b7 c0             	movzx  eax,ax
ffff80000080e6fe:	83 e0 0f             	and    eax,0xf
ffff80000080e701:	83 f8 02             	cmp    eax,0x2
ffff80000080e704:	74 1f                	je     ffff80000080e725 <disk_int_handler_c+0xc9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:40 (discriminator 1)
    BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_SLAVE)
ffff80000080e706:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e70d:	ff ff ff 
ffff80000080e710:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e714:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e717:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080e71a:	0f b7 c0             	movzx  eax,ax
ffff80000080e71d:	83 e0 0f             	and    eax,0xf
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:39 (discriminator 1)
    if(BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_MAJOR||\
ffff80000080e720:	83 f8 03             	cmp    eax,0x3
ffff80000080e723:	75 07                	jne    ffff80000080e72c <disk_int_handler_c+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:41
        port=PORT_DISK_SLAVE;
ffff80000080e725:	c7 45 e4 70 01 00 00 	mov    DWORD PTR [rbp-0x1c],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:42
    if(r_running->cmd==BLKDEV_REQ_READ)
ffff80000080e72c:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e733:	ff ff ff 
ffff80000080e736:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e73a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e73d:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080e740:	85 c0                	test   eax,eax
ffff80000080e742:	75 61                	jne    ffff80000080e7a5 <disk_int_handler_c+0x149>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46
    {
        ////printf("sys_read dist:%x\n",p);
        //读取
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080e744:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000080e74b:	eb 2f                	jmp    ffff80000080e77c <disk_int_handler_c+0x120>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:48 (discriminator 3)
        {
            *p++=inw(port);
ffff80000080e74d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e750:	0f b7 c0             	movzx  eax,ax
ffff80000080e753:	89 c7                	mov    edi,eax
ffff80000080e755:	49 89 df             	mov    r15,rbx
ffff80000080e758:	48 b8 b3 a2 ee ff ff 	movabs rax,0xffffffffffeea2b3
ffff80000080e75f:	ff ff ff 
ffff80000080e762:	48 01 d8             	add    rax,rbx
ffff80000080e765:	ff d0                	call   rax
ffff80000080e767:	89 c2                	mov    edx,eax
ffff80000080e769:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e76d:	48 8d 48 02          	lea    rcx,[rax+0x2]
ffff80000080e771:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffff80000080e775:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46 (discriminator 3)
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080e778:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46 (discriminator 1)
ffff80000080e77c:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080e77f:	48 63 d0             	movsxd rdx,eax
ffff80000080e782:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e789:	ff ff ff 
ffff80000080e78c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e790:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e793:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080e797:	48 c1 e0 08          	shl    rax,0x8
ffff80000080e79b:	48 39 c2             	cmp    rdx,rax
ffff80000080e79e:	72 ad                	jb     ffff80000080e74d <disk_int_handler_c+0xf1>
ffff80000080e7a0:	e9 53 01 00 00       	jmp    ffff80000080e8f8 <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:50
        }
    }else if(r_running->cmd==BLKDEV_REQ_WRITE)
ffff80000080e7a5:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e7ac:	ff ff ff 
ffff80000080e7af:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e7b3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e7b6:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080e7b9:	83 f8 01             	cmp    eax,0x1
ffff80000080e7bc:	75 64                	jne    ffff80000080e822 <disk_int_handler_c+0x1c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52
    {
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080e7be:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080e7c5:	eb 32                	jmp    ffff80000080e7f9 <disk_int_handler_c+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:53 (discriminator 3)
            outw(port,*p++);
ffff80000080e7c7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e7cb:	48 8d 50 02          	lea    rdx,[rax+0x2]
ffff80000080e7cf:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080e7d3:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080e7d6:	0f b7 d0             	movzx  edx,ax
ffff80000080e7d9:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e7dc:	0f b7 c0             	movzx  eax,ax
ffff80000080e7df:	89 d6                	mov    esi,edx
ffff80000080e7e1:	89 c7                	mov    edi,eax
ffff80000080e7e3:	49 89 df             	mov    r15,rbx
ffff80000080e7e6:	48 b8 9d a2 ee ff ff 	movabs rax,0xffffffffffeea29d
ffff80000080e7ed:	ff ff ff 
ffff80000080e7f0:	48 01 d8             	add    rax,rbx
ffff80000080e7f3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52 (discriminator 3)
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080e7f5:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52 (discriminator 1)
ffff80000080e7f9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080e7fc:	48 63 d0             	movsxd rdx,eax
ffff80000080e7ff:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e806:	ff ff ff 
ffff80000080e809:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e80d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e810:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080e814:	48 c1 e0 08          	shl    rax,0x8
ffff80000080e818:	48 39 c2             	cmp    rdx,rax
ffff80000080e81b:	72 aa                	jb     ffff80000080e7c7 <disk_int_handler_c+0x16b>
ffff80000080e81d:	e9 d6 00 00 00       	jmp    ffff80000080e8f8 <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:54
    }else if(r_running->cmd==DISKREQ_CHECK)
ffff80000080e822:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e829:	ff ff ff 
ffff80000080e82c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e830:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e833:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080e836:	83 f8 02             	cmp    eax,0x2
ffff80000080e839:	75 54                	jne    ffff80000080e88f <disk_int_handler_c+0x233>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:56
    {
        char stat=inb(port+7);
ffff80000080e83b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e83e:	83 c0 07             	add    eax,0x7
ffff80000080e841:	0f b6 c0             	movzx  eax,al
ffff80000080e844:	89 c7                	mov    edi,eax
ffff80000080e846:	49 89 df             	mov    r15,rbx
ffff80000080e849:	48 b8 a9 a2 ee ff ff 	movabs rax,0xffffffffffeea2a9
ffff80000080e850:	ff ff ff 
ffff80000080e853:	48 01 d8             	add    rax,rbx
ffff80000080e856:	ff d0                	call   rax
ffff80000080e858:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:57
        short dat=inw(port);
ffff80000080e85b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e85e:	0f b7 c0             	movzx  eax,ax
ffff80000080e861:	89 c7                	mov    edi,eax
ffff80000080e863:	49 89 df             	mov    r15,rbx
ffff80000080e866:	48 b8 b3 a2 ee ff ff 	movabs rax,0xffffffffffeea2b3
ffff80000080e86d:	ff ff ff 
ffff80000080e870:	48 01 d8             	add    rax,rbx
ffff80000080e873:	ff d0                	call   rax
ffff80000080e875:	66 89 45 d4          	mov    WORD PTR [rbp-0x2c],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:60
        if(1)
        {
            last_chk_res=DISK_CHK_OK;
ffff80000080e879:	48 b8 b0 fd ff ff ff 	movabs rax,0xfffffffffffffdb0
ffff80000080e880:	ff ff ff 
ffff80000080e883:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e887:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
ffff80000080e88d:	eb 69                	jmp    ffff80000080e8f8 <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:67
        {
            char err=inb(port+1);//错误原因
            printf("checking disk err:%x\nresetting hd\n",err);
            last_chk_res=DISK_CHK_ERR;
        }
    }else if(r_running->cmd==DISKREQ_RESET)
ffff80000080e88f:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e896:	ff ff ff 
ffff80000080e899:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e89d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e8a0:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080e8a3:	83 f8 03             	cmp    eax,0x3
ffff80000080e8a6:	75 50                	jne    ffff80000080e8f8 <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:69
    {
        int stat=inb(port+7);
ffff80000080e8a8:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e8ab:	83 c0 07             	add    eax,0x7
ffff80000080e8ae:	0f b6 c0             	movzx  eax,al
ffff80000080e8b1:	89 c7                	mov    edi,eax
ffff80000080e8b3:	49 89 df             	mov    r15,rbx
ffff80000080e8b6:	48 b8 a9 a2 ee ff ff 	movabs rax,0xffffffffffeea2a9
ffff80000080e8bd:	ff ff ff 
ffff80000080e8c0:	48 01 d8             	add    rax,rbx
ffff80000080e8c3:	ff d0                	call   rax
ffff80000080e8c5:	0f b6 c0             	movzx  eax,al
ffff80000080e8c8:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:70
        printf("reset disk done.\nstat now:%x\n",stat);
ffff80000080e8cb:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080e8ce:	89 c6                	mov    esi,eax
ffff80000080e8d0:	48 b8 91 da ff ff ff 	movabs rax,0xffffffffffffda91
ffff80000080e8d7:	ff ff ff 
ffff80000080e8da:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e8de:	48 89 c7             	mov    rdi,rax
ffff80000080e8e1:	49 89 df             	mov    r15,rbx
ffff80000080e8e4:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e8e9:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff80000080e8f0:	ff ff ff 
ffff80000080e8f3:	48 01 da             	add    rdx,rbx
ffff80000080e8f6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:73
    }
    
    r_running=NULL;
ffff80000080e8f8:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff80000080e8ff:	ff ff ff 
ffff80000080e902:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e906:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:74
    end_request(dev_hd);
ffff80000080e90d:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff80000080e914:	ff ff ff 
ffff80000080e917:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e91b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080e91d:	0f b7 c0             	movzx  eax,ax
ffff80000080e920:	66 89 45 d2          	mov    WORD PTR [rbp-0x2e],ax
end_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:64
    int major=BLKDEV_MAJOR(dev);
ffff80000080e924:	0f b7 45 d2          	movzx  eax,WORD PTR [rbp-0x2e]
ffff80000080e928:	c1 f8 04             	sar    eax,0x4
ffff80000080e92b:	83 e0 0f             	and    eax,0xf
ffff80000080e92e:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:65
    blk_devs[major].current_request->dev=-1;
ffff80000080e931:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080e938:	ff ff ff 
ffff80000080e93b:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080e93f:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080e942:	48 98                	cdqe   
ffff80000080e944:	48 c1 e0 04          	shl    rax,0x4
ffff80000080e948:	48 01 d0             	add    rax,rdx
ffff80000080e94b:	48 83 c0 08          	add    rax,0x8
ffff80000080e94f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e952:	66 c7 00 ff ff       	mov    WORD PTR [rax],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:66
    blk_devs[major].current_request=blk_devs[major].current_request->next;
ffff80000080e957:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080e95e:	ff ff ff 
ffff80000080e961:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080e965:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080e968:	48 98                	cdqe   
ffff80000080e96a:	48 c1 e0 04          	shl    rax,0x4
ffff80000080e96e:	48 01 d0             	add    rax,rdx
ffff80000080e971:	48 83 c0 08          	add    rax,0x8
ffff80000080e975:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e978:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080e97c:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080e983:	ff ff ff 
ffff80000080e986:	48 8b 0c 13          	mov    rcx,QWORD PTR [rbx+rdx*1]
ffff80000080e98a:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080e98d:	48 63 d2             	movsxd rdx,edx
ffff80000080e990:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080e994:	48 01 ca             	add    rdx,rcx
ffff80000080e997:	48 83 c2 08          	add    rdx,0x8
ffff80000080e99b:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:67
}
ffff80000080e99e:	90                   	nop
disk_int_handler_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:76
    //执行下一个请求
    hd_do_req(blk_devs[dev_hd].current_request);
ffff80000080e99f:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff80000080e9a6:	ff ff ff 
ffff80000080e9a9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e9ad:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080e9af:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080e9b6:	ff ff ff 
ffff80000080e9b9:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080e9bd:	48 98                	cdqe   
ffff80000080e9bf:	48 c1 e0 04          	shl    rax,0x4
ffff80000080e9c3:	48 01 d0             	add    rax,rdx
ffff80000080e9c6:	48 83 c0 08          	add    rax,0x8
ffff80000080e9ca:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e9cd:	48 89 c7             	mov    rdi,rax
ffff80000080e9d0:	49 89 df             	mov    r15,rbx
ffff80000080e9d3:	48 b8 d4 14 ef ff ff 	movabs rax,0xffffffffffef14d4
ffff80000080e9da:	ff ff ff 
ffff80000080e9dd:	48 01 d8             	add    rax,rbx
ffff80000080e9e0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:77
    return 0;
ffff80000080e9e2:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:78
}
ffff80000080e9e7:	48 83 c4 30          	add    rsp,0x30
ffff80000080e9eb:	5b                   	pop    rbx
ffff80000080e9ec:	41 5f                	pop    r15
ffff80000080e9ee:	5d                   	pop    rbp
ffff80000080e9ef:	c3                   	ret    

ffff80000080e9f0 <async_reset_disk>:
async_reset_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:80
int async_reset_disk(int disk)
{
ffff80000080e9f0:	f3 0f 1e fa          	endbr64 
ffff80000080e9f4:	55                   	push   rbp
ffff80000080e9f5:	48 89 e5             	mov    rbp,rsp
ffff80000080e9f8:	41 57                	push   r15
ffff80000080e9fa:	48 83 ec 18          	sub    rsp,0x18
ffff80000080e9fe:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e9fe <async_reset_disk+0xe>
ffff80000080ea05:	49 bb d2 f0 10 00 00 	movabs r11,0x10f0d2
ffff80000080ea0c:	00 00 00 
ffff80000080ea0f:	4c 01 d8             	add    rax,r11
ffff80000080ea12:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:81
    outb(PORT_DISK_CONTROL,DISK_CMD_RESET);
ffff80000080ea15:	be 0c 00 00 00       	mov    esi,0xc
ffff80000080ea1a:	bf f6 03 00 00       	mov    edi,0x3f6
ffff80000080ea1f:	49 89 c7             	mov    r15,rax
ffff80000080ea22:	48 ba 90 a2 ee ff ff 	movabs rdx,0xffffffffffeea290
ffff80000080ea29:	ff ff ff 
ffff80000080ea2c:	48 01 c2             	add    rdx,rax
ffff80000080ea2f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:82
    return 0;
ffff80000080ea31:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:83
}
ffff80000080ea36:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080ea3a:	c9                   	leave  
ffff80000080ea3b:	c3                   	ret    

ffff80000080ea3c <async_read_disk>:
async_read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:85
int async_read_disk(int disk,unsigned int lba,int sec_n,char* mem_addr)
{
ffff80000080ea3c:	f3 0f 1e fa          	endbr64 
ffff80000080ea40:	55                   	push   rbp
ffff80000080ea41:	48 89 e5             	mov    rbp,rsp
ffff80000080ea44:	41 57                	push   r15
ffff80000080ea46:	53                   	push   rbx
ffff80000080ea47:	48 83 ec 30          	sub    rsp,0x30
ffff80000080ea4b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ea4b <async_read_disk+0xf>
ffff80000080ea52:	49 bb 85 f0 10 00 00 	movabs r11,0x10f085
ffff80000080ea59:	00 00 00 
ffff80000080ea5c:	4c 01 db             	add    rbx,r11
ffff80000080ea5f:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080ea62:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080ea65:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080ea68:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:86
    unsigned short port=PORT_DISK_MAJOR;
ffff80000080ea6c:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:87
    int slave_disk=0;
ffff80000080ea72:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:88
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080ea79:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080ea7d:	74 06                	je     ffff80000080ea85 <async_read_disk+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:88 (discriminator 1)
ffff80000080ea7f:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080ea83:	75 06                	jne    ffff80000080ea8b <async_read_disk+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:89
        port=PORT_DISK_SLAVE;
ffff80000080ea85:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:90
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
ffff80000080ea8b:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080ea8f:	74 06                	je     ffff80000080ea97 <async_read_disk+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:90 (discriminator 1)
ffff80000080ea91:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080ea95:	75 07                	jne    ffff80000080ea9e <async_read_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:91
        slave_disk=1;
ffff80000080ea97:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:92
    outb(port+2,sec_n);
ffff80000080ea9e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080eaa1:	0f b6 d0             	movzx  edx,al
ffff80000080eaa4:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eaa8:	83 c0 02             	add    eax,0x2
ffff80000080eaab:	0f b7 c0             	movzx  eax,ax
ffff80000080eaae:	89 d6                	mov    esi,edx
ffff80000080eab0:	89 c7                	mov    edi,eax
ffff80000080eab2:	49 89 df             	mov    r15,rbx
ffff80000080eab5:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff80000080eabc:	ff ff ff 
ffff80000080eabf:	48 01 d8             	add    rax,rbx
ffff80000080eac2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:93
    outb(port+3,lba&0xff);
ffff80000080eac4:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080eac7:	0f b6 d0             	movzx  edx,al
ffff80000080eaca:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eace:	83 c0 03             	add    eax,0x3
ffff80000080ead1:	0f b7 c0             	movzx  eax,ax
ffff80000080ead4:	89 d6                	mov    esi,edx
ffff80000080ead6:	89 c7                	mov    edi,eax
ffff80000080ead8:	49 89 df             	mov    r15,rbx
ffff80000080eadb:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff80000080eae2:	ff ff ff 
ffff80000080eae5:	48 01 d8             	add    rax,rbx
ffff80000080eae8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:94
    outb(port+4,(lba>>8)&0xff);
ffff80000080eaea:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080eaed:	c1 e8 08             	shr    eax,0x8
ffff80000080eaf0:	0f b6 d0             	movzx  edx,al
ffff80000080eaf3:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eaf7:	83 c0 04             	add    eax,0x4
ffff80000080eafa:	0f b7 c0             	movzx  eax,ax
ffff80000080eafd:	89 d6                	mov    esi,edx
ffff80000080eaff:	89 c7                	mov    edi,eax
ffff80000080eb01:	49 89 df             	mov    r15,rbx
ffff80000080eb04:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff80000080eb0b:	ff ff ff 
ffff80000080eb0e:	48 01 d8             	add    rax,rbx
ffff80000080eb11:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:95
    outb(port+5,(lba>>16)&0xff);
ffff80000080eb13:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080eb16:	c1 e8 10             	shr    eax,0x10
ffff80000080eb19:	0f b6 d0             	movzx  edx,al
ffff80000080eb1c:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eb20:	83 c0 05             	add    eax,0x5
ffff80000080eb23:	0f b7 c0             	movzx  eax,ax
ffff80000080eb26:	89 d6                	mov    esi,edx
ffff80000080eb28:	89 c7                	mov    edi,eax
ffff80000080eb2a:	49 89 df             	mov    r15,rbx
ffff80000080eb2d:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff80000080eb34:	ff ff ff 
ffff80000080eb37:	48 01 d8             	add    rax,rbx
ffff80000080eb3a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96
    char drv=slave_disk?0x10:0;
ffff80000080eb3c:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080eb40:	74 07                	je     ffff80000080eb49 <async_read_disk+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 1)
ffff80000080eb42:	b8 10 00 00 00       	mov    eax,0x10
ffff80000080eb47:	eb 05                	jmp    ffff80000080eb4e <async_read_disk+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 2)
ffff80000080eb49:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 4)
ffff80000080eb4e:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:97 (discriminator 4)
    char lba_hi=(lba>>24)&0xf|drv|0xe0;
ffff80000080eb51:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080eb54:	c1 e8 18             	shr    eax,0x18
ffff80000080eb57:	83 e0 0f             	and    eax,0xf
ffff80000080eb5a:	89 c2                	mov    edx,eax
ffff80000080eb5c:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffff80000080eb60:	09 d0                	or     eax,edx
ffff80000080eb62:	83 c8 e0             	or     eax,0xffffffe0
ffff80000080eb65:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:98 (discriminator 4)
    outb(port+6,lba_hi);
ffff80000080eb68:	0f b6 45 e6          	movzx  eax,BYTE PTR [rbp-0x1a]
ffff80000080eb6c:	0f b6 d0             	movzx  edx,al
ffff80000080eb6f:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eb73:	83 c0 06             	add    eax,0x6
ffff80000080eb76:	0f b7 c0             	movzx  eax,ax
ffff80000080eb79:	89 d6                	mov    esi,edx
ffff80000080eb7b:	89 c7                	mov    edi,eax
ffff80000080eb7d:	49 89 df             	mov    r15,rbx
ffff80000080eb80:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff80000080eb87:	ff ff ff 
ffff80000080eb8a:	48 01 d8             	add    rax,rbx
ffff80000080eb8d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:99 (discriminator 4)
    outb(port+7,DISK_CMD_READ);
ffff80000080eb8f:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eb93:	83 c0 07             	add    eax,0x7
ffff80000080eb96:	0f b7 c0             	movzx  eax,ax
ffff80000080eb99:	be 20 00 00 00       	mov    esi,0x20
ffff80000080eb9e:	89 c7                	mov    edi,eax
ffff80000080eba0:	49 89 df             	mov    r15,rbx
ffff80000080eba3:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff80000080ebaa:	ff ff ff 
ffff80000080ebad:	48 01 d8             	add    rax,rbx
ffff80000080ebb0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:119 (discriminator 4)
    // }
    // for(int i=0;i<running_req->sec_n*256;i++)
    // {
    //     *mem_addr++=inw(port);
    // }
    return 0;
ffff80000080ebb2:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:120 (discriminator 4)
}
ffff80000080ebb7:	48 83 c4 30          	add    rsp,0x30
ffff80000080ebbb:	5b                   	pop    rbx
ffff80000080ebbc:	41 5f                	pop    r15
ffff80000080ebbe:	5d                   	pop    rbp
ffff80000080ebbf:	c3                   	ret    

ffff80000080ebc0 <async_write_disk>:
async_write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:122
int async_write_disk(int disk,unsigned int lba, int sec_n, char* mem_ptr)
{
ffff80000080ebc0:	f3 0f 1e fa          	endbr64 
ffff80000080ebc4:	55                   	push   rbp
ffff80000080ebc5:	48 89 e5             	mov    rbp,rsp
ffff80000080ebc8:	41 57                	push   r15
ffff80000080ebca:	53                   	push   rbx
ffff80000080ebcb:	48 83 ec 30          	sub    rsp,0x30
ffff80000080ebcf:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ebcf <async_write_disk+0xf>
ffff80000080ebd6:	49 bb 01 ef 10 00 00 	movabs r11,0x10ef01
ffff80000080ebdd:	00 00 00 
ffff80000080ebe0:	4c 01 db             	add    rbx,r11
ffff80000080ebe3:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080ebe6:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080ebe9:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080ebec:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:123
    unsigned short port=PORT_DISK_MAJOR;
ffff80000080ebf0:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:124
    int slave_disk=0;
ffff80000080ebf6:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:125
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080ebfd:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080ec01:	74 06                	je     ffff80000080ec09 <async_write_disk+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:125 (discriminator 1)
ffff80000080ec03:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080ec07:	75 06                	jne    ffff80000080ec0f <async_write_disk+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:126
        port=PORT_DISK_SLAVE;
ffff80000080ec09:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:127
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
ffff80000080ec0f:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080ec13:	74 06                	je     ffff80000080ec1b <async_write_disk+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:127 (discriminator 1)
ffff80000080ec15:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080ec19:	75 07                	jne    ffff80000080ec22 <async_write_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:128
        slave_disk=1;
ffff80000080ec1b:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:131
    while (1)
    {
        byte t=inb(0x1f7);
ffff80000080ec22:	bf f7 00 00 00       	mov    edi,0xf7
ffff80000080ec27:	49 89 df             	mov    r15,rbx
ffff80000080ec2a:	48 b8 a9 a2 ee ff ff 	movabs rax,0xffffffffffeea2a9
ffff80000080ec31:	ff ff ff 
ffff80000080ec34:	48 01 d8             	add    rax,rbx
ffff80000080ec37:	ff d0                	call   rax
ffff80000080ec39:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:133
        //logf("istat:%x",t);
        byte err=t&1;
ffff80000080ec3c:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffff80000080ec40:	83 e0 01             	and    eax,0x1
ffff80000080ec43:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:134
        if(err!=0)
ffff80000080ec46:	80 7d e6 00          	cmp    BYTE PTR [rbp-0x1a],0x0
ffff80000080ec4a:	74 0a                	je     ffff80000080ec56 <async_write_disk+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:137
        {
            //printf("ERR iwriting disk\n");
            return -1;
ffff80000080ec4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080ec51:	e9 23 01 00 00       	jmp    ffff80000080ed79 <async_write_disk+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:139
        }
        t&=0x88;
ffff80000080ec56:	80 65 e7 88          	and    BYTE PTR [rbp-0x19],0x88
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
        if(t==0x8)break;
ffff80000080ec5a:	80 7d e7 08          	cmp    BYTE PTR [rbp-0x19],0x8
ffff80000080ec5e:	74 02                	je     ffff80000080ec62 <async_write_disk+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:130
    {
ffff80000080ec60:	eb c0                	jmp    ffff80000080ec22 <async_write_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
        if(t==0x8)break;
ffff80000080ec62:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:142
    }
    outb(port+2,sec_n);
ffff80000080ec63:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080ec66:	0f b6 d0             	movzx  edx,al
ffff80000080ec69:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ec6d:	83 c0 02             	add    eax,0x2
ffff80000080ec70:	0f b7 c0             	movzx  eax,ax
ffff80000080ec73:	89 d6                	mov    esi,edx
ffff80000080ec75:	89 c7                	mov    edi,eax
ffff80000080ec77:	49 89 df             	mov    r15,rbx
ffff80000080ec7a:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff80000080ec81:	ff ff ff 
ffff80000080ec84:	48 01 d8             	add    rax,rbx
ffff80000080ec87:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:143
    outb(port+3,lba&0xff);
ffff80000080ec89:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ec8c:	0f b6 d0             	movzx  edx,al
ffff80000080ec8f:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ec93:	83 c0 03             	add    eax,0x3
ffff80000080ec96:	0f b7 c0             	movzx  eax,ax
ffff80000080ec99:	89 d6                	mov    esi,edx
ffff80000080ec9b:	89 c7                	mov    edi,eax
ffff80000080ec9d:	49 89 df             	mov    r15,rbx
ffff80000080eca0:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff80000080eca7:	ff ff ff 
ffff80000080ecaa:	48 01 d8             	add    rax,rbx
ffff80000080ecad:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:144
    outb(port+4,(lba>>8)&0xff);
ffff80000080ecaf:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ecb2:	c1 e8 08             	shr    eax,0x8
ffff80000080ecb5:	0f b6 d0             	movzx  edx,al
ffff80000080ecb8:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ecbc:	83 c0 04             	add    eax,0x4
ffff80000080ecbf:	0f b7 c0             	movzx  eax,ax
ffff80000080ecc2:	89 d6                	mov    esi,edx
ffff80000080ecc4:	89 c7                	mov    edi,eax
ffff80000080ecc6:	49 89 df             	mov    r15,rbx
ffff80000080ecc9:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff80000080ecd0:	ff ff ff 
ffff80000080ecd3:	48 01 d8             	add    rax,rbx
ffff80000080ecd6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:145
    outb(port+5,(lba>>16)&0xff);
ffff80000080ecd8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ecdb:	c1 e8 10             	shr    eax,0x10
ffff80000080ecde:	0f b6 d0             	movzx  edx,al
ffff80000080ece1:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ece5:	83 c0 05             	add    eax,0x5
ffff80000080ece8:	0f b7 c0             	movzx  eax,ax
ffff80000080eceb:	89 d6                	mov    esi,edx
ffff80000080eced:	89 c7                	mov    edi,eax
ffff80000080ecef:	49 89 df             	mov    r15,rbx
ffff80000080ecf2:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff80000080ecf9:	ff ff ff 
ffff80000080ecfc:	48 01 d8             	add    rax,rbx
ffff80000080ecff:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146
    char drv=slave_disk?0x10:0;
ffff80000080ed01:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080ed05:	74 07                	je     ffff80000080ed0e <async_write_disk+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 1)
ffff80000080ed07:	b8 10 00 00 00       	mov    eax,0x10
ffff80000080ed0c:	eb 05                	jmp    ffff80000080ed13 <async_write_disk+0x153>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 2)
ffff80000080ed0e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 4)
ffff80000080ed13:	88 45 e5             	mov    BYTE PTR [rbp-0x1b],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:147 (discriminator 4)
    unsigned char lba_hi=(lba>>24)&0xf|drv|0xe0;
ffff80000080ed16:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ed19:	c1 e8 18             	shr    eax,0x18
ffff80000080ed1c:	83 e0 0f             	and    eax,0xf
ffff80000080ed1f:	89 c2                	mov    edx,eax
ffff80000080ed21:	0f b6 45 e5          	movzx  eax,BYTE PTR [rbp-0x1b]
ffff80000080ed25:	09 d0                	or     eax,edx
ffff80000080ed27:	83 c8 e0             	or     eax,0xffffffe0
ffff80000080ed2a:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:148 (discriminator 4)
    outb(port+6,lba_hi);
ffff80000080ed2d:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffff80000080ed31:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ed35:	83 c0 06             	add    eax,0x6
ffff80000080ed38:	0f b7 c0             	movzx  eax,ax
ffff80000080ed3b:	89 d6                	mov    esi,edx
ffff80000080ed3d:	89 c7                	mov    edi,eax
ffff80000080ed3f:	49 89 df             	mov    r15,rbx
ffff80000080ed42:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff80000080ed49:	ff ff ff 
ffff80000080ed4c:	48 01 d8             	add    rax,rbx
ffff80000080ed4f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:149 (discriminator 4)
    outb(port+7,DISK_CMD_WRITE);
ffff80000080ed51:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ed55:	83 c0 07             	add    eax,0x7
ffff80000080ed58:	0f b7 c0             	movzx  eax,ax
ffff80000080ed5b:	be 30 00 00 00       	mov    esi,0x30
ffff80000080ed60:	89 c7                	mov    edi,eax
ffff80000080ed62:	49 89 df             	mov    r15,rbx
ffff80000080ed65:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff80000080ed6c:	ff ff ff 
ffff80000080ed6f:	48 01 d8             	add    rax,rbx
ffff80000080ed72:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:166 (discriminator 4)
    //     if(t==0x8)break;
    // }
    // short *p=mem_ptr;
    // for(int i=0;i<running_req->sec_n*256;i++)
    //         outw(port,*p++);
    return 0;
ffff80000080ed74:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:167
}
ffff80000080ed79:	48 83 c4 30          	add    rsp,0x30
ffff80000080ed7d:	5b                   	pop    rbx
ffff80000080ed7e:	41 5f                	pop    r15
ffff80000080ed80:	5d                   	pop    rbp
ffff80000080ed81:	c3                   	ret    

ffff80000080ed82 <read_disk>:
read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:169
int read_disk(int disk, int lba, int secn, char *dest)
{
ffff80000080ed82:	f3 0f 1e fa          	endbr64 
ffff80000080ed86:	55                   	push   rbp
ffff80000080ed87:	48 89 e5             	mov    rbp,rsp
ffff80000080ed8a:	41 57                	push   r15
ffff80000080ed8c:	53                   	push   rbx
ffff80000080ed8d:	48 83 ec 30          	sub    rsp,0x30
ffff80000080ed91:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ed91 <read_disk+0xf>
ffff80000080ed98:	49 bb 3f ed 10 00 00 	movabs r11,0x10ed3f
ffff80000080ed9f:	00 00 00 
ffff80000080eda2:	4c 01 db             	add    rbx,r11
ffff80000080eda5:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080eda8:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080edab:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080edae:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:171
    // request(disk,DISKREQ_READ,lba,secn,dest);
    int ret=read_disk_asm(lba,secn,dest);
ffff80000080edb2:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080edb6:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff80000080edb9:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080edbc:	89 ce                	mov    esi,ecx
ffff80000080edbe:	89 c7                	mov    edi,eax
ffff80000080edc0:	49 89 df             	mov    r15,rbx
ffff80000080edc3:	48 b8 5c 16 ef ff ff 	movabs rax,0xffffffffffef165c
ffff80000080edca:	ff ff ff 
ffff80000080edcd:	48 01 d8             	add    rax,rbx
ffff80000080edd0:	ff d0                	call   rax
ffff80000080edd2:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:179

        // running_req->stat=REQ_STAT_DONE;
        // running_req->args->stat=REQ_STAT_EMPTY;
    }
    //set_proc_stat(running_req->pid,TASK_READY);
    running_req=NULL;
ffff80000080edd5:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080eddc:	ff ff ff 
ffff80000080eddf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ede3:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:180
    return ret;
ffff80000080edea:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:181
}
ffff80000080eded:	48 83 c4 30          	add    rsp,0x30
ffff80000080edf1:	5b                   	pop    rbx
ffff80000080edf2:	41 5f                	pop    r15
ffff80000080edf4:	5d                   	pop    rbp
ffff80000080edf5:	c3                   	ret    

ffff80000080edf6 <write_disk>:
write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:183
int write_disk(int disk, int lba, int secn, char *src)
{
ffff80000080edf6:	f3 0f 1e fa          	endbr64 
ffff80000080edfa:	55                   	push   rbp
ffff80000080edfb:	48 89 e5             	mov    rbp,rsp
ffff80000080edfe:	41 57                	push   r15
ffff80000080ee00:	53                   	push   rbx
ffff80000080ee01:	48 83 ec 30          	sub    rsp,0x30
ffff80000080ee05:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ee05 <write_disk+0xf>
ffff80000080ee0c:	49 bb cb ec 10 00 00 	movabs r11,0x10eccb
ffff80000080ee13:	00 00 00 
ffff80000080ee16:	4c 01 db             	add    rbx,r11
ffff80000080ee19:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080ee1c:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080ee1f:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080ee22:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:185
    // request(disk,DISKREQ_WRITE,lba,secn,src);
    int ret=write_disk_asm(lba,secn,src);
ffff80000080ee26:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ee2a:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff80000080ee2d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ee30:	89 ce                	mov    esi,ecx
ffff80000080ee32:	89 c7                	mov    edi,eax
ffff80000080ee34:	49 89 df             	mov    r15,rbx
ffff80000080ee37:	48 b8 d0 16 ef ff ff 	movabs rax,0xffffffffffef16d0
ffff80000080ee3e:	ff ff ff 
ffff80000080ee41:	48 01 d8             	add    rax,rbx
ffff80000080ee44:	ff d0                	call   rax
ffff80000080ee46:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:192
    if(running_req){

        // running_req->stat=REQ_STAT_DONE;
        // running_req->args->stat=REQ_STAT_EMPTY;
    }
    running_req=NULL;
ffff80000080ee49:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080ee50:	ff ff ff 
ffff80000080ee53:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ee57:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:193
    return ret;
ffff80000080ee5e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:194
}
ffff80000080ee61:	48 83 c4 30          	add    rsp,0x30
ffff80000080ee65:	5b                   	pop    rbx
ffff80000080ee66:	41 5f                	pop    r15
ffff80000080ee68:	5d                   	pop    rbp
ffff80000080ee69:	c3                   	ret    

ffff80000080ee6a <async_check_disk>:
async_check_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:198


int async_check_disk(int disk)
{
ffff80000080ee6a:	f3 0f 1e fa          	endbr64 
ffff80000080ee6e:	55                   	push   rbp
ffff80000080ee6f:	48 89 e5             	mov    rbp,rsp
ffff80000080ee72:	41 57                	push   r15
ffff80000080ee74:	53                   	push   rbx
ffff80000080ee75:	48 83 ec 20          	sub    rsp,0x20
ffff80000080ee79:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ee79 <async_check_disk+0xf>
ffff80000080ee80:	49 bb 57 ec 10 00 00 	movabs r11,0x10ec57
ffff80000080ee87:	00 00 00 
ffff80000080ee8a:	4c 01 db             	add    rbx,r11
ffff80000080ee8d:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:199
    unsigned short disknr=PORT_DISK_MAJOR;
ffff80000080ee90:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:200
    unsigned short chkcmd=0xe0;
ffff80000080ee96:	66 c7 45 ec e0 00    	mov    WORD PTR [rbp-0x14],0xe0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080ee9c:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080eea0:	74 06                	je     ffff80000080eea8 <async_check_disk+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201 (discriminator 1)
ffff80000080eea2:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080eea6:	75 06                	jne    ffff80000080eeae <async_check_disk+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:202
        disknr=PORT_DISK_SLAVE;
ffff80000080eea8:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203
    if(disk==DISK_MAJOR_SLAVE||disk==DISK_SLAVE_SLAVE)
ffff80000080eeae:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080eeb2:	74 06                	je     ffff80000080eeba <async_check_disk+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203 (discriminator 1)
ffff80000080eeb4:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080eeb8:	75 06                	jne    ffff80000080eec0 <async_check_disk+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:204
        chkcmd=0xf0;
ffff80000080eeba:	66 c7 45 ec f0 00    	mov    WORD PTR [rbp-0x14],0xf0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:205
    outb(disknr+2,1);
ffff80000080eec0:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eec4:	83 c0 02             	add    eax,0x2
ffff80000080eec7:	0f b7 c0             	movzx  eax,ax
ffff80000080eeca:	be 01 00 00 00       	mov    esi,0x1
ffff80000080eecf:	89 c7                	mov    edi,eax
ffff80000080eed1:	49 89 df             	mov    r15,rbx
ffff80000080eed4:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff80000080eedb:	ff ff ff 
ffff80000080eede:	48 01 d8             	add    rax,rbx
ffff80000080eee1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:206
    outb(disknr+3,0);
ffff80000080eee3:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eee7:	83 c0 03             	add    eax,0x3
ffff80000080eeea:	0f b7 c0             	movzx  eax,ax
ffff80000080eeed:	be 00 00 00 00       	mov    esi,0x0
ffff80000080eef2:	89 c7                	mov    edi,eax
ffff80000080eef4:	49 89 df             	mov    r15,rbx
ffff80000080eef7:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff80000080eefe:	ff ff ff 
ffff80000080ef01:	48 01 d8             	add    rax,rbx
ffff80000080ef04:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:207
    outb(disknr+4,0);
ffff80000080ef06:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ef0a:	83 c0 04             	add    eax,0x4
ffff80000080ef0d:	0f b7 c0             	movzx  eax,ax
ffff80000080ef10:	be 00 00 00 00       	mov    esi,0x0
ffff80000080ef15:	89 c7                	mov    edi,eax
ffff80000080ef17:	49 89 df             	mov    r15,rbx
ffff80000080ef1a:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff80000080ef21:	ff ff ff 
ffff80000080ef24:	48 01 d8             	add    rax,rbx
ffff80000080ef27:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:208
    outb(disknr+5,0);
ffff80000080ef29:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ef2d:	83 c0 05             	add    eax,0x5
ffff80000080ef30:	0f b7 c0             	movzx  eax,ax
ffff80000080ef33:	be 00 00 00 00       	mov    esi,0x0
ffff80000080ef38:	89 c7                	mov    edi,eax
ffff80000080ef3a:	49 89 df             	mov    r15,rbx
ffff80000080ef3d:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff80000080ef44:	ff ff ff 
ffff80000080ef47:	48 01 d8             	add    rax,rbx
ffff80000080ef4a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:209
    outb(disknr+6,chkcmd);//主硬盘
ffff80000080ef4c:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffff80000080ef50:	0f b6 d0             	movzx  edx,al
ffff80000080ef53:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ef57:	83 c0 06             	add    eax,0x6
ffff80000080ef5a:	0f b7 c0             	movzx  eax,ax
ffff80000080ef5d:	89 d6                	mov    esi,edx
ffff80000080ef5f:	89 c7                	mov    edi,eax
ffff80000080ef61:	49 89 df             	mov    r15,rbx
ffff80000080ef64:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff80000080ef6b:	ff ff ff 
ffff80000080ef6e:	48 01 d8             	add    rax,rbx
ffff80000080ef71:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:210
    outb(disknr+7,DISK_CMD_CHECK);
ffff80000080ef73:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ef77:	83 c0 07             	add    eax,0x7
ffff80000080ef7a:	0f b7 c0             	movzx  eax,ax
ffff80000080ef7d:	be 90 00 00 00       	mov    esi,0x90
ffff80000080ef82:	89 c7                	mov    edi,eax
ffff80000080ef84:	49 89 df             	mov    r15,rbx
ffff80000080ef87:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff80000080ef8e:	ff ff ff 
ffff80000080ef91:	48 01 d8             	add    rax,rbx
ffff80000080ef94:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:221
    //     // {
    //     //     printf("DISK ERR\n");
    //     //     return -1;
    //     // }
    // }
    return 0;
ffff80000080ef96:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222
}
ffff80000080ef9b:	48 83 c4 20          	add    rsp,0x20
ffff80000080ef9f:	5b                   	pop    rbx
ffff80000080efa0:	41 5f                	pop    r15
ffff80000080efa2:	5d                   	pop    rbp
ffff80000080efa3:	c3                   	ret    

ffff80000080efa4 <hd_do_req>:
hd_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:226

//接口函数：负责接收VFS的请求然后执行
int hd_do_req(struct request* req)
{
ffff80000080efa4:	f3 0f 1e fa          	endbr64 
ffff80000080efa8:	55                   	push   rbp
ffff80000080efa9:	48 89 e5             	mov    rbp,rsp
ffff80000080efac:	41 57                	push   r15
ffff80000080efae:	48 83 ec 28          	sub    rsp,0x28
ffff80000080efb2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080efb2 <hd_do_req+0xe>
ffff80000080efb9:	49 bb 1e eb 10 00 00 	movabs r11,0x10eb1e
ffff80000080efc0:	00 00 00 
ffff80000080efc3:	4c 01 d8             	add    rax,r11
ffff80000080efc6:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:227
    if(!req)
ffff80000080efca:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080efcf:	75 0a                	jne    ffff80000080efdb <hd_do_req+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:228
        return -1;
ffff80000080efd1:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080efd6:	e9 38 01 00 00       	jmp    ffff80000080f113 <hd_do_req+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:229
    start_request(req->dev);
ffff80000080efdb:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080efdf:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080efe2:	0f b7 d2             	movzx  edx,dx
ffff80000080efe5:	66 89 55 ea          	mov    WORD PTR [rbp-0x16],dx
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:69
    wait_on_req(blk_devs[BLKDEV_MAJOR(dev)].current_request->waiting);
ffff80000080efe9:	0f b7 55 ea          	movzx  edx,WORD PTR [rbp-0x16]
ffff80000080efed:	c1 fa 04             	sar    edx,0x4
ffff80000080eff0:	89 d1                	mov    ecx,edx
ffff80000080eff2:	83 e1 0f             	and    ecx,0xf
ffff80000080eff5:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080effc:	ff ff ff 
ffff80000080efff:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080f003:	48 63 d1             	movsxd rdx,ecx
ffff80000080f006:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080f00a:	48 01 f2             	add    rdx,rsi
ffff80000080f00d:	48 83 c2 08          	add    rdx,0x8
ffff80000080f011:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f014:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080f018:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
wait_on_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:195
        if(p->stat==TASK_READY||p->stat==TASK_RUNNING)
ffff80000080f01c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080f020:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080f023:	83 fa 02             	cmp    edx,0x2
ffff80000080f026:	74 0c                	je     ffff80000080f034 <hd_do_req+0x90>
ffff80000080f028:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080f02c:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080f02f:	83 fa 01             	cmp    edx,0x1
ffff80000080f032:	75 0b                	jne    ffff80000080f03f <hd_do_req+0x9b>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:196
            p->stat=TASK_SUSPENDED;
ffff80000080f034:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080f038:	c7 42 18 03 00 00 00 	mov    DWORD PTR [rdx+0x18],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:197
}
ffff80000080f03f:	90                   	nop
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:70
ffff80000080f040:	90                   	nop
hd_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:230
    int diski=BLKDEV_MINOR(req->dev);
ffff80000080f041:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f045:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080f048:	0f b7 d2             	movzx  edx,dx
ffff80000080f04b:	83 e2 0f             	and    edx,0xf
ffff80000080f04e:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:233
    // for(;disks[diski]!=args->dev;diski++);

    switch (req->cmd)
ffff80000080f051:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f055:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080f058:	83 fa 04             	cmp    edx,0x4
ffff80000080f05b:	0f 84 8d 00 00 00    	je     ffff80000080f0ee <hd_do_req+0x14a>
ffff80000080f061:	83 fa 04             	cmp    edx,0x4
ffff80000080f064:	0f 8f 9d 00 00 00    	jg     ffff80000080f107 <hd_do_req+0x163>
ffff80000080f06a:	85 d2                	test   edx,edx
ffff80000080f06c:	74 0a                	je     ffff80000080f078 <hd_do_req+0xd4>
ffff80000080f06e:	83 fa 01             	cmp    edx,0x1
ffff80000080f071:	74 40                	je     ffff80000080f0b3 <hd_do_req+0x10f>
ffff80000080f073:	e9 8f 00 00 00       	jmp    ffff80000080f107 <hd_do_req+0x163>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:236
    {
    case BLKDEV_REQ_READ:
        async_read_disk(diski,req->sector,req->nr_sectors,req->buffer);
ffff80000080f078:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f07c:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080f080:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080f084:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
ffff80000080f088:	41 89 c8             	mov    r8d,ecx
ffff80000080f08b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080f08f:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
ffff80000080f093:	89 ce                	mov    esi,ecx
ffff80000080f095:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
ffff80000080f098:	48 89 d1             	mov    rcx,rdx
ffff80000080f09b:	44 89 c2             	mov    edx,r8d
ffff80000080f09e:	49 89 c7             	mov    r15,rax
ffff80000080f0a1:	49 b8 6c 0f ef ff ff 	movabs r8,0xffffffffffef0f6c
ffff80000080f0a8:	ff ff ff 
ffff80000080f0ab:	49 01 c0             	add    r8,rax
ffff80000080f0ae:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:237
        break;
ffff80000080f0b1:	eb 5b                	jmp    ffff80000080f10e <hd_do_req+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:239
    case BLKDEV_REQ_WRITE:
        async_write_disk(diski,req->sector,req->nr_sectors,req->buffer);
ffff80000080f0b3:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f0b7:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080f0bb:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080f0bf:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
ffff80000080f0c3:	41 89 c8             	mov    r8d,ecx
ffff80000080f0c6:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080f0ca:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
ffff80000080f0ce:	89 ce                	mov    esi,ecx
ffff80000080f0d0:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
ffff80000080f0d3:	48 89 d1             	mov    rcx,rdx
ffff80000080f0d6:	44 89 c2             	mov    edx,r8d
ffff80000080f0d9:	49 89 c7             	mov    r15,rax
ffff80000080f0dc:	49 b8 f0 10 ef ff ff 	movabs r8,0xffffffffffef10f0
ffff80000080f0e3:	ff ff ff 
ffff80000080f0e6:	49 01 c0             	add    r8,rax
ffff80000080f0e9:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:240
        break;
ffff80000080f0ec:	eb 20                	jmp    ffff80000080f10e <hd_do_req+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:242
    case DRVF_CHK:
        async_check_disk(diski);
ffff80000080f0ee:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080f0f1:	89 d7                	mov    edi,edx
ffff80000080f0f3:	49 89 c7             	mov    r15,rax
ffff80000080f0f6:	48 ba 9a 13 ef ff ff 	movabs rdx,0xffffffffffef139a
ffff80000080f0fd:	ff ff ff 
ffff80000080f100:	48 01 c2             	add    rdx,rax
ffff80000080f103:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:243
        break;
ffff80000080f105:	eb 07                	jmp    ffff80000080f10e <hd_do_req+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:244
    default:return -1;
ffff80000080f107:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080f10c:	eb 05                	jmp    ffff80000080f113 <hd_do_req+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:246
    }
    return 0;
ffff80000080f10e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:247
ffff80000080f113:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080f117:	c9                   	leave  
ffff80000080f118:	c3                   	ret    
ffff80000080f119:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffff80000080f120 <disk_int_handler>:
disk_int_handler():
ffff80000080f120:	e8 69 8c ff ff       	call   ffff800000807d8e <eoi>
ffff80000080f125:	e8 32 f5 ff ff       	call   ffff80000080e65c <disk_int_handler_c>
ffff80000080f12a:	48 cf                	iretq  

ffff80000080f12c <read_disk_asm>:
read_disk_asm():
ffff80000080f12c:	55                   	push   rbp
ffff80000080f12d:	48 89 e5             	mov    rbp,rsp
ffff80000080f130:	66 ba f7 01          	mov    dx,0x1f7
ffff80000080f134:	31 c9                	xor    ecx,ecx
ffff80000080f136:	48 89 f8             	mov    rax,rdi
ffff80000080f139:	48 89 f1             	mov    rcx,rsi
ffff80000080f13c:	48 89 d3             	mov    rbx,rdx
ffff80000080f13f:	48 89 c6             	mov    rsi,rax
ffff80000080f142:	66 ba f2 01          	mov    dx,0x1f2
ffff80000080f146:	88 c8                	mov    al,cl
ffff80000080f148:	ee                   	out    dx,al
ffff80000080f149:	66 ba f3 01          	mov    dx,0x1f3
ffff80000080f14d:	89 f0                	mov    eax,esi
ffff80000080f14f:	ee                   	out    dx,al
ffff80000080f150:	66 ff c2             	inc    dx
ffff80000080f153:	c1 e8 08             	shr    eax,0x8
ffff80000080f156:	ee                   	out    dx,al
ffff80000080f157:	66 ff c2             	inc    dx
ffff80000080f15a:	c1 e8 08             	shr    eax,0x8
ffff80000080f15d:	ee                   	out    dx,al
ffff80000080f15e:	66 ff c2             	inc    dx
ffff80000080f161:	66 c1 e8 08          	shr    ax,0x8
ffff80000080f165:	24 0f                	and    al,0xf
ffff80000080f167:	0c e0                	or     al,0xe0
ffff80000080f169:	ee                   	out    dx,al
ffff80000080f16a:	66 ff c2             	inc    dx
ffff80000080f16d:	b0 20                	mov    al,0x20
ffff80000080f16f:	ee                   	out    dx,al

ffff80000080f170 <read_disk_asm.wait>:
read_disk_asm.wait():
ffff80000080f170:	90                   	nop
ffff80000080f171:	ec                   	in     al,dx
ffff80000080f172:	24 88                	and    al,0x88
ffff80000080f174:	3c 08                	cmp    al,0x8
ffff80000080f176:	75 f8                	jne    ffff80000080f170 <read_disk_asm.wait>
ffff80000080f178:	66 89 d7             	mov    di,dx
ffff80000080f17b:	48 c1 e1 08          	shl    rcx,0x8
ffff80000080f17f:	66 ba f0 01          	mov    dx,0x1f0

ffff80000080f183 <read_disk_asm.read>:
read_disk_asm.read():
ffff80000080f183:	66 ed                	in     ax,dx
ffff80000080f185:	66 89 03             	mov    WORD PTR [rbx],ax
ffff80000080f188:	48 83 c3 02          	add    rbx,0x2
ffff80000080f18c:	e2 f5                	loop   ffff80000080f183 <read_disk_asm.read>
ffff80000080f18e:	c9                   	leave  
ffff80000080f18f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f194:	c3                   	ret    

ffff80000080f195 <read_disk_asm.err_disk_reading>:
read_disk_asm.err_disk_reading():
ffff80000080f195:	66 ba f1 01          	mov    dx,0x1f1
ffff80000080f199:	48 31 c0             	xor    rax,rax
ffff80000080f19c:	66 ed                	in     ax,dx
ffff80000080f19e:	c9                   	leave  
ffff80000080f19f:	c3                   	ret    

ffff80000080f1a0 <write_disk_asm>:
write_disk_asm():
ffff80000080f1a0:	55                   	push   rbp
ffff80000080f1a1:	48 89 e5             	mov    rbp,rsp
ffff80000080f1a4:	48 89 f8             	mov    rax,rdi
ffff80000080f1a7:	48 89 f1             	mov    rcx,rsi
ffff80000080f1aa:	48 89 d3             	mov    rbx,rdx
ffff80000080f1ad:	50                   	push   rax
ffff80000080f1ae:	66 ba f2 01          	mov    dx,0x1f2
ffff80000080f1b2:	88 c8                	mov    al,cl
ffff80000080f1b4:	ee                   	out    dx,al
ffff80000080f1b5:	58                   	pop    rax
ffff80000080f1b6:	66 ba f3 01          	mov    dx,0x1f3
ffff80000080f1ba:	ee                   	out    dx,al
ffff80000080f1bb:	c1 e8 08             	shr    eax,0x8
ffff80000080f1be:	66 ba f4 01          	mov    dx,0x1f4
ffff80000080f1c2:	ee                   	out    dx,al
ffff80000080f1c3:	c1 e8 08             	shr    eax,0x8
ffff80000080f1c6:	66 ba f5 01          	mov    dx,0x1f5
ffff80000080f1ca:	ee                   	out    dx,al
ffff80000080f1cb:	c1 e8 08             	shr    eax,0x8
ffff80000080f1ce:	24 0f                	and    al,0xf
ffff80000080f1d0:	0c e0                	or     al,0xe0
ffff80000080f1d2:	66 ba f6 01          	mov    dx,0x1f6
ffff80000080f1d6:	ee                   	out    dx,al
ffff80000080f1d7:	66 ba f7 01          	mov    dx,0x1f7
ffff80000080f1db:	b0 30                	mov    al,0x30
ffff80000080f1dd:	ee                   	out    dx,al

ffff80000080f1de <write_disk_asm.not_ready2>:
write_disk_asm.not_ready2():
ffff80000080f1de:	90                   	nop
ffff80000080f1df:	ec                   	in     al,dx
ffff80000080f1e0:	24 88                	and    al,0x88
ffff80000080f1e2:	3c 08                	cmp    al,0x8
ffff80000080f1e4:	75 f8                	jne    ffff80000080f1de <write_disk_asm.not_ready2>
ffff80000080f1e6:	48 c1 e1 08          	shl    rcx,0x8
ffff80000080f1ea:	66 ba f0 01          	mov    dx,0x1f0

ffff80000080f1ee <write_disk_asm.go_on_write>:
write_disk_asm.go_on_write():
ffff80000080f1ee:	66 8b 03             	mov    ax,WORD PTR [rbx]
ffff80000080f1f1:	66 ef                	out    dx,ax
ffff80000080f1f3:	83 c3 02             	add    ebx,0x2
ffff80000080f1f6:	e2 f6                	loop   ffff80000080f1ee <write_disk_asm.go_on_write>
ffff80000080f1f8:	c9                   	leave  
ffff80000080f1f9:	c3                   	ret    

ffff80000080f1fa <DISK1_FAT32_read_FAT_Entry>:
DISK1_FAT32_read_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:14
#include "memory.h"
#include "devman.h"
#include <sys/unistd.h>

unsigned int DISK1_FAT32_read_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry)
{
ffff80000080f1fa:	f3 0f 1e fa          	endbr64 
ffff80000080f1fe:	55                   	push   rbp
ffff80000080f1ff:	48 89 e5             	mov    rbp,rsp
ffff80000080f202:	41 57                	push   r15
ffff80000080f204:	53                   	push   rbx
ffff80000080f205:	48 83 ec 20          	sub    rsp,0x20
ffff80000080f209:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f209 <DISK1_FAT32_read_FAT_Entry+0xf>
ffff80000080f210:	49 bb c7 e8 10 00 00 	movabs r11,0x10e8c7
ffff80000080f217:	00 00 00 
ffff80000080f21a:	4c 01 db             	add    rbx,r11
ffff80000080f21d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080f221:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:16
	unsigned int *buf;
	buffer_head *bh=bread(root_sb->dev,fsbi->FAT1_firstsector + (fat_entry >> 7));
ffff80000080f224:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f228:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080f22c:	89 c2                	mov    edx,eax
ffff80000080f22e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f231:	c1 e8 07             	shr    eax,0x7
ffff80000080f234:	01 d0                	add    eax,edx
ffff80000080f236:	89 c2                	mov    edx,eax
ffff80000080f238:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080f23f:	ff ff ff 
ffff80000080f242:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f246:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f249:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080f24d:	0f b7 c0             	movzx  eax,ax
ffff80000080f250:	89 d6                	mov    esi,edx
ffff80000080f252:	89 c7                	mov    edi,eax
ffff80000080f254:	49 89 df             	mov    r15,rbx
ffff80000080f257:	48 b8 14 fd ee ff ff 	movabs rax,0xffffffffffeefd14
ffff80000080f25e:	ff ff ff 
ffff80000080f261:	48 01 d8             	add    rax,rbx
ffff80000080f264:	ff d0                	call   rax
ffff80000080f266:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:17
	buf=bh->data;
ffff80000080f26a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f26e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f271:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:18
    printf("DISK1_FAT32_read_FAT_Entry fat_entry:%x,%#010x\n",fat_entry,buf[fat_entry & 0x7f]);
ffff80000080f275:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f278:	83 e0 7f             	and    eax,0x7f
ffff80000080f27b:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080f282:	00 
ffff80000080f283:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f287:	48 01 d0             	add    rax,rdx
ffff80000080f28a:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080f28c:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f28f:	89 c6                	mov    esi,eax
ffff80000080f291:	48 b8 b0 da ff ff ff 	movabs rax,0xffffffffffffdab0
ffff80000080f298:	ff ff ff 
ffff80000080f29b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080f29f:	48 89 c7             	mov    rdi,rax
ffff80000080f2a2:	49 89 df             	mov    r15,rbx
ffff80000080f2a5:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f2aa:	48 b9 23 3c ee ff ff 	movabs rcx,0xffffffffffee3c23
ffff80000080f2b1:	ff ff ff 
ffff80000080f2b4:	48 01 d9             	add    rcx,rbx
ffff80000080f2b7:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:19
	brelse(bh);
ffff80000080f2b9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f2bd:	48 89 c7             	mov    rdi,rax
ffff80000080f2c0:	49 89 df             	mov    r15,rbx
ffff80000080f2c3:	48 b8 42 03 ef ff ff 	movabs rax,0xffffffffffef0342
ffff80000080f2ca:	ff ff ff 
ffff80000080f2cd:	48 01 d8             	add    rax,rbx
ffff80000080f2d0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:20
	return buf[fat_entry & 0x7f] & 0x0fffffff;
ffff80000080f2d2:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f2d5:	83 e0 7f             	and    eax,0x7f
ffff80000080f2d8:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080f2df:	00 
ffff80000080f2e0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f2e4:	48 01 d0             	add    rax,rdx
ffff80000080f2e7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080f2e9:	25 ff ff ff 0f       	and    eax,0xfffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:21
}
ffff80000080f2ee:	48 83 c4 20          	add    rsp,0x20
ffff80000080f2f2:	5b                   	pop    rbx
ffff80000080f2f3:	41 5f                	pop    r15
ffff80000080f2f5:	5d                   	pop    rbp
ffff80000080f2f6:	c3                   	ret    

ffff80000080f2f7 <DISK1_FAT32_write_FAT_Entry>:
DISK1_FAT32_write_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:25


unsigned long DISK1_FAT32_write_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry,unsigned int value)
{
ffff80000080f2f7:	f3 0f 1e fa          	endbr64 
ffff80000080f2fb:	55                   	push   rbp
ffff80000080f2fc:	48 89 e5             	mov    rbp,rsp
ffff80000080f2ff:	41 57                	push   r15
ffff80000080f301:	53                   	push   rbx
ffff80000080f302:	48 83 ec 30          	sub    rsp,0x30
ffff80000080f306:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f306 <DISK1_FAT32_write_FAT_Entry+0xf>
ffff80000080f30d:	49 bb ca e7 10 00 00 	movabs r11,0x10e7ca
ffff80000080f314:	00 00 00 
ffff80000080f317:	4c 01 db             	add    rbx,r11
ffff80000080f31a:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080f31e:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
ffff80000080f321:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:29
	unsigned int *buf;
	int i;

	buffer_head *bh=bread(root_sb->dev,fsbi->FAT1_firstsector + (fat_entry >> 7));
ffff80000080f324:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080f328:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080f32c:	89 c2                	mov    edx,eax
ffff80000080f32e:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080f331:	c1 e8 07             	shr    eax,0x7
ffff80000080f334:	01 d0                	add    eax,edx
ffff80000080f336:	89 c2                	mov    edx,eax
ffff80000080f338:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080f33f:	ff ff ff 
ffff80000080f342:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f346:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f349:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080f34d:	0f b7 c0             	movzx  eax,ax
ffff80000080f350:	89 d6                	mov    esi,edx
ffff80000080f352:	89 c7                	mov    edi,eax
ffff80000080f354:	49 89 df             	mov    r15,rbx
ffff80000080f357:	48 b8 14 fd ee ff ff 	movabs rax,0xffffffffffeefd14
ffff80000080f35e:	ff ff ff 
ffff80000080f361:	48 01 d8             	add    rax,rbx
ffff80000080f364:	ff d0                	call   rax
ffff80000080f366:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:30
	buf=bh->data;
ffff80000080f36a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f36e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f371:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:31
    buf[fat_entry & 0x7f] = (buf[fat_entry & 0x7f] & 0xf0000000) | (value & 0x0fffffff);
ffff80000080f375:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080f378:	83 e0 7f             	and    eax,0x7f
ffff80000080f37b:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080f382:	00 
ffff80000080f383:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f387:	48 01 d0             	add    rax,rdx
ffff80000080f38a:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080f38c:	25 00 00 00 f0       	and    eax,0xf0000000
ffff80000080f391:	89 c1                	mov    ecx,eax
ffff80000080f393:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff80000080f396:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff80000080f39b:	89 c2                	mov    edx,eax
ffff80000080f39d:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080f3a0:	83 e0 7f             	and    eax,0x7f
ffff80000080f3a3:	48 8d 34 85 00 00 00 	lea    rsi,[rax*4+0x0]
ffff80000080f3aa:	00 
ffff80000080f3ab:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f3af:	48 01 f0             	add    rax,rsi
ffff80000080f3b2:	09 ca                	or     edx,ecx
ffff80000080f3b4:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:33

	for(i = 0;i < fsbi->NumFATs;i++){
ffff80000080f3b6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080f3bd:	eb 6d                	jmp    ffff80000080f42c <DISK1_FAT32_write_FAT_Entry+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:34 (discriminator 3)
		off_t off=(fsbi->FAT1_firstsector + fsbi->sector_per_FAT * i + (fat_entry >> 7))*SECTOR_SIZE;
ffff80000080f3bf:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080f3c3:	48 8b 48 30          	mov    rcx,QWORD PTR [rax+0x30]
ffff80000080f3c7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080f3cb:	48 8b 50 38          	mov    rdx,QWORD PTR [rax+0x38]
ffff80000080f3cf:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f3d2:	48 98                	cdqe   
ffff80000080f3d4:	48 0f af c2          	imul   rax,rdx
ffff80000080f3d8:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080f3dc:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080f3df:	c1 e8 07             	shr    eax,0x7
ffff80000080f3e2:	89 c0                	mov    eax,eax
ffff80000080f3e4:	48 01 d0             	add    rax,rdx
ffff80000080f3e7:	c1 e0 09             	shl    eax,0x9
ffff80000080f3ea:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:35 (discriminator 3)
		blkdev_write(root_sb->dev,off,SECTOR_SIZE,buf);
ffff80000080f3ed:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080f3f4:	ff ff ff 
ffff80000080f3f7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f3fb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f3fe:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080f402:	0f b7 c0             	movzx  eax,ax
ffff80000080f405:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f409:	8b 75 d4             	mov    esi,DWORD PTR [rbp-0x2c]
ffff80000080f40c:	48 89 d1             	mov    rcx,rdx
ffff80000080f40f:	ba 00 02 00 00       	mov    edx,0x200
ffff80000080f414:	89 c7                	mov    edi,eax
ffff80000080f416:	49 89 df             	mov    r15,rbx
ffff80000080f419:	48 b8 c7 01 ef ff ff 	movabs rax,0xffffffffffef01c7
ffff80000080f420:	ff ff ff 
ffff80000080f423:	48 01 d8             	add    rax,rbx
ffff80000080f426:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:33 (discriminator 3)
	for(i = 0;i < fsbi->NumFATs;i++){
ffff80000080f428:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:33 (discriminator 1)
ffff80000080f42c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f42f:	48 63 d0             	movsxd rdx,eax
ffff80000080f432:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080f436:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080f43a:	48 39 c2             	cmp    rdx,rax
ffff80000080f43d:	72 80                	jb     ffff80000080f3bf <DISK1_FAT32_write_FAT_Entry+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:37
    }
	brelse(bh);
ffff80000080f43f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f443:	48 89 c7             	mov    rdi,rax
ffff80000080f446:	49 89 df             	mov    r15,rbx
ffff80000080f449:	48 b8 42 03 ef ff ff 	movabs rax,0xffffffffffef0342
ffff80000080f450:	ff ff ff 
ffff80000080f453:	48 01 d8             	add    rax,rbx
ffff80000080f456:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:38
	return 1;
ffff80000080f458:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:39
}
ffff80000080f45d:	48 83 c4 30          	add    rsp,0x30
ffff80000080f461:	5b                   	pop    rbx
ffff80000080f462:	41 5f                	pop    r15
ffff80000080f464:	5d                   	pop    rbp
ffff80000080f465:	c3                   	ret    

ffff80000080f466 <FAT32_open>:
FAT32_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:43


long FAT32_open(struct index_node * inode,struct file * filp)
{
ffff80000080f466:	f3 0f 1e fa          	endbr64 
ffff80000080f46a:	55                   	push   rbp
ffff80000080f46b:	48 89 e5             	mov    rbp,rsp
ffff80000080f46e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f46e <FAT32_open+0x8>
ffff80000080f475:	49 bb 62 e6 10 00 00 	movabs r11,0x10e662
ffff80000080f47c:	00 00 00 
ffff80000080f47f:	4c 01 d8             	add    rax,r11
ffff80000080f482:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080f486:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:44
	return 1;
ffff80000080f48a:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:45
}
ffff80000080f48f:	5d                   	pop    rbp
ffff80000080f490:	c3                   	ret    

ffff80000080f491 <FAT32_close>:
FAT32_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:49


long FAT32_close(struct index_node * inode,struct file * filp)
{
ffff80000080f491:	f3 0f 1e fa          	endbr64 
ffff80000080f495:	55                   	push   rbp
ffff80000080f496:	48 89 e5             	mov    rbp,rsp
ffff80000080f499:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f499 <FAT32_close+0x8>
ffff80000080f4a0:	49 bb 37 e6 10 00 00 	movabs r11,0x10e637
ffff80000080f4a7:	00 00 00 
ffff80000080f4aa:	4c 01 d8             	add    rax,r11
ffff80000080f4ad:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080f4b1:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:50
	return 1;
ffff80000080f4b5:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:51
}
ffff80000080f4ba:	5d                   	pop    rbp
ffff80000080f4bb:	c3                   	ret    

ffff80000080f4bc <FAT32_read>:
FAT32_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:55


long FAT32_read(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff80000080f4bc:	f3 0f 1e fa          	endbr64 
ffff80000080f4c0:	55                   	push   rbp
ffff80000080f4c1:	48 89 e5             	mov    rbp,rsp
ffff80000080f4c4:	41 57                	push   r15
ffff80000080f4c6:	53                   	push   rbx
ffff80000080f4c7:	48 83 ec 70          	sub    rsp,0x70
ffff80000080f4cb:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f4cb <FAT32_read+0xf>
ffff80000080f4d2:	49 bb 05 e6 10 00 00 	movabs r11,0x10e605
ffff80000080f4d9:	00 00 00 
ffff80000080f4dc:	4c 01 db             	add    rbx,r11
ffff80000080f4df:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff80000080f4e3:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffff80000080f4e7:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
ffff80000080f4eb:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:56
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff80000080f4ef:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f4f3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f4f7:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080f4fb:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080f4ff:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:57
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff80000080f503:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f507:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f50b:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080f50f:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080f513:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080f517:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:59

	unsigned long cluster = finode->first_cluster;
ffff80000080f51b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080f51f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f522:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:60
	unsigned long sector = 0;
ffff80000080f526:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff80000080f52d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:61
	int i,length = 0;
ffff80000080f52e:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:62
	long retval = 0;
ffff80000080f535:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080f53c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:63
	int index = *position / fsbi->bytes_per_cluster;
ffff80000080f53d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f541:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f544:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080f548:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff80000080f54c:	48 99                	cqo    
ffff80000080f54e:	48 f7 fe             	idiv   rsi
ffff80000080f551:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:64
	long offset = *position % fsbi->bytes_per_cluster;
ffff80000080f554:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f558:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f55b:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080f55f:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000080f563:	48 99                	cqo    
ffff80000080f565:	48 f7 f9             	idiv   rcx
ffff80000080f568:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:65
	char * buffer = (char *) kmallocat(0,(fsbi->bytes_per_cluster+PAGE_4K_SIZE-1)/PAGE_4K_SIZE);
ffff80000080f56c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f570:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080f574:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080f57a:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff80000080f581:	48 85 c0             	test   rax,rax
ffff80000080f584:	48 0f 48 c2          	cmovs  rax,rdx
ffff80000080f588:	48 c1 f8 0c          	sar    rax,0xc
ffff80000080f58c:	89 c6                	mov    esi,eax
ffff80000080f58e:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080f593:	49 89 df             	mov    r15,rbx
ffff80000080f596:	48 b8 a0 45 ee ff ff 	movabs rax,0xffffffffffee45a0
ffff80000080f59d:	ff ff ff 
ffff80000080f5a0:	48 01 d8             	add    rax,rbx
ffff80000080f5a3:	ff d0                	call   rax
ffff80000080f5a5:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:67

	if(!cluster)
ffff80000080f5a9:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080f5ae:	75 0c                	jne    ffff80000080f5bc <FAT32_read+0x100>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:68
		return -EFAULT;
ffff80000080f5b0:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080f5b7:	e9 6d 02 00 00       	jmp    ffff80000080f829 <FAT32_read+0x36d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:69
	for(i = 0;i < index;i++)
ffff80000080f5bc:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080f5c3:	eb 2b                	jmp    ffff80000080f5f0 <FAT32_read+0x134>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:70 (discriminator 3)
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000080f5c5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f5c9:	89 c2                	mov    edx,eax
ffff80000080f5cb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f5cf:	89 d6                	mov    esi,edx
ffff80000080f5d1:	48 89 c7             	mov    rdi,rax
ffff80000080f5d4:	49 89 df             	mov    r15,rbx
ffff80000080f5d7:	48 b8 2a 17 ef ff ff 	movabs rax,0xffffffffffef172a
ffff80000080f5de:	ff ff ff 
ffff80000080f5e1:	48 01 d8             	add    rax,rbx
ffff80000080f5e4:	ff d0                	call   rax
ffff80000080f5e6:	89 c0                	mov    eax,eax
ffff80000080f5e8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:69 (discriminator 3)
	for(i = 0;i < index;i++)
ffff80000080f5ec:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:69 (discriminator 1)
ffff80000080f5f0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080f5f3:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff80000080f5f6:	7c cd                	jl     ffff80000080f5c5 <FAT32_read+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:72

	if(*position + count > filp->dentry->dir_inode->file_size)
ffff80000080f5f8:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f5fc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f5ff:	48 89 c2             	mov    rdx,rax
ffff80000080f602:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f606:	48 01 c2             	add    rdx,rax
ffff80000080f609:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f60d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f611:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080f615:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f618:	48 39 c2             	cmp    rdx,rax
ffff80000080f61b:	76 2c                	jbe    ffff80000080f649 <FAT32_read+0x18d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:73
		index = count = filp->dentry->dir_inode->file_size - *position;
ffff80000080f61d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f621:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f625:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080f629:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080f62c:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f630:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f633:	48 89 c1             	mov    rcx,rax
ffff80000080f636:	48 89 d0             	mov    rax,rdx
ffff80000080f639:	48 29 c8             	sub    rax,rcx
ffff80000080f63c:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffff80000080f640:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f644:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
ffff80000080f647:	eb 07                	jmp    ffff80000080f650 <FAT32_read+0x194>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:75
	else
		index = count;
ffff80000080f649:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f64d:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:81

//	printf("FAT32_read first_cluster:%d,size:%d,preempt_count:%d\n",finode->first_cluster,filp->dentry->dir_inode->file_size,current->preempt_count);

	do
	{
		memset(buffer,0,fsbi->bytes_per_cluster);
ffff80000080f650:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f654:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080f658:	89 c2                	mov    edx,eax
ffff80000080f65a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080f65e:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f663:	48 89 c7             	mov    rdi,rax
ffff80000080f666:	49 89 df             	mov    r15,rbx
ffff80000080f669:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff80000080f670:	ff ff ff 
ffff80000080f673:	48 01 d8             	add    rax,rbx
ffff80000080f676:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:82
		sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff80000080f678:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f67c:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff80000080f680:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f684:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff80000080f688:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f68c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f690:	48 0f af c2          	imul   rax,rdx
ffff80000080f694:	48 01 c8             	add    rax,rcx
ffff80000080f697:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:83
		if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff80000080f69b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f69f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f6a3:	48 c1 e0 09          	shl    rax,0x9
ffff80000080f6a7:	48 89 c7             	mov    rdi,rax
ffff80000080f6aa:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080f6ae:	c1 e0 09             	shl    eax,0x9
ffff80000080f6b1:	89 c6                	mov    esi,eax
ffff80000080f6b3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f6b7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f6bb:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080f6bf:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff80000080f6c3:	0f b7 c0             	movzx  eax,ax
ffff80000080f6c6:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080f6ca:	48 89 d1             	mov    rcx,rdx
ffff80000080f6cd:	48 89 fa             	mov    rdx,rdi
ffff80000080f6d0:	89 c7                	mov    edi,eax
ffff80000080f6d2:	49 89 df             	mov    r15,rbx
ffff80000080f6d5:	48 b8 4c 00 ef ff ff 	movabs rax,0xffffffffffef004c
ffff80000080f6dc:	ff ff ff 
ffff80000080f6df:	48 01 d8             	add    rax,rbx
ffff80000080f6e2:	ff d0                	call   rax
ffff80000080f6e4:	85 c0                	test   eax,eax
ffff80000080f6e6:	79 35                	jns    ffff80000080f71d <FAT32_read+0x261>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:85
		{
			printf("FAT32 FS(read) read disk ERROR!!!!!!!!!!\n");
ffff80000080f6e8:	48 b8 e0 da ff ff ff 	movabs rax,0xffffffffffffdae0
ffff80000080f6ef:	ff ff ff 
ffff80000080f6f2:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080f6f6:	48 89 c7             	mov    rdi,rax
ffff80000080f6f9:	49 89 df             	mov    r15,rbx
ffff80000080f6fc:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f701:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff80000080f708:	ff ff ff 
ffff80000080f70b:	48 01 da             	add    rdx,rbx
ffff80000080f70e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:86
			retval = -EIO;
ffff80000080f710:	48 c7 45 d8 e3 ff ff 	mov    QWORD PTR [rbp-0x28],0xffffffffffffffe3
ffff80000080f717:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:87
			break;
ffff80000080f718:	e9 e1 00 00 00       	jmp    ffff80000080f7fe <FAT32_read+0x342>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:90
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
ffff80000080f71d:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080f720:	48 63 d0             	movsxd rdx,eax
ffff80000080f723:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f727:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080f72b:	48 2b 45 c8          	sub    rax,QWORD PTR [rbp-0x38]
ffff80000080f72f:	48 39 c2             	cmp    rdx,rax
ffff80000080f732:	48 0f 4e c2          	cmovle rax,rdx
ffff80000080f736:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:92

		if((unsigned long)buf < MAX_TASKS)
ffff80000080f739:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080f73d:	48 83 f8 1f          	cmp    rax,0x1f
ffff80000080f741:	77 2c                	ja     ffff80000080f76f <FAT32_read+0x2b3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:93
			memcpy(buffer + offset,buf,length);
ffff80000080f743:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff80000080f746:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080f74a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080f74e:	48 01 c1             	add    rcx,rax
ffff80000080f751:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080f755:	48 89 c6             	mov    rsi,rax
ffff80000080f758:	48 89 cf             	mov    rdi,rcx
ffff80000080f75b:	49 89 df             	mov    r15,rbx
ffff80000080f75e:	48 b8 c4 50 ef ff ff 	movabs rax,0xffffffffffef50c4
ffff80000080f765:	ff ff ff 
ffff80000080f768:	48 01 d8             	add    rax,rbx
ffff80000080f76b:	ff d0                	call   rax
ffff80000080f76d:	eb 2a                	jmp    ffff80000080f799 <FAT32_read+0x2dd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:95
		else
			memcpy(buffer + offset,buf,length);
ffff80000080f76f:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff80000080f772:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080f776:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080f77a:	48 01 c1             	add    rcx,rax
ffff80000080f77d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080f781:	48 89 c6             	mov    rsi,rax
ffff80000080f784:	48 89 cf             	mov    rdi,rcx
ffff80000080f787:	49 89 df             	mov    r15,rbx
ffff80000080f78a:	48 b8 c4 50 ef ff ff 	movabs rax,0xffffffffffef50c4
ffff80000080f791:	ff ff ff 
ffff80000080f794:	48 01 d8             	add    rax,rbx
ffff80000080f797:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:97

		index -= length;
ffff80000080f799:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080f79c:	29 45 d4             	sub    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:98
		buf += length;
ffff80000080f79f:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080f7a2:	48 98                	cdqe   
ffff80000080f7a4:	48 01 45 90          	add    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:99
		offset -= offset;
ffff80000080f7a8:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080f7af:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:100
		*position += length;
ffff80000080f7b0:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f7b4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080f7b7:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080f7ba:	48 98                	cdqe   
ffff80000080f7bc:	48 01 c2             	add    rdx,rax
ffff80000080f7bf:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f7c3:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:101
	}while(index && (cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster)));
ffff80000080f7c6:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffff80000080f7ca:	74 32                	je     ffff80000080f7fe <FAT32_read+0x342>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:101 (discriminator 1)
ffff80000080f7cc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f7d0:	89 c2                	mov    edx,eax
ffff80000080f7d2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f7d6:	89 d6                	mov    esi,edx
ffff80000080f7d8:	48 89 c7             	mov    rdi,rax
ffff80000080f7db:	49 89 df             	mov    r15,rbx
ffff80000080f7de:	48 b8 2a 17 ef ff ff 	movabs rax,0xffffffffffef172a
ffff80000080f7e5:	ff ff ff 
ffff80000080f7e8:	48 01 d8             	add    rax,rbx
ffff80000080f7eb:	ff d0                	call   rax
ffff80000080f7ed:	89 c0                	mov    eax,eax
ffff80000080f7ef:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080f7f3:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080f7f8:	0f 85 52 fe ff ff    	jne    ffff80000080f650 <FAT32_read+0x194>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:103

    kmfree(buffer);
ffff80000080f7fe:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080f802:	48 89 c7             	mov    rdi,rax
ffff80000080f805:	49 89 df             	mov    r15,rbx
ffff80000080f808:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff80000080f80f:	ff ff ff 
ffff80000080f812:	48 01 d8             	add    rax,rbx
ffff80000080f815:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:104
	if(!index)
ffff80000080f817:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffff80000080f81b:	75 08                	jne    ffff80000080f825 <FAT32_read+0x369>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:105
		retval = count;
ffff80000080f81d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f821:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:106
	return retval;
ffff80000080f825:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:107
}
ffff80000080f829:	48 83 c4 70          	add    rsp,0x70
ffff80000080f82d:	5b                   	pop    rbx
ffff80000080f82e:	41 5f                	pop    r15
ffff80000080f830:	5d                   	pop    rbp
ffff80000080f831:	c3                   	ret    

ffff80000080f832 <FAT32_find_available_cluster>:
FAT32_find_available_cluster():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:111


unsigned long FAT32_find_available_cluster(struct FAT32_sb_info * fsbi)
{
ffff80000080f832:	f3 0f 1e fa          	endbr64 
ffff80000080f836:	55                   	push   rbp
ffff80000080f837:	48 89 e5             	mov    rbp,rsp
ffff80000080f83a:	41 57                	push   r15
ffff80000080f83c:	53                   	push   rbx
ffff80000080f83d:	48 81 ec 20 02 00 00 	sub    rsp,0x220
ffff80000080f844:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f844 <FAT32_find_available_cluster+0x12>
ffff80000080f84b:	49 bb 8c e2 10 00 00 	movabs r11,0x10e28c
ffff80000080f852:	00 00 00 
ffff80000080f855:	4c 01 db             	add    rbx,r11
ffff80000080f858:	48 89 bd d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:114
	int i,j;
	int fat_entry;
	unsigned long sector_per_fat = fsbi->sector_per_FAT;
ffff80000080f85f:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff80000080f866:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080f86a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:119
	unsigned int buf[128];

//	fsbi->fat_fsinfo->FSI_Free_Count & fsbi->fat_fsinfo->FSI_Nxt_Free not exactly,so unuse

	for(i = 0;i < sector_per_fat;i++)
ffff80000080f86e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080f875:	e9 b6 00 00 00       	jmp    ffff80000080f930 <FAT32_find_available_cluster+0xfe>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:121
	{
		memset(buf,0,512);
ffff80000080f87a:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff80000080f881:	ba 00 02 00 00       	mov    edx,0x200
ffff80000080f886:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f88b:	48 89 c7             	mov    rdi,rax
ffff80000080f88e:	49 89 df             	mov    r15,rbx
ffff80000080f891:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff80000080f898:	ff ff ff 
ffff80000080f89b:	48 01 d8             	add    rax,rbx
ffff80000080f89e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:122
		blkdev_read(root_sb->dev,(fsbi->FAT1_firstsector + i)*SECTOR_SIZE,SECTOR_SIZE,buf);
ffff80000080f8a0:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff80000080f8a7:	48 8b 50 30          	mov    rdx,QWORD PTR [rax+0x30]
ffff80000080f8ab:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f8ae:	48 98                	cdqe   
ffff80000080f8b0:	48 01 d0             	add    rax,rdx
ffff80000080f8b3:	c1 e0 09             	shl    eax,0x9
ffff80000080f8b6:	89 c6                	mov    esi,eax
ffff80000080f8b8:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff80000080f8bf:	ff ff ff 
ffff80000080f8c2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f8c6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f8c9:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080f8cd:	0f b7 c0             	movzx  eax,ax
ffff80000080f8d0:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff80000080f8d7:	48 89 d1             	mov    rcx,rdx
ffff80000080f8da:	ba 00 02 00 00       	mov    edx,0x200
ffff80000080f8df:	89 c7                	mov    edi,eax
ffff80000080f8e1:	49 89 df             	mov    r15,rbx
ffff80000080f8e4:	48 b8 4c 00 ef ff ff 	movabs rax,0xffffffffffef004c
ffff80000080f8eb:	ff ff ff 
ffff80000080f8ee:	48 01 d8             	add    rax,rbx
ffff80000080f8f1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:124

		for(j = 0;j < 128;j++)
ffff80000080f8f3:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080f8fa:	eb 2a                	jmp    ffff80000080f926 <FAT32_find_available_cluster+0xf4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:126
		{
			if((buf[j] & 0x0fffffff) == 0)
ffff80000080f8fc:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080f8ff:	48 98                	cdqe   
ffff80000080f901:	8b 84 85 e0 fd ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x220]
ffff80000080f908:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff80000080f90d:	85 c0                	test   eax,eax
ffff80000080f90f:	75 11                	jne    ffff80000080f922 <FAT32_find_available_cluster+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:127
				return (i << 7) + j;
ffff80000080f911:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f914:	c1 e0 07             	shl    eax,0x7
ffff80000080f917:	89 c2                	mov    edx,eax
ffff80000080f919:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080f91c:	01 d0                	add    eax,edx
ffff80000080f91e:	48 98                	cdqe   
ffff80000080f920:	eb 22                	jmp    ffff80000080f944 <FAT32_find_available_cluster+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:124 (discriminator 2)
		for(j = 0;j < 128;j++)
ffff80000080f922:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:124 (discriminator 1)
ffff80000080f926:	83 7d e8 7f          	cmp    DWORD PTR [rbp-0x18],0x7f
ffff80000080f92a:	7e d0                	jle    ffff80000080f8fc <FAT32_find_available_cluster+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:119 (discriminator 2)
	for(i = 0;i < sector_per_fat;i++)
ffff80000080f92c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:119 (discriminator 1)
ffff80000080f930:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f933:	48 98                	cdqe   
ffff80000080f935:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff80000080f939:	0f 87 3b ff ff ff    	ja     ffff80000080f87a <FAT32_find_available_cluster+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:130
		}
	}
	return 0;
ffff80000080f93f:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:131 (discriminator 1)
}
ffff80000080f944:	48 81 c4 20 02 00 00 	add    rsp,0x220
ffff80000080f94b:	5b                   	pop    rbx
ffff80000080f94c:	41 5f                	pop    r15
ffff80000080f94e:	5d                   	pop    rbp
ffff80000080f94f:	c3                   	ret    

ffff80000080f950 <FAT32_write>:
FAT32_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:135


long FAT32_write(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff80000080f950:	f3 0f 1e fa          	endbr64 
ffff80000080f954:	55                   	push   rbp
ffff80000080f955:	48 89 e5             	mov    rbp,rsp
ffff80000080f958:	41 57                	push   r15
ffff80000080f95a:	53                   	push   rbx
ffff80000080f95b:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff80000080f95f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f95f <FAT32_write+0xf>
ffff80000080f966:	49 bb 71 e1 10 00 00 	movabs r11,0x10e171
ffff80000080f96d:	00 00 00 
ffff80000080f970:	4c 01 db             	add    rbx,r11
ffff80000080f973:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff80000080f977:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffff80000080f97b:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
ffff80000080f982:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:136
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff80000080f989:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f98d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f991:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080f995:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080f999:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:137
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff80000080f99d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f9a1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f9a5:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080f9a9:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080f9ad:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080f9b1:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:139

	unsigned long cluster = finode->first_cluster;
ffff80000080f9b5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080f9b9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f9bc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:140
	unsigned long next_cluster = 0;
ffff80000080f9c0:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff80000080f9c7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:141
	unsigned long sector = 0;
ffff80000080f9c8:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080f9cf:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:142
	int i,length = 0;
ffff80000080f9d0:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:143
	long retval = 0;
ffff80000080f9d7:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080f9de:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:144
	long flags = 0;
ffff80000080f9df:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080f9e6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:145
	int index = *position / fsbi->bytes_per_cluster;
ffff80000080f9e7:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080f9ee:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f9f1:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080f9f5:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff80000080f9f9:	48 99                	cqo    
ffff80000080f9fb:	48 f7 fe             	idiv   rsi
ffff80000080f9fe:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:146
	long offset = *position % fsbi->bytes_per_cluster;
ffff80000080fa01:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fa08:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fa0b:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080fa0f:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000080fa13:	48 99                	cqo    
ffff80000080fa15:	48 f7 f9             	idiv   rcx
ffff80000080fa18:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:147
	char * buffer = (char *) kmalloc(fsbi->bytes_per_cluster, 0);
ffff80000080fa1c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fa20:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080fa24:	be 00 00 00 00       	mov    esi,0x0
ffff80000080fa29:	48 89 c7             	mov    rdi,rax
ffff80000080fa2c:	49 89 df             	mov    r15,rbx
ffff80000080fa2f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fa34:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff80000080fa3b:	ff ff ff 
ffff80000080fa3e:	48 01 da             	add    rdx,rbx
ffff80000080fa41:	ff d2                	call   rdx
ffff80000080fa43:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:149

	if(!cluster)
ffff80000080fa47:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080fa4c:	75 27                	jne    ffff80000080fa75 <FAT32_write+0x125>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:151
	{
		cluster = FAT32_find_available_cluster(fsbi);
ffff80000080fa4e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fa52:	48 89 c7             	mov    rdi,rax
ffff80000080fa55:	49 89 df             	mov    r15,rbx
ffff80000080fa58:	48 b8 62 1d ef ff ff 	movabs rax,0xffffffffffef1d62
ffff80000080fa5f:	ff ff ff 
ffff80000080fa62:	48 01 d8             	add    rax,rbx
ffff80000080fa65:	ff d0                	call   rax
ffff80000080fa67:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:152
		flags = 1;
ffff80000080fa6b:	48 c7 45 c8 01 00 00 	mov    QWORD PTR [rbp-0x38],0x1
ffff80000080fa72:	00 
ffff80000080fa73:	eb 3c                	jmp    ffff80000080fab1 <FAT32_write+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:155
	}
	else
		for(i = 0;i < index;i++)
ffff80000080fa75:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080fa7c:	eb 2b                	jmp    ffff80000080faa9 <FAT32_write+0x159>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:156 (discriminator 3)
			cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000080fa7e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fa82:	89 c2                	mov    edx,eax
ffff80000080fa84:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fa88:	89 d6                	mov    esi,edx
ffff80000080fa8a:	48 89 c7             	mov    rdi,rax
ffff80000080fa8d:	49 89 df             	mov    r15,rbx
ffff80000080fa90:	48 b8 2a 17 ef ff ff 	movabs rax,0xffffffffffef172a
ffff80000080fa97:	ff ff ff 
ffff80000080fa9a:	48 01 d8             	add    rax,rbx
ffff80000080fa9d:	ff d0                	call   rax
ffff80000080fa9f:	89 c0                	mov    eax,eax
ffff80000080faa1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:155 (discriminator 3)
		for(i = 0;i < index;i++)
ffff80000080faa5:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:155 (discriminator 1)
ffff80000080faa9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080faac:	3b 45 c4             	cmp    eax,DWORD PTR [rbp-0x3c]
ffff80000080faaf:	7c cd                	jl     ffff80000080fa7e <FAT32_write+0x12e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:158

	if(!cluster)
ffff80000080fab1:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080fab6:	75 25                	jne    ffff80000080fadd <FAT32_write+0x18d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:160
	{
        kmfree(buffer);
ffff80000080fab8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fabc:	48 89 c7             	mov    rdi,rax
ffff80000080fabf:	49 89 df             	mov    r15,rbx
ffff80000080fac2:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff80000080fac9:	ff ff ff 
ffff80000080facc:	48 01 d8             	add    rax,rbx
ffff80000080facf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:161
		return -ENOSPC;
ffff80000080fad1:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
ffff80000080fad8:	e9 f7 03 00 00       	jmp    ffff80000080fed4 <FAT32_write+0x584>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:164
	}

	if(flags)
ffff80000080fadd:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080fae2:	74 5a                	je     ffff80000080fb3e <FAT32_write+0x1ee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:166
	{
		finode->first_cluster = cluster;
ffff80000080fae4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080fae8:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080faec:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:167
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
ffff80000080faef:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080faf3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080faf7:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fafb:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080faff:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080fb03:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080fb07:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fb0b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fb0f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fb13:	48 89 c7             	mov    rdi,rax
ffff80000080fb16:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:168
		DISK1_FAT32_write_FAT_Entry(fsbi,cluster,0x0ffffff8);
ffff80000080fb18:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fb1c:	89 c1                	mov    ecx,eax
ffff80000080fb1e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fb22:	ba f8 ff ff 0f       	mov    edx,0xffffff8
ffff80000080fb27:	89 ce                	mov    esi,ecx
ffff80000080fb29:	48 89 c7             	mov    rdi,rax
ffff80000080fb2c:	49 89 df             	mov    r15,rbx
ffff80000080fb2f:	48 b8 27 18 ef ff ff 	movabs rax,0xffffffffffef1827
ffff80000080fb36:	ff ff ff 
ffff80000080fb39:	48 01 d8             	add    rax,rbx
ffff80000080fb3c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:171
	}

	index = count;
ffff80000080fb3e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080fb45:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:175

	do
	{
		if(!flags)
ffff80000080fb48:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080fb4d:	0f 85 cd 00 00 00    	jne    ffff80000080fc20 <FAT32_write+0x2d0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:177
		{
			memset(buffer,0,fsbi->bytes_per_cluster);
ffff80000080fb53:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fb57:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080fb5b:	89 c2                	mov    edx,eax
ffff80000080fb5d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fb61:	be 00 00 00 00       	mov    esi,0x0
ffff80000080fb66:	48 89 c7             	mov    rdi,rax
ffff80000080fb69:	49 89 df             	mov    r15,rbx
ffff80000080fb6c:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff80000080fb73:	ff ff ff 
ffff80000080fb76:	48 01 d8             	add    rax,rbx
ffff80000080fb79:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:178
			sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff80000080fb7b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fb7f:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff80000080fb83:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fb87:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff80000080fb8b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fb8f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fb93:	48 0f af c2          	imul   rax,rdx
ffff80000080fb97:	48 01 c8             	add    rax,rcx
ffff80000080fb9a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:180
			
			if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff80000080fb9e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fba2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fba6:	48 c1 e0 09          	shl    rax,0x9
ffff80000080fbaa:	48 89 c7             	mov    rdi,rax
ffff80000080fbad:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080fbb1:	c1 e0 09             	shl    eax,0x9
ffff80000080fbb4:	89 c6                	mov    esi,eax
ffff80000080fbb6:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fbba:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fbbe:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fbc2:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff80000080fbc6:	0f b7 c0             	movzx  eax,ax
ffff80000080fbc9:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff80000080fbcd:	48 89 d1             	mov    rcx,rdx
ffff80000080fbd0:	48 89 fa             	mov    rdx,rdi
ffff80000080fbd3:	89 c7                	mov    edi,eax
ffff80000080fbd5:	49 89 df             	mov    r15,rbx
ffff80000080fbd8:	48 b8 4c 00 ef ff ff 	movabs rax,0xffffffffffef004c
ffff80000080fbdf:	ff ff ff 
ffff80000080fbe2:	48 01 d8             	add    rax,rbx
ffff80000080fbe5:	ff d0                	call   rax
ffff80000080fbe7:	85 c0                	test   eax,eax
ffff80000080fbe9:	79 35                	jns    ffff80000080fc20 <FAT32_write+0x2d0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:182
			{
				printf("FAT32 FS(write) read disk ERROR!!!!!!!!!!\n");
ffff80000080fbeb:	48 b8 10 db ff ff ff 	movabs rax,0xffffffffffffdb10
ffff80000080fbf2:	ff ff ff 
ffff80000080fbf5:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080fbf9:	48 89 c7             	mov    rdi,rax
ffff80000080fbfc:	49 89 df             	mov    r15,rbx
ffff80000080fbff:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fc04:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff80000080fc0b:	ff ff ff 
ffff80000080fc0e:	48 01 da             	add    rdx,rbx
ffff80000080fc11:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:183
				retval = -EIO;
ffff80000080fc13:	48 c7 45 d0 e3 ff ff 	mov    QWORD PTR [rbp-0x30],0xffffffffffffffe3
ffff80000080fc1a:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:184
				break;
ffff80000080fc1b:	e9 23 02 00 00       	jmp    ffff80000080fe43 <FAT32_write+0x4f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:188
			}
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
ffff80000080fc20:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080fc23:	48 63 d0             	movsxd rdx,eax
ffff80000080fc26:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fc2a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080fc2e:	48 2b 45 b8          	sub    rax,QWORD PTR [rbp-0x48]
ffff80000080fc32:	48 39 c2             	cmp    rdx,rax
ffff80000080fc35:	48 0f 4e c2          	cmovle rax,rdx
ffff80000080fc39:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:190

		if((unsigned long)buf < MAX_TASKS)
ffff80000080fc3c:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080fc40:	48 83 f8 1f          	cmp    rax,0x1f
ffff80000080fc44:	77 2c                	ja     ffff80000080fc72 <FAT32_write+0x322>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:191
			memcpy(buf,buffer + offset,length);
ffff80000080fc46:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff80000080fc49:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff80000080fc4d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fc51:	48 01 c1             	add    rcx,rax
ffff80000080fc54:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080fc58:	48 89 ce             	mov    rsi,rcx
ffff80000080fc5b:	48 89 c7             	mov    rdi,rax
ffff80000080fc5e:	49 89 df             	mov    r15,rbx
ffff80000080fc61:	48 b8 c4 50 ef ff ff 	movabs rax,0xffffffffffef50c4
ffff80000080fc68:	ff ff ff 
ffff80000080fc6b:	48 01 d8             	add    rax,rbx
ffff80000080fc6e:	ff d0                	call   rax
ffff80000080fc70:	eb 2a                	jmp    ffff80000080fc9c <FAT32_write+0x34c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:193
		else
			memcpy(buf,buffer + offset,length);
ffff80000080fc72:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff80000080fc75:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff80000080fc79:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fc7d:	48 01 c1             	add    rcx,rax
ffff80000080fc80:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080fc84:	48 89 ce             	mov    rsi,rcx
ffff80000080fc87:	48 89 c7             	mov    rdi,rax
ffff80000080fc8a:	49 89 df             	mov    r15,rbx
ffff80000080fc8d:	48 b8 c4 50 ef ff ff 	movabs rax,0xffffffffffef50c4
ffff80000080fc94:	ff ff ff 
ffff80000080fc97:	48 01 d8             	add    rax,rbx
ffff80000080fc9a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:194
        if(blkdev_write(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff80000080fc9c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fca0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fca4:	48 c1 e0 09          	shl    rax,0x9
ffff80000080fca8:	48 89 c7             	mov    rdi,rax
ffff80000080fcab:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080fcaf:	c1 e0 09             	shl    eax,0x9
ffff80000080fcb2:	89 c6                	mov    esi,eax
ffff80000080fcb4:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fcb8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fcbc:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fcc0:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff80000080fcc4:	0f b7 c0             	movzx  eax,ax
ffff80000080fcc7:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff80000080fccb:	48 89 d1             	mov    rcx,rdx
ffff80000080fcce:	48 89 fa             	mov    rdx,rdi
ffff80000080fcd1:	89 c7                	mov    edi,eax
ffff80000080fcd3:	49 89 df             	mov    r15,rbx
ffff80000080fcd6:	48 b8 c7 01 ef ff ff 	movabs rax,0xffffffffffef01c7
ffff80000080fcdd:	ff ff ff 
ffff80000080fce0:	48 01 d8             	add    rax,rbx
ffff80000080fce3:	ff d0                	call   rax
ffff80000080fce5:	85 c0                	test   eax,eax
ffff80000080fce7:	79 35                	jns    ffff80000080fd1e <FAT32_write+0x3ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:196
		{
			printf("FAT32 FS(write) write disk ERROR!!!!!!!!!!\n");
ffff80000080fce9:	48 b8 40 db ff ff ff 	movabs rax,0xffffffffffffdb40
ffff80000080fcf0:	ff ff ff 
ffff80000080fcf3:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080fcf7:	48 89 c7             	mov    rdi,rax
ffff80000080fcfa:	49 89 df             	mov    r15,rbx
ffff80000080fcfd:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fd02:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff80000080fd09:	ff ff ff 
ffff80000080fd0c:	48 01 da             	add    rdx,rbx
ffff80000080fd0f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:197
			retval = -EIO;
ffff80000080fd11:	48 c7 45 d0 e3 ff ff 	mov    QWORD PTR [rbp-0x30],0xffffffffffffffe3
ffff80000080fd18:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:198
			break;
ffff80000080fd19:	e9 25 01 00 00       	jmp    ffff80000080fe43 <FAT32_write+0x4f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:201
		}

		index -= length;
ffff80000080fd1e:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080fd21:	29 45 c4             	sub    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:202
		buf += length;
ffff80000080fd24:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080fd27:	48 98                	cdqe   
ffff80000080fd29:	48 01 45 80          	add    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:203
		offset -= offset;
ffff80000080fd2d:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000080fd34:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:204
		*position += length;
ffff80000080fd35:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fd3c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080fd3f:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080fd42:	48 98                	cdqe   
ffff80000080fd44:	48 01 c2             	add    rdx,rax
ffff80000080fd47:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fd4e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:206

		if(index)
ffff80000080fd51:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff80000080fd55:	0f 84 e7 00 00 00    	je     ffff80000080fe42 <FAT32_write+0x4f2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:207
			next_cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000080fd5b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fd5f:	89 c2                	mov    edx,eax
ffff80000080fd61:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fd65:	89 d6                	mov    esi,edx
ffff80000080fd67:	48 89 c7             	mov    rdi,rax
ffff80000080fd6a:	49 89 df             	mov    r15,rbx
ffff80000080fd6d:	48 b8 2a 17 ef ff ff 	movabs rax,0xffffffffffef172a
ffff80000080fd74:	ff ff ff 
ffff80000080fd77:	48 01 d8             	add    rax,rbx
ffff80000080fd7a:	ff d0                	call   rax
ffff80000080fd7c:	89 c0                	mov    eax,eax
ffff80000080fd7e:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:211
		else
			break;

		if(next_cluster >= 0x0ffffff8)
ffff80000080fd82:	48 81 7d a0 f7 ff ff 	cmp    QWORD PTR [rbp-0x60],0xffffff7
ffff80000080fd89:	0f 
ffff80000080fd8a:	0f 86 a6 00 00 00    	jbe    ffff80000080fe36 <FAT32_write+0x4e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:213
		{
			next_cluster = FAT32_find_available_cluster(fsbi);
ffff80000080fd90:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fd94:	48 89 c7             	mov    rdi,rax
ffff80000080fd97:	49 89 df             	mov    r15,rbx
ffff80000080fd9a:	48 b8 62 1d ef ff ff 	movabs rax,0xffffffffffef1d62
ffff80000080fda1:	ff ff ff 
ffff80000080fda4:	48 01 d8             	add    rax,rbx
ffff80000080fda7:	ff d0                	call   rax
ffff80000080fda9:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:214
			if(!next_cluster)
ffff80000080fdad:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
ffff80000080fdb2:	75 25                	jne    ffff80000080fdd9 <FAT32_write+0x489>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:216
			{
                kmfree(buffer);
ffff80000080fdb4:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fdb8:	48 89 c7             	mov    rdi,rax
ffff80000080fdbb:	49 89 df             	mov    r15,rbx
ffff80000080fdbe:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff80000080fdc5:	ff ff ff 
ffff80000080fdc8:	48 01 d8             	add    rax,rbx
ffff80000080fdcb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:217
				return -ENOSPC;
ffff80000080fdcd:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
ffff80000080fdd4:	e9 fb 00 00 00       	jmp    ffff80000080fed4 <FAT32_write+0x584>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:220
			}			
				
			DISK1_FAT32_write_FAT_Entry(fsbi,cluster,next_cluster);
ffff80000080fdd9:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080fddd:	89 c2                	mov    edx,eax
ffff80000080fddf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fde3:	89 c1                	mov    ecx,eax
ffff80000080fde5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fde9:	89 ce                	mov    esi,ecx
ffff80000080fdeb:	48 89 c7             	mov    rdi,rax
ffff80000080fdee:	49 89 df             	mov    r15,rbx
ffff80000080fdf1:	48 b8 27 18 ef ff ff 	movabs rax,0xffffffffffef1827
ffff80000080fdf8:	ff ff ff 
ffff80000080fdfb:	48 01 d8             	add    rax,rbx
ffff80000080fdfe:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:221
			DISK1_FAT32_write_FAT_Entry(fsbi,next_cluster,0x0ffffff8);
ffff80000080fe00:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080fe04:	89 c1                	mov    ecx,eax
ffff80000080fe06:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fe0a:	ba f8 ff ff 0f       	mov    edx,0xffffff8
ffff80000080fe0f:	89 ce                	mov    esi,ecx
ffff80000080fe11:	48 89 c7             	mov    rdi,rax
ffff80000080fe14:	49 89 df             	mov    r15,rbx
ffff80000080fe17:	48 b8 27 18 ef ff ff 	movabs rax,0xffffffffffef1827
ffff80000080fe1e:	ff ff ff 
ffff80000080fe21:	48 01 d8             	add    rax,rbx
ffff80000080fe24:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:222
			cluster = next_cluster;
ffff80000080fe26:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080fe2a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:223
			flags = 1;
ffff80000080fe2e:	48 c7 45 c8 01 00 00 	mov    QWORD PTR [rbp-0x38],0x1
ffff80000080fe35:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:226
		}

	}while(index);
ffff80000080fe36:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff80000080fe3a:	0f 85 08 fd ff ff    	jne    ffff80000080fb48 <FAT32_write+0x1f8>
ffff80000080fe40:	eb 01                	jmp    ffff80000080fe43 <FAT32_write+0x4f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:209
			break;
ffff80000080fe42:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:228

	if(*position > filp->dentry->dir_inode->file_size)
ffff80000080fe43:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fe4a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fe4d:	48 89 c2             	mov    rdx,rax
ffff80000080fe50:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fe54:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fe58:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fe5c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fe5f:	48 39 c2             	cmp    rdx,rax
ffff80000080fe62:	76 42                	jbe    ffff80000080fea6 <FAT32_write+0x556>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:230
	{
		filp->dentry->dir_inode->file_size = *position;
ffff80000080fe64:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fe6b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080fe6e:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fe72:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fe76:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fe7a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:231
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
ffff80000080fe7d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fe81:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fe85:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fe89:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080fe8d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080fe91:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080fe95:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fe99:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fe9d:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fea1:	48 89 c7             	mov    rdi,rax
ffff80000080fea4:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:234
	}

    kmfree(buffer);
ffff80000080fea6:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080feaa:	48 89 c7             	mov    rdi,rax
ffff80000080fead:	49 89 df             	mov    r15,rbx
ffff80000080feb0:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff80000080feb7:	ff ff ff 
ffff80000080feba:	48 01 d8             	add    rax,rbx
ffff80000080febd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:235
	if(!index)
ffff80000080febf:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff80000080fec3:	75 0b                	jne    ffff80000080fed0 <FAT32_write+0x580>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:236
		retval = count;
ffff80000080fec5:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080fecc:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:237
	return retval;
ffff80000080fed0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:238
}
ffff80000080fed4:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff80000080fed8:	5b                   	pop    rbx
ffff80000080fed9:	41 5f                	pop    r15
ffff80000080fedb:	5d                   	pop    rbp
ffff80000080fedc:	c3                   	ret    

ffff80000080fedd <FAT32_lseek>:
FAT32_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:242


long FAT32_lseek(struct file * filp,long offset,long origin)
{
ffff80000080fedd:	f3 0f 1e fa          	endbr64 
ffff80000080fee1:	55                   	push   rbp
ffff80000080fee2:	48 89 e5             	mov    rbp,rsp
ffff80000080fee5:	41 57                	push   r15
ffff80000080fee7:	48 83 ec 38          	sub    rsp,0x38
ffff80000080feeb:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff80000080feeb <FAT32_lseek+0xe>
ffff80000080fef2:	49 bb e5 db 10 00 00 	movabs r11,0x10dbe5
ffff80000080fef9:	00 00 00 
ffff80000080fefc:	4c 01 d9             	add    rcx,r11
ffff80000080feff:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080ff03:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080ff07:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:243
	struct index_node *inode = filp->dentry->dir_inode;
ffff80000080ff0b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ff0f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ff13:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080ff17:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:244
	long pos = 0;
ffff80000080ff1b:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080ff22:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:246

	switch(origin)
ffff80000080ff23:	48 83 7d c8 02       	cmp    QWORD PTR [rbp-0x38],0x2
ffff80000080ff28:	74 21                	je     ffff80000080ff4b <FAT32_lseek+0x6e>
ffff80000080ff2a:	48 83 7d c8 02       	cmp    QWORD PTR [rbp-0x38],0x2
ffff80000080ff2f:	7f 4a                	jg     ffff80000080ff7b <FAT32_lseek+0x9e>
ffff80000080ff31:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080ff36:	74 09                	je     ffff80000080ff41 <FAT32_lseek+0x64>
ffff80000080ff38:	48 83 7d c8 01       	cmp    QWORD PTR [rbp-0x38],0x1
ffff80000080ff3d:	74 20                	je     ffff80000080ff5f <FAT32_lseek+0x82>
ffff80000080ff3f:	eb 3a                	jmp    ffff80000080ff7b <FAT32_lseek+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:249
	{
		case SEEK_SET:
				pos = offset;
ffff80000080ff41:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ff45:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:250
			break;
ffff80000080ff49:	eb 39                	jmp    ffff80000080ff84 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:253

		case SEEK_CUR:
				pos =  filp->position + offset;
ffff80000080ff4b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ff4f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080ff52:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ff56:	48 01 d0             	add    rax,rdx
ffff80000080ff59:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:254
			break;
ffff80000080ff5d:	eb 25                	jmp    ffff80000080ff84 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:257

		case SEEK_END:
				pos = filp->dentry->dir_inode->file_size + offset;
ffff80000080ff5f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ff63:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ff67:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080ff6b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080ff6e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ff72:	48 01 d0             	add    rax,rdx
ffff80000080ff75:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:258
			break;
ffff80000080ff79:	eb 09                	jmp    ffff80000080ff84 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:261

		default:
			return -EINVAL;
ffff80000080ff7b:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080ff82:	eb 69                	jmp    ffff80000080ffed <FAT32_lseek+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:265
			break;
	}

	if(pos < 0 || pos > filp->dentry->dir_inode->file_size)
ffff80000080ff84:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080ff89:	78 18                	js     ffff80000080ffa3 <FAT32_lseek+0xc6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:265 (discriminator 1)
ffff80000080ff8b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ff8f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ff93:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080ff97:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080ff9a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ff9e:	48 39 c2             	cmp    rdx,rax
ffff80000080ffa1:	73 09                	jae    ffff80000080ffac <FAT32_lseek+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:266
		return -EOVERFLOW;
ffff80000080ffa3:	48 c7 c0 bf ff ff ff 	mov    rax,0xffffffffffffffbf
ffff80000080ffaa:	eb 41                	jmp    ffff80000080ffed <FAT32_lseek+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:268

	filp->position = pos;
ffff80000080ffac:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ffb0:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ffb4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:269
	printf("FAT32 FS(lseek) alert position:%d\n",filp->position);
ffff80000080ffb7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ffbb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ffbe:	48 89 c6             	mov    rsi,rax
ffff80000080ffc1:	48 b8 70 db ff ff ff 	movabs rax,0xffffffffffffdb70
ffff80000080ffc8:	ff ff ff 
ffff80000080ffcb:	48 8d 04 01          	lea    rax,[rcx+rax*1]
ffff80000080ffcf:	48 89 c7             	mov    rdi,rax
ffff80000080ffd2:	49 89 cf             	mov    r15,rcx
ffff80000080ffd5:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ffda:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff80000080ffe1:	ff ff ff 
ffff80000080ffe4:	48 01 ca             	add    rdx,rcx
ffff80000080ffe7:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:271

	return pos;
ffff80000080ffe9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:272
}
ffff80000080ffed:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080fff1:	c9                   	leave  
ffff80000080fff2:	c3                   	ret    

ffff80000080fff3 <FAT32_ioctl>:
FAT32_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:276


long FAT32_ioctl(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg)
{}
ffff80000080fff3:	f3 0f 1e fa          	endbr64 
ffff80000080fff7:	55                   	push   rbp
ffff80000080fff8:	48 89 e5             	mov    rbp,rsp
ffff80000080fffb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080fffb <FAT32_ioctl+0x8>
ffff800000810002:	49 bb d5 da 10 00 00 	movabs r11,0x10dad5
ffff800000810009:	00 00 00 
ffff80000081000c:	4c 01 d8             	add    rax,r11
ffff80000081000f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000810013:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000810017:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000081001b:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff80000081001f:	90                   	nop
ffff800000810020:	5d                   	pop    rbp
ffff800000810021:	c3                   	ret    

ffff800000810022 <FAT32_readdir>:
FAT32_readdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:279

long FAT32_readdir(struct file * filp,void * dirent,filldir_t filler)
{
ffff800000810022:	f3 0f 1e fa          	endbr64 
ffff800000810026:	55                   	push   rbp
ffff800000810027:	48 89 e5             	mov    rbp,rsp
ffff80000081002a:	41 57                	push   r15
ffff80000081002c:	53                   	push   rbx
ffff80000081002d:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff800000810031:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810031 <FAT32_readdir+0xf>
ffff800000810038:	49 bb 9f da 10 00 00 	movabs r11,0x10da9f
ffff80000081003f:	00 00 00 
ffff800000810042:	4c 01 db             	add    rbx,r11
ffff800000810045:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff800000810049:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffff80000081004d:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:280
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff800000810054:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810058:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081005c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810060:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000810064:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:281
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff800000810068:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081006c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810070:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810074:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000810078:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081007c:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:283

	unsigned int cluster = 0;
ffff800000810080:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:284
	unsigned long sector = 0;
ffff800000810087:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff80000081008e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:285
	unsigned char * buf =NULL; 
ffff80000081008f:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff800000810096:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:286
	char *name = NULL;
ffff800000810097:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000081009e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:287
	int namelen = 0;
ffff80000081009f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:288
	int i = 0,j = 0,x = 0,y = 0;
ffff8000008100a6:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff8000008100ad:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff8000008100b4:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff8000008100bb:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:289
	struct FAT32_Directory * tmpdentry = NULL;
ffff8000008100c2:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff8000008100c9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:290
	struct FAT32_LongDirectory * tmpldentry = NULL;
ffff8000008100ca:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff8000008100d1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:292

	buf = kmalloc(fsbi->bytes_per_cluster, 0);
ffff8000008100d2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008100d6:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008100da:	be 00 00 00 00       	mov    esi,0x0
ffff8000008100df:	48 89 c7             	mov    rdi,rax
ffff8000008100e2:	49 89 df             	mov    r15,rbx
ffff8000008100e5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008100ea:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff8000008100f1:	ff ff ff 
ffff8000008100f4:	48 01 da             	add    rdx,rbx
ffff8000008100f7:	ff d2                	call   rdx
ffff8000008100f9:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:294

	cluster = finode->first_cluster;
ffff8000008100fd:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000810101:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810104:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:296

	j = filp->position/fsbi->bytes_per_cluster;
ffff800000810107:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081010b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081010e:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000810112:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff800000810116:	48 99                	cqo    
ffff800000810118:	48 f7 fe             	idiv   rsi
ffff80000081011b:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:298
	
	for(i = 0;i<j;i++)
ffff80000081011e:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff800000810125:	eb 60                	jmp    ffff800000810187 <FAT32_readdir+0x165>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:300
	{
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000810127:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000081012a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081012e:	89 d6                	mov    esi,edx
ffff800000810130:	48 89 c7             	mov    rdi,rax
ffff800000810133:	49 89 df             	mov    r15,rbx
ffff800000810136:	48 b8 2a 17 ef ff ff 	movabs rax,0xffffffffffef172a
ffff80000081013d:	ff ff ff 
ffff800000810140:	48 01 d8             	add    rax,rbx
ffff800000810143:	ff d0                	call   rax
ffff800000810145:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:301
		if(cluster > 0x0ffffff7)
ffff800000810148:	81 7d ec f7 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff7
ffff80000081014f:	76 32                	jbe    ffff800000810183 <FAT32_readdir+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:303
		{
			printf("FAT32 FS(readdir) cluster didn`t exist\n");
ffff800000810151:	48 b8 98 db ff ff ff 	movabs rax,0xffffffffffffdb98
ffff800000810158:	ff ff ff 
ffff80000081015b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081015f:	48 89 c7             	mov    rdi,rax
ffff800000810162:	49 89 df             	mov    r15,rbx
ffff800000810165:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081016a:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff800000810171:	ff ff ff 
ffff800000810174:	48 01 da             	add    rdx,rbx
ffff800000810177:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:304
			return NULL;
ffff800000810179:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081017e:	e9 16 06 00 00       	jmp    ffff800000810799 <FAT32_readdir+0x777>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:298 (discriminator 2)
	for(i = 0;i<j;i++)
ffff800000810183:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:298 (discriminator 1)
ffff800000810187:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000081018a:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff80000081018d:	7c 98                	jl     ffff800000810127 <FAT32_readdir+0x105>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:308
		}
	}

next_cluster:
ffff80000081018f:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:309
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff800000810190:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810194:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff800000810198:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081019b:	83 e8 02             	sub    eax,0x2
ffff80000081019e:	89 c1                	mov    ecx,eax
ffff8000008101a0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008101a4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008101a8:	48 0f af c1          	imul   rax,rcx
ffff8000008101ac:	48 01 d0             	add    rax,rdx
ffff8000008101af:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:310
    if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf)<0)
ffff8000008101b3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008101b7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008101bb:	48 c1 e0 09          	shl    rax,0x9
ffff8000008101bf:	48 89 c7             	mov    rdi,rax
ffff8000008101c2:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008101c6:	c1 e0 09             	shl    eax,0x9
ffff8000008101c9:	89 c6                	mov    esi,eax
ffff8000008101cb:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008101cf:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008101d3:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008101d7:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff8000008101db:	0f b7 c0             	movzx  eax,ax
ffff8000008101de:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff8000008101e2:	48 89 d1             	mov    rcx,rdx
ffff8000008101e5:	48 89 fa             	mov    rdx,rdi
ffff8000008101e8:	89 c7                	mov    edi,eax
ffff8000008101ea:	49 89 df             	mov    r15,rbx
ffff8000008101ed:	48 b8 4c 00 ef ff ff 	movabs rax,0xffffffffffef004c
ffff8000008101f4:	ff ff ff 
ffff8000008101f7:	48 01 d8             	add    rax,rbx
ffff8000008101fa:	ff d0                	call   rax
ffff8000008101fc:	85 c0                	test   eax,eax
ffff8000008101fe:	79 4b                	jns    ffff80000081024b <FAT32_readdir+0x229>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:312
	{
		printf("FAT32 FS(readdir) read disk ERROR!!!!!!!!!!\n");
ffff800000810200:	48 b8 c0 db ff ff ff 	movabs rax,0xffffffffffffdbc0
ffff800000810207:	ff ff ff 
ffff80000081020a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081020e:	48 89 c7             	mov    rdi,rax
ffff800000810211:	49 89 df             	mov    r15,rbx
ffff800000810214:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810219:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff800000810220:	ff ff ff 
ffff800000810223:	48 01 da             	add    rdx,rbx
ffff800000810226:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:313
        kmfree(buf);
ffff800000810228:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000081022c:	48 89 c7             	mov    rdi,rax
ffff80000081022f:	49 89 df             	mov    r15,rbx
ffff800000810232:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff800000810239:	ff ff ff 
ffff80000081023c:	48 01 d8             	add    rax,rbx
ffff80000081023f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:314
		return NULL;
ffff800000810241:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810246:	e9 4e 05 00 00       	jmp    ffff800000810799 <FAT32_readdir+0x777>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:317
	}

	tmpdentry = (struct FAT32_Directory *)(buf + filp->position%fsbi->bytes_per_cluster);
ffff80000081024b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081024f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810252:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000810256:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000081025a:	48 99                	cqo    
ffff80000081025c:	48 f7 f9             	idiv   rcx
ffff80000081025f:	48 89 d0             	mov    rax,rdx
ffff800000810262:	48 89 c2             	mov    rdx,rax
ffff800000810265:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000810269:	48 01 d0             	add    rax,rdx
ffff80000081026c:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:319

	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
ffff800000810270:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810274:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810277:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000081027b:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000081027f:	48 99                	cqo    
ffff800000810281:	48 f7 f9             	idiv   rcx
ffff800000810284:	48 89 d0             	mov    rax,rdx
ffff800000810287:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
ffff80000081028a:	e9 66 04 00 00       	jmp    ffff8000008106f5 <FAT32_readdir+0x6d3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:321
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
ffff80000081028f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810293:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810297:	3c 0f                	cmp    al,0xf
ffff800000810299:	0f 84 37 04 00 00    	je     ffff8000008106d6 <FAT32_readdir+0x6b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:323
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
ffff80000081029f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008102a3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008102a6:	3c e5                	cmp    al,0xe5
ffff8000008102a8:	0f 84 2b 04 00 00    	je     ffff8000008106d9 <FAT32_readdir+0x6b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:323 (discriminator 2)
ffff8000008102ae:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008102b2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008102b5:	84 c0                	test   al,al
ffff8000008102b7:	0f 84 1c 04 00 00    	je     ffff8000008106d9 <FAT32_readdir+0x6b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:323 (discriminator 4)
ffff8000008102bd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008102c1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008102c4:	3c 05                	cmp    al,0x5
ffff8000008102c6:	0f 84 0d 04 00 00    	je     ffff8000008106d9 <FAT32_readdir+0x6b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:326
			continue;

		namelen = 0;
ffff8000008102cc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:327
		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff8000008102d3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008102d7:	48 83 e8 20          	sub    rax,0x20
ffff8000008102db:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:329

		if(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff8000008102df:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008102e3:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff8000008102e7:	3c 0f                	cmp    al,0xf
ffff8000008102e9:	0f 85 44 02 00 00    	jne    ffff800000810533 <FAT32_readdir+0x511>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:329 (discriminator 1)
ffff8000008102ef:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008102f3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008102f6:	3c e5                	cmp    al,0xe5
ffff8000008102f8:	0f 84 35 02 00 00    	je     ffff800000810533 <FAT32_readdir+0x511>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:329 (discriminator 2)
ffff8000008102fe:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810302:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810305:	84 c0                	test   al,al
ffff800000810307:	0f 84 26 02 00 00    	je     ffff800000810533 <FAT32_readdir+0x511>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:329 (discriminator 3)
ffff80000081030d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810311:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810314:	3c 05                	cmp    al,0x5
ffff800000810316:	0f 84 17 02 00 00    	je     ffff800000810533 <FAT32_readdir+0x511>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:331
		{
			j = 0;
ffff80000081031c:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:333
			//long file/dir name read
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff800000810323:	eb 1a                	jmp    ffff80000081033f <FAT32_readdir+0x31d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:335
			{
				j++;
ffff800000810325:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336
				if(tmpldentry->LDIR_Ord & 0x40)
ffff800000810329:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081032d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810330:	0f b6 c0             	movzx  eax,al
ffff800000810333:	83 e0 40             	and    eax,0x40
ffff800000810336:	85 c0                	test   eax,eax
ffff800000810338:	75 34                	jne    ffff80000081036e <FAT32_readdir+0x34c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:338
					break;
				tmpldentry --;
ffff80000081033a:	48 83 6d b8 20       	sub    QWORD PTR [rbp-0x48],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:333
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff80000081033f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810343:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810347:	3c 0f                	cmp    al,0xf
ffff800000810349:	75 24                	jne    ffff80000081036f <FAT32_readdir+0x34d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:333 (discriminator 1)
ffff80000081034b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081034f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810352:	3c e5                	cmp    al,0xe5
ffff800000810354:	74 19                	je     ffff80000081036f <FAT32_readdir+0x34d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:333 (discriminator 2)
ffff800000810356:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081035a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081035d:	84 c0                	test   al,al
ffff80000081035f:	74 0e                	je     ffff80000081036f <FAT32_readdir+0x34d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:333 (discriminator 3)
ffff800000810361:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810365:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810368:	3c 05                	cmp    al,0x5
ffff80000081036a:	75 b9                	jne    ffff800000810325 <FAT32_readdir+0x303>
ffff80000081036c:	eb 01                	jmp    ffff80000081036f <FAT32_readdir+0x34d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:337
					break;
ffff80000081036e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:341
			}

			name = kmalloc(j * 13 + 1, 0);
ffff80000081036f:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff800000810372:	89 d0                	mov    eax,edx
ffff800000810374:	01 c0                	add    eax,eax
ffff800000810376:	01 d0                	add    eax,edx
ffff800000810378:	c1 e0 02             	shl    eax,0x2
ffff80000081037b:	01 d0                	add    eax,edx
ffff80000081037d:	83 c0 01             	add    eax,0x1
ffff800000810380:	be 00 00 00 00       	mov    esi,0x0
ffff800000810385:	89 c7                	mov    edi,eax
ffff800000810387:	49 89 df             	mov    r15,rbx
ffff80000081038a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081038f:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000810396:	ff ff ff 
ffff800000810399:	48 01 da             	add    rdx,rbx
ffff80000081039c:	ff d2                	call   rdx
ffff80000081039e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:342
			memset(name,0,j*13+1);
ffff8000008103a2:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff8000008103a5:	89 d0                	mov    eax,edx
ffff8000008103a7:	01 c0                	add    eax,eax
ffff8000008103a9:	01 d0                	add    eax,edx
ffff8000008103ab:	c1 e0 02             	shl    eax,0x2
ffff8000008103ae:	01 d0                	add    eax,edx
ffff8000008103b0:	83 c0 01             	add    eax,0x1
ffff8000008103b3:	89 c2                	mov    edx,eax
ffff8000008103b5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008103b9:	be 00 00 00 00       	mov    esi,0x0
ffff8000008103be:	48 89 c7             	mov    rdi,rax
ffff8000008103c1:	49 89 df             	mov    r15,rbx
ffff8000008103c4:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff8000008103cb:	ff ff ff 
ffff8000008103ce:	48 01 d8             	add    rax,rbx
ffff8000008103d1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:343
			tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff8000008103d3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008103d7:	48 83 e8 20          	sub    rax,0x20
ffff8000008103db:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:345

			for(x = 0;x<j;x++,tmpldentry --)
ffff8000008103df:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff8000008103e6:	e9 37 01 00 00       	jmp    ffff800000810522 <FAT32_readdir+0x500>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:347
			{
				for(y = 0;y<5;y++)
ffff8000008103eb:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff8000008103f2:	eb 53                	jmp    ffff800000810447 <FAT32_readdir+0x425>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348
					if(tmpldentry->LDIR_Name1[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff8000008103f4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008103f8:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008103fb:	48 63 d2             	movsxd rdx,edx
ffff8000008103fe:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000810403:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810407:	74 3a                	je     ffff800000810443 <FAT32_readdir+0x421>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348 (discriminator 1)
ffff800000810409:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081040d:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810410:	48 63 d2             	movsxd rdx,edx
ffff800000810413:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000810418:	66 85 c0             	test   ax,ax
ffff80000081041b:	74 26                	je     ffff800000810443 <FAT32_readdir+0x421>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:349
						name[namelen++] = (char)tmpldentry->LDIR_Name1[y];
ffff80000081041d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810421:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810424:	48 63 d2             	movsxd rdx,edx
ffff800000810427:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
ffff80000081042c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081042f:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810432:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810435:	48 63 d0             	movsxd rdx,eax
ffff800000810438:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081043c:	48 01 d0             	add    rax,rdx
ffff80000081043f:	89 ca                	mov    edx,ecx
ffff800000810441:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:347 (discriminator 2)
				for(y = 0;y<5;y++)
ffff800000810443:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:347 (discriminator 1)
ffff800000810447:	83 7d cc 04          	cmp    DWORD PTR [rbp-0x34],0x4
ffff80000081044b:	7e a7                	jle    ffff8000008103f4 <FAT32_readdir+0x3d2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:351

				for(y = 0;y<6;y++)
ffff80000081044d:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000810454:	eb 53                	jmp    ffff8000008104a9 <FAT32_readdir+0x487>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352
					if(tmpldentry->LDIR_Name2[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff800000810456:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081045a:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000081045d:	48 63 d2             	movsxd rdx,edx
ffff800000810460:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
ffff800000810465:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810469:	74 3a                	je     ffff8000008104a5 <FAT32_readdir+0x483>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352 (discriminator 1)
ffff80000081046b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081046f:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810472:	48 63 d2             	movsxd rdx,edx
ffff800000810475:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff80000081047a:	66 85 c0             	test   ax,ax
ffff80000081047d:	74 26                	je     ffff8000008104a5 <FAT32_readdir+0x483>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:353
						name[namelen++] = (char)tmpldentry->LDIR_Name2[y];
ffff80000081047f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810483:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810486:	48 63 d2             	movsxd rdx,edx
ffff800000810489:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
ffff80000081048e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810491:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810494:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810497:	48 63 d0             	movsxd rdx,eax
ffff80000081049a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081049e:	48 01 d0             	add    rax,rdx
ffff8000008104a1:	89 ca                	mov    edx,ecx
ffff8000008104a3:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:351 (discriminator 2)
				for(y = 0;y<6;y++)
ffff8000008104a5:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:351 (discriminator 1)
ffff8000008104a9:	83 7d cc 05          	cmp    DWORD PTR [rbp-0x34],0x5
ffff8000008104ad:	7e a7                	jle    ffff800000810456 <FAT32_readdir+0x434>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:355

				for(y = 0;y<2;y++)
ffff8000008104af:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff8000008104b6:	eb 5b                	jmp    ffff800000810513 <FAT32_readdir+0x4f1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356
					if(tmpldentry->LDIR_Name3[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff8000008104b8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008104bc:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008104bf:	48 63 d2             	movsxd rdx,edx
ffff8000008104c2:	48 83 c2 08          	add    rdx,0x8
ffff8000008104c6:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
ffff8000008104cb:	66 83 f8 ff          	cmp    ax,0xffff
ffff8000008104cf:	74 3e                	je     ffff80000081050f <FAT32_readdir+0x4ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356 (discriminator 1)
ffff8000008104d1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008104d5:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008104d8:	48 63 d2             	movsxd rdx,edx
ffff8000008104db:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff8000008104e0:	66 85 c0             	test   ax,ax
ffff8000008104e3:	74 2a                	je     ffff80000081050f <FAT32_readdir+0x4ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:357
						name[namelen++] = (char)tmpldentry->LDIR_Name3[y];
ffff8000008104e5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008104e9:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008104ec:	48 63 d2             	movsxd rdx,edx
ffff8000008104ef:	48 83 c2 08          	add    rdx,0x8
ffff8000008104f3:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
ffff8000008104f8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008104fb:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008104fe:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810501:	48 63 d0             	movsxd rdx,eax
ffff800000810504:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810508:	48 01 d0             	add    rax,rdx
ffff80000081050b:	89 ca                	mov    edx,ecx
ffff80000081050d:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:355 (discriminator 2)
				for(y = 0;y<2;y++)
ffff80000081050f:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:355 (discriminator 1)
ffff800000810513:	83 7d cc 01          	cmp    DWORD PTR [rbp-0x34],0x1
ffff800000810517:	7e 9f                	jle    ffff8000008104b8 <FAT32_readdir+0x496>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:345 (discriminator 2)
			for(x = 0;x<j;x++,tmpldentry --)
ffff800000810519:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
ffff80000081051d:	48 83 6d b8 20       	sub    QWORD PTR [rbp-0x48],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:345 (discriminator 1)
ffff800000810522:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810525:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff800000810528:	0f 8c bd fe ff ff    	jl     ffff8000008103eb <FAT32_readdir+0x3c9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:359
			}
			goto find_lookup_success;
ffff80000081052e:	e9 2c 02 00 00       	jmp    ffff80000081075f <FAT32_readdir+0x73d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:362
		}

		name = kmalloc(15, 0);
ffff800000810533:	be 00 00 00 00       	mov    esi,0x0
ffff800000810538:	bf 0f 00 00 00       	mov    edi,0xf
ffff80000081053d:	49 89 df             	mov    r15,rbx
ffff800000810540:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810545:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff80000081054c:	ff ff ff 
ffff80000081054f:	48 01 da             	add    rdx,rbx
ffff800000810552:	ff d2                	call   rdx
ffff800000810554:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:363
		memset(name,0,15);
ffff800000810558:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081055c:	ba 0f 00 00 00       	mov    edx,0xf
ffff800000810561:	be 00 00 00 00       	mov    esi,0x0
ffff800000810566:	48 89 c7             	mov    rdi,rax
ffff800000810569:	49 89 df             	mov    r15,rbx
ffff80000081056c:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff800000810573:	ff ff ff 
ffff800000810576:	48 01 d8             	add    rax,rbx
ffff800000810579:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:365
		//short file/dir base name compare
		for(x=0;x<8;x++)
ffff80000081057b:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff800000810582:	eb 74                	jmp    ffff8000008105f8 <FAT32_readdir+0x5d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:367
		{
			if(tmpdentry->DIR_Name[x] == ' ')
ffff800000810584:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000810588:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000081058b:	48 98                	cdqe   
ffff80000081058d:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810591:	3c 20                	cmp    al,0x20
ffff800000810593:	74 6b                	je     ffff800000810600 <FAT32_readdir+0x5de>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:369
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
ffff800000810595:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810599:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff80000081059d:	0f b6 c0             	movzx  eax,al
ffff8000008105a0:	83 e0 08             	and    eax,0x8
ffff8000008105a3:	85 c0                	test   eax,eax
ffff8000008105a5:	74 29                	je     ffff8000008105d0 <FAT32_readdir+0x5ae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:370
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
ffff8000008105a7:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008105ab:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008105ae:	48 98                	cdqe   
ffff8000008105b0:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008105b4:	8d 48 20             	lea    ecx,[rax+0x20]
ffff8000008105b7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008105ba:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008105bd:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff8000008105c0:	48 63 d0             	movsxd rdx,eax
ffff8000008105c3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008105c7:	48 01 d0             	add    rax,rdx
ffff8000008105ca:	89 ca                	mov    edx,ecx
ffff8000008105cc:	88 10                	mov    BYTE PTR [rax],dl
ffff8000008105ce:	eb 24                	jmp    ffff8000008105f4 <FAT32_readdir+0x5d2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:372
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
ffff8000008105d0:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008105d4:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008105d7:	48 98                	cdqe   
ffff8000008105d9:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
ffff8000008105dd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008105e0:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008105e3:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff8000008105e6:	48 63 d0             	movsxd rdx,eax
ffff8000008105e9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008105ed:	48 01 d0             	add    rax,rdx
ffff8000008105f0:	89 ca                	mov    edx,ecx
ffff8000008105f2:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:365 (discriminator 2)
		for(x=0;x<8;x++)
ffff8000008105f4:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:365 (discriminator 1)
ffff8000008105f8:	83 7d d0 07          	cmp    DWORD PTR [rbp-0x30],0x7
ffff8000008105fc:	7e 86                	jle    ffff800000810584 <FAT32_readdir+0x562>
ffff8000008105fe:	eb 01                	jmp    ffff800000810601 <FAT32_readdir+0x5df>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:368
				break;
ffff800000810600:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:375
		}

		if(tmpdentry->DIR_Attr & ATTR_DIRECTORY)
ffff800000810601:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810605:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810609:	0f b6 c0             	movzx  eax,al
ffff80000081060c:	83 e0 10             	and    eax,0x10
ffff80000081060f:	85 c0                	test   eax,eax
ffff800000810611:	0f 85 44 01 00 00    	jne    ffff80000081075b <FAT32_readdir+0x739>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:378
			goto find_lookup_success;

		name[namelen++] = '.';
ffff800000810617:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081061a:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081061d:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810620:	48 63 d0             	movsxd rdx,eax
ffff800000810623:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810627:	48 01 d0             	add    rax,rdx
ffff80000081062a:	c6 00 2e             	mov    BYTE PTR [rax],0x2e
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:381

		//short file ext name compare
		for(x=8;x<11;x++)
ffff80000081062d:	c7 45 d0 08 00 00 00 	mov    DWORD PTR [rbp-0x30],0x8
ffff800000810634:	eb 74                	jmp    ffff8000008106aa <FAT32_readdir+0x688>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:383
		{
			if(tmpdentry->DIR_Name[x] == ' ')
ffff800000810636:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000081063a:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000081063d:	48 98                	cdqe   
ffff80000081063f:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810643:	3c 20                	cmp    al,0x20
ffff800000810645:	74 6b                	je     ffff8000008106b2 <FAT32_readdir+0x690>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:385
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
ffff800000810647:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081064b:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff80000081064f:	0f b6 c0             	movzx  eax,al
ffff800000810652:	83 e0 10             	and    eax,0x10
ffff800000810655:	85 c0                	test   eax,eax
ffff800000810657:	74 29                	je     ffff800000810682 <FAT32_readdir+0x660>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:386
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
ffff800000810659:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000081065d:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810660:	48 98                	cdqe   
ffff800000810662:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810666:	8d 48 20             	lea    ecx,[rax+0x20]
ffff800000810669:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081066c:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081066f:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810672:	48 63 d0             	movsxd rdx,eax
ffff800000810675:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810679:	48 01 d0             	add    rax,rdx
ffff80000081067c:	89 ca                	mov    edx,ecx
ffff80000081067e:	88 10                	mov    BYTE PTR [rax],dl
ffff800000810680:	eb 24                	jmp    ffff8000008106a6 <FAT32_readdir+0x684>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:388
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
ffff800000810682:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000810686:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810689:	48 98                	cdqe   
ffff80000081068b:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
ffff80000081068f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810692:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810695:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810698:	48 63 d0             	movsxd rdx,eax
ffff80000081069b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081069f:	48 01 d0             	add    rax,rdx
ffff8000008106a2:	89 ca                	mov    edx,ecx
ffff8000008106a4:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:381 (discriminator 2)
		for(x=8;x<11;x++)
ffff8000008106a6:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:381 (discriminator 1)
ffff8000008106aa:	83 7d d0 0a          	cmp    DWORD PTR [rbp-0x30],0xa
ffff8000008106ae:	7e 86                	jle    ffff800000810636 <FAT32_readdir+0x614>
ffff8000008106b0:	eb 01                	jmp    ffff8000008106b3 <FAT32_readdir+0x691>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:384
				break;
ffff8000008106b2:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:390
		}
		if(x == 8)
ffff8000008106b3:	83 7d d0 08          	cmp    DWORD PTR [rbp-0x30],0x8
ffff8000008106b7:	0f 85 a1 00 00 00    	jne    ffff80000081075e <FAT32_readdir+0x73c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:391
			name[--namelen] = 0;
ffff8000008106bd:	83 6d dc 01          	sub    DWORD PTR [rbp-0x24],0x1
ffff8000008106c1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008106c4:	48 63 d0             	movsxd rdx,eax
ffff8000008106c7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008106cb:	48 01 d0             	add    rax,rdx
ffff8000008106ce:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:392
		goto find_lookup_success;
ffff8000008106d1:	e9 88 00 00 00       	jmp    ffff80000081075e <FAT32_readdir+0x73c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:322
			continue;
ffff8000008106d6:	90                   	nop
ffff8000008106d7:	eb 01                	jmp    ffff8000008106da <FAT32_readdir+0x6b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:324
			continue;
ffff8000008106d9:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:319 (discriminator 2)
	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
ffff8000008106da:	83 45 d8 20          	add    DWORD PTR [rbp-0x28],0x20
ffff8000008106de:	48 83 45 c0 20       	add    QWORD PTR [rbp-0x40],0x20
ffff8000008106e3:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008106e7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008106ea:	48 8d 50 20          	lea    rdx,[rax+0x20]
ffff8000008106ee:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008106f2:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:319 (discriminator 1)
ffff8000008106f5:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008106f8:	48 63 d0             	movsxd rdx,eax
ffff8000008106fb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008106ff:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810703:	48 39 c2             	cmp    rdx,rax
ffff800000810706:	0f 8c 83 fb ff ff    	jl     ffff80000081028f <FAT32_readdir+0x26d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:395
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000081070c:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000081070f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810713:	89 d6                	mov    esi,edx
ffff800000810715:	48 89 c7             	mov    rdi,rax
ffff800000810718:	49 89 df             	mov    r15,rbx
ffff80000081071b:	48 b8 2a 17 ef ff ff 	movabs rax,0xffffffffffef172a
ffff800000810722:	ff ff ff 
ffff800000810725:	48 01 d8             	add    rax,rbx
ffff800000810728:	ff d0                	call   rax
ffff80000081072a:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:396
	if(cluster < 0x0ffffff7)
ffff80000081072d:	81 7d ec f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff6
ffff800000810734:	77 05                	ja     ffff80000081073b <FAT32_readdir+0x719>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:397
		goto next_cluster;
ffff800000810736:	e9 55 fa ff ff       	jmp    ffff800000810190 <FAT32_readdir+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:399

    kmfree(buf);
ffff80000081073b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000081073f:	48 89 c7             	mov    rdi,rax
ffff800000810742:	49 89 df             	mov    r15,rbx
ffff800000810745:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff80000081074c:	ff ff ff 
ffff80000081074f:	48 01 d8             	add    rax,rbx
ffff800000810752:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:400
	return NULL;
ffff800000810754:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810759:	eb 3e                	jmp    ffff800000810799 <FAT32_readdir+0x777>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:376
			goto find_lookup_success;
ffff80000081075b:	90                   	nop
ffff80000081075c:	eb 01                	jmp    ffff80000081075f <FAT32_readdir+0x73d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:392
		goto find_lookup_success;
ffff80000081075e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:404

find_lookup_success:

	filp->position += 32;
ffff80000081075f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810763:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810766:	48 8d 50 20          	lea    rdx,[rax+0x20]
ffff80000081076a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081076e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:405
	return filler(dirent,name,namelen,0,0);
ffff800000810771:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810774:	48 63 d0             	movsxd rdx,eax
ffff800000810777:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000081077b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000081077f:	4c 8b 8d 78 ff ff ff 	mov    r9,QWORD PTR [rbp-0x88]
ffff800000810786:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff80000081078c:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000810791:	48 89 c7             	mov    rdi,rax
ffff800000810794:	41 ff d1             	call   r9
ffff800000810797:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:406
}
ffff800000810799:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff80000081079d:	5b                   	pop    rbx
ffff80000081079e:	41 5f                	pop    r15
ffff8000008107a0:	5d                   	pop    rbp
ffff8000008107a1:	c3                   	ret    

ffff8000008107a2 <FAT32_create>:
FAT32_create():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:423
	.readdir = FAT32_readdir,
};


long FAT32_create(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
ffff8000008107a2:	f3 0f 1e fa          	endbr64 
ffff8000008107a6:	55                   	push   rbp
ffff8000008107a7:	48 89 e5             	mov    rbp,rsp
ffff8000008107aa:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008107aa <FAT32_create+0x8>
ffff8000008107b1:	49 bb 26 d3 10 00 00 	movabs r11,0x10d326
ffff8000008107b8:	00 00 00 
ffff8000008107bb:	4c 01 d8             	add    rax,r11
ffff8000008107be:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008107c2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008107c6:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff8000008107c9:	90                   	nop
ffff8000008107ca:	5d                   	pop    rbp
ffff8000008107cb:	c3                   	ret    

ffff8000008107cc <FAT32_lookup>:
FAT32_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:427


struct dir_entry * FAT32_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry)
{
ffff8000008107cc:	f3 0f 1e fa          	endbr64 
ffff8000008107d0:	55                   	push   rbp
ffff8000008107d1:	48 89 e5             	mov    rbp,rsp
ffff8000008107d4:	41 57                	push   r15
ffff8000008107d6:	53                   	push   rbx
ffff8000008107d7:	48 83 ec 60          	sub    rsp,0x60
ffff8000008107db:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008107db <FAT32_lookup+0xf>
ffff8000008107e2:	49 bb f5 d2 10 00 00 	movabs r11,0x10d2f5
ffff8000008107e9:	00 00 00 
ffff8000008107ec:	4c 01 db             	add    rbx,r11
ffff8000008107ef:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff8000008107f3:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:428
	struct FAT32_inode_info * finode = parent_inode->private_index_info;
ffff8000008107f7:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008107fb:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff8000008107ff:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:429
	struct FAT32_sb_info * fsbi = parent_inode->sb->private_sb_info;
ffff800000810803:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000810807:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081080b:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081080f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:431

	unsigned int cluster = 0;
ffff800000810813:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:432
	unsigned long sector = 0;
ffff80000081081a:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff800000810821:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:433
	unsigned char * buf =NULL; 
ffff800000810822:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff800000810829:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:434
	int i = 0,j = 0,x = 0;
ffff80000081082a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000810831:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000810838:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:435
	struct FAT32_Directory * tmpdentry = NULL;
ffff80000081083f:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000810846:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:436
	struct FAT32_LongDirectory * tmpldentry = NULL;
ffff800000810847:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000081084e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:437
	struct index_node * p = NULL;
ffff80000081084f:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff800000810856:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:439

	buf = kmalloc(fsbi->bytes_per_cluster, 0);
ffff800000810857:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081085b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081085f:	be 00 00 00 00       	mov    esi,0x0
ffff800000810864:	48 89 c7             	mov    rdi,rax
ffff800000810867:	49 89 df             	mov    r15,rbx
ffff80000081086a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081086f:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000810876:	ff ff ff 
ffff800000810879:	48 01 da             	add    rdx,rbx
ffff80000081087c:	ff d2                	call   rdx
ffff80000081087e:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:441

	cluster = finode->first_cluster;
ffff800000810882:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000810886:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810889:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:444

next_cluster:
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff80000081088c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810890:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff800000810894:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000810897:	83 e8 02             	sub    eax,0x2
ffff80000081089a:	89 c1                	mov    ecx,eax
ffff80000081089c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008108a0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008108a4:	48 0f af c1          	imul   rax,rcx
ffff8000008108a8:	48 01 d0             	add    rax,rdx
ffff8000008108ab:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:445
	printf("lookup cluster:0x%x,sector:0x%x\r\n",cluster,sector);
ffff8000008108af:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008108b3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008108b6:	89 c6                	mov    esi,eax
ffff8000008108b8:	48 b8 f0 db ff ff ff 	movabs rax,0xffffffffffffdbf0
ffff8000008108bf:	ff ff ff 
ffff8000008108c2:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008108c6:	48 89 c7             	mov    rdi,rax
ffff8000008108c9:	49 89 df             	mov    r15,rbx
ffff8000008108cc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008108d1:	48 b9 23 3c ee ff ff 	movabs rcx,0xffffffffffee3c23
ffff8000008108d8:	ff ff ff 
ffff8000008108db:	48 01 d9             	add    rcx,rbx
ffff8000008108de:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:446
    if(blkdev_read(root_sb->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf)<0)
ffff8000008108e0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008108e4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008108e8:	48 c1 e0 09          	shl    rax,0x9
ffff8000008108ec:	48 89 c7             	mov    rdi,rax
ffff8000008108ef:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008108f3:	c1 e0 09             	shl    eax,0x9
ffff8000008108f6:	89 c6                	mov    esi,eax
ffff8000008108f8:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff8000008108ff:	ff ff ff 
ffff800000810902:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810906:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810909:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000081090d:	0f b7 c0             	movzx  eax,ax
ffff800000810910:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000810914:	48 89 d1             	mov    rcx,rdx
ffff800000810917:	48 89 fa             	mov    rdx,rdi
ffff80000081091a:	89 c7                	mov    edi,eax
ffff80000081091c:	49 89 df             	mov    r15,rbx
ffff80000081091f:	48 b8 4c 00 ef ff ff 	movabs rax,0xffffffffffef004c
ffff800000810926:	ff ff ff 
ffff800000810929:	48 01 d8             	add    rax,rbx
ffff80000081092c:	ff d0                	call   rax
ffff80000081092e:	85 c0                	test   eax,eax
ffff800000810930:	79 4b                	jns    ffff80000081097d <FAT32_lookup+0x1b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:448
	{
		printf("FAT32 FS(lookup) read disk ERROR!!!!!!!!!!\n");
ffff800000810932:	48 b8 18 dc ff ff ff 	movabs rax,0xffffffffffffdc18
ffff800000810939:	ff ff ff 
ffff80000081093c:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810940:	48 89 c7             	mov    rdi,rax
ffff800000810943:	49 89 df             	mov    r15,rbx
ffff800000810946:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081094b:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff800000810952:	ff ff ff 
ffff800000810955:	48 01 da             	add    rdx,rbx
ffff800000810958:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:449
        kmfree(buf);
ffff80000081095a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000081095e:	48 89 c7             	mov    rdi,rax
ffff800000810961:	49 89 df             	mov    r15,rbx
ffff800000810964:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff80000081096b:	ff ff ff 
ffff80000081096e:	48 01 d8             	add    rax,rbx
ffff800000810971:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:450
		return NULL;
ffff800000810973:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810978:	e9 5f 08 00 00       	jmp    ffff8000008111dc <FAT32_lookup+0xa10>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:453
	}

	tmpdentry = (struct FAT32_Directory *)buf;
ffff80000081097d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000810981:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:455

	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
ffff800000810985:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000081098c:	e9 9d 05 00 00       	jmp    ffff800000810f2e <FAT32_lookup+0x762>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:457
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
ffff800000810991:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810995:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810999:	3c 0f                	cmp    al,0xf
ffff80000081099b:	0f 84 59 05 00 00    	je     ffff800000810efa <FAT32_lookup+0x72e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
ffff8000008109a1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008109a5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008109a8:	3c e5                	cmp    al,0xe5
ffff8000008109aa:	0f 84 4d 05 00 00    	je     ffff800000810efd <FAT32_lookup+0x731>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459 (discriminator 2)
ffff8000008109b0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008109b4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008109b7:	84 c0                	test   al,al
ffff8000008109b9:	0f 84 3e 05 00 00    	je     ffff800000810efd <FAT32_lookup+0x731>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459 (discriminator 4)
ffff8000008109bf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008109c3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008109c6:	3c 05                	cmp    al,0x5
ffff8000008109c8:	0f 84 2f 05 00 00    	je     ffff800000810efd <FAT32_lookup+0x731>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:462
			continue;

		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff8000008109ce:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008109d2:	48 83 e8 20          	sub    rax,0x20
ffff8000008109d6:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:463
		j = 0;
ffff8000008109da:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:466

		//long file/dir name compare
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
ffff8000008109e1:	e9 88 01 00 00       	jmp    ffff800000810b6e <FAT32_lookup+0x3a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:468
		{
			for(x=0;x<5;x++)
ffff8000008109e6:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff8000008109ed:	eb 6a                	jmp    ffff800000810a59 <FAT32_lookup+0x28d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:470
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name1[x] == 0xffff)
ffff8000008109ef:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008109f3:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008109f6:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008109f9:	7e 15                	jle    ffff800000810a10 <FAT32_lookup+0x244>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:470 (discriminator 1)
ffff8000008109fb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008109ff:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810a02:	48 63 d2             	movsxd rdx,edx
ffff800000810a05:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000810a0a:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810a0e:	74 44                	je     ffff800000810a54 <FAT32_lookup+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:472
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name1[x] != (unsigned short)(dest_dentry->name[j++]))
ffff800000810a10:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810a14:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810a17:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810a1a:	0f 8f e0 04 00 00    	jg     ffff800000810f00 <FAT32_lookup+0x734>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:472 (discriminator 1)
ffff800000810a20:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810a24:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810a27:	48 63 d2             	movsxd rdx,edx
ffff800000810a2a:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
ffff800000810a2f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810a33:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000810a36:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810a39:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810a3c:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000810a3f:	48 98                	cdqe   
ffff800000810a41:	48 01 f0             	add    rax,rsi
ffff800000810a44:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810a47:	66 98                	cbw    
ffff800000810a49:	66 39 c1             	cmp    cx,ax
ffff800000810a4c:	0f 85 ae 04 00 00    	jne    ffff800000810f00 <FAT32_lookup+0x734>
ffff800000810a52:	eb 01                	jmp    ffff800000810a55 <FAT32_lookup+0x289>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:471
					continue;
ffff800000810a54:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:468 (discriminator 2)
			for(x=0;x<5;x++)
ffff800000810a55:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:468 (discriminator 1)
ffff800000810a59:	83 7d e0 04          	cmp    DWORD PTR [rbp-0x20],0x4
ffff800000810a5d:	7e 90                	jle    ffff8000008109ef <FAT32_lookup+0x223>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:475
					goto continue_cmp_fail;
			}
			for(x=0;x<6;x++)
ffff800000810a5f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000810a66:	eb 6a                	jmp    ffff800000810ad2 <FAT32_lookup+0x306>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:477
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name2[x] == 0xffff)
ffff800000810a68:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810a6c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810a6f:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810a72:	7e 15                	jle    ffff800000810a89 <FAT32_lookup+0x2bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:477 (discriminator 1)
ffff800000810a74:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810a78:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810a7b:	48 63 d2             	movsxd rdx,edx
ffff800000810a7e:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
ffff800000810a83:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810a87:	74 44                	je     ffff800000810acd <FAT32_lookup+0x301>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:479
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name2[x] != (unsigned short)(dest_dentry->name[j++]))
ffff800000810a89:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810a8d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810a90:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810a93:	0f 8f 6a 04 00 00    	jg     ffff800000810f03 <FAT32_lookup+0x737>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:479 (discriminator 1)
ffff800000810a99:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810a9d:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810aa0:	48 63 d2             	movsxd rdx,edx
ffff800000810aa3:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
ffff800000810aa8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810aac:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000810aaf:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810ab2:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810ab5:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000810ab8:	48 98                	cdqe   
ffff800000810aba:	48 01 f0             	add    rax,rsi
ffff800000810abd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810ac0:	66 98                	cbw    
ffff800000810ac2:	66 39 c1             	cmp    cx,ax
ffff800000810ac5:	0f 85 38 04 00 00    	jne    ffff800000810f03 <FAT32_lookup+0x737>
ffff800000810acb:	eb 01                	jmp    ffff800000810ace <FAT32_lookup+0x302>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:478
					continue;
ffff800000810acd:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:475 (discriminator 2)
			for(x=0;x<6;x++)
ffff800000810ace:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:475 (discriminator 1)
ffff800000810ad2:	83 7d e0 05          	cmp    DWORD PTR [rbp-0x20],0x5
ffff800000810ad6:	7e 90                	jle    ffff800000810a68 <FAT32_lookup+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:482
					goto continue_cmp_fail;
			}
			for(x=0;x<2;x++)
ffff800000810ad8:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000810adf:	eb 72                	jmp    ffff800000810b53 <FAT32_lookup+0x387>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:484
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name3[x] == 0xffff)
ffff800000810ae1:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810ae5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810ae8:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810aeb:	7e 19                	jle    ffff800000810b06 <FAT32_lookup+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:484 (discriminator 1)
ffff800000810aed:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810af1:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810af4:	48 63 d2             	movsxd rdx,edx
ffff800000810af7:	48 83 c2 08          	add    rdx,0x8
ffff800000810afb:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
ffff800000810b00:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810b04:	74 48                	je     ffff800000810b4e <FAT32_lookup+0x382>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:486
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name3[x] != (unsigned short)(dest_dentry->name[j++]))
ffff800000810b06:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810b0a:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810b0d:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810b10:	0f 8f f0 03 00 00    	jg     ffff800000810f06 <FAT32_lookup+0x73a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:486 (discriminator 1)
ffff800000810b16:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810b1a:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000810b1d:	48 63 d2             	movsxd rdx,edx
ffff800000810b20:	48 83 c2 08          	add    rdx,0x8
ffff800000810b24:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
ffff800000810b29:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810b2d:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000810b30:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810b33:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810b36:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000810b39:	48 98                	cdqe   
ffff800000810b3b:	48 01 f0             	add    rax,rsi
ffff800000810b3e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810b41:	66 98                	cbw    
ffff800000810b43:	66 39 c1             	cmp    cx,ax
ffff800000810b46:	0f 85 ba 03 00 00    	jne    ffff800000810f06 <FAT32_lookup+0x73a>
ffff800000810b4c:	eb 01                	jmp    ffff800000810b4f <FAT32_lookup+0x383>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:485
					continue;
ffff800000810b4e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:482 (discriminator 2)
			for(x=0;x<2;x++)
ffff800000810b4f:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:482 (discriminator 1)
ffff800000810b53:	83 7d e0 01          	cmp    DWORD PTR [rbp-0x20],0x1
ffff800000810b57:	7e 88                	jle    ffff800000810ae1 <FAT32_lookup+0x315>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:490
					goto continue_cmp_fail;
			}

			if(j >= dest_dentry->name_length)
ffff800000810b59:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810b5d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810b60:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810b63:	0f 8d 2e 04 00 00    	jge    ffff800000810f97 <FAT32_lookup+0x7cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:495
			{
				goto find_lookup_success;
			}

			tmpldentry --;
ffff800000810b69:	48 83 6d d0 20       	sub    QWORD PTR [rbp-0x30],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:466
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
ffff800000810b6e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810b72:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810b76:	3c 0f                	cmp    al,0xf
ffff800000810b78:	75 0f                	jne    ffff800000810b89 <FAT32_lookup+0x3bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:466 (discriminator 1)
ffff800000810b7a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810b7e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810b81:	3c e5                	cmp    al,0xe5
ffff800000810b83:	0f 85 5d fe ff ff    	jne    ffff8000008109e6 <FAT32_lookup+0x21a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:499
		}

		//short file/dir base name compare
		j = 0;
ffff800000810b89:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:500
		for(x=0;x<8;x++)
ffff800000810b90:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000810b97:	e9 f4 01 00 00       	jmp    ffff800000810d90 <FAT32_lookup+0x5c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:502
		{
			switch(tmpdentry->DIR_Name[x])
ffff800000810b9c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810ba0:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810ba3:	48 98                	cdqe   
ffff800000810ba5:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810ba9:	0f b6 c0             	movzx  eax,al
ffff800000810bac:	83 f8 7a             	cmp    eax,0x7a
ffff800000810baf:	0f 8f d0 01 00 00    	jg     ffff800000810d85 <FAT32_lookup+0x5b9>
ffff800000810bb5:	83 f8 61             	cmp    eax,0x61
ffff800000810bb8:	0f 8d e6 00 00 00    	jge    ffff800000810ca4 <FAT32_lookup+0x4d8>
ffff800000810bbe:	83 f8 5a             	cmp    eax,0x5a
ffff800000810bc1:	0f 8f be 01 00 00    	jg     ffff800000810d85 <FAT32_lookup+0x5b9>
ffff800000810bc7:	83 f8 41             	cmp    eax,0x41
ffff800000810bca:	0f 8d d4 00 00 00    	jge    ffff800000810ca4 <FAT32_lookup+0x4d8>
ffff800000810bd0:	83 f8 20             	cmp    eax,0x20
ffff800000810bd3:	74 1a                	je     ffff800000810bef <FAT32_lookup+0x423>
ffff800000810bd5:	83 f8 20             	cmp    eax,0x20
ffff800000810bd8:	0f 8c a7 01 00 00    	jl     ffff800000810d85 <FAT32_lookup+0x5b9>
ffff800000810bde:	83 e8 30             	sub    eax,0x30
ffff800000810be1:	83 f8 09             	cmp    eax,0x9
ffff800000810be4:	0f 87 9b 01 00 00    	ja     ffff800000810d85 <FAT32_lookup+0x5b9>
ffff800000810bea:	e9 53 01 00 00       	jmp    ffff800000810d42 <FAT32_lookup+0x576>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:505
			{
				case ' ':
					if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
ffff800000810bef:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810bf3:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810bf7:	0f b6 c0             	movzx  eax,al
ffff800000810bfa:	83 e0 10             	and    eax,0x10
ffff800000810bfd:	85 c0                	test   eax,eax
ffff800000810bff:	75 50                	jne    ffff800000810c51 <FAT32_lookup+0x485>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:507
					{
						if(dest_dentry->name[j]=='.')
ffff800000810c01:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810c05:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810c08:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810c0b:	48 98                	cdqe   
ffff800000810c0d:	48 01 d0             	add    rax,rdx
ffff800000810c10:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810c13:	3c 2e                	cmp    al,0x2e
ffff800000810c15:	0f 84 70 01 00 00    	je     ffff800000810d8b <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:509
							continue;
						else if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810c1b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810c1f:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810c22:	48 98                	cdqe   
ffff800000810c24:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810c28:	0f b6 d0             	movzx  edx,al
ffff800000810c2b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810c2f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810c32:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810c35:	48 98                	cdqe   
ffff800000810c37:	48 01 c8             	add    rax,rcx
ffff800000810c3a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810c3d:	0f be c0             	movsx  eax,al
ffff800000810c40:	39 c2                	cmp    edx,eax
ffff800000810c42:	0f 85 c1 02 00 00    	jne    ffff800000810f09 <FAT32_lookup+0x73d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:511
						{
							j++;
ffff800000810c48:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:512
							break;
ffff800000810c4c:	e9 3b 01 00 00       	jmp    ffff800000810d8c <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:519
						else
							goto continue_cmp_fail;
					}
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810c51:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810c55:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810c58:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810c5b:	7d 32                	jge    ffff800000810c8f <FAT32_lookup+0x4c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:519 (discriminator 1)
ffff800000810c5d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810c61:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810c64:	48 98                	cdqe   
ffff800000810c66:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810c6a:	0f b6 d0             	movzx  edx,al
ffff800000810c6d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810c71:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810c74:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810c77:	48 98                	cdqe   
ffff800000810c79:	48 01 c8             	add    rax,rcx
ffff800000810c7c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810c7f:	0f be c0             	movsx  eax,al
ffff800000810c82:	39 c2                	cmp    edx,eax
ffff800000810c84:	75 09                	jne    ffff800000810c8f <FAT32_lookup+0x4c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:521
						{
							j++;
ffff800000810c86:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:522
							break;
ffff800000810c8a:	e9 fd 00 00 00       	jmp    ffff800000810d8c <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:524
						}
						else if(j == dest_dentry->name_length)
ffff800000810c8f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810c93:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810c96:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810c99:	0f 85 6d 02 00 00    	jne    ffff800000810f0c <FAT32_lookup+0x740>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:525
							continue;
ffff800000810c9f:	e9 e8 00 00 00       	jmp    ffff800000810d8c <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:532
							goto continue_cmp_fail;
					}

				case 'A' ... 'Z':
				case 'a' ... 'z':
					if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
ffff800000810ca4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810ca8:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000810cac:	0f b6 c0             	movzx  eax,al
ffff800000810caf:	83 e0 08             	and    eax,0x8
ffff800000810cb2:	85 c0                	test   eax,eax
ffff800000810cb4:	74 49                	je     ffff800000810cff <FAT32_lookup+0x533>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:533
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
ffff800000810cb6:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810cba:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810cbd:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810cc0:	0f 8d 49 02 00 00    	jge    ffff800000810f0f <FAT32_lookup+0x743>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:533 (discriminator 1)
ffff800000810cc6:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810cca:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810ccd:	48 98                	cdqe   
ffff800000810ccf:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810cd3:	0f b6 c0             	movzx  eax,al
ffff800000810cd6:	8d 50 20             	lea    edx,[rax+0x20]
ffff800000810cd9:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810cdd:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810ce0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810ce3:	48 98                	cdqe   
ffff800000810ce5:	48 01 c8             	add    rax,rcx
ffff800000810ce8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810ceb:	0f be c0             	movsx  eax,al
ffff800000810cee:	39 c2                	cmp    edx,eax
ffff800000810cf0:	0f 85 19 02 00 00    	jne    ffff800000810f0f <FAT32_lookup+0x743>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:535
						{
							j++;
ffff800000810cf6:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:536
							break;
ffff800000810cfa:	e9 8d 00 00 00       	jmp    ffff800000810d8c <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:542
						}
						else
							goto continue_cmp_fail;
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810cff:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810d03:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810d06:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810d09:	0f 8d 03 02 00 00    	jge    ffff800000810f12 <FAT32_lookup+0x746>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:542 (discriminator 1)
ffff800000810d0f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810d13:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810d16:	48 98                	cdqe   
ffff800000810d18:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810d1c:	0f b6 d0             	movzx  edx,al
ffff800000810d1f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810d23:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810d26:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810d29:	48 98                	cdqe   
ffff800000810d2b:	48 01 c8             	add    rax,rcx
ffff800000810d2e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810d31:	0f be c0             	movsx  eax,al
ffff800000810d34:	39 c2                	cmp    edx,eax
ffff800000810d36:	0f 85 d6 01 00 00    	jne    ffff800000810f12 <FAT32_lookup+0x746>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:544
						{
							j++;
ffff800000810d3c:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:545
							break;
ffff800000810d40:	eb 4a                	jmp    ffff800000810d8c <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:552
						else
							goto continue_cmp_fail;
					}

				case '0' ... '9':
					if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810d42:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810d46:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810d49:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000810d4c:	0f 8d c3 01 00 00    	jge    ffff800000810f15 <FAT32_lookup+0x749>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:552 (discriminator 1)
ffff800000810d52:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810d56:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810d59:	48 98                	cdqe   
ffff800000810d5b:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810d5f:	0f b6 d0             	movzx  edx,al
ffff800000810d62:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810d66:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810d69:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810d6c:	48 98                	cdqe   
ffff800000810d6e:	48 01 c8             	add    rax,rcx
ffff800000810d71:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810d74:	0f be c0             	movsx  eax,al
ffff800000810d77:	39 c2                	cmp    edx,eax
ffff800000810d79:	0f 85 96 01 00 00    	jne    ffff800000810f15 <FAT32_lookup+0x749>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:554
					{
						j++;
ffff800000810d7f:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:555
						break;
ffff800000810d83:	eb 07                	jmp    ffff800000810d8c <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:561
					}
					else
						goto continue_cmp_fail;

				default :
					j++;
ffff800000810d85:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:562
					break;
ffff800000810d89:	eb 01                	jmp    ffff800000810d8c <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:508
							continue;
ffff800000810d8b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:500 (discriminator 2)
		for(x=0;x<8;x++)
ffff800000810d8c:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:500 (discriminator 1)
ffff800000810d90:	83 7d e0 07          	cmp    DWORD PTR [rbp-0x20],0x7
ffff800000810d94:	0f 8e 02 fe ff ff    	jle    ffff800000810b9c <FAT32_lookup+0x3d0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:566
			}
		}
		//short file ext name compare
		if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
ffff800000810d9a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810d9e:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810da2:	0f b6 c0             	movzx  eax,al
ffff800000810da5:	83 e0 10             	and    eax,0x10
ffff800000810da8:	85 c0                	test   eax,eax
ffff800000810daa:	0f 85 ea 01 00 00    	jne    ffff800000810f9a <FAT32_lookup+0x7ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:568
		{
			j++;
ffff800000810db0:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:569
			for(x=8;x<11;x++)
ffff800000810db4:	c7 45 e0 08 00 00 00 	mov    DWORD PTR [rbp-0x20],0x8
ffff800000810dbb:	e9 2b 01 00 00       	jmp    ffff800000810eeb <FAT32_lookup+0x71f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:571
			{
				switch(tmpdentry->DIR_Name[x])
ffff800000810dc0:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810dc4:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810dc7:	48 98                	cdqe   
ffff800000810dc9:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810dcd:	0f b6 c0             	movzx  eax,al
ffff800000810dd0:	83 f8 7a             	cmp    eax,0x7a
ffff800000810dd3:	0f 8f 3f 01 00 00    	jg     ffff800000810f18 <FAT32_lookup+0x74c>
ffff800000810dd9:	83 f8 61             	cmp    eax,0x61
ffff800000810ddc:	7d 2e                	jge    ffff800000810e0c <FAT32_lookup+0x640>
ffff800000810dde:	83 f8 5a             	cmp    eax,0x5a
ffff800000810de1:	0f 8f 31 01 00 00    	jg     ffff800000810f18 <FAT32_lookup+0x74c>
ffff800000810de7:	83 f8 41             	cmp    eax,0x41
ffff800000810dea:	7d 20                	jge    ffff800000810e0c <FAT32_lookup+0x640>
ffff800000810dec:	83 f8 20             	cmp    eax,0x20
ffff800000810def:	0f 84 c4 00 00 00    	je     ffff800000810eb9 <FAT32_lookup+0x6ed>
ffff800000810df5:	83 f8 20             	cmp    eax,0x20
ffff800000810df8:	0f 8c 1a 01 00 00    	jl     ffff800000810f18 <FAT32_lookup+0x74c>
ffff800000810dfe:	83 e8 30             	sub    eax,0x30
ffff800000810e01:	83 f8 09             	cmp    eax,0x9
ffff800000810e04:	0f 87 0e 01 00 00    	ja     ffff800000810f18 <FAT32_lookup+0x74c>
ffff800000810e0a:	eb 7e                	jmp    ffff800000810e8a <FAT32_lookup+0x6be>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:575
				{
					case 'A' ... 'Z':
					case 'a' ... 'z':
						if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
ffff800000810e0c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810e10:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000810e14:	0f b6 c0             	movzx  eax,al
ffff800000810e17:	83 e0 10             	and    eax,0x10
ffff800000810e1a:	85 c0                	test   eax,eax
ffff800000810e1c:	74 39                	je     ffff800000810e57 <FAT32_lookup+0x68b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:576
							if(tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
ffff800000810e1e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810e22:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810e25:	48 98                	cdqe   
ffff800000810e27:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810e2b:	0f b6 c0             	movzx  eax,al
ffff800000810e2e:	8d 50 20             	lea    edx,[rax+0x20]
ffff800000810e31:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810e35:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810e38:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810e3b:	48 98                	cdqe   
ffff800000810e3d:	48 01 c8             	add    rax,rcx
ffff800000810e40:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810e43:	0f be c0             	movsx  eax,al
ffff800000810e46:	39 c2                	cmp    edx,eax
ffff800000810e48:	0f 85 cd 00 00 00    	jne    ffff800000810f1b <FAT32_lookup+0x74f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:578
							{
								j++;
ffff800000810e4e:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:579
								break;
ffff800000810e52:	e9 90 00 00 00       	jmp    ffff800000810ee7 <FAT32_lookup+0x71b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:585
							}
							else
								goto continue_cmp_fail;
						else
						{
							if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810e57:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810e5b:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810e5e:	48 98                	cdqe   
ffff800000810e60:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810e64:	0f b6 d0             	movzx  edx,al
ffff800000810e67:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810e6b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810e6e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810e71:	48 98                	cdqe   
ffff800000810e73:	48 01 c8             	add    rax,rcx
ffff800000810e76:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810e79:	0f be c0             	movsx  eax,al
ffff800000810e7c:	39 c2                	cmp    edx,eax
ffff800000810e7e:	0f 85 9a 00 00 00    	jne    ffff800000810f1e <FAT32_lookup+0x752>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:587
							{
								j++;
ffff800000810e84:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:588
								break;
ffff800000810e88:	eb 5d                	jmp    ffff800000810ee7 <FAT32_lookup+0x71b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:595
							else
								goto continue_cmp_fail;
						}

					case '0' ... '9':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810e8a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810e8e:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810e91:	48 98                	cdqe   
ffff800000810e93:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810e97:	0f b6 d0             	movzx  edx,al
ffff800000810e9a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810e9e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810ea1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810ea4:	48 98                	cdqe   
ffff800000810ea6:	48 01 c8             	add    rax,rcx
ffff800000810ea9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810eac:	0f be c0             	movsx  eax,al
ffff800000810eaf:	39 c2                	cmp    edx,eax
ffff800000810eb1:	75 6e                	jne    ffff800000810f21 <FAT32_lookup+0x755>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:597
						{
							j++;
ffff800000810eb3:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:598
							break;
ffff800000810eb7:	eb 2e                	jmp    ffff800000810ee7 <FAT32_lookup+0x71b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:604
						}
						else
							goto continue_cmp_fail;

					case ' ':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000810eb9:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810ebd:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810ec0:	48 98                	cdqe   
ffff800000810ec2:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810ec6:	0f b6 d0             	movzx  edx,al
ffff800000810ec9:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810ecd:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810ed0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810ed3:	48 98                	cdqe   
ffff800000810ed5:	48 01 c8             	add    rax,rcx
ffff800000810ed8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810edb:	0f be c0             	movsx  eax,al
ffff800000810ede:	39 c2                	cmp    edx,eax
ffff800000810ee0:	75 42                	jne    ffff800000810f24 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:606
						{
							j++;
ffff800000810ee2:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:607
							break;
ffff800000810ee6:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:569 (discriminator 2)
			for(x=8;x<11;x++)
ffff800000810ee7:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:569 (discriminator 1)
ffff800000810eeb:	83 7d e0 0a          	cmp    DWORD PTR [rbp-0x20],0xa
ffff800000810eef:	0f 8e cb fe ff ff    	jle    ffff800000810dc0 <FAT32_lookup+0x5f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:617
					default :
						goto continue_cmp_fail;
				}
			}
		}
		goto find_lookup_success;
ffff800000810ef5:	e9 a0 00 00 00       	jmp    ffff800000810f9a <FAT32_lookup+0x7ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:458
			continue;
ffff800000810efa:	90                   	nop
ffff800000810efb:	eb 28                	jmp    ffff800000810f25 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:460
			continue;
ffff800000810efd:	90                   	nop
ffff800000810efe:	eb 25                	jmp    ffff800000810f25 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:473
					goto continue_cmp_fail;
ffff800000810f00:	90                   	nop
ffff800000810f01:	eb 22                	jmp    ffff800000810f25 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:480
					goto continue_cmp_fail;
ffff800000810f03:	90                   	nop
ffff800000810f04:	eb 1f                	jmp    ffff800000810f25 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:487
					goto continue_cmp_fail;
ffff800000810f06:	90                   	nop
ffff800000810f07:	eb 1c                	jmp    ffff800000810f25 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:515
							goto continue_cmp_fail;
ffff800000810f09:	90                   	nop
ffff800000810f0a:	eb 19                	jmp    ffff800000810f25 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:527
							goto continue_cmp_fail;
ffff800000810f0c:	90                   	nop
ffff800000810f0d:	eb 16                	jmp    ffff800000810f25 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:539
							goto continue_cmp_fail;
ffff800000810f0f:	90                   	nop
ffff800000810f10:	eb 13                	jmp    ffff800000810f25 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:548
							goto continue_cmp_fail;
ffff800000810f12:	90                   	nop
ffff800000810f13:	eb 10                	jmp    ffff800000810f25 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:558
						goto continue_cmp_fail;
ffff800000810f15:	90                   	nop
ffff800000810f16:	eb 0d                	jmp    ffff800000810f25 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:613
						goto continue_cmp_fail;
ffff800000810f18:	90                   	nop
ffff800000810f19:	eb 0a                	jmp    ffff800000810f25 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:582
								goto continue_cmp_fail;
ffff800000810f1b:	90                   	nop
ffff800000810f1c:	eb 07                	jmp    ffff800000810f25 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:591
								goto continue_cmp_fail;
ffff800000810f1e:	90                   	nop
ffff800000810f1f:	eb 04                	jmp    ffff800000810f25 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:601
							goto continue_cmp_fail;
ffff800000810f21:	90                   	nop
ffff800000810f22:	eb 01                	jmp    ffff800000810f25 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:610
							goto continue_cmp_fail;
ffff800000810f24:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:455 (discriminator 2)
	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
ffff800000810f25:	83 45 e8 20          	add    DWORD PTR [rbp-0x18],0x20
ffff800000810f29:	48 83 45 d8 20       	add    QWORD PTR [rbp-0x28],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:455 (discriminator 1)
ffff800000810f2e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000810f31:	48 63 d0             	movsxd rdx,eax
ffff800000810f34:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810f38:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810f3c:	48 39 c2             	cmp    rdx,rax
ffff800000810f3f:	0f 8c 4c fa ff ff    	jl     ffff800000810991 <FAT32_lookup+0x1c5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:622

continue_cmp_fail:;
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000810f45:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000810f48:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810f4c:	89 d6                	mov    esi,edx
ffff800000810f4e:	48 89 c7             	mov    rdi,rax
ffff800000810f51:	49 89 df             	mov    r15,rbx
ffff800000810f54:	48 b8 2a 17 ef ff ff 	movabs rax,0xffffffffffef172a
ffff800000810f5b:	ff ff ff 
ffff800000810f5e:	48 01 d8             	add    rax,rbx
ffff800000810f61:	ff d0                	call   rax
ffff800000810f63:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:623
	if(cluster < 0x0ffffff7)
ffff800000810f66:	81 7d ec f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff6
ffff800000810f6d:	77 05                	ja     ffff800000810f74 <FAT32_lookup+0x7a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:624
		goto next_cluster;
ffff800000810f6f:	e9 18 f9 ff ff       	jmp    ffff80000081088c <FAT32_lookup+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:626

    kmfree(buf);
ffff800000810f74:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000810f78:	48 89 c7             	mov    rdi,rax
ffff800000810f7b:	49 89 df             	mov    r15,rbx
ffff800000810f7e:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff800000810f85:	ff ff ff 
ffff800000810f88:	48 01 d8             	add    rax,rbx
ffff800000810f8b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:627
	return NULL;
ffff800000810f8d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810f92:	e9 45 02 00 00       	jmp    ffff8000008111dc <FAT32_lookup+0xa10>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:492
				goto find_lookup_success;
ffff800000810f97:	90                   	nop
ffff800000810f98:	eb 01                	jmp    ffff800000810f9b <FAT32_lookup+0x7cf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:617
		goto find_lookup_success;
ffff800000810f9a:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:630

find_lookup_success:
	p = (struct index_node *) kmalloc(sizeof(struct index_node), 0);
ffff800000810f9b:	be 00 00 00 00       	mov    esi,0x0
ffff800000810fa0:	bf 40 00 00 00       	mov    edi,0x40
ffff800000810fa5:	49 89 df             	mov    r15,rbx
ffff800000810fa8:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810fad:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000810fb4:	ff ff ff 
ffff800000810fb7:	48 01 da             	add    rdx,rbx
ffff800000810fba:	ff d2                	call   rdx
ffff800000810fbc:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:631
	memset(p,0,sizeof(struct index_node));
ffff800000810fc0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810fc4:	ba 40 00 00 00       	mov    edx,0x40
ffff800000810fc9:	be 00 00 00 00       	mov    esi,0x0
ffff800000810fce:	48 89 c7             	mov    rdi,rax
ffff800000810fd1:	49 89 df             	mov    r15,rbx
ffff800000810fd4:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff800000810fdb:	ff ff ff 
ffff800000810fde:	48 01 d8             	add    rax,rbx
ffff800000810fe1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:632
	p->file_size = tmpdentry->DIR_FileSize;
ffff800000810fe3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810fe7:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff800000810fea:	89 c2                	mov    edx,eax
ffff800000810fec:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810ff0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:633
	p->blocks = (p->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
ffff800000810ff3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810ff7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810ffa:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810ffe:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811002:	48 01 d0             	add    rax,rdx
ffff800000811005:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000811009:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081100d:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811011:	48 89 c1             	mov    rcx,rax
ffff800000811014:	48 89 d0             	mov    rax,rdx
ffff800000811017:	ba 00 00 00 00       	mov    edx,0x0
ffff80000081101c:	48 f7 f1             	div    rcx
ffff80000081101f:	48 89 c2             	mov    rdx,rax
ffff800000811022:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811026:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:634
	p->attribute = (tmpdentry->DIR_Attr & ATTR_DIRECTORY) ? FS_ATTR_DIR : FS_ATTR_FILE;
ffff80000081102a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081102e:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000811032:	0f b6 c0             	movzx  eax,al
ffff800000811035:	83 e0 10             	and    eax,0x10
ffff800000811038:	85 c0                	test   eax,eax
ffff80000081103a:	74 07                	je     ffff800000811043 <FAT32_lookup+0x877>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:634 (discriminator 1)
ffff80000081103c:	ba 02 00 00 00       	mov    edx,0x2
ffff800000811041:	eb 05                	jmp    ffff800000811048 <FAT32_lookup+0x87c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:634 (discriminator 2)
ffff800000811043:	ba 01 00 00 00       	mov    edx,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:634 (discriminator 4)
ffff800000811048:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081104c:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:635 (discriminator 4)
	p->sb = parent_inode->sb;
ffff800000811050:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000811054:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff800000811058:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081105c:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:636 (discriminator 4)
	p->f_ops = &FAT32_file_ops;
ffff800000811060:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811064:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff80000081106b:	ff ff ff 
ffff80000081106e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811072:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:637 (discriminator 4)
	p->inode_ops = &FAT32_inode_ops;
ffff800000811076:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081107a:	48 ba 48 ff ff ff ff 	movabs rdx,0xffffffffffffff48
ffff800000811081:	ff ff ff 
ffff800000811084:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811088:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:639 (discriminator 4)

	p->private_index_info = (struct FAT32_inode_info *) kmalloc(sizeof(struct FAT32_inode_info), 0);
ffff80000081108c:	be 00 00 00 00       	mov    esi,0x0
ffff800000811091:	bf 20 00 00 00       	mov    edi,0x20
ffff800000811096:	49 89 df             	mov    r15,rbx
ffff800000811099:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081109e:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff8000008110a5:	ff ff ff 
ffff8000008110a8:	48 01 da             	add    rdx,rbx
ffff8000008110ab:	ff d2                	call   rdx
ffff8000008110ad:	48 89 c2             	mov    rdx,rax
ffff8000008110b0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008110b4:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:640 (discriminator 4)
	memset(p->private_index_info,0,sizeof(struct FAT32_inode_info));
ffff8000008110b8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008110bc:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff8000008110c0:	ba 20 00 00 00       	mov    edx,0x20
ffff8000008110c5:	be 00 00 00 00       	mov    esi,0x0
ffff8000008110ca:	48 89 c7             	mov    rdi,rax
ffff8000008110cd:	49 89 df             	mov    r15,rbx
ffff8000008110d0:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff8000008110d7:	ff ff ff 
ffff8000008110da:	48 01 d8             	add    rax,rbx
ffff8000008110dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:641 (discriminator 4)
	finode = p->private_index_info;
ffff8000008110df:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008110e3:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff8000008110e7:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:643 (discriminator 4)

	finode->first_cluster = (tmpdentry->DIR_FstClusHI<< 16 | tmpdentry->DIR_FstClusLO) & 0x0fffffff;
ffff8000008110eb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008110ef:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff8000008110f3:	0f b7 c0             	movzx  eax,ax
ffff8000008110f6:	c1 e0 10             	shl    eax,0x10
ffff8000008110f9:	89 c2                	mov    edx,eax
ffff8000008110fb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008110ff:	0f b7 40 1a          	movzx  eax,WORD PTR [rax+0x1a]
ffff800000811103:	0f b7 c0             	movzx  eax,ax
ffff800000811106:	09 d0                	or     eax,edx
ffff800000811108:	48 98                	cdqe   
ffff80000081110a:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff80000081110f:	48 89 c2             	mov    rdx,rax
ffff800000811112:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811116:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:644 (discriminator 4)
	finode->dentry_location = cluster;
ffff800000811119:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000081111c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811120:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:645 (discriminator 4)
	finode->dentry_position = tmpdentry - (struct FAT32_Directory *)buf;
ffff800000811124:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811128:	48 2b 45 b0          	sub    rax,QWORD PTR [rbp-0x50]
ffff80000081112c:	48 c1 f8 05          	sar    rax,0x5
ffff800000811130:	48 89 c2             	mov    rdx,rax
ffff800000811133:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811137:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:646 (discriminator 4)
	finode->create_date = tmpdentry->DIR_CrtTime;
ffff80000081113b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081113f:	0f b7 50 0e          	movzx  edx,WORD PTR [rax+0xe]
ffff800000811143:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811147:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:647 (discriminator 4)
	finode->create_time = tmpdentry->DIR_CrtDate;
ffff80000081114b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081114f:	0f b7 50 10          	movzx  edx,WORD PTR [rax+0x10]
ffff800000811153:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811157:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:648 (discriminator 4)
	finode->write_date = tmpdentry->DIR_WrtTime;
ffff80000081115b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081115f:	0f b7 50 16          	movzx  edx,WORD PTR [rax+0x16]
ffff800000811163:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811167:	66 89 50 1c          	mov    WORD PTR [rax+0x1c],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:649 (discriminator 4)
	finode->write_time = tmpdentry->DIR_WrtDate;
ffff80000081116b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081116f:	0f b7 50 18          	movzx  edx,WORD PTR [rax+0x18]
ffff800000811173:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811177:	66 89 50 1e          	mov    WORD PTR [rax+0x1e],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:651 (discriminator 4)

	if((tmpdentry->DIR_FstClusHI >> 12) && (p->attribute & FS_ATTR_FILE))
ffff80000081117b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081117f:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff800000811183:	66 c1 e8 0c          	shr    ax,0xc
ffff800000811187:	66 85 c0             	test   ax,ax
ffff80000081118a:	74 27                	je     ffff8000008111b3 <FAT32_lookup+0x9e7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:651 (discriminator 1)
ffff80000081118c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811190:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811194:	83 e0 01             	and    eax,0x1
ffff800000811197:	48 85 c0             	test   rax,rax
ffff80000081119a:	74 17                	je     ffff8000008111b3 <FAT32_lookup+0x9e7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:653
	{
		p->attribute |= FS_ATTR_DEVICE;
ffff80000081119c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008111a0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008111a4:	48 83 c8 04          	or     rax,0x4
ffff8000008111a8:	48 89 c2             	mov    rdx,rax
ffff8000008111ab:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008111af:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:656
	}

	dest_dentry->dir_inode = p;
ffff8000008111b3:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008111b7:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff8000008111bb:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:657
    kmfree(buf);
ffff8000008111bf:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008111c3:	48 89 c7             	mov    rdi,rax
ffff8000008111c6:	49 89 df             	mov    r15,rbx
ffff8000008111c9:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff8000008111d0:	ff ff ff 
ffff8000008111d3:	48 01 d8             	add    rax,rbx
ffff8000008111d6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:658
	return dest_dentry;	
ffff8000008111d8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:659
}
ffff8000008111dc:	48 83 c4 60          	add    rsp,0x60
ffff8000008111e0:	5b                   	pop    rbx
ffff8000008111e1:	41 5f                	pop    r15
ffff8000008111e3:	5d                   	pop    rbp
ffff8000008111e4:	c3                   	ret    

ffff8000008111e5 <FAT32_mkdir>:
FAT32_mkdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:663


long FAT32_mkdir(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
ffff8000008111e5:	f3 0f 1e fa          	endbr64 
ffff8000008111e9:	55                   	push   rbp
ffff8000008111ea:	48 89 e5             	mov    rbp,rsp
ffff8000008111ed:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008111ed <FAT32_mkdir+0x8>
ffff8000008111f4:	49 bb e3 c8 10 00 00 	movabs r11,0x10c8e3
ffff8000008111fb:	00 00 00 
ffff8000008111fe:	4c 01 d8             	add    rax,r11
ffff800000811201:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811205:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811209:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000081120c:	90                   	nop
ffff80000081120d:	5d                   	pop    rbp
ffff80000081120e:	c3                   	ret    

ffff80000081120f <FAT32_rmdir>:
FAT32_rmdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:667


long FAT32_rmdir(struct index_node * inode,struct dir_entry * dentry)
{}
ffff80000081120f:	f3 0f 1e fa          	endbr64 
ffff800000811213:	55                   	push   rbp
ffff800000811214:	48 89 e5             	mov    rbp,rsp
ffff800000811217:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811217 <FAT32_rmdir+0x8>
ffff80000081121e:	49 bb b9 c8 10 00 00 	movabs r11,0x10c8b9
ffff800000811225:	00 00 00 
ffff800000811228:	4c 01 d8             	add    rax,r11
ffff80000081122b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081122f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811233:	90                   	nop
ffff800000811234:	5d                   	pop    rbp
ffff800000811235:	c3                   	ret    

ffff800000811236 <FAT32_rename>:
FAT32_rename():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:670

long FAT32_rename(struct index_node * old_inode,struct dir_entry * old_dentry,struct index_node * new_inode,struct dir_entry * new_dentry)
{}
ffff800000811236:	f3 0f 1e fa          	endbr64 
ffff80000081123a:	55                   	push   rbp
ffff80000081123b:	48 89 e5             	mov    rbp,rsp
ffff80000081123e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081123e <FAT32_rename+0x8>
ffff800000811245:	49 bb 92 c8 10 00 00 	movabs r11,0x10c892
ffff80000081124c:	00 00 00 
ffff80000081124f:	4c 01 d8             	add    rax,r11
ffff800000811252:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811256:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081125a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000081125e:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff800000811262:	90                   	nop
ffff800000811263:	5d                   	pop    rbp
ffff800000811264:	c3                   	ret    

ffff800000811265 <FAT32_getattr>:
FAT32_getattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:673

long FAT32_getattr(struct dir_entry * dentry,unsigned long * attr)
{}
ffff800000811265:	f3 0f 1e fa          	endbr64 
ffff800000811269:	55                   	push   rbp
ffff80000081126a:	48 89 e5             	mov    rbp,rsp
ffff80000081126d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081126d <FAT32_getattr+0x8>
ffff800000811274:	49 bb 63 c8 10 00 00 	movabs r11,0x10c863
ffff80000081127b:	00 00 00 
ffff80000081127e:	4c 01 d8             	add    rax,r11
ffff800000811281:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811285:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811289:	90                   	nop
ffff80000081128a:	5d                   	pop    rbp
ffff80000081128b:	c3                   	ret    

ffff80000081128c <FAT32_setattr>:
FAT32_setattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:676

long FAT32_setattr(struct dir_entry * dentry,unsigned long * attr)
{}
ffff80000081128c:	f3 0f 1e fa          	endbr64 
ffff800000811290:	55                   	push   rbp
ffff800000811291:	48 89 e5             	mov    rbp,rsp
ffff800000811294:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811294 <FAT32_setattr+0x8>
ffff80000081129b:	49 bb 3c c8 10 00 00 	movabs r11,0x10c83c
ffff8000008112a2:	00 00 00 
ffff8000008112a5:	4c 01 d8             	add    rax,r11
ffff8000008112a8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008112ac:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008112b0:	90                   	nop
ffff8000008112b1:	5d                   	pop    rbp
ffff8000008112b2:	c3                   	ret    

ffff8000008112b3 <FAT32_compare>:
FAT32_compare():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:691
	.setattr = FAT32_setattr,
};


//// these operation need cache and list
long FAT32_compare(struct dir_entry * parent_dentry,char * source_filename,char * destination_filename){}
ffff8000008112b3:	f3 0f 1e fa          	endbr64 
ffff8000008112b7:	55                   	push   rbp
ffff8000008112b8:	48 89 e5             	mov    rbp,rsp
ffff8000008112bb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008112bb <FAT32_compare+0x8>
ffff8000008112c2:	49 bb 15 c8 10 00 00 	movabs r11,0x10c815
ffff8000008112c9:	00 00 00 
ffff8000008112cc:	4c 01 d8             	add    rax,r11
ffff8000008112cf:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008112d3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008112d7:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff8000008112db:	90                   	nop
ffff8000008112dc:	5d                   	pop    rbp
ffff8000008112dd:	c3                   	ret    

ffff8000008112de <FAT32_hash>:
FAT32_hash():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:692
long FAT32_hash(struct dir_entry * dentry,char * filename){}
ffff8000008112de:	f3 0f 1e fa          	endbr64 
ffff8000008112e2:	55                   	push   rbp
ffff8000008112e3:	48 89 e5             	mov    rbp,rsp
ffff8000008112e6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008112e6 <FAT32_hash+0x8>
ffff8000008112ed:	49 bb ea c7 10 00 00 	movabs r11,0x10c7ea
ffff8000008112f4:	00 00 00 
ffff8000008112f7:	4c 01 d8             	add    rax,r11
ffff8000008112fa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008112fe:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811302:	90                   	nop
ffff800000811303:	5d                   	pop    rbp
ffff800000811304:	c3                   	ret    

ffff800000811305 <FAT32_release>:
FAT32_release():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:693
long FAT32_release(struct dir_entry * dentry){}
ffff800000811305:	f3 0f 1e fa          	endbr64 
ffff800000811309:	55                   	push   rbp
ffff80000081130a:	48 89 e5             	mov    rbp,rsp
ffff80000081130d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081130d <FAT32_release+0x8>
ffff800000811314:	49 bb c3 c7 10 00 00 	movabs r11,0x10c7c3
ffff80000081131b:	00 00 00 
ffff80000081131e:	4c 01 d8             	add    rax,r11
ffff800000811321:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811325:	90                   	nop
ffff800000811326:	5d                   	pop    rbp
ffff800000811327:	c3                   	ret    

ffff800000811328 <FAT32_iput>:
FAT32_iput():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:694
long FAT32_iput(struct dir_entry * dentry,struct index_node * inode){}
ffff800000811328:	f3 0f 1e fa          	endbr64 
ffff80000081132c:	55                   	push   rbp
ffff80000081132d:	48 89 e5             	mov    rbp,rsp
ffff800000811330:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811330 <FAT32_iput+0x8>
ffff800000811337:	49 bb a0 c7 10 00 00 	movabs r11,0x10c7a0
ffff80000081133e:	00 00 00 
ffff800000811341:	4c 01 d8             	add    rax,r11
ffff800000811344:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811348:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081134c:	90                   	nop
ffff80000081134d:	5d                   	pop    rbp
ffff80000081134e:	c3                   	ret    

ffff80000081134f <fat32_write_superblock>:
fat32_write_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:706
	.release = FAT32_release,
	.iput = FAT32_iput,
};


void fat32_write_superblock(struct super_block * sb){}
ffff80000081134f:	f3 0f 1e fa          	endbr64 
ffff800000811353:	55                   	push   rbp
ffff800000811354:	48 89 e5             	mov    rbp,rsp
ffff800000811357:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811357 <fat32_write_superblock+0x8>
ffff80000081135e:	49 bb 79 c7 10 00 00 	movabs r11,0x10c779
ffff800000811365:	00 00 00 
ffff800000811368:	4c 01 d8             	add    rax,r11
ffff80000081136b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081136f:	90                   	nop
ffff800000811370:	5d                   	pop    rbp
ffff800000811371:	c3                   	ret    

ffff800000811372 <fat32_put_superblock>:
fat32_put_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:709

void fat32_put_superblock(struct super_block * sb)
{
ffff800000811372:	f3 0f 1e fa          	endbr64 
ffff800000811376:	55                   	push   rbp
ffff800000811377:	48 89 e5             	mov    rbp,rsp
ffff80000081137a:	41 57                	push   r15
ffff80000081137c:	53                   	push   rbx
ffff80000081137d:	48 83 ec 10          	sub    rsp,0x10
ffff800000811381:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811381 <fat32_put_superblock+0xf>
ffff800000811388:	49 bb 4f c7 10 00 00 	movabs r11,0x10c74f
ffff80000081138f:	00 00 00 
ffff800000811392:	4c 01 db             	add    rbx,r11
ffff800000811395:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:710
    kmfree(sb->private_sb_info);
ffff800000811399:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081139d:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008113a1:	48 89 c7             	mov    rdi,rax
ffff8000008113a4:	49 89 df             	mov    r15,rbx
ffff8000008113a7:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff8000008113ae:	ff ff ff 
ffff8000008113b1:	48 01 d8             	add    rax,rbx
ffff8000008113b4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:711
    kmfree(sb->root->dir_inode->private_index_info);
ffff8000008113b6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008113ba:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008113bd:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008113c1:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff8000008113c5:	48 89 c7             	mov    rdi,rax
ffff8000008113c8:	49 89 df             	mov    r15,rbx
ffff8000008113cb:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff8000008113d2:	ff ff ff 
ffff8000008113d5:	48 01 d8             	add    rax,rbx
ffff8000008113d8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:712
    kmfree(sb->root->dir_inode);
ffff8000008113da:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008113de:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008113e1:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008113e5:	48 89 c7             	mov    rdi,rax
ffff8000008113e8:	49 89 df             	mov    r15,rbx
ffff8000008113eb:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff8000008113f2:	ff ff ff 
ffff8000008113f5:	48 01 d8             	add    rax,rbx
ffff8000008113f8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:713
    kmfree(sb->root);
ffff8000008113fa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008113fe:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811401:	48 89 c7             	mov    rdi,rax
ffff800000811404:	49 89 df             	mov    r15,rbx
ffff800000811407:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff80000081140e:	ff ff ff 
ffff800000811411:	48 01 d8             	add    rax,rbx
ffff800000811414:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:714
    kmfree(sb);
ffff800000811416:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081141a:	48 89 c7             	mov    rdi,rax
ffff80000081141d:	49 89 df             	mov    r15,rbx
ffff800000811420:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff800000811427:	ff ff ff 
ffff80000081142a:	48 01 d8             	add    rax,rbx
ffff80000081142d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:715
}
ffff80000081142f:	90                   	nop
ffff800000811430:	48 83 c4 10          	add    rsp,0x10
ffff800000811434:	5b                   	pop    rbx
ffff800000811435:	41 5f                	pop    r15
ffff800000811437:	5d                   	pop    rbp
ffff800000811438:	c3                   	ret    

ffff800000811439 <fat32_write_inode>:
fat32_write_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:718

void fat32_write_inode(struct index_node * inode)
{
ffff800000811439:	f3 0f 1e fa          	endbr64 
ffff80000081143d:	55                   	push   rbp
ffff80000081143e:	48 89 e5             	mov    rbp,rsp
ffff800000811441:	41 57                	push   r15
ffff800000811443:	53                   	push   rbx
ffff800000811444:	48 83 ec 40          	sub    rsp,0x40
ffff800000811448:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811448 <fat32_write_inode+0xf>
ffff80000081144f:	49 bb 88 c6 10 00 00 	movabs r11,0x10c688
ffff800000811456:	00 00 00 
ffff800000811459:	4c 01 db             	add    rbx,r11
ffff80000081145c:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:719
	struct FAT32_Directory * fdentry = NULL;
ffff800000811460:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000811467:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:720
	struct FAT32_Directory * buf = NULL;
ffff800000811468:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000081146f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:721
	struct FAT32_inode_info * finode = inode->private_index_info;
ffff800000811470:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811474:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000811478:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:722
	struct FAT32_sb_info * fsbi = inode->sb->private_sb_info;
ffff80000081147c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811480:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811484:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811488:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:723
	unsigned long sector = 0;
ffff80000081148c:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff800000811493:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:725

	if(finode->dentry_location == 0)
ffff800000811494:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811498:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000081149c:	48 85 c0             	test   rax,rax
ffff80000081149f:	75 2d                	jne    ffff8000008114ce <fat32_write_inode+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:727
	{
		printf("FS ERROR:write root inode!\n");	
ffff8000008114a1:	48 b8 44 dc ff ff ff 	movabs rax,0xffffffffffffdc44
ffff8000008114a8:	ff ff ff 
ffff8000008114ab:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008114af:	48 89 c7             	mov    rdi,rax
ffff8000008114b2:	49 89 df             	mov    r15,rbx
ffff8000008114b5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008114ba:	48 ba 23 3c ee ff ff 	movabs rdx,0xffffffffffee3c23
ffff8000008114c1:	ff ff ff 
ffff8000008114c4:	48 01 da             	add    rdx,rbx
ffff8000008114c7:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:728
		return ;
ffff8000008114c9:	e9 73 01 00 00       	jmp    ffff800000811641 <fat32_write_inode+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:731
	}

	sector = fsbi->Data_firstsector + (finode->dentry_location - 2) * fsbi->sector_per_cluster;
ffff8000008114ce:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008114d2:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff8000008114d6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008114da:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008114de:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff8000008114e2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008114e6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008114ea:	48 0f af c2          	imul   rax,rdx
ffff8000008114ee:	48 01 c8             	add    rax,rcx
ffff8000008114f1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:732
	buf = (struct FAT32_Directory *) kmalloc(fsbi->bytes_per_cluster, 0);
ffff8000008114f5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008114f9:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008114fd:	be 00 00 00 00       	mov    esi,0x0
ffff800000811502:	48 89 c7             	mov    rdi,rax
ffff800000811505:	49 89 df             	mov    r15,rbx
ffff800000811508:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081150d:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000811514:	ff ff ff 
ffff800000811517:	48 01 da             	add    rdx,rbx
ffff80000081151a:	ff d2                	call   rdx
ffff80000081151c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:733
	memset(buf,0,fsbi->bytes_per_cluster);
ffff800000811520:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811524:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811528:	89 c2                	mov    edx,eax
ffff80000081152a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081152e:	be 00 00 00 00       	mov    esi,0x0
ffff800000811533:	48 89 c7             	mov    rdi,rax
ffff800000811536:	49 89 df             	mov    r15,rbx
ffff800000811539:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff800000811540:	ff ff ff 
ffff800000811543:	48 01 d8             	add    rax,rbx
ffff800000811546:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:734
	blkdev_read(inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf);
ffff800000811548:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081154c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811550:	48 c1 e0 09          	shl    rax,0x9
ffff800000811554:	48 89 c7             	mov    rdi,rax
ffff800000811557:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081155b:	c1 e0 09             	shl    eax,0x9
ffff80000081155e:	89 c6                	mov    esi,eax
ffff800000811560:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811564:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff800000811568:	0f b7 c0             	movzx  eax,ax
ffff80000081156b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081156f:	48 89 d1             	mov    rcx,rdx
ffff800000811572:	48 89 fa             	mov    rdx,rdi
ffff800000811575:	89 c7                	mov    edi,eax
ffff800000811577:	49 89 df             	mov    r15,rbx
ffff80000081157a:	48 b8 4c 00 ef ff ff 	movabs rax,0xffffffffffef004c
ffff800000811581:	ff ff ff 
ffff800000811584:	48 01 d8             	add    rax,rbx
ffff800000811587:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:735
    fdentry = buf+finode->dentry_position;
ffff800000811589:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081158d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811591:	48 c1 e0 05          	shl    rax,0x5
ffff800000811595:	48 89 c2             	mov    rdx,rax
ffff800000811598:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081159c:	48 01 d0             	add    rax,rdx
ffff80000081159f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:738

	////alert fat32 dentry data
	fdentry->DIR_FileSize = inode->file_size;
ffff8000008115a3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008115a7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008115aa:	89 c2                	mov    edx,eax
ffff8000008115ac:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008115b0:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:739
	fdentry->DIR_FstClusLO = finode->first_cluster & 0xffff;
ffff8000008115b3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008115b7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008115ba:	89 c2                	mov    edx,eax
ffff8000008115bc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008115c0:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:740
	fdentry->DIR_FstClusHI = (fdentry->DIR_FstClusHI & 0xf000) | (finode->first_cluster >> 16);
ffff8000008115c4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008115c8:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff8000008115cc:	66 25 00 f0          	and    ax,0xf000
ffff8000008115d0:	89 c2                	mov    edx,eax
ffff8000008115d2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008115d6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008115d9:	48 c1 e8 10          	shr    rax,0x10
ffff8000008115dd:	09 c2                	or     edx,eax
ffff8000008115df:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008115e3:	66 89 50 14          	mov    WORD PTR [rax+0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:742
	
	blkdev_write(inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf);
ffff8000008115e7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008115eb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008115ef:	48 c1 e0 09          	shl    rax,0x9
ffff8000008115f3:	48 89 c7             	mov    rdi,rax
ffff8000008115f6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008115fa:	c1 e0 09             	shl    eax,0x9
ffff8000008115fd:	89 c6                	mov    esi,eax
ffff8000008115ff:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811603:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff800000811607:	0f b7 c0             	movzx  eax,ax
ffff80000081160a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081160e:	48 89 d1             	mov    rcx,rdx
ffff800000811611:	48 89 fa             	mov    rdx,rdi
ffff800000811614:	89 c7                	mov    edi,eax
ffff800000811616:	49 89 df             	mov    r15,rbx
ffff800000811619:	48 b8 c7 01 ef ff ff 	movabs rax,0xffffffffffef01c7
ffff800000811620:	ff ff ff 
ffff800000811623:	48 01 d8             	add    rax,rbx
ffff800000811626:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:743
    kmfree(buf);
ffff800000811628:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081162c:	48 89 c7             	mov    rdi,rax
ffff80000081162f:	49 89 df             	mov    r15,rbx
ffff800000811632:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff800000811639:	ff ff ff 
ffff80000081163c:	48 01 d8             	add    rax,rbx
ffff80000081163f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:744
}
ffff800000811641:	48 83 c4 40          	add    rsp,0x40
ffff800000811645:	5b                   	pop    rbx
ffff800000811646:	41 5f                	pop    r15
ffff800000811648:	5d                   	pop    rbp
ffff800000811649:	c3                   	ret    

ffff80000081164a <fat32_read_superblock>:
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:755

	.write_inode = fat32_write_inode,
};

struct super_block * fat32_read_superblock(struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
ffff80000081164a:	f3 0f 1e fa          	endbr64 
ffff80000081164e:	55                   	push   rbp
ffff80000081164f:	48 89 e5             	mov    rbp,rsp
ffff800000811652:	41 57                	push   r15
ffff800000811654:	53                   	push   rbx
ffff800000811655:	48 83 ec 40          	sub    rsp,0x40
ffff800000811659:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811659 <fat32_read_superblock+0xf>
ffff800000811660:	49 bb 77 c4 10 00 00 	movabs r11,0x10c477
ffff800000811667:	00 00 00 
ffff80000081166a:	4c 01 db             	add    rbx,r11
ffff80000081166d:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff800000811671:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:756
	struct super_block * sbp = NULL;
ffff800000811675:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000081167c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:757
	struct FAT32_inode_info * finode = NULL;
ffff80000081167d:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000811684:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:758
	struct FAT32_BootSector * fbs = NULL;
ffff800000811685:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000081168c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:759
	struct FAT32_sb_info * fsbi = NULL;
ffff80000081168d:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff800000811694:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:762

	////super block
	sbp = (struct super_block *) kmalloc(sizeof(struct super_block), 0);
ffff800000811695:	be 00 00 00 00       	mov    esi,0x0
ffff80000081169a:	bf 28 00 00 00       	mov    edi,0x28
ffff80000081169f:	49 89 df             	mov    r15,rbx
ffff8000008116a2:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008116a7:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff8000008116ae:	ff ff ff 
ffff8000008116b1:	48 01 da             	add    rdx,rbx
ffff8000008116b4:	ff d2                	call   rdx
ffff8000008116b6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:763
	memset(sbp,0,sizeof(struct super_block));
ffff8000008116ba:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008116be:	ba 28 00 00 00       	mov    edx,0x28
ffff8000008116c3:	be 00 00 00 00       	mov    esi,0x0
ffff8000008116c8:	48 89 c7             	mov    rdi,rax
ffff8000008116cb:	49 89 df             	mov    r15,rbx
ffff8000008116ce:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff8000008116d5:	ff ff ff 
ffff8000008116d8:	48 01 d8             	add    rax,rbx
ffff8000008116db:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:765

	sbp->sb_ops = &FAT32_sb_ops;
ffff8000008116dd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008116e1:	48 ba b0 fe ff ff ff 	movabs rdx,0xfffffffffffffeb0
ffff8000008116e8:	ff ff ff 
ffff8000008116eb:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008116ef:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:766
	sbp->private_sb_info = (struct FAT32_sb_info *) kmalloc(sizeof(struct FAT32_sb_info), 0);
ffff8000008116f3:	be 00 00 00 00       	mov    esi,0x0
ffff8000008116f8:	bf 60 00 00 00       	mov    edi,0x60
ffff8000008116fd:	49 89 df             	mov    r15,rbx
ffff800000811700:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811705:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff80000081170c:	ff ff ff 
ffff80000081170f:	48 01 da             	add    rdx,rbx
ffff800000811712:	ff d2                	call   rdx
ffff800000811714:	48 89 c2             	mov    rdx,rax
ffff800000811717:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081171b:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:767
	memset(sbp->private_sb_info,0,sizeof(struct FAT32_sb_info));
ffff80000081171f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811723:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811727:	ba 60 00 00 00       	mov    edx,0x60
ffff80000081172c:	be 00 00 00 00       	mov    esi,0x0
ffff800000811731:	48 89 c7             	mov    rdi,rax
ffff800000811734:	49 89 df             	mov    r15,rbx
ffff800000811737:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff80000081173e:	ff ff ff 
ffff800000811741:	48 01 d8             	add    rax,rbx
ffff800000811744:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:770

	////fat32 boot sector
	fbs = (struct FAT32_BootSector *)buf;
ffff800000811746:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000081174a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:771
 	fsbi = sbp->private_sb_info;
ffff80000081174e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811752:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811756:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:772
	fsbi->start_sector = DPTE->start_LBA;
ffff80000081175a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081175e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811761:	89 c2                	mov    edx,eax
ffff800000811763:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811767:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:773
	fsbi->sector_count = DPTE->sectors_limit;
ffff80000081176a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081176e:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000811771:	89 c2                	mov    edx,eax
ffff800000811773:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811777:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:774
	fsbi->sector_per_cluster = fbs->BPB_SecPerClus;
ffff80000081177b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081177f:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
ffff800000811783:	0f b6 d0             	movzx  edx,al
ffff800000811786:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081178a:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:775
	fsbi->bytes_per_cluster = fbs->BPB_SecPerClus * fbs->BPB_BytesPerSec;
ffff80000081178e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811792:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
ffff800000811796:	0f b6 d0             	movzx  edx,al
ffff800000811799:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081179d:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
ffff8000008117a1:	0f b7 c0             	movzx  eax,ax
ffff8000008117a4:	0f af c2             	imul   eax,edx
ffff8000008117a7:	48 63 d0             	movsxd rdx,eax
ffff8000008117aa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008117ae:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:776
	fsbi->bytes_per_sector = fbs->BPB_BytesPerSec;
ffff8000008117b2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008117b6:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
ffff8000008117ba:	0f b7 d0             	movzx  edx,ax
ffff8000008117bd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008117c1:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:777
	fsbi->Data_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt + fbs->BPB_FATSz32 * fbs->BPB_NumFATs;
ffff8000008117c5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008117c9:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff8000008117cc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008117d0:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
ffff8000008117d4:	0f b7 c0             	movzx  eax,ax
ffff8000008117d7:	8d 0c 02             	lea    ecx,[rdx+rax*1]
ffff8000008117da:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008117de:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff8000008117e1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008117e5:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff8000008117e9:	0f b6 c0             	movzx  eax,al
ffff8000008117ec:	0f af c2             	imul   eax,edx
ffff8000008117ef:	01 c8                	add    eax,ecx
ffff8000008117f1:	89 c2                	mov    edx,eax
ffff8000008117f3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008117f7:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:778
	fsbi->FAT1_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt;
ffff8000008117fb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008117ff:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000811802:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811806:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
ffff80000081180a:	0f b7 c0             	movzx  eax,ax
ffff80000081180d:	01 d0                	add    eax,edx
ffff80000081180f:	89 c2                	mov    edx,eax
ffff800000811811:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811815:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:779
	fsbi->sector_per_FAT = fbs->BPB_FATSz32;
ffff800000811819:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081181d:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff800000811820:	89 c2                	mov    edx,eax
ffff800000811822:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811826:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:780
	fsbi->NumFATs = fbs->BPB_NumFATs;
ffff80000081182a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081182e:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff800000811832:	0f b6 d0             	movzx  edx,al
ffff800000811835:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811839:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:781
	fsbi->fsinfo_sector_infat = fbs->BPB_FSInfo;
ffff80000081183d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811841:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff800000811845:	0f b7 d0             	movzx  edx,ax
ffff800000811848:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081184c:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:782
	fsbi->bootsector_bk_infat = fbs->BPB_BkBootSec;	
ffff800000811850:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811854:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
ffff800000811858:	0f b7 d0             	movzx  edx,ax
ffff80000081185b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081185f:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:784
	
	printf("FAT32 Boot Sector\n\tBPB_FSInfo:%x\n\tBPB_BkBootSec:%x\n\tBPB_TotSec32:%x\n",fbs->BPB_FSInfo,fbs->BPB_BkBootSec,fbs->BPB_TotSec32);
ffff800000811863:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811867:	8b 48 20             	mov    ecx,DWORD PTR [rax+0x20]
ffff80000081186a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081186e:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
ffff800000811872:	0f b7 d0             	movzx  edx,ax
ffff800000811875:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811879:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff80000081187d:	0f b7 c0             	movzx  eax,ax
ffff800000811880:	89 c6                	mov    esi,eax
ffff800000811882:	48 b8 60 dc ff ff ff 	movabs rax,0xffffffffffffdc60
ffff800000811889:	ff ff ff 
ffff80000081188c:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811890:	48 89 c7             	mov    rdi,rax
ffff800000811893:	49 89 df             	mov    r15,rbx
ffff800000811896:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081189b:	49 b8 23 3c ee ff ff 	movabs r8,0xffffffffffee3c23
ffff8000008118a2:	ff ff ff 
ffff8000008118a5:	49 01 d8             	add    r8,rbx
ffff8000008118a8:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:787
	
	////fat32 fsinfo sector
	fsbi->fat_fsinfo = (struct FAT32_FSInfo *) kmalloc(sizeof(struct FAT32_FSInfo), 0);
ffff8000008118ab:	be 00 00 00 00       	mov    esi,0x0
ffff8000008118b0:	bf 00 02 00 00       	mov    edi,0x200
ffff8000008118b5:	49 89 df             	mov    r15,rbx
ffff8000008118b8:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008118bd:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff8000008118c4:	ff ff ff 
ffff8000008118c7:	48 01 da             	add    rdx,rbx
ffff8000008118ca:	ff d2                	call   rdx
ffff8000008118cc:	48 89 c2             	mov    rdx,rax
ffff8000008118cf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008118d3:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:788
	memset(fsbi->fat_fsinfo,0,512);
ffff8000008118d7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008118db:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff8000008118df:	ba 00 02 00 00       	mov    edx,0x200
ffff8000008118e4:	be 00 00 00 00       	mov    esi,0x0
ffff8000008118e9:	48 89 c7             	mov    rdi,rax
ffff8000008118ec:	49 89 df             	mov    r15,rbx
ffff8000008118ef:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff8000008118f6:	ff ff ff 
ffff8000008118f9:	48 01 d8             	add    rax,rbx
ffff8000008118fc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:789
	blkdev_read(root_sb->dev,(DPTE->start_LBA + fbs->BPB_FSInfo)*SECTOR_SIZE,SECTOR_SIZE,(unsigned char *)fsbi->fat_fsinfo);
ffff8000008118fe:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811902:	48 8b 50 58          	mov    rdx,QWORD PTR [rax+0x58]
ffff800000811906:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081190a:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffff80000081190d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811911:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff800000811915:	0f b7 c0             	movzx  eax,ax
ffff800000811918:	01 c8                	add    eax,ecx
ffff80000081191a:	c1 e0 09             	shl    eax,0x9
ffff80000081191d:	89 c6                	mov    esi,eax
ffff80000081191f:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000811926:	ff ff ff 
ffff800000811929:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000081192d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811930:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000811934:	0f b7 c0             	movzx  eax,ax
ffff800000811937:	48 89 d1             	mov    rcx,rdx
ffff80000081193a:	ba 00 02 00 00       	mov    edx,0x200
ffff80000081193f:	89 c7                	mov    edi,eax
ffff800000811941:	49 89 df             	mov    r15,rbx
ffff800000811944:	48 b8 4c 00 ef ff ff 	movabs rax,0xffffffffffef004c
ffff80000081194b:	ff ff ff 
ffff80000081194e:	48 01 d8             	add    rax,rbx
ffff800000811951:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:790
	printf("FAT32 FSInfo\n\tFSI_LeadSig:%x\n\tFSI_StrucSig:%x\n\tFSI_Free_Count:%x\n",fsbi->fat_fsinfo->FSI_LeadSig,fsbi->fat_fsinfo->FSI_StrucSig,fsbi->fat_fsinfo->FSI_Free_Count);
ffff800000811953:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811957:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff80000081195b:	8b 88 e8 01 00 00    	mov    ecx,DWORD PTR [rax+0x1e8]
ffff800000811961:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811965:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000811969:	8b 90 e4 01 00 00    	mov    edx,DWORD PTR [rax+0x1e4]
ffff80000081196f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811973:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000811977:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000811979:	89 c6                	mov    esi,eax
ffff80000081197b:	48 b8 a8 dc ff ff ff 	movabs rax,0xffffffffffffdca8
ffff800000811982:	ff ff ff 
ffff800000811985:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811989:	48 89 c7             	mov    rdi,rax
ffff80000081198c:	49 89 df             	mov    r15,rbx
ffff80000081198f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811994:	49 b8 23 3c ee ff ff 	movabs r8,0xffffffffffee3c23
ffff80000081199b:	ff ff ff 
ffff80000081199e:	49 01 d8             	add    r8,rbx
ffff8000008119a1:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:793
	
	////directory entry
	sbp->root = (struct dir_entry *) kmalloc(sizeof(struct dir_entry), 0);
ffff8000008119a4:	be 00 00 00 00       	mov    esi,0x0
ffff8000008119a9:	bf 58 00 00 00       	mov    edi,0x58
ffff8000008119ae:	49 89 df             	mov    r15,rbx
ffff8000008119b1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008119b6:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff8000008119bd:	ff ff ff 
ffff8000008119c0:	48 01 da             	add    rdx,rbx
ffff8000008119c3:	ff d2                	call   rdx
ffff8000008119c5:	48 89 c2             	mov    rdx,rax
ffff8000008119c8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008119cc:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:794
	memset(sbp->root,0,sizeof(struct dir_entry));
ffff8000008119cf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008119d3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008119d6:	ba 58 00 00 00       	mov    edx,0x58
ffff8000008119db:	be 00 00 00 00       	mov    esi,0x0
ffff8000008119e0:	48 89 c7             	mov    rdi,rax
ffff8000008119e3:	49 89 df             	mov    r15,rbx
ffff8000008119e6:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff8000008119ed:	ff ff ff 
ffff8000008119f0:	48 01 d8             	add    rax,rbx
ffff8000008119f3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:796

	list_init(&sbp->root->child_node);
ffff8000008119f5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008119f9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008119fc:	48 83 c0 10          	add    rax,0x10
ffff800000811a00:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000811a04:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811a08:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000811a0f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811a13:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000811a1a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000811a1b:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:797
	list_init(&sbp->root->subdirs_list);
ffff800000811a1c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811a20:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811a23:	48 83 c0 28          	add    rax,0x28
ffff800000811a27:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000811a2b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811a2f:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000811a36:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811a3a:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000811a41:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000811a42:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:798
	sbp->root->parent = sbp->root;
ffff800000811a43:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811a47:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811a4a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000811a4e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000811a51:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:799
	sbp->root->dir_ops = &FAT32_dentry_ops;
ffff800000811a55:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811a59:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811a5c:	48 ba 38 ff ff ff ff 	movabs rdx,0xffffffffffffff38
ffff800000811a63:	ff ff ff 
ffff800000811a66:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811a6a:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:800
	sbp->root->name = (char *) kmalloc(2, 0);
ffff800000811a6e:	be 00 00 00 00       	mov    esi,0x0
ffff800000811a73:	bf 02 00 00 00       	mov    edi,0x2
ffff800000811a78:	49 89 df             	mov    r15,rbx
ffff800000811a7b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811a80:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000811a87:	ff ff ff 
ffff800000811a8a:	48 01 da             	add    rdx,rbx
ffff800000811a8d:	ff d2                	call   rdx
ffff800000811a8f:	48 89 c2             	mov    rdx,rax
ffff800000811a92:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811a96:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811a99:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:801
	sbp->root->name[0] = '/';
ffff800000811a9c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811aa0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811aa3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811aa6:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:802
	sbp->root->name_length = 1;
ffff800000811aa9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811aad:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811ab0:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:805

	////index node
	sbp->root->dir_inode = (struct index_node *) kmalloc(sizeof(struct index_node), 0);
ffff800000811ab7:	be 00 00 00 00       	mov    esi,0x0
ffff800000811abc:	bf 40 00 00 00       	mov    edi,0x40
ffff800000811ac1:	49 89 df             	mov    r15,rbx
ffff800000811ac4:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811ac9:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000811ad0:	ff ff ff 
ffff800000811ad3:	48 01 da             	add    rdx,rbx
ffff800000811ad6:	ff d2                	call   rdx
ffff800000811ad8:	48 89 c2             	mov    rdx,rax
ffff800000811adb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811adf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811ae2:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:806
	memset(sbp->root->dir_inode,0,sizeof(struct index_node));
ffff800000811ae6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811aea:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811aed:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811af1:	ba 40 00 00 00       	mov    edx,0x40
ffff800000811af6:	be 00 00 00 00       	mov    esi,0x0
ffff800000811afb:	48 89 c7             	mov    rdi,rax
ffff800000811afe:	49 89 df             	mov    r15,rbx
ffff800000811b01:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff800000811b08:	ff ff ff 
ffff800000811b0b:	48 01 d8             	add    rax,rbx
ffff800000811b0e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:807
	sbp->root->dir_inode->inode_ops = &FAT32_inode_ops;
ffff800000811b10:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b14:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811b17:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811b1b:	48 ba 48 ff ff ff ff 	movabs rdx,0xffffffffffffff48
ffff800000811b22:	ff ff ff 
ffff800000811b25:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811b29:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:808
	sbp->root->dir_inode->f_ops = &FAT32_file_ops;
ffff800000811b2d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b31:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811b34:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811b38:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff800000811b3f:	ff ff ff 
ffff800000811b42:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811b46:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:809
	sbp->root->dir_inode->file_size = 0;
ffff800000811b4a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b4e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811b51:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811b55:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:810
	sbp->root->dir_inode->blocks = (sbp->root->dir_inode->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
ffff800000811b5c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b60:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811b63:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811b67:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000811b6a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811b6e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811b72:	48 01 d0             	add    rax,rdx
ffff800000811b75:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000811b79:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811b7d:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811b81:	48 89 c6             	mov    rsi,rax
ffff800000811b84:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b88:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811b8b:	48 8b 48 40          	mov    rcx,QWORD PTR [rax+0x40]
ffff800000811b8f:	48 89 d0             	mov    rax,rdx
ffff800000811b92:	ba 00 00 00 00       	mov    edx,0x0
ffff800000811b97:	48 f7 f6             	div    rsi
ffff800000811b9a:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:811
	sbp->root->dir_inode->attribute = FS_ATTR_DIR;
ffff800000811b9e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811ba2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811ba5:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811ba9:	48 c7 40 10 02 00 00 	mov    QWORD PTR [rax+0x10],0x2
ffff800000811bb0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:812
	sbp->root->dir_inode->sb = sbp;
ffff800000811bb1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811bb5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811bb8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811bbc:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000811bc0:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:815

	////fat32 root inode
	sbp->root->dir_inode->private_index_info = (struct FAT32_inode_info *) kmalloc(sizeof(struct FAT32_inode_info), 0);
ffff800000811bc4:	be 00 00 00 00       	mov    esi,0x0
ffff800000811bc9:	bf 20 00 00 00       	mov    edi,0x20
ffff800000811bce:	49 89 df             	mov    r15,rbx
ffff800000811bd1:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811bd6:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000811bdd:	ff ff ff 
ffff800000811be0:	48 01 da             	add    rdx,rbx
ffff800000811be3:	ff d2                	call   rdx
ffff800000811be5:	48 89 c2             	mov    rdx,rax
ffff800000811be8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811bec:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811bef:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811bf3:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:816
	memset(sbp->root->dir_inode->private_index_info,0,sizeof(struct FAT32_inode_info));
ffff800000811bf7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811bfb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811bfe:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811c02:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000811c06:	ba 20 00 00 00       	mov    edx,0x20
ffff800000811c0b:	be 00 00 00 00       	mov    esi,0x0
ffff800000811c10:	48 89 c7             	mov    rdi,rax
ffff800000811c13:	49 89 df             	mov    r15,rbx
ffff800000811c16:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff800000811c1d:	ff ff ff 
ffff800000811c20:	48 01 d8             	add    rax,rbx
ffff800000811c23:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:817
	finode = (struct FAT32_inode_info *)sbp->root->dir_inode->private_index_info;
ffff800000811c25:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811c29:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811c2c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811c30:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000811c34:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:818
	finode->first_cluster = fbs->BPB_RootClus;
ffff800000811c38:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811c3c:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
ffff800000811c3f:	89 c2                	mov    edx,eax
ffff800000811c41:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811c45:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:819
	finode->dentry_location = 0;
ffff800000811c48:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811c4c:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff800000811c53:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:820
	finode->dentry_position = 0; 
ffff800000811c54:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811c58:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000811c5f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:821
	finode->create_date = 0;
ffff800000811c60:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811c64:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:822
	finode->create_time = 0;
ffff800000811c6a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811c6e:	66 c7 40 1a 00 00    	mov    WORD PTR [rax+0x1a],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:823
	finode->write_date = 0;
ffff800000811c74:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811c78:	66 c7 40 1c 00 00    	mov    WORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:824
	finode->write_time = 0;
ffff800000811c7e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811c82:	66 c7 40 1e 00 00    	mov    WORD PTR [rax+0x1e],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:826

	return sbp;
ffff800000811c88:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:827
}
ffff800000811c8c:	48 83 c4 40          	add    rsp,0x40
ffff800000811c90:	5b                   	pop    rbx
ffff800000811c91:	41 5f                	pop    r15
ffff800000811c93:	5d                   	pop    rbp
ffff800000811c94:	c3                   	ret    

ffff800000811c95 <DISK1_FAT32_FS_init>:
DISK1_FAT32_FS_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:839
	.read_superblock = fat32_read_superblock,
	.next = NULL,
};

void DISK1_FAT32_FS_init()
{
ffff800000811c95:	f3 0f 1e fa          	endbr64 
ffff800000811c99:	55                   	push   rbp
ffff800000811c9a:	48 89 e5             	mov    rbp,rsp
ffff800000811c9d:	41 57                	push   r15
ffff800000811c9f:	53                   	push   rbx
ffff800000811ca0:	48 81 ec 10 04 00 00 	sub    rsp,0x410
ffff800000811ca7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811ca7 <DISK1_FAT32_FS_init+0x12>
ffff800000811cae:	49 bb 29 be 10 00 00 	movabs r11,0x10be29
ffff800000811cb5:	00 00 00 
ffff800000811cb8:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:842
	int i;
	unsigned char buf[512];
	struct dir_entry * dentry = NULL;
ffff800000811cbb:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000811cc2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:843
	struct Disk_Partition_Table DPT = {0};
ffff800000811cc3:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
ffff800000811cca:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811ccf:	b9 40 00 00 00       	mov    ecx,0x40
ffff800000811cd4:	48 89 d7             	mov    rdi,rdx
ffff800000811cd7:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:845

	register_filesystem(&FAT32_fs_type);
ffff800000811cda:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000811ce1:	ff ff ff 
ffff800000811ce4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000811ce8:	48 89 c7             	mov    rdi,rax
ffff800000811ceb:	49 89 df             	mov    r15,rbx
ffff800000811cee:	48 b8 da d7 ee ff ff 	movabs rax,0xffffffffffeed7da
ffff800000811cf5:	ff ff ff 
ffff800000811cf8:	48 01 d8             	add    rax,rbx
ffff800000811cfb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:847
	
	memset(buf,0,512);
ffff800000811cfd:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000811d04:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811d09:	be 00 00 00 00       	mov    esi,0x0
ffff800000811d0e:	48 89 c7             	mov    rdi,rax
ffff800000811d11:	49 89 df             	mov    r15,rbx
ffff800000811d14:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff800000811d1b:	ff ff ff 
ffff800000811d1e:	48 01 d8             	add    rax,rbx
ffff800000811d21:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:849

	blkdev_read(root_sb->dev,0,512,buf);
ffff800000811d23:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000811d2a:	ff ff ff 
ffff800000811d2d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000811d31:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811d34:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000811d38:	0f b7 c0             	movzx  eax,ax
ffff800000811d3b:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000811d42:	48 89 d1             	mov    rcx,rdx
ffff800000811d45:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811d4a:	be 00 00 00 00       	mov    esi,0x0
ffff800000811d4f:	89 c7                	mov    edi,eax
ffff800000811d51:	49 89 df             	mov    r15,rbx
ffff800000811d54:	48 b8 4c 00 ef ff ff 	movabs rax,0xffffffffffef004c
ffff800000811d5b:	ff ff ff 
ffff800000811d5e:	48 01 d8             	add    rax,rbx
ffff800000811d61:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:852
    // read_disk(DISK_MAJOR_MAJOR, 0, 1, buf);/*rint r= equest(DISK_MAJOR_MAJOR,DISKREQ_READ,0x0,1,(unsigned char *)buf);
    // chk_result(r);
    DPT = *(struct Disk_Partition_Table *)buf;
ffff800000811d63:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000811d6a:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
ffff800000811d71:	48 89 d6             	mov    rsi,rdx
ffff800000811d74:	ba 40 00 00 00       	mov    edx,0x40
ffff800000811d79:	48 89 c7             	mov    rdi,rax
ffff800000811d7c:	48 89 d1             	mov    rcx,rdx
ffff800000811d7f:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:853
	printf("DPTE[0] start_LBA:%x\ttype:%x\n",DPT.DPTE[0].start_LBA,DPT.DPTE[0].type);
ffff800000811d82:	0f b6 85 a2 fd ff ff 	movzx  eax,BYTE PTR [rbp-0x25e]
ffff800000811d89:	0f b6 d0             	movzx  edx,al
ffff800000811d8c:	8b 85 a6 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25a]
ffff800000811d92:	89 c6                	mov    esi,eax
ffff800000811d94:	48 b8 f0 dc ff ff ff 	movabs rax,0xffffffffffffdcf0
ffff800000811d9b:	ff ff ff 
ffff800000811d9e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811da2:	48 89 c7             	mov    rdi,rax
ffff800000811da5:	49 89 df             	mov    r15,rbx
ffff800000811da8:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811dad:	48 b9 23 3c ee ff ff 	movabs rcx,0xffffffffffee3c23
ffff800000811db4:	ff ff ff 
ffff800000811db7:	48 01 d9             	add    rcx,rbx
ffff800000811dba:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:855

	memset(buf,0,512);
ffff800000811dbc:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000811dc3:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811dc8:	be 00 00 00 00       	mov    esi,0x0
ffff800000811dcd:	48 89 c7             	mov    rdi,rax
ffff800000811dd0:	49 89 df             	mov    r15,rbx
ffff800000811dd3:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff800000811dda:	ff ff ff 
ffff800000811ddd:	48 01 d8             	add    rax,rbx
ffff800000811de0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:856
	blkdev_read(root_sb->dev,DPT.DPTE[0].start_LBA*512,512,buf);
ffff800000811de2:	8b 85 a6 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25a]
ffff800000811de8:	c1 e0 09             	shl    eax,0x9
ffff800000811deb:	89 c6                	mov    esi,eax
ffff800000811ded:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff800000811df4:	ff ff ff 
ffff800000811df7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000811dfb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811dfe:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000811e02:	0f b7 c0             	movzx  eax,ax
ffff800000811e05:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000811e0c:	48 89 d1             	mov    rcx,rdx
ffff800000811e0f:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811e14:	89 c7                	mov    edi,eax
ffff800000811e16:	49 89 df             	mov    r15,rbx
ffff800000811e19:	48 b8 4c 00 ef ff ff 	movabs rax,0xffffffffffef004c
ffff800000811e20:	ff ff ff 
ffff800000811e23:	48 01 d8             	add    rax,rbx
ffff800000811e26:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:859

    //挂载新文件系统到/mnt
	struct super_block *fat32_sb= mount_fs("FAT32",&DPT.DPTE[0],buf);	//not dev node
ffff800000811e28:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000811e2f:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
ffff800000811e36:	48 8d 8a be 01 00 00 	lea    rcx,[rdx+0x1be]
ffff800000811e3d:	48 89 c2             	mov    rdx,rax
ffff800000811e40:	48 89 ce             	mov    rsi,rcx
ffff800000811e43:	48 b8 ea dc ff ff ff 	movabs rax,0xffffffffffffdcea
ffff800000811e4a:	ff ff ff 
ffff800000811e4d:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811e51:	48 89 c7             	mov    rdi,rax
ffff800000811e54:	49 89 df             	mov    r15,rbx
ffff800000811e57:	48 b8 2d d7 ee ff ff 	movabs rax,0xffffffffffeed72d
ffff800000811e5e:	ff ff ff 
ffff800000811e61:	48 01 d8             	add    rax,rbx
ffff800000811e64:	ff d0                	call   rax
ffff800000811e66:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:860
    fat32_sb->root=dmnt;
ffff800000811e6a:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000811e71:	ff ff ff 
ffff800000811e74:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000811e78:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000811e7b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811e7f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:862
//    list_add_to_behind(&root_sb->root->subdirs_list,ddev);//把dev文件夹挂到新的rfs下
}
ffff800000811e82:	90                   	nop
ffff800000811e83:	48 81 c4 10 04 00 00 	add    rsp,0x410
ffff800000811e8a:	5b                   	pop    rbx
ffff800000811e8b:	41 5f                	pop    r15
ffff800000811e8d:	5d                   	pop    rbp
ffff800000811e8e:	c3                   	ret    

ffff800000811e8f <close_tty>:
close_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:12
int stdd=0;
struct file_operations tty_fops={
        .open=init_tty, .close=close_tty,.write=write_tty,.read=read_tty,.ioctl=ioctl_tty
};

long close_tty(struct index_node * inode,struct file * filp){
ffff800000811e8f:	f3 0f 1e fa          	endbr64 
ffff800000811e93:	55                   	push   rbp
ffff800000811e94:	48 89 e5             	mov    rbp,rsp
ffff800000811e97:	41 57                	push   r15
ffff800000811e99:	53                   	push   rbx
ffff800000811e9a:	48 83 ec 30          	sub    rsp,0x30
ffff800000811e9e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811e9e <close_tty+0xf>
ffff800000811ea5:	49 bb 32 bc 10 00 00 	movabs r11,0x10bc32
ffff800000811eac:	00 00 00 
ffff800000811eaf:	4c 01 db             	add    rbx,r11
ffff800000811eb2:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000811eb6:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:13
    stdbuf_t * bi=&((tty_t*)filp->private_data)->stdin_buf;
ffff800000811eba:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811ebe:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811ec2:	48 83 c0 18          	add    rax,0x18
ffff800000811ec6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:14
    stdbuf_t * bo=&((tty_t*)filp->private_data)->stdout_buf;
ffff800000811eca:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811ece:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811ed2:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:15
    stdbuf_t * be=&((tty_t*)filp->private_data)->stderr_buf;
ffff800000811ed6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811eda:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811ede:	48 83 c0 30          	add    rax,0x30
ffff800000811ee2:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:16
    kmfree((addr_t) bi);
ffff800000811ee6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811eea:	48 89 c7             	mov    rdi,rax
ffff800000811eed:	49 89 df             	mov    r15,rbx
ffff800000811ef0:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff800000811ef7:	ff ff ff 
ffff800000811efa:	48 01 d8             	add    rax,rbx
ffff800000811efd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:17
    kmfree((addr_t) bo);
ffff800000811eff:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811f03:	48 89 c7             	mov    rdi,rax
ffff800000811f06:	49 89 df             	mov    r15,rbx
ffff800000811f09:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff800000811f10:	ff ff ff 
ffff800000811f13:	48 01 d8             	add    rax,rbx
ffff800000811f16:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:18
    kmfree((addr_t) be);
ffff800000811f18:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811f1c:	48 89 c7             	mov    rdi,rax
ffff800000811f1f:	49 89 df             	mov    r15,rbx
ffff800000811f22:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff800000811f29:	ff ff ff 
ffff800000811f2c:	48 01 d8             	add    rax,rbx
ffff800000811f2f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:19
    kmfree((addr_t) filp->private_data);
ffff800000811f31:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811f35:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811f39:	48 89 c7             	mov    rdi,rax
ffff800000811f3c:	49 89 df             	mov    r15,rbx
ffff800000811f3f:	48 b8 15 48 ee ff ff 	movabs rax,0xffffffffffee4815
ffff800000811f46:	ff ff ff 
ffff800000811f49:	48 01 d8             	add    rax,rbx
ffff800000811f4c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:20
    return 0;
ffff800000811f4e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:21
}
ffff800000811f53:	48 83 c4 30          	add    rsp,0x30
ffff800000811f57:	5b                   	pop    rbx
ffff800000811f58:	41 5f                	pop    r15
ffff800000811f5a:	5d                   	pop    rbp
ffff800000811f5b:	c3                   	ret    

ffff800000811f5c <init_tty>:
init_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:24
//打开文件
long init_tty(struct index_node * inode,struct file * filp)
{
ffff800000811f5c:	f3 0f 1e fa          	endbr64 
ffff800000811f60:	55                   	push   rbp
ffff800000811f61:	48 89 e5             	mov    rbp,rsp
ffff800000811f64:	41 57                	push   r15
ffff800000811f66:	53                   	push   rbx
ffff800000811f67:	48 83 ec 20          	sub    rsp,0x20
ffff800000811f6b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811f6b <init_tty+0xf>
ffff800000811f72:	49 bb 65 bb 10 00 00 	movabs r11,0x10bb65
ffff800000811f79:	00 00 00 
ffff800000811f7c:	4c 01 db             	add    rbx,r11
ffff800000811f7f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000811f83:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:25
    tty_t *ntty=(tty_t*) kmalloc();
ffff800000811f87:	49 89 df             	mov    r15,rbx
ffff800000811f8a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811f8f:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000811f96:	ff ff ff 
ffff800000811f99:	48 01 da             	add    rdx,rbx
ffff800000811f9c:	ff d2                	call   rdx
ffff800000811f9e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:27
    //创建三个缓冲区
    ntty->stdin_buf.data= (char*) kmalloc();
ffff800000811fa2:	49 89 df             	mov    r15,rbx
ffff800000811fa5:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811faa:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000811fb1:	ff ff ff 
ffff800000811fb4:	48 01 da             	add    rdx,rbx
ffff800000811fb7:	ff d2                	call   rdx
ffff800000811fb9:	48 89 c2             	mov    rdx,rax
ffff800000811fbc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811fc0:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:28
    ntty->stdout_buf.data=(char*) kmalloc();
ffff800000811fc4:	49 89 df             	mov    r15,rbx
ffff800000811fc7:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811fcc:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000811fd3:	ff ff ff 
ffff800000811fd6:	48 01 da             	add    rdx,rbx
ffff800000811fd9:	ff d2                	call   rdx
ffff800000811fdb:	48 89 c2             	mov    rdx,rax
ffff800000811fde:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811fe2:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:29
    ntty->stderr_buf.data=(char*) kmalloc();
ffff800000811fe5:	49 89 df             	mov    r15,rbx
ffff800000811fe8:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811fed:	48 ba a6 44 ee ff ff 	movabs rdx,0xffffffffffee44a6
ffff800000811ff4:	ff ff ff 
ffff800000811ff7:	48 01 da             	add    rdx,rbx
ffff800000811ffa:	ff d2                	call   rdx
ffff800000811ffc:	48 89 c2             	mov    rdx,rax
ffff800000811fff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812003:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:30
    ntty->stdin_buf. wptr= 0;
ffff800000812007:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081200b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:31
    ntty->stdout_buf.wptr= 0;
ffff800000812012:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812016:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:32
    ntty->stderr_buf.wptr= 0;
ffff80000081201d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812021:	c7 40 38 00 00 00 00 	mov    DWORD PTR [rax+0x38],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:33
    ntty->stdin_buf. rptr= 0;
ffff800000812028:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081202c:	c7 40 24 00 00 00 00 	mov    DWORD PTR [rax+0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:34
    ntty->stdout_buf.rptr= 0;
ffff800000812033:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812037:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:35
    ntty->stderr_buf.rptr= 0;
ffff80000081203e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812042:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [rax+0x3c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:36
    ntty->stdin_buf.size= PAGE_4K_SIZE;
ffff800000812049:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081204d:	c7 40 28 00 10 00 00 	mov    DWORD PTR [rax+0x28],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:37
    ntty->stdout_buf.size= PAGE_4K_SIZE;
ffff800000812054:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812058:	c7 40 10 00 10 00 00 	mov    DWORD PTR [rax+0x10],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:38
    ntty->stderr_buf.size= PAGE_4K_SIZE;
ffff80000081205f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812063:	c7 40 40 00 10 00 00 	mov    DWORD PTR [rax+0x40],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:40
    //设置inode文件操作方式为tty方式
    inode->f_ops=&tty_fops;
ffff80000081206a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081206e:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000812075:	ff ff ff 
ffff800000812078:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000081207c:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:41
    filp->f_ops=&tty_fops;
ffff800000812080:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812084:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff80000081208b:	ff ff ff 
ffff80000081208e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000812092:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:42
    filp->private_data=ntty;
ffff800000812096:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081209a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000081209e:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:43
    return 0;
ffff8000008120a2:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:44
}
ffff8000008120a7:	48 83 c4 20          	add    rsp,0x20
ffff8000008120ab:	5b                   	pop    rbx
ffff8000008120ac:	41 5f                	pop    r15
ffff8000008120ae:	5d                   	pop    rbp
ffff8000008120af:	c3                   	ret    

ffff8000008120b0 <read_tty>:
read_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:47

long read_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff8000008120b0:	f3 0f 1e fa          	endbr64 
ffff8000008120b4:	55                   	push   rbp
ffff8000008120b5:	48 89 e5             	mov    rbp,rsp
ffff8000008120b8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008120b8 <read_tty+0x8>
ffff8000008120bf:	49 bb 18 ba 10 00 00 	movabs r11,0x10ba18
ffff8000008120c6:	00 00 00 
ffff8000008120c9:	4c 01 d8             	add    rax,r11
ffff8000008120cc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff8000008120d0:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff8000008120d4:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff8000008120d8:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:48
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdin_buf;
ffff8000008120dc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008120e0:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008120e4:	48 83 c0 18          	add    rax,0x18
ffff8000008120e8:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:49
    int i=0;
ffff8000008120ec:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
ffff8000008120f3:	eb 6e                	jmp    ffff800000812163 <read_tty+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:51
        if(b->rptr==b->size)
ffff8000008120f5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008120f9:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff8000008120fc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812100:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000812103:	39 c2                	cmp    edx,eax
ffff800000812105:	75 0b                	jne    ffff800000812112 <read_tty+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:52
            b->rptr=0;
ffff800000812107:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081210b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53
        if(b->rptr==b->wptr)continue;
ffff800000812112:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812116:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff800000812119:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081211d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000812120:	39 c2                	cmp    edx,eax
ffff800000812122:	75 02                	jne    ffff800000812126 <read_tty+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53 (discriminator 1)
ffff800000812124:	eb 3d                	jmp    ffff800000812163 <read_tty+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:54
        buf[i++]=b->data[b->rptr];
ffff800000812126:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081212a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000081212d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812131:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000812134:	48 98                	cdqe   
ffff800000812136:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000081213a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081213d:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812140:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000812143:	48 63 d0             	movsxd rdx,eax
ffff800000812146:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081214a:	48 01 c2             	add    rdx,rax
ffff80000081214d:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
ffff800000812150:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:55
        b->rptr++;
ffff800000812152:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812156:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000812159:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081215c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812160:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
ffff800000812163:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000812166:	48 98                	cdqe   
ffff800000812168:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000081216c:	77 87                	ja     ffff8000008120f5 <read_tty+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:57
    }
}
ffff80000081216e:	90                   	nop
ffff80000081216f:	5d                   	pop    rbp
ffff800000812170:	c3                   	ret    

ffff800000812171 <write_tty>:
write_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:59
long write_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff800000812171:	f3 0f 1e fa          	endbr64 
ffff800000812175:	55                   	push   rbp
ffff800000812176:	48 89 e5             	mov    rbp,rsp
ffff800000812179:	41 57                	push   r15
ffff80000081217b:	48 83 ec 48          	sub    rsp,0x48
ffff80000081217f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081217f <write_tty+0xe>
ffff800000812186:	49 bb 51 b9 10 00 00 	movabs r11,0x10b951
ffff80000081218d:	00 00 00 
ffff800000812190:	4c 01 d8             	add    rax,r11
ffff800000812193:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000812197:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff80000081219b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff80000081219f:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:60
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdout_buf;
ffff8000008121a3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008121a7:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008121ab:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:61
    int i=0;
ffff8000008121af:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:62
    int saved_wptr=b->wptr;
ffff8000008121b6:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008121ba:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008121bd:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
ffff8000008121c0:	eb 5b                	jmp    ffff80000081221d <write_tty+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:64
        if(b->wptr==b->size)
ffff8000008121c2:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008121c6:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff8000008121c9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008121cd:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff8000008121d0:	39 d1                	cmp    ecx,edx
ffff8000008121d2:	75 0b                	jne    ffff8000008121df <write_tty+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:65
            b->wptr=0;
ffff8000008121d4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008121d8:	c7 42 08 00 00 00 00 	mov    DWORD PTR [rdx+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:66
        b->data[b->wptr]=buf[i++];
ffff8000008121df:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008121e2:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff8000008121e5:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffff8000008121e8:	48 63 ca             	movsxd rcx,edx
ffff8000008121eb:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008121ef:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff8000008121f3:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008121f7:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008121fa:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008121fe:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000812201:	48 63 d2             	movsxd rdx,edx
ffff800000812204:	48 01 d1             	add    rcx,rdx
ffff800000812207:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff80000081220a:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:67
        b->wptr++;
ffff80000081220c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812210:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000812213:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff800000812216:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081221a:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
ffff80000081221d:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000812220:	48 63 d2             	movsxd rdx,edx
ffff800000812223:	48 39 55 b8          	cmp    QWORD PTR [rbp-0x48],rdx
ffff800000812227:	77 99                	ja     ffff8000008121c2 <write_tty+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:70
    }
    //刷新到framebuffer
    write_framebuffer(filp,b->data+saved_wptr,count,0);
ffff800000812229:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081222d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000812230:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000812233:	48 63 d2             	movsxd rdx,edx
ffff800000812236:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000081223a:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000081223e:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
ffff800000812242:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000812247:	49 89 c7             	mov    r15,rax
ffff80000081224a:	49 b8 e9 d1 ee ff ff 	movabs r8,0xffffffffffeed1e9
ffff800000812251:	ff ff ff 
ffff800000812254:	49 01 c0             	add    r8,rax
ffff800000812257:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:71
}
ffff80000081225a:	90                   	nop
ffff80000081225b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000081225f:	c9                   	leave  
ffff800000812260:	c3                   	ret    

ffff800000812261 <ioctl_tty>:
ioctl_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:81
 * TTY_CONNECT:尝试连接到dev/console,这样会成为controlling terminal,里面的数据才能输出到屏幕上，
 * 因为除了特殊指定的进程都会有一个自己的天tty。
 * 成功返回0。
 * */
long ioctl_tty(struct index_node * inode, struct file * filp, unsigned long cmd, unsigned long arg)
{
ffff800000812261:	f3 0f 1e fa          	endbr64 
ffff800000812265:	55                   	push   rbp
ffff800000812266:	48 89 e5             	mov    rbp,rsp
ffff800000812269:	41 57                	push   r15
ffff80000081226b:	48 83 ec 58          	sub    rsp,0x58
ffff80000081226f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081226f <ioctl_tty+0xe>
ffff800000812276:	49 bb 61 b8 10 00 00 	movabs r11,0x10b861
ffff80000081227d:	00 00 00 
ffff800000812280:	4c 01 d8             	add    rax,r11
ffff800000812283:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff800000812287:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff80000081228b:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
ffff80000081228f:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:82
    stdbuf_t * b=&((tty_t*)filp->private_data)->stderr_buf;
ffff800000812293:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000812297:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000081229b:	48 83 c2 30          	add    rdx,0x30
ffff80000081229f:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:83
    stdbuf_t * ib=&((tty_t*)filp->private_data)->stdin_buf;
ffff8000008122a3:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff8000008122a7:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008122ab:	48 83 c2 18          	add    rdx,0x18
ffff8000008122af:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:84
    int i=0;
ffff8000008122b3:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:85
    char* buf=*((char**)arg);
ffff8000008122ba:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff8000008122be:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008122c1:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:86
    unsigned long count=*((unsigned long*)(arg+8));
ffff8000008122c5:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff8000008122c9:	48 83 c2 08          	add    rdx,0x8
ffff8000008122cd:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008122d0:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:87
    int saved_wptr=b->wptr;
ffff8000008122d4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008122d8:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008122db:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:88
    int fd=-1;
ffff8000008122de:	c7 45 c0 ff ff ff ff 	mov    DWORD PTR [rbp-0x40],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:89
    switch (cmd)
ffff8000008122e5:	48 83 7d a8 03       	cmp    QWORD PTR [rbp-0x58],0x3
ffff8000008122ea:	0f 84 b8 01 00 00    	je     ffff8000008124a8 <ioctl_tty+0x247>
ffff8000008122f0:	48 83 7d a8 03       	cmp    QWORD PTR [rbp-0x58],0x3
ffff8000008122f5:	0f 87 b8 01 00 00    	ja     ffff8000008124b3 <ioctl_tty+0x252>
ffff8000008122fb:	48 83 7d a8 02       	cmp    QWORD PTR [rbp-0x58],0x2
ffff800000812300:	0f 84 0f 01 00 00    	je     ffff800000812415 <ioctl_tty+0x1b4>
ffff800000812306:	48 83 7d a8 02       	cmp    QWORD PTR [rbp-0x58],0x2
ffff80000081230b:	0f 87 a2 01 00 00    	ja     ffff8000008124b3 <ioctl_tty+0x252>
ffff800000812311:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff800000812316:	74 6b                	je     ffff800000812383 <ioctl_tty+0x122>
ffff800000812318:	48 83 7d a8 01       	cmp    QWORD PTR [rbp-0x58],0x1
ffff80000081231d:	0f 84 a2 00 00 00    	je     ffff8000008123c5 <ioctl_tty+0x164>
ffff800000812323:	e9 8b 01 00 00       	jmp    ffff8000008124b3 <ioctl_tty+0x252>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:93
    {
        case TTY_WSTDERR:
            while (i<count){
                if(b->wptr==b->size)
ffff800000812328:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081232c:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff80000081232f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812333:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff800000812336:	39 d1                	cmp    ecx,edx
ffff800000812338:	75 0b                	jne    ffff800000812345 <ioctl_tty+0xe4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:94
                    b->wptr=0;
ffff80000081233a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081233e:	c7 42 08 00 00 00 00 	mov    DWORD PTR [rdx+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:95
                b->data[b->wptr]=buf[i++];
ffff800000812345:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000812348:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff80000081234b:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffff80000081234e:	48 63 ca             	movsxd rcx,edx
ffff800000812351:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000812355:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff800000812359:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081235d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000812360:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812364:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000812367:	48 63 d2             	movsxd rdx,edx
ffff80000081236a:	48 01 d1             	add    rcx,rdx
ffff80000081236d:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff800000812370:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:96
                b->wptr++;
ffff800000812372:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812376:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000812379:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff80000081237c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812380:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:92
            while (i<count){
ffff800000812383:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000812386:	48 63 d2             	movsxd rdx,edx
ffff800000812389:	48 39 55 c8          	cmp    QWORD PTR [rbp-0x38],rdx
ffff80000081238d:	77 99                	ja     ffff800000812328 <ioctl_tty+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:99
            }
            //刷新到framebuffer
            write_framebuffer(filp,b->data+saved_wptr,count,0);
ffff80000081238f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812393:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000812396:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff800000812399:	48 63 d2             	movsxd rdx,edx
ffff80000081239c:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff8000008123a0:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008123a4:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
ffff8000008123a8:	b9 00 00 00 00       	mov    ecx,0x0
ffff8000008123ad:	49 89 c7             	mov    r15,rax
ffff8000008123b0:	49 b8 e9 d1 ee ff ff 	movabs r8,0xffffffffffeed1e9
ffff8000008123b7:	ff ff ff 
ffff8000008123ba:	49 01 c0             	add    r8,rax
ffff8000008123bd:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:100
        break;
ffff8000008123c0:	e9 f7 00 00 00       	jmp    ffff8000008124bc <ioctl_tty+0x25b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:102
        case TTY_CONNECT:
            fd=sys_open("dev/console",O_WRONLY|O_CREAT|O_EXCL);
ffff8000008123c5:	be c1 00 00 00       	mov    esi,0xc1
ffff8000008123ca:	48 ba 0e dd ff ff ff 	movabs rdx,0xffffffffffffdd0e
ffff8000008123d1:	ff ff ff 
ffff8000008123d4:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff8000008123d8:	48 89 d7             	mov    rdi,rdx
ffff8000008123db:	49 89 c7             	mov    r15,rax
ffff8000008123de:	48 ba e3 dc ee ff ff 	movabs rdx,0xffffffffffeedce3
ffff8000008123e5:	ff ff ff 
ffff8000008123e8:	48 01 c2             	add    rdx,rax
ffff8000008123eb:	ff d2                	call   rdx
ffff8000008123ed:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103
            if(fd==-1)return -1;
ffff8000008123f0:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
ffff8000008123f4:	75 0c                	jne    ffff800000812402 <ioctl_tty+0x1a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103 (discriminator 1)
ffff8000008123f6:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff8000008123fd:	e9 bf 00 00 00       	jmp    ffff8000008124c1 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:104
            ((tty_t*)filp->private_data)->console_fd=fd;
ffff800000812402:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000812406:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081240a:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff80000081240d:	89 50 48             	mov    DWORD PTR [rax+0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:105
            break;
ffff800000812410:	e9 a7 00 00 00       	jmp    ffff8000008124bc <ioctl_tty+0x25b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:107
        case TTY_DISCONNECT:
            fd=((tty_t*)filp->private_data)->console_fd;
ffff800000812415:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000812419:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000081241d:	8b 52 48             	mov    edx,DWORD PTR [rdx+0x48]
ffff800000812420:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108
            if(fd==-1)return -1;
ffff800000812423:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
ffff800000812427:	75 0c                	jne    ffff800000812435 <ioctl_tty+0x1d4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108 (discriminator 1)
ffff800000812429:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000812430:	e9 8c 00 00 00       	jmp    ffff8000008124c1 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:109
            sys_close(fd);
ffff800000812435:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff800000812438:	89 d7                	mov    edi,edx
ffff80000081243a:	49 89 c7             	mov    r15,rax
ffff80000081243d:	48 ba 83 e3 ee ff ff 	movabs rdx,0xffffffffffeee383
ffff800000812444:	ff ff ff 
ffff800000812447:	48 01 c2             	add    rdx,rax
ffff80000081244a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
        case TTY_WSTDIN:
            while (i<count){
ffff80000081244c:	eb 5a                	jmp    ffff8000008124a8 <ioctl_tty+0x247>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:112
                if(ib->wptr==ib->size)
ffff80000081244e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812452:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000812455:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812459:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000081245c:	39 c2                	cmp    edx,eax
ffff80000081245e:	75 0b                	jne    ffff80000081246b <ioctl_tty+0x20a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:113
                    ib->wptr=0;
ffff800000812460:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812464:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:114
                ib->data[ib->wptr]=buf[i++];
ffff80000081246b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081246e:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812471:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff800000812474:	48 63 d0             	movsxd rdx,eax
ffff800000812477:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081247b:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000081247f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812483:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000812486:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081248a:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000081248d:	48 98                	cdqe   
ffff80000081248f:	48 01 c2             	add    rdx,rax
ffff800000812492:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
ffff800000812495:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:115
                ib->wptr++;
ffff800000812497:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081249b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000081249e:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008124a1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008124a5:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
            while (i<count){
ffff8000008124a8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008124ab:	48 98                	cdqe   
ffff8000008124ad:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffff8000008124b1:	77 9b                	ja     ffff80000081244e <ioctl_tty+0x1ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:117
            }
    default:return -1;
ffff8000008124b3:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff8000008124ba:	eb 05                	jmp    ffff8000008124c1 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:119
    }
    return 0;
ffff8000008124bc:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:120
}
ffff8000008124c1:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008124c5:	c9                   	leave  
ffff8000008124c6:	c3                   	ret    

ffff8000008124c7 <init_com>:
init_com():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:12
#include "str.h"
#include "memory.h"
#include "mem.h"

char combuf[1024];
void init_com(int base_port){
ffff8000008124c7:	f3 0f 1e fa          	endbr64 
ffff8000008124cb:	55                   	push   rbp
ffff8000008124cc:	48 89 e5             	mov    rbp,rsp
ffff8000008124cf:	41 57                	push   r15
ffff8000008124d1:	53                   	push   rbx
ffff8000008124d2:	48 83 ec 10          	sub    rsp,0x10
ffff8000008124d6:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008124d6 <init_com+0xf>
ffff8000008124dd:	49 bb fa b5 10 00 00 	movabs r11,0x10b5fa
ffff8000008124e4:	00 00 00 
ffff8000008124e7:	4c 01 db             	add    rbx,r11
ffff8000008124ea:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:14
    /* disable all interrupts */
    outb(base_port + COM_REG_IER, 0x00);
ffff8000008124ed:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008124f0:	83 c0 01             	add    eax,0x1
ffff8000008124f3:	0f b7 c0             	movzx  eax,ax
ffff8000008124f6:	be 00 00 00 00       	mov    esi,0x0
ffff8000008124fb:	89 c7                	mov    edi,eax
ffff8000008124fd:	49 89 df             	mov    r15,rbx
ffff800000812500:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff800000812507:	ff ff ff 
ffff80000081250a:	48 01 d8             	add    rax,rbx
ffff80000081250d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:17
    
    /* enable DLAB to set bound rate divisor */
    outb(base_port + COM_REG_LCR, 0x80);
ffff80000081250f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812512:	83 c0 03             	add    eax,0x3
ffff800000812515:	0f b7 c0             	movzx  eax,ax
ffff800000812518:	be 80 00 00 00       	mov    esi,0x80
ffff80000081251d:	89 c7                	mov    edi,eax
ffff80000081251f:	49 89 df             	mov    r15,rbx
ffff800000812522:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff800000812529:	ff ff ff 
ffff80000081252c:	48 01 d8             	add    rax,rbx
ffff80000081252f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:20
    
    /* set divisor to 38400 baud */
    outb(base_port + COM_REG_DLL, 0x03);
ffff800000812531:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812534:	0f b7 c0             	movzx  eax,ax
ffff800000812537:	be 03 00 00 00       	mov    esi,0x3
ffff80000081253c:	89 c7                	mov    edi,eax
ffff80000081253e:	49 89 df             	mov    r15,rbx
ffff800000812541:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff800000812548:	ff ff ff 
ffff80000081254b:	48 01 d8             	add    rax,rbx
ffff80000081254e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:21
    outb(base_port + COM_REG_DLM, 0x00);
ffff800000812550:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812553:	83 c0 01             	add    eax,0x1
ffff800000812556:	0f b7 c0             	movzx  eax,ax
ffff800000812559:	be 00 00 00 00       	mov    esi,0x0
ffff80000081255e:	89 c7                	mov    edi,eax
ffff800000812560:	49 89 df             	mov    r15,rbx
ffff800000812563:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff80000081256a:	ff ff ff 
ffff80000081256d:	48 01 d8             	add    rax,rbx
ffff800000812570:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:24
    
    /* 8 data bits, parity off, 1 stop bit, DLAB latch off */
    outb(base_port + COM_REG_LCR, 0x03);
ffff800000812572:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812575:	83 c0 03             	add    eax,0x3
ffff800000812578:	0f b7 c0             	movzx  eax,ax
ffff80000081257b:	be 03 00 00 00       	mov    esi,0x3
ffff800000812580:	89 c7                	mov    edi,eax
ffff800000812582:	49 89 df             	mov    r15,rbx
ffff800000812585:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff80000081258c:	ff ff ff 
ffff80000081258f:	48 01 d8             	add    rax,rbx
ffff800000812592:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:27
    
    /* enable FIFO */
    outb(base_port + COM_REG_FCR, 0x87);//0xc7
ffff800000812594:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812597:	83 c0 02             	add    eax,0x2
ffff80000081259a:	0f b7 c0             	movzx  eax,ax
ffff80000081259d:	be 87 00 00 00       	mov    esi,0x87
ffff8000008125a2:	89 c7                	mov    edi,eax
ffff8000008125a4:	49 89 df             	mov    r15,rbx
ffff8000008125a7:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff8000008125ae:	ff ff ff 
ffff8000008125b1:	48 01 d8             	add    rax,rbx
ffff8000008125b4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:30

    /* enable IRQs, set RTS/DSR */
    outb(base_port + COM_REG_MCR, 0x0B);
ffff8000008125b6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008125b9:	83 c0 04             	add    eax,0x4
ffff8000008125bc:	0f b7 c0             	movzx  eax,ax
ffff8000008125bf:	be 0b 00 00 00       	mov    esi,0xb
ffff8000008125c4:	89 c7                	mov    edi,eax
ffff8000008125c6:	49 89 df             	mov    r15,rbx
ffff8000008125c9:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff8000008125d0:	ff ff ff 
ffff8000008125d3:	48 01 d8             	add    rax,rbx
ffff8000008125d6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:44
//    if (inb(base_port + COM_REG_RX) != 0xae) {
//        return;
//    }
    
    /* set in normal mode */
    outb(base_port + COM_REG_MCR, 0x0F);
ffff8000008125d8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008125db:	83 c0 04             	add    eax,0x4
ffff8000008125de:	0f b7 c0             	movzx  eax,ax
ffff8000008125e1:	be 0f 00 00 00       	mov    esi,0xf
ffff8000008125e6:	89 c7                	mov    edi,eax
ffff8000008125e8:	49 89 df             	mov    r15,rbx
ffff8000008125eb:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff8000008125f2:	ff ff ff 
ffff8000008125f5:	48 01 d8             	add    rax,rbx
ffff8000008125f8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:45
}
ffff8000008125fa:	90                   	nop
ffff8000008125fb:	48 83 c4 10          	add    rsp,0x10
ffff8000008125ff:	5b                   	pop    rbx
ffff800000812600:	41 5f                	pop    r15
ffff800000812602:	5d                   	pop    rbp
ffff800000812603:	c3                   	ret    

ffff800000812604 <com_putchar>:
com_putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:47
void com_putchar(unsigned short ch,int com_base)
{
ffff800000812604:	f3 0f 1e fa          	endbr64 
ffff800000812608:	55                   	push   rbp
ffff800000812609:	48 89 e5             	mov    rbp,rsp
ffff80000081260c:	41 57                	push   r15
ffff80000081260e:	53                   	push   rbx
ffff80000081260f:	48 83 ec 20          	sub    rsp,0x20
ffff800000812613:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812613 <com_putchar+0xf>
ffff80000081261a:	49 bb bd b4 10 00 00 	movabs r11,0x10b4bd
ffff800000812621:	00 00 00 
ffff800000812624:	4c 01 db             	add    rbx,r11
ffff800000812627:	89 f8                	mov    eax,edi
ffff800000812629:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000081262c:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:51 (discriminator 1)
    unsigned char res;
    /* wait for the port to be ready */
    do {
        res = inb(com_base + COM_REG_LSR);
ffff800000812630:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000812633:	83 c0 05             	add    eax,0x5
ffff800000812636:	0f b6 c0             	movzx  eax,al
ffff800000812639:	89 c7                	mov    edi,eax
ffff80000081263b:	49 89 df             	mov    r15,rbx
ffff80000081263e:	48 b8 a9 a2 ee ff ff 	movabs rax,0xffffffffffeea2a9
ffff800000812645:	ff ff ff 
ffff800000812648:	48 01 d8             	add    rax,rbx
ffff80000081264b:	ff d0                	call   rax
ffff80000081264d:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:52 (discriminator 1)
        res &= 0x20;
ffff800000812650:	80 65 ef 20          	and    BYTE PTR [rbp-0x11],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:53 (discriminator 1)
    } while (res == 0);
ffff800000812654:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffff800000812658:	74 d6                	je     ffff800000812630 <com_putchar+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:54
    outb(com_base, ch);
ffff80000081265a:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000081265e:	0f b6 d0             	movzx  edx,al
ffff800000812661:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000812664:	0f b7 c0             	movzx  eax,ax
ffff800000812667:	89 d6                	mov    esi,edx
ffff800000812669:	89 c7                	mov    edi,eax
ffff80000081266b:	49 89 df             	mov    r15,rbx
ffff80000081266e:	48 b8 90 a2 ee ff ff 	movabs rax,0xffffffffffeea290
ffff800000812675:	ff ff ff 
ffff800000812678:	48 01 d8             	add    rax,rbx
ffff80000081267b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:55
}
ffff80000081267d:	90                   	nop
ffff80000081267e:	48 83 c4 20          	add    rsp,0x20
ffff800000812682:	5b                   	pop    rbx
ffff800000812683:	41 5f                	pop    r15
ffff800000812685:	5d                   	pop    rbp
ffff800000812686:	c3                   	ret    

ffff800000812687 <com_puts>:
com_puts():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:57

void com_puts(char* s,int com_port){
ffff800000812687:	f3 0f 1e fa          	endbr64 
ffff80000081268b:	55                   	push   rbp
ffff80000081268c:	48 89 e5             	mov    rbp,rsp
ffff80000081268f:	41 57                	push   r15
ffff800000812691:	53                   	push   rbx
ffff800000812692:	48 83 ec 10          	sub    rsp,0x10
ffff800000812696:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812696 <com_puts+0xf>
ffff80000081269d:	49 bb 3a b4 10 00 00 	movabs r11,0x10b43a
ffff8000008126a4:	00 00 00 
ffff8000008126a7:	4c 01 db             	add    rbx,r11
ffff8000008126aa:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff8000008126ae:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58
    for(;*s;s++){
ffff8000008126b1:	eb 2a                	jmp    ffff8000008126dd <com_puts+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:59 (discriminator 2)
        com_putchar(*s,com_port);
ffff8000008126b3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008126b7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008126ba:	66 98                	cbw    
ffff8000008126bc:	0f b7 c0             	movzx  eax,ax
ffff8000008126bf:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff8000008126c2:	89 d6                	mov    esi,edx
ffff8000008126c4:	89 c7                	mov    edi,eax
ffff8000008126c6:	49 89 df             	mov    r15,rbx
ffff8000008126c9:	48 b8 34 4b ef ff ff 	movabs rax,0xffffffffffef4b34
ffff8000008126d0:	ff ff ff 
ffff8000008126d3:	48 01 d8             	add    rax,rbx
ffff8000008126d6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 2)
    for(;*s;s++){
ffff8000008126d8:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 1)
ffff8000008126dd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008126e1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008126e4:	84 c0                	test   al,al
ffff8000008126e6:	75 cb                	jne    ffff8000008126b3 <com_puts+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:61
    }
}
ffff8000008126e8:	90                   	nop
ffff8000008126e9:	90                   	nop
ffff8000008126ea:	48 83 c4 10          	add    rsp,0x10
ffff8000008126ee:	5b                   	pop    rbx
ffff8000008126ef:	41 5f                	pop    r15
ffff8000008126f1:	5d                   	pop    rbp
ffff8000008126f2:	c3                   	ret    

ffff8000008126f3 <comprintf>:
comprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:63

void comprintf(char* fmt,...){
ffff8000008126f3:	f3 0f 1e fa          	endbr64 
ffff8000008126f7:	55                   	push   rbp
ffff8000008126f8:	48 89 e5             	mov    rbp,rsp
ffff8000008126fb:	41 57                	push   r15
ffff8000008126fd:	53                   	push   rbx
ffff8000008126fe:	48 81 ec 10 01 00 00 	sub    rsp,0x110
ffff800000812705:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812705 <comprintf+0x12>
ffff80000081270c:	49 bb cb b3 10 00 00 	movabs r11,0x10b3cb
ffff800000812713:	00 00 00 
ffff800000812716:	4c 01 db             	add    rbx,r11
ffff800000812719:	48 89 bd e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdi
ffff800000812720:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffff800000812727:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffff80000081272e:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffff800000812735:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffff80000081273c:	4c 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r9
ffff800000812743:	84 c0                	test   al,al
ffff800000812745:	74 23                	je     ffff80000081276a <comprintf+0x77>
ffff800000812747:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
ffff80000081274e:	0f 29 4d 80          	movaps XMMWORD PTR [rbp-0x80],xmm1
ffff800000812752:	0f 29 55 90          	movaps XMMWORD PTR [rbp-0x70],xmm2
ffff800000812756:	0f 29 5d a0          	movaps XMMWORD PTR [rbp-0x60],xmm3
ffff80000081275a:	0f 29 65 b0          	movaps XMMWORD PTR [rbp-0x50],xmm4
ffff80000081275e:	0f 29 6d c0          	movaps XMMWORD PTR [rbp-0x40],xmm5
ffff800000812762:	0f 29 75 d0          	movaps XMMWORD PTR [rbp-0x30],xmm6
ffff800000812766:	0f 29 7d e0          	movaps XMMWORD PTR [rbp-0x20],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:64
    if(strlen(fmt)>=1024)
ffff80000081276a:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000812771:	48 89 c7             	mov    rdi,rax
ffff800000812774:	49 89 df             	mov    r15,rbx
ffff800000812777:	48 b8 95 54 ef ff ff 	movabs rax,0xffffffffffef5495
ffff80000081277e:	ff ff ff 
ffff800000812781:	48 01 d8             	add    rax,rbx
ffff800000812784:	ff d0                	call   rax
ffff800000812786:	3d ff 03 00 00       	cmp    eax,0x3ff
ffff80000081278b:	0f 8f f6 03 00 00    	jg     ffff800000812b87 <comprintf+0x494>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:67
        return;//一次性输出不了太长
    //这里不使用kmalloc
    char* tmp=combuf;
ffff800000812791:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff800000812798:	ff ff ff 
ffff80000081279b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000081279f:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:68
    memset(tmp,0, sizeof(combuf));
ffff8000008127a6:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008127ad:	ba 00 04 00 00       	mov    edx,0x400
ffff8000008127b2:	be 00 00 00 00       	mov    esi,0x0
ffff8000008127b7:	48 89 c7             	mov    rdi,rax
ffff8000008127ba:	49 89 df             	mov    r15,rbx
ffff8000008127bd:	48 b8 73 51 ef ff ff 	movabs rax,0xffffffffffef5173
ffff8000008127c4:	ff ff ff 
ffff8000008127c7:	48 01 d8             	add    rax,rbx
ffff8000008127ca:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:70
    //count num of args
    char *pstr=fmt;
ffff8000008127cc:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff8000008127d3:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:71
    char *prev=fmt;
ffff8000008127da:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff8000008127e1:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:74

    va_list vargs;
    va_start(vargs,fmt);
ffff8000008127e8:	c7 85 f0 fe ff ff 08 	mov    DWORD PTR [rbp-0x110],0x8
ffff8000008127ef:	00 00 00 
ffff8000008127f2:	c7 85 f4 fe ff ff 30 	mov    DWORD PTR [rbp-0x10c],0x30
ffff8000008127f9:	00 00 00 
ffff8000008127fc:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff800000812800:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffff800000812807:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffff80000081280e:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:75
    pstr=fmt;
ffff800000812815:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff80000081281c:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
ffff800000812823:	e9 2a 03 00 00       	jmp    ffff800000812b52 <comprintf+0x45f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff800000812828:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000081282f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812832:	3c 25                	cmp    al,0x25
ffff800000812834:	0f 85 e5 02 00 00    	jne    ffff800000812b1f <comprintf+0x42c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77 (discriminator 1)
ffff80000081283a:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812841:	48 83 c0 01          	add    rax,0x1
ffff800000812845:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812848:	84 c0                	test   al,al
ffff80000081284a:	0f 84 cf 02 00 00    	je     ffff800000812b1f <comprintf+0x42c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:78
            pstr++;
ffff800000812850:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000812857:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:79
            if(*pstr=='x'){
ffff800000812858:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000081285f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812862:	3c 78                	cmp    al,0x78
ffff800000812864:	75 70                	jne    ffff8000008128d6 <comprintf+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:80
                int v=va_arg(vargs,int);
ffff800000812866:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff80000081286c:	83 f8 2f             	cmp    eax,0x2f
ffff80000081286f:	77 23                	ja     ffff800000812894 <comprintf+0x1a1>
ffff800000812871:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000812878:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff80000081287e:	89 d2                	mov    edx,edx
ffff800000812880:	48 01 d0             	add    rax,rdx
ffff800000812883:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812889:	83 c2 08             	add    edx,0x8
ffff80000081288c:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000812892:	eb 12                	jmp    ffff8000008128a6 <comprintf+0x1b3>
ffff800000812894:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000081289b:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff80000081289f:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff8000008128a6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008128a8:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:81
                sprint_hex(tmp,v);
ffff8000008128ae:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff8000008128b4:	48 63 d0             	movsxd rdx,eax
ffff8000008128b7:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008128be:	48 89 d6             	mov    rsi,rdx
ffff8000008128c1:	48 89 c7             	mov    rdi,rax
ffff8000008128c4:	49 89 df             	mov    r15,rbx
ffff8000008128c7:	48 b8 e8 58 ef ff ff 	movabs rax,0xffffffffffef58e8
ffff8000008128ce:	ff ff ff 
ffff8000008128d1:	48 01 d8             	add    rax,rbx
ffff8000008128d4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff8000008128d6:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008128dd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008128e0:	3c 6c                	cmp    al,0x6c
ffff8000008128e2:	75 76                	jne    ffff80000081295a <comprintf+0x267>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:83
                int v=va_arg(vargs,unsigned long);
ffff8000008128e4:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff8000008128ea:	83 f8 2f             	cmp    eax,0x2f
ffff8000008128ed:	77 23                	ja     ffff800000812912 <comprintf+0x21f>
ffff8000008128ef:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff8000008128f6:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008128fc:	89 d2                	mov    edx,edx
ffff8000008128fe:	48 01 d0             	add    rax,rdx
ffff800000812901:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812907:	83 c2 08             	add    edx,0x8
ffff80000081290a:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000812910:	eb 12                	jmp    ffff800000812924 <comprintf+0x231>
ffff800000812912:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000812919:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff80000081291d:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000812924:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812927:	89 85 0c ff ff ff    	mov    DWORD PTR [rbp-0xf4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:84
                sprint_hex(tmp,v);
ffff80000081292d:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
ffff800000812933:	48 63 d0             	movsxd rdx,eax
ffff800000812936:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000081293d:	48 89 d6             	mov    rsi,rdx
ffff800000812940:	48 89 c7             	mov    rdi,rax
ffff800000812943:	49 89 df             	mov    r15,rbx
ffff800000812946:	48 b8 e8 58 ef ff ff 	movabs rax,0xffffffffffef58e8
ffff80000081294d:	ff ff ff 
ffff800000812950:	48 01 d8             	add    rax,rbx
ffff800000812953:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000812955:	e9 f0 01 00 00       	jmp    ffff800000812b4a <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:85
            }else if(*pstr=='s'){
ffff80000081295a:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812961:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812964:	3c 73                	cmp    al,0x73
ffff800000812966:	75 75                	jne    ffff8000008129dd <comprintf+0x2ea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:86
                char* v=va_arg(vargs,char*);
ffff800000812968:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff80000081296e:	83 f8 2f             	cmp    eax,0x2f
ffff800000812971:	77 23                	ja     ffff800000812996 <comprintf+0x2a3>
ffff800000812973:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff80000081297a:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812980:	89 d2                	mov    edx,edx
ffff800000812982:	48 01 d0             	add    rax,rdx
ffff800000812985:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff80000081298b:	83 c2 08             	add    edx,0x8
ffff80000081298e:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000812994:	eb 12                	jmp    ffff8000008129a8 <comprintf+0x2b5>
ffff800000812996:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000081299d:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008129a1:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff8000008129a8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008129ab:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:87
                sprintn(tmp,v);
ffff8000008129b2:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
ffff8000008129b9:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008129c0:	48 89 d6             	mov    rsi,rdx
ffff8000008129c3:	48 89 c7             	mov    rdi,rax
ffff8000008129c6:	49 89 df             	mov    r15,rbx
ffff8000008129c9:	48 b8 76 59 ef ff ff 	movabs rax,0xffffffffffef5976
ffff8000008129d0:	ff ff ff 
ffff8000008129d3:	48 01 d8             	add    rax,rbx
ffff8000008129d6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff8000008129d8:	e9 6d 01 00 00       	jmp    ffff800000812b4a <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:88
            }else if(*pstr=='d'){
ffff8000008129dd:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008129e4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008129e7:	3c 64                	cmp    al,0x64
ffff8000008129e9:	75 76                	jne    ffff800000812a61 <comprintf+0x36e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:89
                char* v=va_arg(vargs,char*);
ffff8000008129eb:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff8000008129f1:	83 f8 2f             	cmp    eax,0x2f
ffff8000008129f4:	77 23                	ja     ffff800000812a19 <comprintf+0x326>
ffff8000008129f6:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff8000008129fd:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812a03:	89 d2                	mov    edx,edx
ffff800000812a05:	48 01 d0             	add    rax,rdx
ffff800000812a08:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812a0e:	83 c2 08             	add    edx,0x8
ffff800000812a11:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000812a17:	eb 12                	jmp    ffff800000812a2b <comprintf+0x338>
ffff800000812a19:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000812a20:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000812a24:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000812a2b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812a2e:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:90
                sprint_decimal(tmp,v);
ffff800000812a35:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000812a3c:	89 c2                	mov    edx,eax
ffff800000812a3e:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812a45:	89 d6                	mov    esi,edx
ffff800000812a47:	48 89 c7             	mov    rdi,rax
ffff800000812a4a:	49 89 df             	mov    r15,rbx
ffff800000812a4d:	48 b8 2d 58 ef ff ff 	movabs rax,0xffffffffffef582d
ffff800000812a54:	ff ff ff 
ffff800000812a57:	48 01 d8             	add    rax,rbx
ffff800000812a5a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000812a5c:	e9 e9 00 00 00       	jmp    ffff800000812b4a <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:91
            }else if(*pstr=='c'){
ffff800000812a61:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812a68:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812a6b:	3c 63                	cmp    al,0x63
ffff800000812a6d:	75 02                	jne    ffff800000812a71 <comprintf+0x37e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:92
                char v=va_arg(vargs,char);
ffff800000812a6f:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:94
                sprintchar(tmp,v);
            }else if(*pstr=='p') {
ffff800000812a71:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812a78:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812a7b:	3c 70                	cmp    al,0x70
ffff800000812a7d:	75 73                	jne    ffff800000812af2 <comprintf+0x3ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:95
                int v=va_arg(vargs,addr_t);
ffff800000812a7f:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000812a85:	83 f8 2f             	cmp    eax,0x2f
ffff800000812a88:	77 23                	ja     ffff800000812aad <comprintf+0x3ba>
ffff800000812a8a:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000812a91:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812a97:	89 d2                	mov    edx,edx
ffff800000812a99:	48 01 d0             	add    rax,rdx
ffff800000812a9c:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812aa2:	83 c2 08             	add    edx,0x8
ffff800000812aa5:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000812aab:	eb 12                	jmp    ffff800000812abf <comprintf+0x3cc>
ffff800000812aad:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000812ab4:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000812ab8:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000812abf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812ac2:	89 85 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:96
                sprint_hex(tmp,v);
ffff800000812ac8:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
ffff800000812ace:	48 63 d0             	movsxd rdx,eax
ffff800000812ad1:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812ad8:	48 89 d6             	mov    rsi,rdx
ffff800000812adb:	48 89 c7             	mov    rdi,rax
ffff800000812ade:	49 89 df             	mov    r15,rbx
ffff800000812ae1:	48 b8 e8 58 ef ff ff 	movabs rax,0xffffffffffef58e8
ffff800000812ae8:	ff ff ff 
ffff800000812aeb:	48 01 d8             	add    rax,rbx
ffff800000812aee:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000812af0:	eb 58                	jmp    ffff800000812b4a <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:98
            }else{
                    sprintchar(tmp,*pstr);
ffff800000812af2:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812af9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812afc:	0f be d0             	movsx  edx,al
ffff800000812aff:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812b06:	89 d6                	mov    esi,edx
ffff800000812b08:	48 89 c7             	mov    rdi,rax
ffff800000812b0b:	49 89 df             	mov    r15,rbx
ffff800000812b0e:	48 b8 ee 57 ef ff ff 	movabs rax,0xffffffffffef57ee
ffff800000812b15:	ff ff ff 
ffff800000812b18:	48 01 d8             	add    rax,rbx
ffff800000812b1b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000812b1d:	eb 2b                	jmp    ffff800000812b4a <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:101
                }
        }else{
            sprintchar(tmp,*pstr);
ffff800000812b1f:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812b26:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812b29:	0f be d0             	movsx  edx,al
ffff800000812b2c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812b33:	89 d6                	mov    esi,edx
ffff800000812b35:	48 89 c7             	mov    rdi,rax
ffff800000812b38:	49 89 df             	mov    r15,rbx
ffff800000812b3b:	48 b8 ee 57 ef ff ff 	movabs rax,0xffffffffffef57ee
ffff800000812b42:	ff ff ff 
ffff800000812b45:	48 01 d8             	add    rax,rbx
ffff800000812b48:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
ffff800000812b4a:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000812b51:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76 (discriminator 1)
ffff800000812b52:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812b59:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812b5c:	84 c0                	test   al,al
ffff800000812b5e:	0f 85 c4 fc ff ff    	jne    ffff800000812828 <comprintf+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:105
        }
    }
    va_end(vargs);
    com_puts(tmp,PORT_COM1);
ffff800000812b64:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812b6b:	be f8 03 00 00       	mov    esi,0x3f8
ffff800000812b70:	48 89 c7             	mov    rdi,rax
ffff800000812b73:	49 89 df             	mov    r15,rbx
ffff800000812b76:	48 b8 b7 4b ef ff ff 	movabs rax,0xffffffffffef4bb7
ffff800000812b7d:	ff ff ff 
ffff800000812b80:	48 01 d8             	add    rax,rbx
ffff800000812b83:	ff d0                	call   rax
ffff800000812b85:	eb 01                	jmp    ffff800000812b88 <comprintf+0x495>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:65
        return;//一次性输出不了太长
ffff800000812b87:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:106
ffff800000812b88:	48 81 c4 10 01 00 00 	add    rsp,0x110
ffff800000812b8f:	5b                   	pop    rbx
ffff800000812b90:	41 5f                	pop    r15
ffff800000812b92:	5d                   	pop    rbp
ffff800000812b93:	c3                   	ret    

ffff800000812b94 <memcpy>:
memcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:5
#include "mem.h"
#include "typename.h"
static u32 mem_end;
static u32 usr_mem_base;
void memcpy(u8* dest, u8 *src,u32 size){
ffff800000812b94:	f3 0f 1e fa          	endbr64 
ffff800000812b98:	55                   	push   rbp
ffff800000812b99:	48 89 e5             	mov    rbp,rsp
ffff800000812b9c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000812ba0:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000812ba4:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:6
    *dest=0xff;//如果页内存还没分配，这样就可以先激发缺页异常分配了，之后写数据就会完整不会少开头第一个字节。
ffff800000812ba7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812bab:	c6 00 ff             	mov    BYTE PTR [rax],0xff
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7
    for(int i=0;i<size;i++){
ffff800000812bae:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000812bb5:	eb 1b                	jmp    ffff800000812bd2 <memcpy+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:8 (discriminator 3)
        *(dest)=*(src);
ffff800000812bb7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812bbb:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000812bbe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812bc2:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:9 (discriminator 3)
        dest++;
ffff800000812bc4:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:10 (discriminator 3)
        src++;
ffff800000812bc9:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 3)
    for(int i=0;i<size;i++){
ffff800000812bce:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 1)
ffff800000812bd2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000812bd5:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000812bd8:	77 dd                	ja     ffff800000812bb7 <memcpy+0x23>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:12
    }
}
ffff800000812bda:	90                   	nop
ffff800000812bdb:	90                   	nop
ffff800000812bdc:	5d                   	pop    rbp
ffff800000812bdd:	c3                   	ret    

ffff800000812bde <memcmp>:
memcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:14
int memcmp(u8 *a,u8* b,int len)
{
ffff800000812bde:	f3 0f 1e fa          	endbr64 
ffff800000812be2:	55                   	push   rbp
ffff800000812be3:	48 89 e5             	mov    rbp,rsp
ffff800000812be6:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000812bea:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000812bee:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15
    for(int i=0;i<len;i++)
ffff800000812bf1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000812bf8:	eb 3a                	jmp    ffff800000812c34 <memcmp+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:17
    {
        if(*a!=*b)
ffff800000812bfa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812bfe:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000812c01:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812c05:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812c08:	38 c2                	cmp    dl,al
ffff800000812c0a:	74 1a                	je     ffff800000812c26 <memcmp+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:18
            return *a-*b;
ffff800000812c0c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812c10:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812c13:	0f b6 d0             	movzx  edx,al
ffff800000812c16:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812c1a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812c1d:	0f b6 c8             	movzx  ecx,al
ffff800000812c20:	89 d0                	mov    eax,edx
ffff800000812c22:	29 c8                	sub    eax,ecx
ffff800000812c24:	eb 1b                	jmp    ffff800000812c41 <memcmp+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:19 (discriminator 2)
        a++;
ffff800000812c26:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:20 (discriminator 2)
        b++;
ffff800000812c2b:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 2)
    for(int i=0;i<len;i++)
ffff800000812c30:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 1)
ffff800000812c34:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000812c37:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
ffff800000812c3a:	7c be                	jl     ffff800000812bfa <memcmp+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:22
    }
    return 0;
ffff800000812c3c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:23
}
ffff800000812c41:	5d                   	pop    rbp
ffff800000812c42:	c3                   	ret    

ffff800000812c43 <memset>:
memset():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:24
void memset(u8 *buf,u8 value,u32 size){
ffff800000812c43:	f3 0f 1e fa          	endbr64 
ffff800000812c47:	55                   	push   rbp
ffff800000812c48:	48 89 e5             	mov    rbp,rsp
ffff800000812c4b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000812c4f:	89 f0                	mov    eax,esi
ffff800000812c51:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffff800000812c54:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25
    for(u32 i=0;i<size;i++){
ffff800000812c57:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000812c5e:	eb 16                	jmp    ffff800000812c76 <memset+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:26 (discriminator 3)
        *(buf++)=value;
ffff800000812c60:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812c64:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000812c68:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000812c6c:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffff800000812c70:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 3)
    for(u32 i=0;i<size;i++){
ffff800000812c72:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 1)
ffff800000812c76:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000812c79:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
ffff800000812c7c:	72 e2                	jb     ffff800000812c60 <memset+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:28
    }
}
ffff800000812c7e:	90                   	nop
ffff800000812c7f:	90                   	nop
ffff800000812c80:	5d                   	pop    rbp
ffff800000812c81:	c3                   	ret    

ffff800000812c82 <get_mem_size>:
get_mem_size():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:30

u32 get_mem_size(){
ffff800000812c82:	f3 0f 1e fa          	endbr64 
ffff800000812c86:	55                   	push   rbp
ffff800000812c87:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:31
    return mem_end;
ffff800000812c8a:	48 b8 c0 a1 41 00 00 	movabs rax,0xffff80000041a1c0
ffff800000812c91:	80 ff ff 
ffff800000812c94:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:32
}
ffff800000812c96:	5d                   	pop    rbp
ffff800000812c97:	c3                   	ret    

ffff800000812c98 <strcpy>:
strcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:3
#include "str.h"
#include <stdarg.h>
void strcpy(unsigned char* dest, unsigned char *buf){
ffff800000812c98:	f3 0f 1e fa          	endbr64 
ffff800000812c9c:	55                   	push   rbp
ffff800000812c9d:	48 89 e5             	mov    rbp,rsp
ffff800000812ca0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000812ca4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
ffff800000812ca8:	eb 1d                	jmp    ffff800000812cc7 <strcpy+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:5
        *(dest++)=*(buf++);
ffff800000812caa:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000812cae:	48 8d 42 01          	lea    rax,[rdx+0x1]
ffff800000812cb2:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffff800000812cb6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812cba:	48 8d 48 01          	lea    rcx,[rax+0x1]
ffff800000812cbe:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
ffff800000812cc2:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff800000812cc5:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
ffff800000812cc7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812ccb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812cce:	84 c0                	test   al,al
ffff800000812cd0:	75 d8                	jne    ffff800000812caa <strcpy+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:7
    }
    *dest='\0';
ffff800000812cd2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812cd6:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:8
}
ffff800000812cd9:	90                   	nop
ffff800000812cda:	5d                   	pop    rbp
ffff800000812cdb:	c3                   	ret    

ffff800000812cdc <strtok>:
strtok():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:12
static char strtokkee[512],*strtokkeeptr=strtokkee;
static int tokptr=0;
static char retbuf[512],*retbptr=retbuf;
char* strtok(char *str,char splitter){
ffff800000812cdc:	f3 0f 1e fa          	endbr64 
ffff800000812ce0:	55                   	push   rbp
ffff800000812ce1:	48 89 e5             	mov    rbp,rsp
ffff800000812ce4:	48 83 ec 30          	sub    rsp,0x30
ffff800000812ce8:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000812cec:	89 f0                	mov    eax,esi
ffff800000812cee:	88 45 d4             	mov    BYTE PTR [rbp-0x2c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:14
    //limit: cannot cut string longer than 512
    if(str!=(void*)0){
ffff800000812cf1:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000812cf6:	0f 84 fa 00 00 00    	je     ffff800000812df6 <strtok+0x11a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:16
        //cut for the first time
        strcpy(strtokkee,str);
ffff800000812cfc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812d00:	48 89 c6             	mov    rsi,rax
ffff800000812d03:	48 b8 e0 a1 41 00 00 	movabs rax,0xffff80000041a1e0
ffff800000812d0a:	80 ff ff 
ffff800000812d0d:	48 89 c7             	mov    rdi,rax
ffff800000812d10:	48 b8 98 2c 81 00 00 	movabs rax,0xffff800000812c98
ffff800000812d17:	80 ff ff 
ffff800000812d1a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:17
        char* ptr=strtokkee;
ffff800000812d1c:	48 b8 e0 a1 41 00 00 	movabs rax,0xffff80000041a1e0
ffff800000812d23:	80 ff ff 
ffff800000812d26:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18
        for(tokptr=0;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512);
ffff800000812d2a:	48 b8 e0 a3 41 00 00 	movabs rax,0xffff80000041a3e0
ffff800000812d31:	80 ff ff 
ffff800000812d34:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
ffff800000812d3a:	eb 2a                	jmp    ffff800000812d66 <strtok+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 4)
ffff800000812d3c:	48 b8 e0 a3 41 00 00 	movabs rax,0xffff80000041a3e0
ffff800000812d43:	80 ff ff 
ffff800000812d46:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812d48:	83 c0 01             	add    eax,0x1
ffff800000812d4b:	99                   	cdq    
ffff800000812d4c:	c1 ea 17             	shr    edx,0x17
ffff800000812d4f:	01 d0                	add    eax,edx
ffff800000812d51:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000812d56:	29 d0                	sub    eax,edx
ffff800000812d58:	89 c2                	mov    edx,eax
ffff800000812d5a:	48 b8 e0 a3 41 00 00 	movabs rax,0xffff80000041a3e0
ffff800000812d61:	80 ff ff 
ffff800000812d64:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 1)
ffff800000812d66:	48 b8 e0 a3 41 00 00 	movabs rax,0xffff80000041a3e0
ffff800000812d6d:	80 ff ff 
ffff800000812d70:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812d72:	48 ba e0 a1 41 00 00 	movabs rdx,0xffff80000041a1e0
ffff800000812d79:	80 ff ff 
ffff800000812d7c:	48 98                	cdqe   
ffff800000812d7e:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812d82:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
ffff800000812d85:	74 20                	je     ffff800000812da7 <strtok+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 3)
ffff800000812d87:	48 b8 e0 a3 41 00 00 	movabs rax,0xffff80000041a3e0
ffff800000812d8e:	80 ff ff 
ffff800000812d91:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812d93:	48 ba e0 a1 41 00 00 	movabs rdx,0xffff80000041a1e0
ffff800000812d9a:	80 ff ff 
ffff800000812d9d:	48 98                	cdqe   
ffff800000812d9f:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812da3:	84 c0                	test   al,al
ffff800000812da5:	75 95                	jne    ffff800000812d3c <strtok+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:19
        strtokkee[tokptr]='\0';
ffff800000812da7:	48 b8 e0 a3 41 00 00 	movabs rax,0xffff80000041a3e0
ffff800000812dae:	80 ff ff 
ffff800000812db1:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812db3:	48 ba e0 a1 41 00 00 	movabs rdx,0xffff80000041a1e0
ffff800000812dba:	80 ff ff 
ffff800000812dbd:	48 98                	cdqe   
ffff800000812dbf:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:20
        tokptr=(tokptr+1)%512;
ffff800000812dc3:	48 b8 e0 a3 41 00 00 	movabs rax,0xffff80000041a3e0
ffff800000812dca:	80 ff ff 
ffff800000812dcd:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812dcf:	83 c0 01             	add    eax,0x1
ffff800000812dd2:	99                   	cdq    
ffff800000812dd3:	c1 ea 17             	shr    edx,0x17
ffff800000812dd6:	01 d0                	add    eax,edx
ffff800000812dd8:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000812ddd:	29 d0                	sub    eax,edx
ffff800000812ddf:	89 c2                	mov    edx,eax
ffff800000812de1:	48 b8 e0 a3 41 00 00 	movabs rax,0xffff80000041a3e0
ffff800000812de8:	80 ff ff 
ffff800000812deb:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:21
        return ptr;
ffff800000812ded:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812df1:	e9 ee 00 00 00       	jmp    ffff800000812ee4 <strtok+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:24
    }
    //go on cutting
    int c=0;
ffff800000812df6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:25
    char* ptr=strtokkee+tokptr;
ffff800000812dfd:	48 b8 e0 a3 41 00 00 	movabs rax,0xffff80000041a3e0
ffff800000812e04:	80 ff ff 
ffff800000812e07:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812e09:	48 98                	cdqe   
ffff800000812e0b:	48 ba e0 a1 41 00 00 	movabs rdx,0xffff80000041a1e0
ffff800000812e12:	80 ff ff 
ffff800000812e15:	48 01 d0             	add    rax,rdx
ffff800000812e18:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26
    for(;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512,c++);
ffff800000812e1c:	eb 2e                	jmp    ffff800000812e4c <strtok+0x170>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 3)
ffff800000812e1e:	48 b8 e0 a3 41 00 00 	movabs rax,0xffff80000041a3e0
ffff800000812e25:	80 ff ff 
ffff800000812e28:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812e2a:	83 c0 01             	add    eax,0x1
ffff800000812e2d:	99                   	cdq    
ffff800000812e2e:	c1 ea 17             	shr    edx,0x17
ffff800000812e31:	01 d0                	add    eax,edx
ffff800000812e33:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000812e38:	29 d0                	sub    eax,edx
ffff800000812e3a:	89 c2                	mov    edx,eax
ffff800000812e3c:	48 b8 e0 a3 41 00 00 	movabs rax,0xffff80000041a3e0
ffff800000812e43:	80 ff ff 
ffff800000812e46:	89 10                	mov    DWORD PTR [rax],edx
ffff800000812e48:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 1)
ffff800000812e4c:	48 b8 e0 a3 41 00 00 	movabs rax,0xffff80000041a3e0
ffff800000812e53:	80 ff ff 
ffff800000812e56:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812e58:	48 ba e0 a1 41 00 00 	movabs rdx,0xffff80000041a1e0
ffff800000812e5f:	80 ff ff 
ffff800000812e62:	48 98                	cdqe   
ffff800000812e64:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812e68:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
ffff800000812e6b:	74 20                	je     ffff800000812e8d <strtok+0x1b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 2)
ffff800000812e6d:	48 b8 e0 a3 41 00 00 	movabs rax,0xffff80000041a3e0
ffff800000812e74:	80 ff ff 
ffff800000812e77:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812e79:	48 ba e0 a1 41 00 00 	movabs rdx,0xffff80000041a1e0
ffff800000812e80:	80 ff ff 
ffff800000812e83:	48 98                	cdqe   
ffff800000812e85:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812e89:	84 c0                	test   al,al
ffff800000812e8b:	75 91                	jne    ffff800000812e1e <strtok+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:27
    strtokkee[tokptr]='\0';
ffff800000812e8d:	48 b8 e0 a3 41 00 00 	movabs rax,0xffff80000041a3e0
ffff800000812e94:	80 ff ff 
ffff800000812e97:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812e99:	48 ba e0 a1 41 00 00 	movabs rdx,0xffff80000041a1e0
ffff800000812ea0:	80 ff ff 
ffff800000812ea3:	48 98                	cdqe   
ffff800000812ea5:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:28
    tokptr=(tokptr+1)%512;
ffff800000812ea9:	48 b8 e0 a3 41 00 00 	movabs rax,0xffff80000041a3e0
ffff800000812eb0:	80 ff ff 
ffff800000812eb3:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812eb5:	83 c0 01             	add    eax,0x1
ffff800000812eb8:	99                   	cdq    
ffff800000812eb9:	c1 ea 17             	shr    edx,0x17
ffff800000812ebc:	01 d0                	add    eax,edx
ffff800000812ebe:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000812ec3:	29 d0                	sub    eax,edx
ffff800000812ec5:	89 c2                	mov    edx,eax
ffff800000812ec7:	48 b8 e0 a3 41 00 00 	movabs rax,0xffff80000041a3e0
ffff800000812ece:	80 ff ff 
ffff800000812ed1:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:29
    if(c)
ffff800000812ed3:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000812ed7:	74 06                	je     ffff800000812edf <strtok+0x203>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:30
        return ptr;
ffff800000812ed9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812edd:	eb 05                	jmp    ffff800000812ee4 <strtok+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:32
    else
        return (void*)0;
ffff800000812edf:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:33
}
ffff800000812ee4:	c9                   	leave  
ffff800000812ee5:	c3                   	ret    

ffff800000812ee6 <strcmp>:
strcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:35
int strcmp(char *s1,char *s2)
{
ffff800000812ee6:	f3 0f 1e fa          	endbr64 
ffff800000812eea:	55                   	push   rbp
ffff800000812eeb:	48 89 e5             	mov    rbp,rsp
ffff800000812eee:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000812ef2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
ffff800000812ef6:	eb 3c                	jmp    ffff800000812f34 <strcmp+0x4e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:37
		if(*s1>*s2)
ffff800000812ef8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812efc:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000812eff:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812f03:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812f06:	38 c2                	cmp    dl,al
ffff800000812f08:	7e 07                	jle    ffff800000812f11 <strcmp+0x2b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:38
			return 1;
ffff800000812f0a:	b8 01 00 00 00       	mov    eax,0x1
ffff800000812f0f:	eb 52                	jmp    ffff800000812f63 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:39
		else if(*s1<*s2)
ffff800000812f11:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812f15:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000812f18:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812f1c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812f1f:	38 c2                	cmp    dl,al
ffff800000812f21:	7d 07                	jge    ffff800000812f2a <strcmp+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:40
			return -1;
ffff800000812f23:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000812f28:	eb 39                	jmp    ffff800000812f63 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:41
		s1++;
ffff800000812f2a:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:42
		s2++;
ffff800000812f2f:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
ffff800000812f34:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812f38:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812f3b:	84 c0                	test   al,al
ffff800000812f3d:	74 0b                	je     ffff800000812f4a <strcmp+0x64>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36 (discriminator 1)
ffff800000812f3f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812f43:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812f46:	84 c0                	test   al,al
ffff800000812f48:	75 ae                	jne    ffff800000812ef8 <strcmp+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:44
	}
	if(*s1==*s2)
ffff800000812f4a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812f4e:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000812f51:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812f55:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812f58:	38 c2                	cmp    dl,al
ffff800000812f5a:	75 07                	jne    ffff800000812f63 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:45
		return 0;
ffff800000812f5c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812f61:	eb 00                	jmp    ffff800000812f63 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:46
}
ffff800000812f63:	5d                   	pop    rbp
ffff800000812f64:	c3                   	ret    

ffff800000812f65 <strlen>:
strlen():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:49

int strlen(char *str)
{
ffff800000812f65:	f3 0f 1e fa          	endbr64 
ffff800000812f69:	55                   	push   rbp
ffff800000812f6a:	48 89 e5             	mov    rbp,rsp
ffff800000812f6d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:50
    int l=0;
ffff800000812f71:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51
    for(;*str!='\0';str++,l++);
ffff800000812f78:	eb 09                	jmp    ffff800000812f83 <strlen+0x1e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 2)
ffff800000812f7a:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
ffff800000812f7f:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 1)
ffff800000812f83:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812f87:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812f8a:	84 c0                	test   al,al
ffff800000812f8c:	75 ec                	jne    ffff800000812f7a <strlen+0x15>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:52
    return l;
ffff800000812f8e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:53
}
ffff800000812f91:	5d                   	pop    rbp
ffff800000812f92:	c3                   	ret    

ffff800000812f93 <sprintf>:
sprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:56

void sprintf(char *dist, char *str,...)
{
ffff800000812f93:	f3 0f 1e fa          	endbr64 
ffff800000812f97:	55                   	push   rbp
ffff800000812f98:	48 89 e5             	mov    rbp,rsp
ffff800000812f9b:	48 81 ec 10 01 00 00 	sub    rsp,0x110
ffff800000812fa2:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
ffff800000812fa9:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
ffff800000812fb0:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
ffff800000812fb7:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
ffff800000812fbe:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
ffff800000812fc5:	4c 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r9
ffff800000812fcc:	84 c0                	test   al,al
ffff800000812fce:	74 20                	je     ffff800000812ff0 <sprintf+0x5d>
ffff800000812fd0:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
ffff800000812fd4:	0f 29 4d 90          	movaps XMMWORD PTR [rbp-0x70],xmm1
ffff800000812fd8:	0f 29 55 a0          	movaps XMMWORD PTR [rbp-0x60],xmm2
ffff800000812fdc:	0f 29 5d b0          	movaps XMMWORD PTR [rbp-0x50],xmm3
ffff800000812fe0:	0f 29 65 c0          	movaps XMMWORD PTR [rbp-0x40],xmm4
ffff800000812fe4:	0f 29 6d d0          	movaps XMMWORD PTR [rbp-0x30],xmm5
ffff800000812fe8:	0f 29 75 e0          	movaps XMMWORD PTR [rbp-0x20],xmm6
ffff800000812fec:	0f 29 7d f0          	movaps XMMWORD PTR [rbp-0x10],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:59

    //count num of args
    char *pstr=str;
ffff800000812ff0:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000812ff7:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:60
    char *prev=str;
ffff800000812ffe:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000813005:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:61
    int argnum=0;
ffff80000081300c:	c7 85 3c ff ff ff 00 	mov    DWORD PTR [rbp-0xc4],0x0
ffff800000813013:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
ffff800000813016:	eb 39                	jmp    ffff800000813051 <sprintf+0xbe>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64
    {
        if(*pstr=='%'&&*prev!='%')
ffff800000813018:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081301f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813022:	3c 25                	cmp    al,0x25
ffff800000813024:	75 15                	jne    ffff80000081303b <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64 (discriminator 1)
ffff800000813026:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff80000081302d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813030:	3c 25                	cmp    al,0x25
ffff800000813032:	74 07                	je     ffff80000081303b <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:65
            argnum++;
ffff800000813034:	83 85 3c ff ff ff 01 	add    DWORD PTR [rbp-0xc4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:66
        prev=pstr;
ffff80000081303b:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813042:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:67
        pstr++;
ffff800000813049:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff800000813050:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
ffff800000813051:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813058:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081305b:	3c 0a                	cmp    al,0xa
ffff80000081305d:	75 b9                	jne    ffff800000813018 <sprintf+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:71
    }

    va_list vargs;
    va_start(vargs,str);
ffff80000081305f:	c7 85 08 ff ff ff 10 	mov    DWORD PTR [rbp-0xf8],0x10
ffff800000813066:	00 00 00 
ffff800000813069:	c7 85 0c ff ff ff 30 	mov    DWORD PTR [rbp-0xf4],0x30
ffff800000813070:	00 00 00 
ffff800000813073:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff800000813077:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffff80000081307e:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
ffff800000813085:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:72
    pstr=str;
ffff80000081308c:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000813093:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
ffff80000081309a:	e9 09 02 00 00       	jmp    ffff8000008132a8 <sprintf+0x315>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff80000081309f:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008130a6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008130a9:	3c 25                	cmp    al,0x25
ffff8000008130ab:	0f 85 ca 01 00 00    	jne    ffff80000081327b <sprintf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74 (discriminator 1)
ffff8000008130b1:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008130b8:	48 83 c0 01          	add    rax,0x1
ffff8000008130bc:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008130bf:	84 c0                	test   al,al
ffff8000008130c1:	0f 84 b4 01 00 00    	je     ffff80000081327b <sprintf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:75
            pstr++;
ffff8000008130c7:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff8000008130ce:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff8000008130cf:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008130d6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008130d9:	3c 78                	cmp    al,0x78
ffff8000008130db:	75 6f                	jne    ffff80000081314c <sprintf+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:77
                int v=va_arg(vargs,int);
ffff8000008130dd:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff8000008130e3:	83 f8 2f             	cmp    eax,0x2f
ffff8000008130e6:	77 23                	ja     ffff80000081310b <sprintf+0x178>
ffff8000008130e8:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff8000008130ef:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff8000008130f5:	89 d2                	mov    edx,edx
ffff8000008130f7:	48 01 d0             	add    rax,rdx
ffff8000008130fa:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000813100:	83 c2 08             	add    edx,0x8
ffff800000813103:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff800000813109:	eb 12                	jmp    ffff80000081311d <sprintf+0x18a>
ffff80000081310b:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000813112:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000813116:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff80000081311d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000081311f:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:78
                sprint_hex(dist,v);
ffff800000813125:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff80000081312b:	48 63 d0             	movsxd rdx,eax
ffff80000081312e:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000813135:	48 89 d6             	mov    rsi,rdx
ffff800000813138:	48 89 c7             	mov    rdi,rax
ffff80000081313b:	48 b8 b8 33 81 00 00 	movabs rax,0xffff8000008133b8
ffff800000813142:	80 ff ff 
ffff800000813145:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000813147:	e9 54 01 00 00       	jmp    ffff8000008132a0 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:79
            }else if(*pstr=='s'){
ffff80000081314c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813153:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813156:	3c 73                	cmp    al,0x73
ffff800000813158:	75 6f                	jne    ffff8000008131c9 <sprintf+0x236>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:80
                char* v=va_arg(vargs,char*);
ffff80000081315a:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff800000813160:	83 f8 2f             	cmp    eax,0x2f
ffff800000813163:	77 23                	ja     ffff800000813188 <sprintf+0x1f5>
ffff800000813165:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff80000081316c:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000813172:	89 d2                	mov    edx,edx
ffff800000813174:	48 01 d0             	add    rax,rdx
ffff800000813177:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff80000081317d:	83 c2 08             	add    edx,0x8
ffff800000813180:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff800000813186:	eb 12                	jmp    ffff80000081319a <sprintf+0x207>
ffff800000813188:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000081318f:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000813193:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff80000081319a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081319d:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:81
                sprintn(dist,v);
ffff8000008131a4:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
ffff8000008131ab:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008131b2:	48 89 d6             	mov    rsi,rdx
ffff8000008131b5:	48 89 c7             	mov    rdi,rax
ffff8000008131b8:	48 b8 46 34 81 00 00 	movabs rax,0xffff800000813446
ffff8000008131bf:	80 ff ff 
ffff8000008131c2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff8000008131c4:	e9 d7 00 00 00       	jmp    ffff8000008132a0 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:82
            }else if(*pstr=='d'){
ffff8000008131c9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008131d0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008131d3:	3c 64                	cmp    al,0x64
ffff8000008131d5:	75 6d                	jne    ffff800000813244 <sprintf+0x2b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:83
                char* v=va_arg(vargs,char*);
ffff8000008131d7:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff8000008131dd:	83 f8 2f             	cmp    eax,0x2f
ffff8000008131e0:	77 23                	ja     ffff800000813205 <sprintf+0x272>
ffff8000008131e2:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff8000008131e9:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff8000008131ef:	89 d2                	mov    edx,edx
ffff8000008131f1:	48 01 d0             	add    rax,rdx
ffff8000008131f4:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff8000008131fa:	83 c2 08             	add    edx,0x8
ffff8000008131fd:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff800000813203:	eb 12                	jmp    ffff800000813217 <sprintf+0x284>
ffff800000813205:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000081320c:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000813210:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff800000813217:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081321a:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:84
                sprint_decimal(dist,v);
ffff800000813221:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000813228:	89 c2                	mov    edx,eax
ffff80000081322a:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000813231:	89 d6                	mov    esi,edx
ffff800000813233:	48 89 c7             	mov    rdi,rax
ffff800000813236:	48 b8 fd 32 81 00 00 	movabs rax,0xffff8000008132fd
ffff80000081323d:	80 ff ff 
ffff800000813240:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000813242:	eb 5c                	jmp    ffff8000008132a0 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:85
            }else if(*pstr=='c'){
ffff800000813244:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081324b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081324e:	3c 63                	cmp    al,0x63
ffff800000813250:	75 02                	jne    ffff800000813254 <sprintf+0x2c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:86
                char v=va_arg(vargs,char);
ffff800000813252:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:89
                sprintchar(dist,v);
            }else{
                sprintchar(dist,*pstr);
ffff800000813254:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081325b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081325e:	0f be d0             	movsx  edx,al
ffff800000813261:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000813268:	89 d6                	mov    esi,edx
ffff80000081326a:	48 89 c7             	mov    rdi,rax
ffff80000081326d:	48 b8 be 32 81 00 00 	movabs rax,0xffff8000008132be
ffff800000813274:	80 ff ff 
ffff800000813277:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000813279:	eb 25                	jmp    ffff8000008132a0 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:92
            }
        }else{
            sprintchar(dist,*pstr);
ffff80000081327b:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813282:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813285:	0f be d0             	movsx  edx,al
ffff800000813288:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000081328f:	89 d6                	mov    esi,edx
ffff800000813291:	48 89 c7             	mov    rdi,rax
ffff800000813294:	48 b8 be 32 81 00 00 	movabs rax,0xffff8000008132be
ffff80000081329b:	80 ff ff 
ffff80000081329e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
ffff8000008132a0:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff8000008132a7:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73 (discriminator 1)
ffff8000008132a8:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008132af:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008132b2:	84 c0                	test   al,al
ffff8000008132b4:	0f 85 e5 fd ff ff    	jne    ffff80000081309f <sprintf+0x10c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:96
        }
    }
    va_end(vargs);
}
ffff8000008132ba:	90                   	nop
ffff8000008132bb:	90                   	nop
ffff8000008132bc:	c9                   	leave  
ffff8000008132bd:	c3                   	ret    

ffff8000008132be <sprintchar>:
sprintchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:98
void sprintchar(char *dist,char c)
{
ffff8000008132be:	f3 0f 1e fa          	endbr64 
ffff8000008132c2:	55                   	push   rbp
ffff8000008132c3:	48 89 e5             	mov    rbp,rsp
ffff8000008132c6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008132ca:	89 f0                	mov    eax,esi
ffff8000008132cc:	88 45 f4             	mov    BYTE PTR [rbp-0xc],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
ffff8000008132cf:	eb 05                	jmp    ffff8000008132d6 <sprintchar+0x18>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:100
        dist++;
ffff8000008132d1:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
ffff8000008132d6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008132da:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008132dd:	84 c0                	test   al,al
ffff8000008132df:	75 f0                	jne    ffff8000008132d1 <sprintchar+0x13>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:101
    *dist++=c;
ffff8000008132e1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008132e5:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff8000008132e9:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff8000008132ed:	0f b6 55 f4          	movzx  edx,BYTE PTR [rbp-0xc]
ffff8000008132f1:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:102
    *dist='\0';
ffff8000008132f3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008132f7:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:103
}
ffff8000008132fa:	90                   	nop
ffff8000008132fb:	5d                   	pop    rbp
ffff8000008132fc:	c3                   	ret    

ffff8000008132fd <sprint_decimal>:
sprint_decimal():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:105
void sprint_decimal(char *dist,int c)
{
ffff8000008132fd:	f3 0f 1e fa          	endbr64 
ffff800000813301:	55                   	push   rbp
ffff800000813302:	48 89 e5             	mov    rbp,rsp
ffff800000813305:	48 83 ec 30          	sub    rsp,0x30
ffff800000813309:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000081330d:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:107
    unsigned char st[22];
    int p=0;
ffff800000813310:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
ffff800000813317:	eb 65                	jmp    ffff80000081337e <sprint_decimal+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:109
        unsigned char a=c%10+'0';
ffff800000813319:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000081331c:	48 63 c2             	movsxd rax,edx
ffff80000081331f:	48 69 c0 67 66 66 66 	imul   rax,rax,0x66666667
ffff800000813326:	48 c1 e8 20          	shr    rax,0x20
ffff80000081332a:	c1 f8 02             	sar    eax,0x2
ffff80000081332d:	89 d6                	mov    esi,edx
ffff80000081332f:	c1 fe 1f             	sar    esi,0x1f
ffff800000813332:	29 f0                	sub    eax,esi
ffff800000813334:	89 c1                	mov    ecx,eax
ffff800000813336:	89 c8                	mov    eax,ecx
ffff800000813338:	c1 e0 02             	shl    eax,0x2
ffff80000081333b:	01 c8                	add    eax,ecx
ffff80000081333d:	01 c0                	add    eax,eax
ffff80000081333f:	89 d1                	mov    ecx,edx
ffff800000813341:	29 c1                	sub    ecx,eax
ffff800000813343:	89 c8                	mov    eax,ecx
ffff800000813345:	83 c0 30             	add    eax,0x30
ffff800000813348:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:110
        st[p++]=a;
ffff80000081334b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081334e:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000813351:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000813354:	48 98                	cdqe   
ffff800000813356:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
ffff80000081335a:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:111
        c/=10;
ffff80000081335e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000813361:	48 63 d0             	movsxd rdx,eax
ffff800000813364:	48 69 d2 67 66 66 66 	imul   rdx,rdx,0x66666667
ffff80000081336b:	48 c1 ea 20          	shr    rdx,0x20
ffff80000081336f:	c1 fa 02             	sar    edx,0x2
ffff800000813372:	c1 f8 1f             	sar    eax,0x1f
ffff800000813375:	89 c1                	mov    ecx,eax
ffff800000813377:	89 d0                	mov    eax,edx
ffff800000813379:	29 c8                	sub    eax,ecx
ffff80000081337b:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
ffff80000081337e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000813381:	83 f8 0f             	cmp    eax,0xf
ffff800000813384:	76 93                	jbe    ffff800000813319 <sprint_decimal+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    }
    while(p>0)
ffff800000813386:	eb 26                	jmp    ffff8000008133ae <sprint_decimal+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:115
    {
        sprintchar(dist,st[--p]);
ffff800000813388:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffff80000081338c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081338f:	48 98                	cdqe   
ffff800000813391:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
ffff800000813396:	0f be d0             	movsx  edx,al
ffff800000813399:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081339d:	89 d6                	mov    esi,edx
ffff80000081339f:	48 89 c7             	mov    rdi,rax
ffff8000008133a2:	48 b8 be 32 81 00 00 	movabs rax,0xffff8000008132be
ffff8000008133a9:	80 ff ff 
ffff8000008133ac:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    while(p>0)
ffff8000008133ae:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff8000008133b2:	7f d4                	jg     ffff800000813388 <sprint_decimal+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:117
    }
}
ffff8000008133b4:	90                   	nop
ffff8000008133b5:	90                   	nop
ffff8000008133b6:	c9                   	leave  
ffff8000008133b7:	c3                   	ret    

ffff8000008133b8 <sprint_hex>:
sprint_hex():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:119
void sprint_hex(char *dist,unsigned long c)
{
ffff8000008133b8:	f3 0f 1e fa          	endbr64 
ffff8000008133bc:	55                   	push   rbp
ffff8000008133bd:	48 89 e5             	mov    rbp,rsp
ffff8000008133c0:	48 83 ec 30          	sub    rsp,0x30
ffff8000008133c4:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008133c8:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:121
    unsigned char st[22];
    int p=0;
ffff8000008133cc:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<22){
ffff8000008133d3:	eb 39                	jmp    ffff80000081340e <sprint_hex+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:123
        unsigned char a=c%16;
ffff8000008133d5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008133d9:	83 e0 0f             	and    eax,0xf
ffff8000008133dc:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124
        if(a>9)a+='a'-10;
ffff8000008133df:	80 7d fb 09          	cmp    BYTE PTR [rbp-0x5],0x9
ffff8000008133e3:	76 06                	jbe    ffff8000008133eb <sprint_hex+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124 (discriminator 1)
ffff8000008133e5:	80 45 fb 57          	add    BYTE PTR [rbp-0x5],0x57
ffff8000008133e9:	eb 04                	jmp    ffff8000008133ef <sprint_hex+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:125
        else a+='0';
ffff8000008133eb:	80 45 fb 30          	add    BYTE PTR [rbp-0x5],0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:126
        st[p++]=a;
ffff8000008133ef:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008133f2:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008133f5:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff8000008133f8:	48 98                	cdqe   
ffff8000008133fa:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
ffff8000008133fe:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:127
        c/=16;
ffff800000813402:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813406:	48 c1 e8 04          	shr    rax,0x4
ffff80000081340a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<22){
ffff80000081340e:	83 7d fc 15          	cmp    DWORD PTR [rbp-0x4],0x15
ffff800000813412:	7e c1                	jle    ffff8000008133d5 <sprint_hex+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    }
    while(p>0)
ffff800000813414:	eb 26                	jmp    ffff80000081343c <sprint_hex+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:131
    {
        sprintchar(dist,st[--p]);
ffff800000813416:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffff80000081341a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081341d:	48 98                	cdqe   
ffff80000081341f:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
ffff800000813424:	0f be d0             	movsx  edx,al
ffff800000813427:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081342b:	89 d6                	mov    esi,edx
ffff80000081342d:	48 89 c7             	mov    rdi,rax
ffff800000813430:	48 b8 be 32 81 00 00 	movabs rax,0xffff8000008132be
ffff800000813437:	80 ff ff 
ffff80000081343a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    while(p>0)
ffff80000081343c:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000813440:	7f d4                	jg     ffff800000813416 <sprint_hex+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:133
    }
}
ffff800000813442:	90                   	nop
ffff800000813443:	90                   	nop
ffff800000813444:	c9                   	leave  
ffff800000813445:	c3                   	ret    

ffff800000813446 <sprintn>:
sprintn():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:135
void sprintn(char *dist,char *str)
{
ffff800000813446:	f3 0f 1e fa          	endbr64 
ffff80000081344a:	55                   	push   rbp
ffff80000081344b:	48 89 e5             	mov    rbp,rsp
ffff80000081344e:	48 83 ec 10          	sub    rsp,0x10
ffff800000813452:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000813456:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
ffff80000081345a:	eb 27                	jmp    ffff800000813483 <sprintn+0x3d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:138
    {
        sprintchar(dist,*str++);
ffff80000081345c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813460:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000813464:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff800000813468:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081346b:	0f be d0             	movsx  edx,al
ffff80000081346e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813472:	89 d6                	mov    esi,edx
ffff800000813474:	48 89 c7             	mov    rdi,rax
ffff800000813477:	48 b8 be 32 81 00 00 	movabs rax,0xffff8000008132be
ffff80000081347e:	80 ff ff 
ffff800000813481:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
ffff800000813483:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813487:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081348a:	84 c0                	test   al,al
ffff80000081348c:	75 ce                	jne    ffff80000081345c <sprintn+0x16>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:140
    }
ffff80000081348e:	90                   	nop
ffff80000081348f:	90                   	nop
ffff800000813490:	c9                   	leave  
ffff800000813491:	c3                   	ret    
ffff800000813492:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff800000813499:	00 00 00 
ffff80000081349c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffff8000008134a0 <create_zero>:
create_zero():
ffff8000008134a0:	e8 2a 16 ff ff       	call   ffff800000804acf <req_proc>
ffff8000008134a5:	83 f8 ff             	cmp    eax,0xffffffff
ffff8000008134a8:	74 0c                	je     ffff8000008134b6 <create_zero.retu>
ffff8000008134aa:	e8 71 17 ff ff       	call   ffff800000804c20 <set_proc>
ffff8000008134af:	67 8b 04 24          	mov    eax,DWORD PTR [esp]
ffff8000008134b3:	83 c4 40             	add    esp,0x40

ffff8000008134b6 <create_zero.retu>:
create_zero.retu():
ffff8000008134b6:	c3                   	ret    

ffff8000008134b7 <switch_proc_asm>:
save_context():
ffff8000008134b7:	67 8b 44 24 24       	mov    eax,DWORD PTR [esp+0x24]
ffff8000008134bc:	83 c0 44             	add    eax,0x44
ffff8000008134bf:	b9 08 00 00 00       	mov    ecx,0x8
ffff8000008134c4:	89 e7                	mov    edi,esp

ffff8000008134c6 <save_context.loops>:
save_context.loops():
ffff8000008134c6:	67 8b 17             	mov    edx,DWORD PTR [edi]
ffff8000008134c9:	67 89 10             	mov    DWORD PTR [eax],edx
ffff8000008134cc:	83 c7 04             	add    edi,0x4
ffff8000008134cf:	83 e8 04             	sub    eax,0x4
ffff8000008134d2:	e2 f2                	loop   ffff8000008134c6 <save_context.loops>
ffff8000008134d4:	5b                   	pop    rbx
ffff8000008134d5:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff8000008134da:	67 89 58 24          	mov    DWORD PTR [eax+0x24],ebx
ffff8000008134de:	67 48 8b 1c 24       	mov    rbx,QWORD PTR [esp]
ffff8000008134e3:	67 89 58 20          	mov    DWORD PTR [eax+0x20],ebx
ffff8000008134e7:	c3                   	ret    

ffff8000008134e8 <desc>:
	...

ffff8000008134f0 <ret_sys_call>:
ret_sys_call():
ffff8000008134f0:	58                   	pop    rax
ffff8000008134f1:	8e d8                	mov    ds,eax
ffff8000008134f3:	58                   	pop    rax
ffff8000008134f4:	8e c0                	mov    es,eax
ffff8000008134f6:	41 5f                	pop    r15
ffff8000008134f8:	41 5e                	pop    r14
ffff8000008134fa:	41 5d                	pop    r13
ffff8000008134fc:	41 5c                	pop    r12
ffff8000008134fe:	41 5b                	pop    r11
ffff800000813500:	41 5a                	pop    r10
ffff800000813502:	41 59                	pop    r9
ffff800000813504:	41 58                	pop    r8
ffff800000813506:	5e                   	pop    rsi
ffff800000813507:	5f                   	pop    rdi
ffff800000813508:	5a                   	pop    rdx
ffff800000813509:	59                   	pop    rcx
ffff80000081350a:	5b                   	pop    rbx
ffff80000081350b:	58                   	pop    rax

ffff80000081350c <tmp>:
tmp():
ffff80000081350c:	48 0f 07             	sysretq 

ffff80000081350f <ret_normal_proc>:
ret_normal_proc():
ffff80000081350f:	58                   	pop    rax
ffff800000813510:	8e d8                	mov    ds,eax
ffff800000813512:	58                   	pop    rax
ffff800000813513:	8e c0                	mov    es,eax
ffff800000813515:	41 5f                	pop    r15
ffff800000813517:	41 5e                	pop    r14
ffff800000813519:	41 5d                	pop    r13
ffff80000081351b:	41 5c                	pop    r12
ffff80000081351d:	41 5b                	pop    r11
ffff80000081351f:	41 5a                	pop    r10
ffff800000813521:	41 59                	pop    r9
ffff800000813523:	41 58                	pop    r8
ffff800000813525:	5e                   	pop    rsi
ffff800000813526:	5f                   	pop    rdi
ffff800000813527:	5a                   	pop    rdx
ffff800000813528:	59                   	pop    rcx
ffff800000813529:	5b                   	pop    rbx
ffff80000081352a:	58                   	pop    rax
ffff80000081352b:	c3                   	ret    

ffff80000081352c <move_to_user_mode>:
move_to_user_mode():
ffff80000081352c:	48 b9 3c 35 81 00 00 	movabs rcx,0xffff80000081353c
ffff800000813533:	80 ff ff 
ffff800000813536:	9c                   	pushf  
ffff800000813537:	41 5b                	pop    r11
ffff800000813539:	48 0f 07             	sysretq 

ffff80000081353c <move_to_user_mode.result>:
move_to_user_mode.result():
ffff80000081353c:	b8 2b 00 00 00       	mov    eax,0x2b
ffff800000813541:	8e c0                	mov    es,eax
ffff800000813543:	8e d8                	mov    ds,eax
ffff800000813545:	8e e0                	mov    fs,eax
ffff800000813547:	8e e8                	mov    gs,eax
ffff800000813549:	c3                   	ret    
